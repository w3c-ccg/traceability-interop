{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "02466ec7-2343-47ed-9d47-db395a9360bf",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2ea2cb27-b23d-40a9-a92d-8b1a8aa446e4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "141f6a1f-94be-4c61-9edb-86f7639cdc34",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "668986a9-4c59-4e44-9a14-4687665b0b9e"
                }
              }
            ]
          },
          {
            "id": "d8d27c31-f52e-4652-a2f4-35631bfaa1a3",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e1f5c8e4-85e1-4eba-a7f4-47f5d5caa8c1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "504d0ca2-6ffd-43bc-84d1-ddc1aea38f87"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "da81073f-a101-48a1-bfbd-70b70c495d8c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d83ce4af-a0b4-4430-8e3c-ce1364d622f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3272b7f9-72ca-4a25-871d-6c7640e2bd0e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d6f5036-b805-4543-ab5d-4445d1a286db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb883c32-3e06-4234-be5a-5add89fd0a31"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5d003514-61ee-4629-9004-79dfc7a5d964",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "36d9e286-90ef-4687-941a-1f28bf4876fd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8eac1a19-6d8e-4d56-b695-6f298b0c22ed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f097e93b-9a9d-4fcc-9064-39f23614dafc"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98eca6f9-b739-44ea-a9fe-58390305b638",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "bc9c1e67-287b-47c0-aacc-729ee7e302e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3a682236-a5ba-4391-a827-0dbc7338b3b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a76e2da-513c-40d6-9ce2-121ca733e58c"
            }
          }
        ]
      },
      {
        "id": "45b4b090-5e06-4d84-bfc0-a0c22eaa9c93",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "05c22905-1839-4f7b-a506-3edb8ccdc706",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e020e28e-102a-4167-b687-941e283e2aa9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3b13755f-d04f-49bd-ad97-ca636a90acda",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8c472d-1227-4a9f-906c-3ff568b69287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc7b0aba-a830-4eb5-b5b8-28ec20e31ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63dfd16b-6181-4206-a135-7b94b1928547",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe73c04a-e78a-4f89-8c4a-a9d9f1878c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e37fcafb-6ea6-40ae-8a22-61a954f65835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddc91d8-b9e7-4281-8750-e4eb65d1c18c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54877ebf-8246-4911-bda8-ec7ec43d7664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2623d6ec-2790-493c-9858-c71a31960637"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2734bc82-8af2-4a33-ab59-1376578dd3f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9b506b2-6605-4170-906f-41d8feedf52c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ceb134-cf4d-4854-b1d3-77aef209bf80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89e09f73-d00e-4162-b178-eafbe093bc8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8048de-0cb0-4e9e-a482-b98a4a4020f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8542395-7d07-4733-a652-b9469149704b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "32b6c04e-b3d5-4434-b904-646d8e900a8c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "85684c28-fd95-4d18-874b-d77d7f2a530f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd518144-2339-48e6-8099-7d258b06d268",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d73ea1df-435d-4640-b88a-9211fcf68962"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4cd08cfd-9bc9-4d90-81ac-32fd03be81ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f98da278-499a-4031-8ab9-dfcab663dcf9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c91290b2-585b-4ddd-93ab-40295965eee4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e73ab3cf-6c95-41c4-9a23-ce416f9c6aee"
            }
          }
        ]
      },
      {
        "id": "1ba068cd-3bcc-4c13-b357-e9498f83fe25",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "89162b81-ca8b-48b6-9298-987d5d1d0e1c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df5b2aac-0262-45ca-8d32-4b4c2ff1c67e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "eeec853e-517a-457b-a74d-2013eb9d6249",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d46bb3a-a414-4e9c-bf31-72334875834e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b41cf9b9-46eb-4ffa-84c9-7cc990a1215b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b022da-5d36-4fe5-9e2b-e3274ea1022c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "840daa31-64b9-4fd9-bb01-a14f53ef126e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0976f429-6bda-4bf1-b5e7-f2a15b379cd4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc65fd3d-3bca-401f-83a4-3c3cbe69789b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be6c3704-6897-4a36-88bf-3a304387dd75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2f1532-f735-4287-b8ff-97be4ca53f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3145120f-785b-4d1e-b8f2-28b416dc4810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c02adec-cafe-4afa-9042-134d51e40d8a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b07ba9-56b0-4c81-8f40-b6ef593d7a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d01001ab-bb14-42e2-8ecf-b7ad354c52c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff300ef3-6335-4d37-af2e-d9e7a2755cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e271adbf-bdb6-4557-8868-9089719ede18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e286774-d705-4baa-8d13-856a4ac2e4bd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddc3d6a-7571-445e-aad6-b10967ddb7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea4eef9-76ea-48d0-964c-fc226b4e18c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ac0d1a-a3f2-40f0-9893-056e0f9ffcce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b168022-45d8-4345-9be7-dcfaeafefa27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37adf59d-8cef-4729-ac6e-7ec51d4d697c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b5a504-0107-4a49-a022-5d32b2f9548d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb3ae06-57b3-471a-86ce-7d37d80e6c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302f1606-8ef4-4c55-87e7-b871d3a2051b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1541f9bc-c760-4dbd-a491-be16536e7b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958c4912-2487-41f8-8af0-4ec8a8e361ea",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2723801c-0108-4ff7-9b6f-e6918762dce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cc36f94-851e-47ad-b313-e9f06e44d97d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54eeab09-aeea-44fb-ba41-27edb375faa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98ba9305-39cc-46b9-9367-f91b479b0582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2aac53-5b75-499e-b2b6-2f040bdc77d4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d64ddc-af37-428a-9aaa-83c4639b831e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c9e8ec0-05f9-45cd-90ae-74e9c95544dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c3921d-e4cb-47c4-a628-e2c730b59b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3312e64e-7759-42ff-a1b8-4c266a92e8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ccedce-cccd-44fc-b2ad-4cc1ed9e75dd",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724d39b3-2848-413b-a365-0892902527d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da7ebac9-d42c-4145-9761-6b45592bd4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5723839c-2274-4276-afdb-86e7f3898087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b143d513-2096-410c-a96f-6842c7e34265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aafe3413-cc34-46f9-9863-e1ab4a7f4d02",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94324e45-4286-4df3-8983-0fa30a582d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c59bed-6073-4dc8-8d60-e3942588e023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5071fc2-fbf9-46b9-84e3-b60f87aa2c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6c4df08-9bdc-41fc-ac7d-10b17c62ec6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a03c5188-bc67-4b43-b861-882ea471dc75",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a165bce-1e38-4949-955c-005758d8fe37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9761ac28-c118-44d9-925d-c841f3c7c616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a574389d-8b61-4f5e-b10c-02bea0712487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be3b69d4-c9e0-4ce6-9dc5-a2e370a0db8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6e1b24-1d14-4c0a-9b01-2730569567f4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2cb6ed-53d1-4808-b155-5160ba7503e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afc6aab1-ddc8-4b29-9bf4-8db2a6e3c229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913f843f-3071-4522-a4b5-eb7c75591173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16a5aac3-ead2-4654-99de-b431ae9ffb21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c08e65c-a5f3-4541-985d-9ac677761e82",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19c329c-3502-47de-b75e-d68d906f7c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c64fe126-ba2e-4a00-8990-d2536a203543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8242369a-942d-4ae5-8104-864ac0d304ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "395656c0-bc03-42db-86bb-b014256b8442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78793930-96a7-405d-97d4-7d4d0fc67dd1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086e688a-e25e-4c9d-8551-6eb39135d5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387d6ea1-5087-4eea-a5f0-f3564a6ea4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b851fd9a-ac9e-433a-88b8-c69f4eea60dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b49acfe-0810-4a6b-b30d-1e121d113edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3390688-c5e6-4a99-a1f1-124a167e034a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5e3b48-fa72-4f3a-b76a-fa6ceee614d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f5b1b35-03d2-4cc0-a103-6c207af07c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5179ebe2-5468-410d-af00-91fe2b0ac557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0aab5c9-4a13-481e-bd56-6044d35fe4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9fbaa4b-9ed9-49a7-9aa0-f1da9170d562",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5a5a8e-0c24-4f32-ab27-0e9186cc671c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f69fe4f5-cec7-4770-aa43-f3db84c6d261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36f1fb8-799f-4434-b812-54e05c65cc1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed642b4a-090e-4754-bcf5-4095c55e6fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b52088-4b5f-4e5c-a418-137cf89d41b9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd6eb32-1521-40b0-8558-5afe6543120e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cbf942c-1048-4454-9031-53235be9a558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d576e4-b84e-4f9d-b553-4d05a51fdcf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d26a0651-26eb-43a7-a3ca-df6f151063d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b517fc1e-76cd-456d-b935-bf9392f94d5d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf16037-34c5-4916-9990-0ca6734a4fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80089aa8-c4cd-44a8-99dc-cb51b5e3fd74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8cf2580-ccbc-4ce1-87d8-8573b75efc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c8bb5ce-afda-445d-b9d9-8c9c2346e67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf5f475-2405-46d9-aa8e-72c88c698e8e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1fedfd-632a-4579-a4a4-a5495a972bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf01c5c-38cf-43d1-9b06-bdde006857e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12bdcea7-c03a-4906-8ddd-bd7e168df253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "82d18c64-af3d-40e7-bf50-28cf79498ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8040920b-d8ed-413f-bf94-8f3ca19e2791",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fb6fc1-520c-4a9c-91f7-e715cc1ae612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2d7544-fb55-4b94-836b-f38e660a82fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d28bb07-a45a-46ab-bfc1-450f18550158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dddb8ab9-fbbe-4f48-9283-87c9c6adc99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e137821f-4a87-48c5-b653-acc5fd18139d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d603c853-56ed-41ce-89bc-bbd17ae86daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b30461b9-1644-47c7-b239-843efd698d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5c4d78-3df1-48b7-8376-b40c0b0681e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ace1e78-e137-4c46-ba92-fd5c234c79b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cffb4c50-32cc-4258-848d-8835dcb3ddb7",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc26b92-1e9c-4205-82e2-13b4f4cc3fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b589ab22-557a-4639-9cf6-8bd21170c22b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca8c88b-c7dc-408b-896d-0465671e9125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1a61d5-3f25-4708-affe-7f18b60b95c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38db57be-49e9-49fc-afae-cc90522db964",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5bf43a-1172-4309-9c44-50954d660a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed7107e-133a-408b-a013-02de4fec6136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee54efe7-d376-4ecc-bc63-bd05f5bc4e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b55b444e-da1d-4d30-9b35-3536fbca8e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb2af3e-d4c9-404f-8342-062f7a429ef8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e17e56-a65f-4f49-b71d-8e0099589d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc70af1-62e6-4f85-b8e4-50e400fed8fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15d3732-018b-403a-b6b0-64ba97cbf259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f43497dc-b281-4284-a142-ef50c61b2ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec28ba9-4358-4f39-be92-dae181176d09",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf8bcfe-687d-4b94-9160-b07d664a095c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568af1fd-5ca5-4d8c-8a09-b1906064a7ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949a236d-ca2a-48e0-bf4c-067d57876016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e11d475-3eb2-44e9-a8b0-9060f9e481e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb2c589-46ec-4656-9763-e6adc5265736",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7722b60e-ae20-4063-87d9-27da61e9e367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed70bddc-d89b-484b-9333-86b402716092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df925af-548a-40e5-bbc1-094e35df2203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7218422a-07e3-41f9-8b5a-d007e01d2bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a43a54-9ac5-4612-81c9-cd6e333e8d9c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb294dd-6dec-4108-aa02-d9787bd2c55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef2a66db-db2b-451a-9600-0575d00674f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4119f1f9-27a5-46b9-a790-017cebd902ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8a07fa4-ff03-42d2-a042-4812d127939d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c8713d-8fa4-4b3f-9e53-c7874215b944",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f156c828-bf92-45fc-a7a2-770fdf5f5e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3513d28-ec5c-4eda-abd8-4a3000ad0914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e1bb5a-a882-4e43-af47-287a010fe483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "368ec4d2-6efe-4f3d-acb4-2d3104ecddb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019c7645-deb5-4472-b471-fbbc9195717b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06354d40-2269-4b3e-b885-51bbdee8f31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fbaa391-cb70-45e0-a085-96fc5ea12e16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efd9d75-e9a0-4249-8dfe-80a6d019c110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a016efb3-e17f-4b27-b3e6-6a077815602e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6986ed-23ca-4ff0-aeeb-173f76b37129",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba6f0c2-4aef-429e-b741-b7d02ec37de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "895e1a17-3d92-47f9-b13d-87c553869017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455e3988-9f73-48e4-a83c-04be5e7159c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d92416a-e509-4d18-a413-a3a25c0a1e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7ce791-0879-448d-b1de-e3a4019ecd11",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b24d2a9-c79e-46e2-b8e5-5ce4c1e62262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5487a3b5-051f-4272-a497-fe86b9af0777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beaf9205-c26d-44d8-9f89-f7e743185a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4286e1ab-19da-400b-b743-8c517086837e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5036c71d-0ace-4613-8387-380e1ec252de",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0ef892-37d1-4d67-930d-2e53e6b07aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f58860ea-01e8-484e-be79-7bfe5f407721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a24957b-9457-4146-8348-ca253295148b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e84fbea-8840-44ea-8970-440ce9dd113c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b895776b-f065-4319-8568-d6c45448d46d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504c3327-5876-45e8-98cd-275719639a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f39c82-2c10-493f-9a5c-88d0d2b881ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8c6c77-99c8-44bc-a6a5-9274e1a6a436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bee73f8d-621e-4a66-9a0f-90161bb75c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21b4561-d3d3-4513-81a2-4480043e069a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6affd16b-b06e-4465-8410-d2fb08942d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987369f9-3ced-4353-936b-6ea077857d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21710efd-992a-4e9c-abcc-394f02429125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfee0f62-3ce3-4004-8021-58e5cb4ce825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530fe14b-11d6-4f4a-b54b-7a93afcaf924",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b01a89-0237-455f-b161-6a44621d0b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94bdd8f8-28dc-485b-aae5-fac3b9df475d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156952e2-597b-4e6b-8dee-2ca1a5942fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "abd62f70-020c-4fe7-8622-1d95f6da7e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9422fc6-4ac4-4f3c-8735-3898f9973b84",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a95ff2c-5963-4068-8046-72866110ea99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efdb3284-3c6a-4365-a1aa-bc40afa7ecc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0662c06-4406-491a-a292-83f112d930ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "220230db-5c25-486e-9db3-b7d10c7777bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40fde0c0-c5a6-4905-b880-b9ce3a56b4c9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9e0a4d-9016-4f46-9631-0e3beda75b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f3b1397-7528-48eb-874b-13c1a490fc61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672f436a-084f-4f7d-a8cd-9e6c586bd121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e71a8dcb-9866-4363-b09e-820a5c259cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aef0ea4-3495-4084-adf4-d4a31512761f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e77e466-85b7-49cc-aec5-ccfbf2287020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "582c75e0-6434-4e25-90a7-b5f34fee7d15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ad8f5c-df86-4979-9425-426bc2ca8e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b26226-b31b-46af-b4cc-d64a953082c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2464b2db-40a0-49f7-83d0-970dd4e3baad",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42845db4-4d0a-43f6-860b-9761cb9b4504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "929786fd-508e-4607-b6dc-788d2719b795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7afc4ab-9eb7-46c3-bb2a-2dd586c41423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ea69e99-49c2-4c06-b9b7-3e72caa0f875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7296629-f4cd-49ec-9d74-aafbd3c9eb80",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742b88a2-e95b-4c8e-99cc-1c773963cd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f53b5ae-128e-40b5-aef1-c398b56a9c12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04659d81-6cd5-4125-bfe7-f1f1aa81bedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f873edd-4d64-4c02-a388-2bc666b41f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2317176b-e44b-439a-bd2e-48c6f16ec9e1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7fdc31-b783-4def-a5af-b3d084c51572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01ef39a1-30f4-4bbc-ad38-c5308ff79405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5607f12-f4f9-4472-8a71-ca4c243768ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7080378e-2b78-4780-b900-5cb801da31ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c69ddec-13de-4ee6-9f11-ff7751cf7557",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfffed89-1648-4d8a-ad4a-211e83134f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f62782cc-6156-489a-a8ad-7aa38c7df798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934dbfc3-ae6d-40c7-81c9-2eddea22ebf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "073db5aa-d265-4df2-96aa-029bce4d3a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1baf048d-6f01-4512-99d0-e9f2b011dfa5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f301f791-7d3a-41e1-acf4-cb4dfd20028a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59488492-50d1-4674-9bde-7241e78f416a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f829d9b5-257f-4d1e-9599-0ae9d1ef5eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9768f321-cfda-41e6-a144-069ca09a4b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f28fd6-22f5-424f-9c0c-e2730c41cbdd",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da966f1-7bd1-4047-8587-fe8f71ce608e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bb8e2c3-60b0-46cb-8f66-e172659a0dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbc319e-6167-4e4c-bfca-e41a4d6256ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4cf9cf80-147d-492d-bc88-0b8269625a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383c6fe6-938c-4368-8d5f-74c765239ddf",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab190a2-101f-44ce-8a6b-8eff7aaaaf1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b37c9c-f466-4b6a-a419-43fae14a06ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9340c84-a117-43dd-b2cf-7d98c66f6f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a153b50f-55dc-4bbe-b00a-a1e72cd51c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1717118-e0f2-462d-a144-4b82ac050106",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c200c76-1148-4e7d-83fb-f9e9e53166fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33114213-a82f-4fcd-ac4f-d071d5afe69f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc76caa7-49fe-4069-bd4f-25376cd1a491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f97cd9-0df8-4cdf-90f9-9723d28e4b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665c73f4-b488-4d03-978d-125329a6c61c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c55dea1-3888-425c-8b26-7e8040e7ec47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece9a36e-ad91-4554-a272-877792b5e816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2686fdc8-54c1-4f3b-8d98-dc584bb97cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d9b9b96-f921-41f0-95ee-2a245d2c4f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb96ac51-51b4-4ccb-a7d9-0111bf10e412",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "633a13ca-a7f5-411d-8f12-49caab3e6d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8aeea32-263f-4c32-8470-6a99f04c63e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10959637-dda5-4edd-b9d9-f196253067be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc1d5fe2-2284-4e2b-9f03-8fc31e78181a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d33d284-10b3-4f63-a116-d97b1d628bf4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6139c468-3e4f-477e-ab51-3348be2534b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a16f608-d47b-4279-938d-d7777fd5d503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ac3067-7868-40a9-825f-51a3e0836ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81555098-de48-4a02-ae00-9ebdb2cd7f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3398a2-a875-4d3e-a773-c9aa7803074a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a9e213-76e9-4203-8889-a8684f45b568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb965c2-2800-4da0-be18-373ba29e9a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34cff7f8-73bb-4fa6-a95c-d1e412e85606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "53e0fd3e-89ac-46dc-99ab-ddb735693ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676bf4db-5d6b-4d32-8ff7-ec893cb0c54e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f966c5cb-aaac-4442-b290-2cec7ec93fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdbf7933-9ad0-4ad8-9dc3-6819c04dcf07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b546059-5d49-4517-a9aa-fcd98bf6a689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc57c65-d7fa-4224-82f5-11c1dc062888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2aca3d-3b29-4d8a-8743-570e8fdeb8b6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c4c9d2-4d27-4c7b-8297-3574a6d4df18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b167133-3209-4bcc-afd9-32a4427793f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2a46f8-9ebf-4f6c-9768-1a108ec26669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "67704854-35ed-49fc-8e94-e457e53f6332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a440b86-829d-4ebf-aff7-56ad95da21c1",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc529049-9966-4d8f-9e53-4a0a4202eb76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "332339d6-38da-4e9b-abcc-389e4a30a4a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfa3a84-9993-4660-a824-35e837557af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d1b8ed-9902-4706-8135-ad54bf57f699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72355270-a1cd-4676-897e-d3647133b7b9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc54e5f-5e63-407e-8015-d028d1457105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d72e8d8-c4e0-4f20-95a1-0ac13d206fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e0c4ae-fee3-470c-b18b-cf9fde8090ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33e297c0-ed6d-4011-b087-39a8a8a3dfe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c292499c-dc29-4763-8598-bbdd356de43a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2e208b-d0a1-4c55-b734-1f19de4f09aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d837e98d-642b-449c-95d0-4e252a060bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d28f35-19d3-462c-96f0-67b61cf243be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71491fe2-9572-4306-a755-4f48e6f46e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a2a462-029c-4646-a373-896408bd5d3c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "359412e2-abc5-4d56-be72-24b24a997334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8bbd94-22f9-450a-9f90-27715638c57c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df28e9a-e38f-4455-89f7-855ce85b595b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb7b44c-eb3e-4224-8a91-1a910560cd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f874a0cd-7926-4f43-8db3-3fa9da1b7b19",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2036b047-5a52-4b79-aa1e-45e47646218d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056bf092-0d25-4170-89f3-29f1112a219a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb155539-cf3b-4fe3-90a0-0f8de426af2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5399ae5e-1574-44ac-b39d-5fdd995d4a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a74baa3-f760-45dc-b38d-652ecdbc32e6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ddd8261-37be-4472-afee-7c4643a5c4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12537000-ae17-4025-852c-8b6f6e007004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789b198e-906c-45e6-8921-417f142f4d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "48c387e1-3832-4e37-bdd7-d0d5f1728817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd6e761-846a-435a-b6eb-f8d349e7fbd7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbad145-8a54-435a-8435-c619166d0514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce5a7ae-5023-47db-84e7-e07172b6b719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30826d93-c805-4a39-89ee-b57ab6439207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "045508fd-6d93-4ebf-bb51-be7422dccfda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e523f1f5-b40e-4977-873f-b13e0e7258cd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41025e86-2408-4a80-9402-9ade1cb16930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a94a1af-66a0-45c3-86fa-e21e7df4454a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b4a987-09bf-4505-8956-0e01e3f31393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "de2109e3-5388-439a-8133-fbd5e2a058e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad27d93-adcf-4c11-8e31-70c92e5c3557",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e276af4-f851-4fed-a0bb-8275d3f59b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7400cca1-1535-4e9d-b5c9-8bc65bd157ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c14f94-1134-4632-a581-43a2b74db7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "77db85a6-ee88-4cdc-9619-9cf782d70b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fee53e1-57c7-4edd-ac24-af875b4a9ae1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c4edf4-4507-43de-9620-b4807e36972d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "330b76eb-8fe7-46a6-93ce-0e41a5242718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53699fa7-a4cf-4b8c-b6e9-23a58df1ade0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc73c7bc-00c4-43d0-83d2-3a160f7a93a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e5b53c-3fd0-4c24-8f98-da507e42abe3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27d9762-6a6b-4ec4-b580-2bff8f14a3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60453bd-5238-4261-a0d7-8dc150002b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c797d5-e685-49be-82d2-6bf839a46b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "39714fef-8a27-4839-9398-535f3c0b65eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e6ebb3-b106-4eeb-a13a-5916ec64ba45",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a9c34b-354e-405e-b212-5105b8a0d077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a5617a-a53d-4f17-a746-6d2790bdfaa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da529660-e15b-493a-984e-021e86012147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "78635f63-4e3d-464e-9e78-b5d90c4b0e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5921dbc0-b3dc-402a-8a25-66f0dac0c799",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d012b0c-67e8-47b3-b7df-dd1649483132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58959030-f965-4367-b0ef-6c9b4f0499be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f36ec73-1689-466c-9b98-aefa21f676ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b598b7-0ad8-4980-a3bc-0f2d8ca036ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a53573a-34f5-4cf7-8c80-bc47ecce8844",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcaed5c6-5362-4d5a-b430-bd5d3df39ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246dc6a4-559f-4b9b-9e34-1396a62d9450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ca24de-86ad-434d-bd01-50dd2096dc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd0b950b-144b-4a12-9deb-0589c8627720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ccc8fdd-f658-4ff4-b54b-5026e841ab7d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8156e7f-089e-4766-b9fb-2f973bc2aa62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d6aa118-20c3-4cdf-9bb2-2df806a3042a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fb66e2-744d-462d-8bec-1fd8da639e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cecd403-88b2-408c-812c-731d45b64f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103ab3ea-4005-4b1a-8029-8231fa488a92",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf56f03-7a0d-4631-a60a-ac1aa6d149d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b636992-7ad3-435a-9ecd-858f0a94a4c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e4a385-747e-49a4-bfd8-3136b8633601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0772feae-f07a-41bb-9661-2bb3086559a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a51dd0-1c70-45b5-a411-89c1c0611f82",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a64b958f-e5b3-427d-a5b9-c028f758709d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca8b9a4a-ce94-4a6a-8b50-c01b1dda96fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d09f67b-5524-4ef9-ab71-6495be6911e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "962b2af8-2187-4e3b-8b11-25e1c568c1ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd93e12e-6515-450f-840d-41f2d2315ed2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5103a29a-5347-4d4e-af5f-b69206bdf49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a9a8e7-f774-4713-9745-19864171227f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb772d58-a856-425b-b975-2ccf3204acff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b46789b-46d6-4a97-a0fd-917a307798b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc374dea-ec38-4708-bc44-5ffcdfacd017",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b14939-4987-4579-8b45-b836e6e2fced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb3a302-77d7-4831-8c90-6e7a287ad5a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c327b584-2889-4ec5-aab7-ed96f1ef8df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3cc33fd-833f-4409-ae8e-78bc2f619f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b638e3-fe62-4737-a107-62d3eb3651af",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d35efe2-d7cc-4729-9a3f-33c148ef08f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd6059ea-43c2-40fb-95fa-730313b6a84a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0d18b4-d8d8-4647-bd0b-68277013a9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "51d9e782-384a-462a-aae1-e316f36309b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c6a3d7-10ea-4ec2-946b-c0cb62f11db3",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f14e9d-189a-45a1-a8b6-8a4e461ef974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "682e626b-f473-4d8d-86b8-751866a7c86e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e577520-da62-49cc-9017-cfdf9b56dc87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf74b750-def1-4746-a910-ec6b55055f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f44952b-c3db-4e07-9601-32342e2570bf",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1875005d-b50e-48c9-9495-bf014b03199e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "327a89e5-ff83-4888-98fb-a971065dde04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5515fd1-6b05-4d0e-b385-3bb28d833c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbf87931-1257-4aa2-ac9b-4e0281e82a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57276f90-49c4-49ae-a8bc-ccde2d7f23cd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aedf8db-ee2d-4e8b-a374-b95bbec069ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d1fa92e-545b-4359-adef-1209dba53b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd71d82f-0adb-4499-a269-4adfe102062d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd713d0a-54e8-4dc5-9ea5-209414a024a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0139b6b-4dd8-4350-9ecd-fa2270c50328",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3baaf0b-56f6-44b5-8bc8-74bbd0a1bdcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c41aa58f-292c-4744-8125-c958e130d25f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03535bb9-d701-4927-bbeb-e3ffe8b691cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf1417d6-edfb-4449-bd93-2ef68514e062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ec4da8-111a-40f3-be35-f764cc0b0bca",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73eedc3-97be-4633-8075-13b07bec75f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ae9936-eb39-49e4-b856-97fedce9ba95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8dcbc93-0202-4388-9ea5-45d85cac3a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb04f18-0a67-4550-b31e-77aeb502817f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb5346d-4649-4306-a098-dd1e158242ea",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f9d4f2-5a4c-43f3-bde4-42fe7a972349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e39957-d16e-425d-bac5-e980da972d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62f6d4a-2a20-4357-9964-9dc2bf3725e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c235d4-bac0-4f25-9362-6d91a175d1fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab5ed55-84f1-46bc-bcc0-a780c517b900",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e6c11c-6807-407a-ae0a-c53834e4c236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4effcf33-2dd7-45c7-8d68-4666e4f5e96c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1490141b-db7b-4c25-a3ff-70fc445fbb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "076c511b-6f5c-4250-a125-2e681eab5841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ae6f3e-c827-4634-8f3e-896ede49f7d4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5927d93-198f-4800-9ef1-c97888d63745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644b87b6-4004-4530-a510-df22ee7c1598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a043549f-d18f-4a1c-8f02-a6e3238f3b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9451ea4d-9843-4e37-b4de-badb0d728cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439d4d37-26ce-4ff2-8f94-b80a39a8565c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c30aaf8-2d36-42f4-a39b-31e5ed1a2c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf2a12d-27b7-46d1-83a5-0e36cc8543bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ab46cc-2b2d-462f-bcab-ebc79ec8e394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aa641bc9-9df6-4ee0-a8be-734c7b2396e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd35ceaf-bb03-4f54-807c-24036eeae9af",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85460f06-9511-4256-863b-9b3a55c2781e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b596713d-64f4-48a2-81ce-55d10a607bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ec7c12-5ea2-4ca9-ab88-5c8a7f62d234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3278093-29f3-45ba-b017-48e947b3de52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99bf9ba-aa50-47a2-8602-fed001601145",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1f0d27-57ef-482f-b5cc-19e400e66081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baff4e3a-2718-487f-811c-bf1e5df9584d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0bcc20-6ad5-4562-a1b2-768a7ffc5b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4653821-8fa0-4c5f-bfcd-3517aecdea87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85e17ca-d5df-4f44-99da-5f942f8792ae",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0c4d52-960a-44d5-bec8-16679f7984c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c015c3e5-8fb0-405e-a204-d3dbc75d5dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa433740-d3e8-423c-a8c6-d7b993d7cf93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7460df9-9c4e-44cc-95a0-e57c16efe47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b1b121-15bc-4d92-851d-d952d8ccbf3c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73129ef5-dd5d-4be6-961b-f4e9befbf772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79cbcf1b-8c5b-40da-8132-3897ce81336f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ba791d-81e0-4a8d-8721-dc6cac0b68a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "885403cd-eb2f-4db4-843b-f124adc11efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b70a0d6-9ce7-47d4-a2b2-ec9d1e0e4b29",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "352c8d5e-7b2a-41ab-81e8-8704f065ba50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3347c662-359d-437a-850d-2404b0674758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18f3d3f-8dcd-448b-97b5-a330e332784e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02da11aa-dfea-432d-9a75-797998702ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e3742d-c2b2-499b-8d0a-c3008f7a9da6",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1594b0-6c4d-4d7e-a7b9-182739fc492c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42df4bad-08a3-41c9-b2c8-8ce6100823c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3efe7c5a-d259-409f-bbef-8e72efd15ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2761558d-9dbe-4ae4-aebe-9ae3f1721267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c06822-defb-42f7-a5cd-00d3b20f1495",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "832173d3-a151-423f-96fb-1242e6e40e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df0a57b7-da9a-4fd6-8299-131a61d90e80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ddf0a7-a409-4a1b-8435-8e8a18f350fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4491ff8f-90e6-4b25-b6b5-2e4408f6ef20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618ad8d9-31c2-47b8-864c-83fec23daf59",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0400a75e-b7f9-4c3f-9413-e205917d460b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce270279-3ed5-4209-ab79-5a9696ffb0fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9dc677-d321-4677-aaf2-4597c448cba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "38675aa3-ad02-4815-9137-d8c2084ba557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e433b77-ceb3-41a8-aaa6-875c9c33cb7c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8372e507-010d-4610-92bb-5a67248c89b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f91ede-6a11-4218-8a6a-efa2254804bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afbc51d3-3df4-4aa0-97cb-09105c3fb2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c00c6c4-2f73-432e-bdc3-0f317fce771c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a20984-d104-486b-8aa2-878780da9b77",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "281310a8-ae0c-40ca-aa90-0fa7cb25db21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "048ac21b-f5d0-45b5-9bb9-e006f6e86bc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a29e9d-4913-42f8-ad5a-5d2283eeb012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f8e4d65-7c1a-4032-97b9-f85a1c5085a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8dbe07-f753-4407-871c-4ea24331daf0",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06cee9f9-2e96-4053-acbf-d936af949081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27067e30-efb3-41e5-aa14-03c2e980f372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8aa98ef-9948-4762-a5c6-73f52826d802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2491e1c3-0e5e-49a3-8f46-1d6242c1ac4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba7dd98-5184-4ca4-9e8a-21f3ff359615",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fce697c-5581-4a25-8cb9-d27ca0dd156a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d8513b76-9124-47e7-a3f5-644c0d247d3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6dfe8f2-7a39-4f5e-8ad7-1e5c4f1c3725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "870490b6-8389-41bb-a4e5-f42f33760f77"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6cb97cf0-f8fa-4d0a-8029-7e4c9e6a7499",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3bbdc65-2442-431d-bd3d-e87ba13a7006",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14d12e7-b12a-4d37-9b72-a94b98df9fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e1baab8-9a1a-42f6-90fb-eede06189b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93af5936-27b4-416f-885c-9c4c0e53689e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad968d09-f10c-483a-9bb9-0042321316e6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "315f11a8-cb5c-4a3a-85ad-d746a4685085",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e64154ee-d88c-4c0e-9936-8a2460996437"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "496e3cb0-dd6f-45ab-a25b-4d3375bd5d4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9bb9aa5-55b5-44d1-9a20-12cb3e2c325b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "253408d4-6f49-4f47-a736-b0e1af39bb89",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4e05bd2-d96b-4a83-8ceb-d7c2d18d989a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b7d792eb-e641-4958-83fc-fdf1aa613f6b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "49cd41d4-d20d-4805-a2b4-a5f96528d4ef"
                }
              }
            ]
          },
          {
            "id": "1e8ad96d-4e1c-4cee-8c8b-e9cc6758c52c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e71f3be6-4d38-44e6-9813-509ac0c6c270",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15455c04-3736-4f4f-9881-8ed4de26a3ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e508cf0-c517-4cfe-8337-e7adc18aa84c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a27969d1-7801-437f-bcab-6026689a7c20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f54e2d97-5c69-4847-a431-9be2b17a6357"
                    }
                  }
                ]
              },
              {
                "id": "f6d87ea6-6165-4920-9433-1f5108d94d9e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b27adbde-7eed-4f20-9cbf-e91e0aaf7272",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bdd54565-b608-4880-85de-3e248fc297cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65742027-0bb0-444c-b5a3-4b1b0c6e1e07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "98b8f5ad-5738-490c-9f00-19f3bbfc8cae"
                    }
                  }
                ]
              },
              {
                "id": "78015072-bf46-4dff-9958-8dbda56ebf84",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "621b8b83-cf61-4e9e-ac71-8a8b4660c923",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c48b1a8a-50da-4ad6-88f2-bf36c5330e82"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c28a10d-57c2-4258-878a-05866d4bb24a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cca528bd-f65b-4d46-bf38-03ad54a88577"
                    }
                  }
                ]
              },
              {
                "id": "a7655bd9-f627-4cb3-9f11-c922c75ddcf7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd6262b6-d1c0-4123-a28f-ac58d5996374",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "291e5692-f03d-4826-a69a-bae43e752950"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32cc1dd2-4a4a-4468-8527-1e8c543984a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e0ddcbc7-2e5e-45ac-b5c5-ef0bf5b92426"
                    }
                  }
                ]
              },
              {
                "id": "21295115-0e68-4b30-8647-da9122879018",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15b75446-092e-476d-bff6-155e5724faee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5e112389-0a16-494b-a16a-beb212f2f96c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "962389f8-f5de-4b70-950d-0a280645ec70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fa5e9fa0-0dd9-467c-a7a7-3688ff96e187"
                    }
                  }
                ]
              },
              {
                "id": "fcf8ed3d-1cdb-477f-a85c-d2f7677c0ae1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe17685b-2b2c-44eb-a975-16f3bcbea96b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "46b2a41c-dbdd-4f7b-b470-868f86bff7ad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc2651ea-5683-4300-86fe-3c09326efc6b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3ef3c62c-67b5-4e3d-8869-3398e12fef12"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6c267be3-1e98-405b-b68e-f9b00cc8046f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "659c287f-cbe0-4bc7-9632-6e3d831ff8c8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e6fa7810-89ad-4d0e-8902-782d05a078bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb089b4b-191d-463a-896d-ada3d5bace5c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ca23a5f-79d6-4777-87b9-a99ac16b67a9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "889e907a-a136-4b2f-9aac-ddc747909c55"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "024f8c77-2ce2-455e-b9ab-79a6b754cc8c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de6016a8-db2b-4fa4-b74a-bf46441a7b06"
            }
          }
        ]
      },
      {
        "id": "6f8eea6c-1355-46ba-bbf7-84b8602cd6fc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "da601d81-b8d6-4c42-a2df-81670f2a3e14",
            "name": "Negative Testing",
            "item": [
              {
                "id": "97d60f77-4415-43bb-a448-c5430157cc70",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "20617704-8576-43fc-a596-73d057b688ca",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8c24a6-d2ed-4b64-baff-2f2c509d00f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da300a27-858a-4e96-a64b-40aef4c00249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97050ddf-5904-42c0-8306-e9aa35edf3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "02a302ba-8a4c-4db6-b593-1c900066f2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab952b5-ca4d-4e88-95ae-8ba49a552421",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d68dbc-eddd-4ca2-82a1-ec7775ff7be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc8691ec-955b-4f45-9f06-1944d9a5bd36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1939e7-1c04-4d9a-b95e-a617b9ae6157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d505d818-e2dc-4f93-9c22-07e1a5f59fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930a10b4-619c-4a4d-a21a-f547d546ec18",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77936c46-ff14-43b0-a4f2-67a3d5995916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ebff07-f57c-4900-aeeb-3960ac6feea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ce4948-0572-4a9d-8c99-6eaf0a27cec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ddf6e72-962d-4a3b-a676-a9eeb746e189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0348a871-da31-40ec-9739-1380daab3854",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79cb5bc-400c-4bb9-a8f2-29a743ca03c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a3d2782-a60d-4842-8040-4e22da1881e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfa0e22-1e74-41e4-85c0-400dfc952461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e6f7020-18b2-4a8d-8c14-d4546ed8d4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14cdc91-9cd2-4307-9383-f751b8fe16d3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c56cb4-0588-4786-9a52-6fd66245b310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb843b2-2658-437c-adfa-cc2864016ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b010c492-fe73-40bf-82f3-621871df61bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9087c64a-01a4-4374-8b78-92f30b0c432d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47428130-fc77-4ae3-900e-34966fa67c16",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "971ce152-3e0b-45ca-a987-e379d60d423c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ea5f835-20fb-41f8-b00d-04da702dd5dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057c3c45-b2a4-49e3-b8c6-6888601102ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "feac6031-7379-41f8-8f3d-c7ebc5bbb856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31f8373-d652-4853-97fb-26b9c5bf4645",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8858b9dc-9364-49f3-9376-9cdf1de01efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "116c1215-32fe-406c-a7c7-9bbc1c41654e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630df128-4441-45d7-aef9-658acf66c22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cb86dda-4725-4711-b6c2-76243e2ebb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb14299b-08dc-489b-8fff-ff011d557cfd",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fde9860-dd55-49c8-aee5-301c76ea4e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be7fe4d-04ab-45ef-a5c7-428ce02b5b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a69161-a105-4e5a-bb85-f4d02ea63a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28cc1238-d285-44d2-92c1-6dd934c54a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963be3ac-b8c3-4b9f-a2db-2bdb34d7e605",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ce2e47-7312-45d2-b9f2-f193b9ec3ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4414a1cf-da57-4ae4-bb3f-a3f81bbed454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1192bb33-ab8c-4997-aabe-315ef742a5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32840a2d-87ab-4d90-ab57-588ee6474316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9e6691-5ed3-4599-8b44-4d7c17fb65fd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6b7a33-b749-4a38-b85a-6ebd230a57bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2da5678-6538-4897-8206-1e14728d9e63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae3b352-826c-49eb-9631-f7eaba7e934c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae8f22ce-e9c2-4e7c-972c-62df9ca0f3be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ca448b-be96-4889-aa6b-bd9ab1a391ae",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31d339a-a8e6-4148-abde-c179d14900f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e3f0130-e3c4-4801-8024-4e4f6dec7972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae97625a-33cc-4160-8433-a18f64594200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2b17b4e2-6107-433f-a7f0-b5d061041243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec59d00-0f59-4454-a65f-8a7ac3eac494",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2cd0ab-d66b-4fae-a702-d69ce5868a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48473995-119a-4205-96c7-e54cca31d650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22b6809-6918-4d87-bb61-7edb8ab10224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f613ff1e-ca05-4e8e-9618-48168ac51861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20490eb-8320-476b-a10f-26f8c3ef6297",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4dfee5-1c82-41cc-b740-dec05b322681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada6f054-ae81-417b-b750-8bfd0d4ed349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "463ddd6a-69e7-4555-be77-3814bb98819a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bdc1935-04f3-4ca1-b033-1c8154283922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e61e2c-f9dd-4fd5-a7ad-d78a938e3a73",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a00c381-cf92-4cb0-b529-9a9d54e680c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb032859-c38a-424f-b907-976bafbf61fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efd6567-c978-4bcf-a7ca-563a4faae7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a04979-b867-42c6-aa27-1bc627ef3474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66adc065-6707-470c-a381-37e59d347264",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7322b62-9b93-4f69-9df6-28d17c0533d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "000aef8e-2863-43dd-81e7-a766def76c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9dba1c-495c-4d1e-81e0-f6ab3a24429d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f8d716-889c-4922-b328-4b2ab03a4e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd6094e-c0a8-4e19-87f4-5ec771e94470",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2490cb80-69aa-49ff-ac34-066dfdf8dc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4bd403-f26e-4f82-b674-37ffa48e1e2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38716b6b-e9a1-4e88-9475-307f1af1018c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "96fc38a3-b643-434d-87ca-d049696873a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e2339f-cfac-4796-9d20-783c43a77497",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7da691c-9afd-46af-a4d2-3978607bf736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6af425ad-5684-4f82-9c6f-268b5851d890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7645afe2-4418-4135-87d9-a6204b5f8dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2f9ded1-b992-4184-bffe-ee55d8baba65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262244f3-676f-40fc-a286-2afa86574054",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b44616-9e8b-4853-aa6f-2ec777e55919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a80dd87-4ae6-4c05-b0ea-79f35e05c2db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdfa348f-8f11-49c6-89cc-44ad2944663d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a16ed21-09b0-48cf-8334-bf9632a74a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e95236-df1f-4ad0-92d9-80081d0c09c5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62399fed-268f-4e34-b0a1-fe5e4167b902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65dcde78-3e94-469a-9dda-a7f7a75a0c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94fc99b-d51b-431f-98aa-0e3541267a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a449d9-03df-4822-9889-2c52fc790f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f2989b-7443-4b08-b438-1747e8dc9eb1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e17c0b8-1692-4f1a-86a9-5221a30ac51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c6a9ca-0961-4bf0-a32f-7a504d529b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1feb411a-f60c-43fd-a664-2fa049ec50e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ada75426-7d5c-497a-914f-56b42623d40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227e2c61-a09b-4722-b8ea-b44386f4b720",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47472266-9d3a-4d09-9e70-f53e3ad463db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d6b30d-c3be-45c2-b1e4-0ef8cb152eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043d39d7-a576-46c7-aa8b-7abac0ba6c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da075bef-a087-41e3-8198-af716bdb98cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac9150d-e6e7-406b-b34e-05f54a553cee",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93dff4a3-3245-4d3e-a0db-d80706ea95aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb9cb67f-53c2-4807-b595-b167e4896459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3556b06e-db94-4644-a8a2-7979ef21506e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ddb055-6915-4c6c-af66-e0cb45bffb35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbc60b9-45a9-4c89-b89f-f45fea76f5d7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcdc5ff5-3e28-46b5-a6c7-1a7042dd2a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c1c6f9-a3b5-43fb-9643-3e93147f161c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86acf09c-d18b-4287-bfc8-bd9079bc0e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd5455f9-1254-487f-b04c-7d7a301341a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73bb0eb0-d9ec-4623-b26a-2293d3910009",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433607bd-5546-4b30-95b5-f9147a761d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d3b87f-edcb-4865-a3fb-61a5aae36ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8160e03f-6244-4765-93bb-a93ede5c2194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aca24e1d-0ac9-44da-8243-9378baf6c780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f760f4a-7d4e-4128-b298-50f72c9b9c51",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f51ee6-9915-473c-b078-b70f632e5c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f200152d-953f-42d5-8fd5-8c852696916e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485a1e67-3d98-4533-97d2-b9a37bfe800c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5acce74-aa40-4fc3-88c4-5f7e79a550c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe20a581-da57-4c73-9c19-5436b34933b5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44271b79-2372-4109-9815-dfd937f20332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f78ef91-8159-4ba1-b7cb-185cdc93bf10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c7fcb6-f8e2-430f-8ece-8ad662a729fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21fc6c7b-b1cf-474d-ad23-6bf0b3120ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a2a036-8b3f-4505-8c96-977d4518ae21",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c185c3d1-ef55-4b98-b6c8-bdbec007217f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "928c060a-cf80-4336-a701-16f09a420929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3f37b0-ea01-4a9e-982b-813102f20427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd3d494-499a-479e-9f85-90d0eaf19403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21c6f1d-8c2c-4da1-906c-bd7b17e41282",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3b4c4e-5a1e-4b42-b37d-2b58d4bc6c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdcf63d3-8afa-46bc-aaa6-f5c81cb6ccbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956167b9-4f2f-46c4-a2c0-4d9433149bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6824d4c-490e-4392-812e-90fc46a51d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ec67f7-13ce-466a-bb53-67c29a820c76",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2581f0-427e-41be-aa94-548c4d367ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edd08ca7-2836-4a45-ba61-f8b46bdc7878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66ce592-0747-416e-a684-a162af43b6b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c0da64-3106-4776-a1ef-8a3e7e206eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebf4cfd-f051-4223-8499-78a36011fd26",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3790521c-6f64-40f2-a639-ec160191635d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d64a8d2e-e79f-4cfb-a310-122962ba59ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cdbeda-d658-426c-93cb-44476b30a536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b691b864-465d-4b5d-832a-637570c170b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ca3c11-dec2-45af-a43f-2f98eeacbbea",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9263481-93ff-4a56-93de-c7c05354ae10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fdd2bc5-ef44-4e31-8ea5-9d9e50f95432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55123cc-0dd0-47d8-932b-17148d6095c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb0d2e0d-8de2-4730-a481-76a1714dc865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9d0dc0-3795-4815-b2bb-f2d0dcfc3a89",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbd99a2-e435-4b99-8d58-015298655f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6967485b-8dd7-4d2e-a7ef-df497fa69db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e960d58-7ab9-455c-a28a-5de29c8e5ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "698a6303-e3ae-4006-af3c-8281677d1ea3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "39395b48-d4cd-4801-99f1-e7daeda046c9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "060f0d8d-0068-4309-a6fe-1f4f58b92f9b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93acf697-6a18-4b4e-a6ac-d783fc2aafda",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "32c21414-a5da-417a-bc6e-ba559121f404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5d06a2-345b-4f18-b96b-87af6b325d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "508c5284-8400-443d-abb4-be8e3fb29914"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21f314c0-1542-4229-92ce-582fb7e8ec16",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de09bd09-9e8f-4261-b9c1-aa8b33e1f035"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "511f6124-be29-41b9-a71e-8685c8ebfaf1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "534c83f1-12dd-4506-aa21-42547f857488"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a1d3a3e-07a1-4e43-9837-03ac1452aea8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ccb13d2e-7aa2-4e8b-9445-1216d8f1f1d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b43ad81-52bb-4eeb-adf3-0670d4507046",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db287222-7604-4829-8a1b-c96e3b98d5a0"
            }
          }
        ]
      },
      {
        "id": "250e83a1-10a2-4cf7-9081-bbea24d39538",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c73f66f0-4879-4d3b-88fc-25edfa1144ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "193c8e88-2cf6-46b8-a3b5-4636f6c23a62",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "355db50f-1ecc-49cd-a26e-e9e2917beeae",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b060f6e-308a-42ae-8370-75132c0311a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3453af23-e962-4b06-a872-fd9900e48480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b44fe0-23c8-43e0-b920-5c8556e3686f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4ef6c3-4b98-429b-9cd8-6ea0d736b4c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "573f029f-16f1-4e75-b304-1162a4021c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e085544-ef5c-474d-b9c5-240bf6950a3d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e466804b-b14a-4cb7-a2c5-ab01103aa6c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f16b51f-1122-4a98-a672-2333b44052e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3855b12c-383b-42ee-a4ca-ee75d8e51ad7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5024bebd-71f9-4737-aa6e-86f538c89a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9471864e-c0a9-47b1-b148-09ce4c9f7cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e216be64-adec-4b04-8260-e1d88182ad2f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8844436c-6382-436d-8a3d-add8742dd149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a52a41bb-d23e-4fff-ae4d-8e49d6d2c764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4490234f-314b-44ec-be67-73429b2b1203",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8e8de0-cb5f-444a-924b-6a77b37d7972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "185d43e4-0e35-46a4-8231-2fed7efd9648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1007f391-d9c8-4ac8-ae27-7e8a1d0af5bd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cfd159f-a7c8-46d6-add0-317d8a12055f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b6155e3-0d5c-4014-881f-6574ed613065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a4cd8e-cef6-47dc-84ba-e499e63af6ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54bf7938-9ad3-42d8-8640-5a0dd3c1274a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4de624-ea2a-4c9a-9e14-332a88385bc2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26483762-2835-41bf-8e85-ce0008c45a4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4054855b-2178-4021-a032-13803aeb4f88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6ef699-f323-4eea-8ae0-679f54f46acc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d999bc-9641-43a8-aa5b-c0415cb15b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5794af-bf0e-47fa-8c38-40289d437390",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62c756e-897e-4285-8064-3e010689abbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0165d655-494c-48f7-a2d0-00956e091387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1037c205-053a-4305-8eb2-59374ab6ef68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d8b5a5-19cc-422a-a370-8bca6895e114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57954b7-6786-43c9-9bfe-afbf0071c95e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5ab302-ce23-42d5-a92b-a816d0147160",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e17255c7-a31c-44f3-b16a-2cafbb2288d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7486f59b-5cff-4274-9fc6-c3f95d55a360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3010372-21e0-4c68-8f15-34bcb857c93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a8954b-79d2-43db-a856-ca66714a6fbf",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b6b2f5-d86c-4e6d-8af0-55c7d7bf1b22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "126496cd-f13c-4ebf-8a34-6c91f6a6be50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "047aa644-2132-4281-a343-b808837c6774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d4279c7-1a72-46e0-b376-1876a44d30c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d927b56-aeea-433d-a0df-1434247aab2e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29bcc53-1075-451f-ae35-428f5dd6f105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8691a1b3-50e3-4938-99fd-b69fb98cac90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1564a72e-c4da-42eb-8de4-8a41fdaf2b81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7584477d-98c9-498b-bab6-b2a56d0669a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6cb32e6-f54a-46fb-840a-a7643a6c42dd",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e834e4a-db74-4527-bf50-0785ed4a9ec9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7c90a4d-0976-4ce4-ba16-40f9e74e5cd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82a3a14-a1ee-4e31-906a-48a7a5cd8763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce9794b7-852f-49d4-9baf-3f2b3f7339d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79b3016-5ad7-43fc-88af-0d466012f999",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ac1f87-9591-4346-bdcb-16e8f4767711",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f34ae30f-1036-41da-bf0c-95bf4dd5198d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f71239c-78c0-4172-b776-5764fe4a2c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e7f15a-d674-478b-b249-4a32ddaf893d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12e5ec2-0a08-490c-a984-0d6fc47f9172",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da1e590-f89f-4bc5-8667-86dbfc3def81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5ef6541-af29-4a91-b5b4-ae3360fccd91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642d5d76-a638-41db-92ed-101ea13fbf27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d44e715-7fb4-4022-a4cf-ae387979fa36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a03252b-fbfc-4828-922b-ef58351fe941",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73c27be-88b6-4fcc-bd1e-e8452a0eeae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "263fe776-7fb9-4c8a-a3d8-94ae313266fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c5efdd-4f02-4782-95d7-ff5b4fa20aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41b1ea4d-dee2-4828-a5cb-dd8dddeadf45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9c6a68-f542-4331-ae9c-0a55fa11d6d8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26b8138-ecaf-4bfd-b72e-48e1e639000e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "355fdf2b-aac1-4cf2-adc9-29b6b1ed7275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f51368-eb46-4ddc-8711-fd58ceb75415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74974a7b-cae4-4879-b94b-014ef6aa25aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b701f9de-62e9-4313-bfda-7aa5b63a9ac8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79d6ed3-c85d-4ea7-bb0c-0a2a66386958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e658770e-0103-4021-8ef1-860df51bebc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12305a5d-9707-4aa0-b3ad-0ee5396c7ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "365ce55b-d413-467b-bcd2-945ed1f978be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e448a3d0-9db5-43e0-a902-18f6a61de743",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a169bec9-114e-4fdd-b20b-fbbe82434efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3292cb6b-07ef-46ce-8c6e-acfb18f704ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4dd04f5-589c-43bc-9ccc-8df01940998e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9de308-d8e5-438e-97e9-168a0ff0f83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531719e4-dec1-45cb-b235-8d809cc6e3a3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e383e9b0-175a-44be-bf9e-db18ae7ea4f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb9b5604-c92e-4190-84d9-9787129c2aa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27135b69-ba3e-49d2-8c9a-2cadbde51f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5056c019-4c5b-4fd9-9497-d3abf67ba8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de4f1f6-2b15-4f9e-ab50-0708e0eb349a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3aad3d-fbc3-41e8-978f-3c7fe9435a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d8d544-49fb-422f-9cc9-a4dfee7054c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a39a87-14a3-4e23-bfe9-c20d7cd7fc19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d15aeb0-0ab8-4da7-833b-2998d44ba012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b22cd3-8fb8-4348-b453-ea0dffa8a239",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e785b9f1-2b44-43e7-93f9-ec04c84db7d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de0f43ae-49f5-479e-8daf-44f0dc504915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8452f9-5ad4-4e59-b55a-c86c5c79c2fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb81856-0921-4266-8706-aa57f7f59293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d074f6ce-a087-48ca-82e3-4070d6d99060",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96732fc-b503-41f2-a4ca-1519ea15c521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9652f055-ac6f-40f3-ab9c-4d3cdeb268bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa341233-a75b-4dbc-afc5-985f872f5c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c78ec6-a0c8-4a60-9206-1a3bc9d68143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0245346e-6b9b-491a-b41e-ccde5b58be44",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf0edf2-bb51-478f-8733-3116c7a7cd81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "047341d4-06db-4c6e-ab04-1232ff790ddb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fac6621-6325-4cf9-a61c-409ee78d3d3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49a997a-47c4-4339-9877-1fcabbb6c83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89088b87-7551-4856-8ca1-f95705b055c2",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9bbabc-d6b8-4c30-9d2b-e75e91f40667",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71976e24-db12-484f-a856-857760795827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e026afd2-f657-4314-8997-d7a67b1f5106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79e53ac-025d-4082-ac10-719c3bb4a4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7459849d-7e95-4bbf-bb83-997d694454bf",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ab1e4a-a935-42e4-b87a-87b42ab28019",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f7844c4-7484-4dcc-a67c-da29068f12bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "934acb35-5f3e-4c23-8deb-31cac4d65c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41df4da5-b046-4ca7-af46-3c1ac74e8127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7b9bdc-1ace-4e1f-9f07-bc9c8e89b3c6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798d69c2-7a71-4b43-91ec-122b6dfa1b18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90765f37-ecae-436b-891a-040567ae5818"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "656c4009-4db8-4748-ac7d-d698f9d41bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3be84d24-3099-487f-8bc4-fa26df2e5862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f0c98f-713a-439b-81fe-27b0341f8b02",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbbe17a-7b93-4f66-b5c9-636679cf0cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b3b129-3334-4110-ad4e-d68eedade4a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0450992-6d20-42a3-85f5-d48b2f7692fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a69c21a1-5e60-4677-8acd-42fd13184d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad97cfaa-0418-47a6-81d6-78da6059c79a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c8ddce-933f-4724-bffb-e36356e3e260",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87ed1fb5-17c6-4f7b-80d4-d369b9bdf064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b89d2e8-65a9-4996-b957-2421f11ead29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6129db60-423e-48ff-9229-7355c44b4d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6283b7e1-255a-4567-8d21-837938b880af",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2777f71-c7df-4588-b065-e1842e6ef831",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de2d7d36-37ed-4c30-927a-7e31ef7b8c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a427583c-71bd-4682-a99d-46c7c079b98e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7409551b-782d-46b0-8215-34435df8bd02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113c2616-64d9-42e6-8904-b93c6d73afa7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd5fcc7-f025-4497-8772-e7b66ed86cd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85a241fd-3075-4cd6-9db1-b131a0d197e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e5eb52-6fd2-4be7-b746-561ba13d05d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142d664c-284f-4115-bc7e-4b8b4dfb86ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89fb8681-5764-4f53-9f98-81c0224966db",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f5d484-7c9a-4600-8482-8ad0de404660",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eea687b5-161d-4692-a7e5-7754080e3b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1733f161-485d-4090-af5f-0e21917c9778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76fefb95-76e9-40af-b6eb-ede82a861b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35c09ae-b2d0-44cc-8613-72c10ab711e4",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064ba289-04ee-4526-aae5-15cca34d318a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "729d8846-19e6-44e9-97af-dd67174922b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d9e292-e2c4-4c91-b6a7-b6292575259c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10cc708f-cd5b-446f-9795-df25e1356958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de98382d-cdaf-40db-abbb-feb79c291970",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6ecb88-516f-4281-bb47-8e04428e1004",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dadccd15-6f0f-49ac-addf-85c7659329ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "393fefd1-c54e-41b8-a2c5-1ed1d4412127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6191042c-4138-4662-8182-156906d19e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b6e5f5-c369-4b7f-935f-e2816fda9cfb",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5b5680-ceba-4ed0-94ff-54e6f8c5b79f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "751b7557-5f9a-41f5-a0f4-a00a18d8cc77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1553f71b-911c-4cfa-b5ce-3f528425eafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b857097a-fc89-40a7-826d-ce8be24045a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a541d6fd-9ebc-4069-8b85-92ed709fc2ac",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c860b99-c0ba-4656-9d31-a1dbefd63721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec7dfd7-777d-4a8b-babc-d1514fb60f75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f378ee4-f46e-43e3-be3c-be2c7a89d2d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c415bac-7420-46d7-8ccb-f7b386cbf4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2927cd4-6277-4e14-95a0-f04e6e550ed7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3e4f90-54ad-431b-8f18-372265613274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8dea5d8-2782-40b2-ad7f-f7b29aa04dae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adec57e0-bdbd-429e-8385-447e54d1289e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f16faf-1227-460b-9c3e-ea808543fa65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a845a180-44a2-493f-acc1-74bb4b6ea5aa",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6250e66-b2b6-471e-a5bd-4facfe9a8177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "495e61ea-84c8-4545-bb52-d58a88ad8917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16724c7e-3406-41cc-a45d-f4bd66d171d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "628dae41-9d19-4d73-bd40-4eec5e4156b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab0f21c-8c2a-4f0a-a2f9-07e16283ae52",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba470443-916a-4321-b422-99fef02a36e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d849ff7-6feb-4436-803e-684707e861a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8345e8-513a-423a-9f52-cbdfecb3dd6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c89971-70a0-47a4-bdd8-aaa90441bdae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4414556a-d084-4003-9d40-3bbff66d2157",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f7de57-8ae9-4287-831d-b9c2ee7611eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f224804-8030-4c19-a35c-d51c2050ad07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d40199-dc32-4954-a0df-9f0b1eb704c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45523c09-7535-41f6-ac6e-22fb4e1cab6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a27355c-49f6-48e4-aa70-0efb1fa895fc",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faefa797-e3c2-4ee2-bbdb-137842c2bd8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "492fa917-f1a4-46fd-9479-13f184a5e143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac778971-b422-4958-b763-0b0a5a1f7f92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47fdc558-4fcd-4d91-83b2-99800719d4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55efb77-5e25-4d00-99f3-442b1dc8681c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c69238-320c-4280-b261-8f90ab7794d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1cfb7e-d611-455f-b52e-838bfb74e759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2fbb0c-2570-4533-b472-36e149bd61c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "276bfc07-3b0e-4e27-a592-f6529026216a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedf1633-6496-42a8-aac5-5e6195db4480",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceff5f3a-1c56-4114-8e9d-baf95104d2a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03388a91-8644-40ee-b03a-528d82540a92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24468a28-1a4d-4a63-a3ab-958a158b14a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d67fe0e-07be-4b64-b624-63809f381314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0528da04-e121-40ab-9d1b-7cf44d2fdda3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd94e26-deef-4ab0-a5be-88879f2bbf36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e04659-f4e3-45f9-b5d1-59b732452022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb016f7e-9160-446f-9d3e-5c136b6a3bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a62c1075-814e-4f0c-b996-9020cfc7fb2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87384e3d-b6f9-416b-8b85-54d7f1734d76",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b854b8-bb81-4617-b60c-87aeb0cf45a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8bed8b0-c828-417d-8c00-cad4bd2fbc77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64e6059-4b25-41e2-bc60-70bdb0a209b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "909edecf-e98b-438e-94ab-3072ae3620c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e9355d-b007-4fc4-9309-933e3ec0f489",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fcc8547-5ee8-40aa-9ed8-66c1e1c6be77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09add8b7-72b2-4088-b56d-540c06077eda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60911431-c0c1-46c4-a6e5-10a010b9d2f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ec8b62-4db4-4f44-a4e5-a4002503c002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7852fb9-e879-4af9-b8c4-772ebe717c8e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4bb2f3e-b65b-4796-b8cf-b25db9fc1e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "020f123e-25d5-48f5-a8d9-552bbb51018d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d6ae50-a200-41bf-b222-eff9da69bfa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1241442e-16c1-4001-a6c9-48077cb39211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecee30a-dc8a-4ece-ada2-adb4fd35c473",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "692fd64e-7ed6-42a5-9373-23afe2b138d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c33550f-00f3-4288-b997-8ae275c01f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bd44eb-03e1-4f74-bdb1-2828909fe835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0511e6c5-6b63-40b1-9486-8277df7152ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64513de-0efa-4bd5-a485-f698c967401d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e1b4dc-5681-4d2e-b44f-368bea345ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98440ba7-1848-4a08-846e-793677018a5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11420096-33db-4bab-8620-72bc2c94cf2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca4cea9e-2532-4e3f-8c63-8d8ae90a1d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d659e089-40cb-4c38-9be0-ebd143cea7a3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d597fcf-63b2-4623-9829-d5a76422e8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a913c9-fd39-4d50-8ea9-de2b31386ec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22ac368-d901-4206-bbf9-e00c2b556c9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50549c12-ff62-46f8-9ffc-6a58b4ab3191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409f76e5-df1c-42de-adb1-2c64d7e8fbf9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196637a1-2ec5-4982-9484-e469b0000e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeb71f9c-280f-4eef-b26a-76bd9d938fd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe337776-37cc-4f6f-b1f1-610611fff800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dcd1ee7-17d6-4764-a3e4-7af25c465a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34979d9a-6f25-4bc4-bb6f-3dceb67de325",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00bcbbc-61e0-41f4-879e-9b860e48db01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "964b241e-f154-4577-b31d-e57a3c5462f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d866ef-9242-42c4-a6b0-61ad5640f71d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120aac2b-3b54-48c3-b793-2bcfec992bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8e1427-5ab4-4323-a87c-0a394375cf86",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0f5600-60fb-473a-84f0-7111be1750ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f041635-0878-4c4c-a0e1-d44323343d7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baba1a80-57aa-4cd4-8de0-3542c6412f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f4f3efa-de70-4c41-94c8-d1bc6aeec5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff7f040-b7e9-4a64-baab-7455e1b2eb11",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585e3320-1db4-4174-84bc-cab07a44e303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "049a18b8-3bec-4735-9940-75439c65aa82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a55fac-90e8-4a26-9bed-f1467a519012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbfffa65-a989-4501-9fbc-34baca00fc98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68e0410-d22a-4a13-b29d-698654c8f10e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83406aca-a3d9-4d1f-b028-84bfd4a3b3c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "885e58b1-c773-471c-b270-746d971a8467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca010c73-4ed3-47da-b081-38dc8cc9cf86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94d29631-14fa-44fb-8f9b-370be4945a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd05da8b-8704-42e7-aba6-3dd7a7579d56",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551ec6b9-6f03-4f72-9c2c-0eb655224ffa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0fa05a5-2799-4ac1-b8ea-2a2c16d06c98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacf33a9-8762-484e-a507-a0a7b0f67605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e04312e-5fb4-44fa-81ca-6b630f2a9ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91782bf1-3cfc-443c-b78e-3361fd6d5f97",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67120992-ed6f-4fbd-bc47-8749455198df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5975df51-4864-4971-87eb-6c4464653bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05291b6c-a025-4180-a3ef-082b5a72717b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae28f8c6-4de8-452e-aa83-1ad7960b2d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3dbaf01-33c9-49a4-813a-7127af4fb310",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555e71cb-c7bf-4a04-a635-5bb1795f146f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb48d0c-5d51-418a-ab94-a53036e11609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd105e1a-0ea0-44b2-a9ad-4506614b2c83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5bf5174-a953-4dbe-a017-671a5d9c0e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e35639-da8e-40a4-9aea-36b668ec7512",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5256ae1-8783-4dd3-b85b-dfd70093acfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "620e8be7-cd2b-4e79-a6cc-a2b247760ade"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9290b220-40be-41a7-923e-c5f57f1ae642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b78af50-fe6c-4502-aac2-72aeb00d42ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dafe92ce-2025-4ce4-894a-1208bb5cbd7c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61adba91-c0ad-4844-bfae-5f1ea721d633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb5e2d6-05e1-4b69-b18f-ab0f00b1ecad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "099df569-7abb-4932-b0be-67df61d9c99a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db8ca641-da2a-4214-8fb6-e7e88b09e942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e76130b-305c-4fa2-abfa-76535b8f5e97",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6cd8e0c-3cd8-447d-bce4-ac17a0fad894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb5a966-4233-42c2-8cf1-0dbf7ea34684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f69478-f173-4644-a99c-268130b0283f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67b3e5d7-159b-4142-a738-60720c049a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e98e952-1c0e-4ae3-8481-243de022acda",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695ed1e9-a280-4a6b-bb00-124d5ec57f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac8942e-d42f-4481-87c4-11cff6f48dc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d941ee5-d79c-40a2-8ca2-829c7d9536a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "421f4dd6-dcb4-411e-96c0-720f124c1564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd88bac2-6eac-4f50-ab6f-d74cca53a059",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1c58c7-58e0-46aa-bf90-bc104d2e9161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2738c095-1537-4e3a-aa5c-4a7ddc79628d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f7b3d6-9729-4430-a0b6-ede91177c7d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e227419-f709-4eb0-a0a1-3efe98da0ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f74516-1e69-4a51-9ba3-541cf0aef13c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb85288-7c8a-46b7-ab26-df7816152ff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa6f2dc3-028a-4351-83b3-15b662d47ef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84682591-4269-41e2-bd44-d6215c80ed1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e756aea7-d4ab-4242-bcbd-dbb14ed1c8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169e7d53-e77b-46d3-8bd7-8c8d15d3b644",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df904fa-8ef6-4dac-a45f-4292fa8f7227",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9c939aa-ec59-423b-94a8-ef235a0391e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9704d73b-9223-4588-bb31-f48fddc34e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f153dd-b4fa-4418-89a4-6a1929d2121e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ddb828-a46e-4cd9-af4c-3731f9d7e375",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425b70a8-f5b3-4f2b-a35d-5739af81ee4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9472d268-b353-408e-856c-eef9b066596a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ae803c-a831-4c20-9602-588eb5cf547a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1180ee51-fefe-49d6-a6c7-02ab236bf71b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc650ac-02df-4e10-8df1-28296fc69da4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee21e1bd-4414-4f3e-8e3a-6d71850158bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eccf57fb-d3be-4f37-acde-1a28d27d7caa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7c659a-0202-426a-aa70-a3a861bfc5bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5aec0e6-49aa-40a9-9323-8c25a622eeda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c02e4d-307c-4368-9a61-a4f9838304b9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b4bdce-9b42-471c-a7e7-20329e366867",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd28a239-f6be-45b8-8b55-bd0f65a8f26f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23bc89ee-f129-427d-9e53-5d0f95296fd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a38e548b-3b9a-4cec-a3e9-c367dbcd3c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58622e2c-d237-4e5f-9d5f-87c81ee0e421",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ec9de4-7ebe-4b78-8c13-c810bc94dc6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f72d1f4-170c-4461-b2fb-d036469ff036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1ce982-30d8-4d51-bf58-982b583f0a6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b996cac-01e2-4b8a-94f8-a50b600b7732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae36fcc-6651-4635-b605-a565a7d55510",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c5b6c0-2aa8-4ea2-b733-ef607a084811",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c89f421b-3f1b-4881-9b17-3a8476e888c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00103bcc-baad-4dfd-96c1-95df853d5957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e26fd6c1-655a-46b2-98f4-3cf7d73b8882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24d1df4-c69d-4e22-b0d4-1483ab6b56bc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b07cf8-935e-43f0-83ee-6fbb9352264a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "874e808c-2458-4378-9578-a5b135e32c95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e7e2e8-79f6-4393-a0b5-0a47234437e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e061006-7029-462b-9808-2578b93dc91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8441329b-f758-4402-86b6-691d317029f9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e3414e-f0dc-4d91-80c4-705d72b65c33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bccb104-c2da-42e1-b1ac-18edcc11f21d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4108b26e-e368-4c9c-889f-fe7ab9dd5b9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385c17f1-0ba6-481c-81aa-cb4faf1d7622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf427dc-27ce-4fe4-80b0-38676b3575d9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3aab39d-1880-4d23-a4b8-95e9a158464b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "112a0bf9-5399-4826-973f-e19a185dbaf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4502e47f-bca1-4dd1-87fd-0ba1b3d08b38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e91ca5a-b700-45a4-9a41-f5b62361de4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1ca407-7a1e-46e1-9b81-fe3244183ab2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c52a67b-05fb-478e-b783-92a5a8368015",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb415575-cc2b-45d2-b281-86e20c5a8aff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ef00ad-463d-42b1-901b-9d7c15815cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9812b10-5ecc-4795-879f-82da176b081a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3af87b-cd0e-4419-a452-2041491a3679",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3d8f01-8a34-448f-8e1b-0f00eb52d56b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db7493ea-ec62-45ce-8603-ca28cbfcf9a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0952045a-dd9a-42e8-bb10-1b5f8ed2ccc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff2079d-3e0e-4fae-878e-4e27770ded88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6130965e-a852-477e-8ab2-73f8c9a0617e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff156a59-db12-4e4b-8d66-bbc2b9afd33e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f4ecabf-7664-48d9-a8a2-94ecd5ca2cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb860a9-cd8f-4a2a-b1e4-f6137a6d5bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b2906b-65a3-4d5a-b225-370a2513bee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b152ba2-95ba-4a13-9062-5589c9334dca",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba104bb-6304-4183-991e-b2be205142db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3a60a5e-a3d1-4d28-810b-37f24d47f29d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d97499-5aab-4535-9c2d-488a8344749b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad0f487f-bfa9-4e55-bf43-2730fc76d9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396beb12-401e-4891-bc44-fc24a50f232b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73eb0c9e-811f-4523-bfe3-32b59884f472",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d07fa1f-6e5e-4410-adde-aa7f9e1f6f8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed50475a-f7ae-461f-8378-ef32dcf599da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79dd19d-c31b-4795-908b-701f52a20f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6dd608-a1ce-445a-8bc4-1327cc2c5c35",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df8a78a-85f7-43dc-87b1-f63074053491",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1748195c-7184-4dbb-b0b1-a391c717fa85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9be14d6-8623-426c-a38b-71dc19db8211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbafc86a-9a7b-44ed-91a4-30befb1ed631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407bfc9e-8ebd-4cae-811a-0f98f3b2437b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e25071-bf86-4301-a2bd-9ffb18f0782b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0db8ac33-c5a7-4d4a-8aa4-e315a2537890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6a6492-f865-47d0-a70c-339ff949a49b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e3db30-4841-43ef-8bdc-889a61d37961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94d4b19-9e83-4214-89dc-4d5135c3c7ff",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7683576c-e6ae-4114-8723-90bcdae40a99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbf9ed1b-92d6-4086-94f8-e395662557c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "292978c4-a4f3-4db9-8cf7-ae864a780816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7429117-9c00-4667-85c4-af7f37b1ddb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ee3625-76f6-420f-a824-f826f1f04fb8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44f28e5-0069-4673-a652-e67730c68c50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dd88c5b-12c2-4652-9105-efd029fad378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4263246d-d054-4ec9-aefb-2434b6b9c6da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54f8440-f176-4a96-91ff-58324301279f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bcd456f-fc44-480a-b0c5-6ca2db51bd86",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00332c05-249a-433d-8811-9e79f9492393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b614279-e6fc-4c8e-b947-1b45d1ad5794"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffea5680-bf17-4792-908b-385a9ac29d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1787d3a7-3995-43ac-9429-cd71fb1ae4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ddfc186-b912-462c-81b2-7723bf9e0ae4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17ecad3-9895-46b4-89b4-72cdd80d3e63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f71bc48-c895-4781-8cca-d6313b3518b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69b058b-1598-4080-bbde-8041a31a77cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdbe4f1b-753a-4a9d-b2e7-c56d5f37ee62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d44d183-5959-4577-a0fb-f234e63881b8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bb9006-db45-4ac5-969a-1b9f3b1dc123",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0eea1c8-e913-4b9b-9037-df35763193dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b1e575-6643-4a86-be47-8312004474d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b905094-2fbe-4a70-a201-d9051f74bb6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619e271a-9c70-4124-90fe-7f6e643b5acb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e6649a-91cc-457b-85a8-5d8db56dd54d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc73e148-3ef8-4255-b9a7-c5896f325531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c2335c-4ece-488e-b383-c2218ef05904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ebf7bd-be24-4ab5-bf8f-c328076a8958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e365a7-cb3d-427b-9498-a6d76eb3d5fc",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b28752-7b92-4619-a492-dfee5d909dad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cbebc9d-ff7e-4567-9ae7-9cf9d02787eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f72f43-fd8b-4583-92f9-22a3feb40c9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82efb649-2bcd-4bb2-82e6-c8367df6788e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627750cb-d526-4a7a-b8e0-6a22c6ef02d6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb943d7-8468-4a75-a595-441426c2daf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41e1d0be-6e82-4f89-a0c2-59e7ee0d5612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "183b64e2-f2dc-456e-beaa-e2c87f585cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "963f0192-0c61-47f6-a50a-c8818898b766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a3e42a-cd5f-404d-b5e1-d3bd739e00ab",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b847f108-6052-4839-9f94-4fbefcea99cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "937dd4b5-07f8-4a4f-9947-d089dc865cc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "484eeb94-47bd-4200-848a-5440530ed9d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da7acc7b-9f87-4f85-9961-4b0b93e20727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db900238-9131-44b6-bf12-3f0215644330",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b360f97e-ad7c-4414-aeab-3cb6209bc5a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bde7604d-bbe2-42e0-b529-877252a71c30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89729ee-9ad2-4428-bc6d-c92c4a5f3ed7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28297cee-c341-4633-984e-5dd7afc7b296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0804e0-6d94-42d2-9ae2-83b4d7444f9e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d3bbe9-4e98-44b6-94e8-9122f07c5ee3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8c76352-05f4-48b7-b682-4b66f059e1da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99fded05-8397-4d70-841a-c34328720866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d746212-49db-49db-95b0-d8fa929fd18d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dffe012-d26f-4fd7-b9f3-29cef5261674",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a62d559-c30f-449e-9965-1a47f414c4e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a60dc73e-6ce1-4ebd-ab97-20dc27b53b28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7c8162-3bff-4646-a8dc-b4f3028b3b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4efbd17-e20f-4283-a01d-722238ca24e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b3710b-c68a-4d77-a7c7-8d58f56728d8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1cbb34-2c45-436b-a3f0-89f0a9d12f4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "848cf4ac-2a05-4624-93af-de3892110a7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9124a85-2f55-4533-9354-a1f0937a7c27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de069e31-d983-4bf9-b216-5fa6381652da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667fcee5-89b9-4b28-814a-2ddfaf84ce85",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05f53c3-aaf6-47ff-8cd7-ad2f2f0a9986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b825d97f-ec80-4fad-b489-9f26a6bab92b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "129240c6-cea1-4c4e-853c-c9d3d9fad9ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7f3d5e3-5a30-4995-a3da-238a99a84ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7f225a-f804-4ac1-973a-bd8f4c7fd5a0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddac088f-02c3-4fa7-8f37-8fdbbacc2e7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca616fe9-69d2-4b86-9d27-79a7697b7778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25b6fb7-79d2-44d2-be83-24178549d075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "404d34e8-ebdd-452a-93ed-9376104b507d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf9d556-958d-4bdc-af13-982378dc7129",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d45bde9-42db-42a4-b2a0-518c0f251267",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46f02463-879d-49bd-9af5-0e0935cfe6b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38579769-85d2-4df3-8430-4b494cd674b7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4477f076-ba63-4424-96d6-676d625f91d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a537544c-c516-4ea3-a7ea-2c4b7a94cdcc",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467f5c73-79b1-45ee-abd3-6455cdac6ca0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d047ab2d-ac02-4c10-ac17-774bb7ced080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74d78e5-4ead-4aa8-b463-412a0992e2ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66ea6223-ca17-4e82-8ab1-857a779e712a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b436fc6-8598-4128-bcf7-b08b43762236",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c81639e1-dccc-4e2e-a2be-553508e63ef4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7be2c7cc-8a6b-4e99-a7c5-9f9149a08b7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6d44eaae-d18f-4280-b054-5a718c7621ee"
                    }
                  }
                ]
              },
              {
                "id": "c090a6be-3730-43be-87a8-51be36908685",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4984df7-6843-434b-a05c-31e0e371ad5a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4647b5f-bf15-46c2-87e5-ad6db8436161",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "55b83b14-cc47-47d3-b17b-fb6ccfa10ad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbd03dd-dcf8-44a0-b329-09ee8295589b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "151f5a95-b3eb-40ea-ab69-f71630a077df"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1774956-824a-42b6-a65e-142bee04d952",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17177a62-c23f-4322-8898-e6f3de58ff96"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc9eb5ce-f750-45c1-aa9e-04bf4d19e386",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c540a4bf-91f0-4b19-97fc-e535013e61b0"
                    }
                  }
                ]
              },
              {
                "id": "7685e14e-e19a-43a8-8704-ae6a6505a30a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b2410066-aa6f-453d-9df4-bc2d2782d99c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5e22be-db03-4602-be2a-4ec64ed40fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "2ef4040d-9cdc-4362-ba30-4ee5be554c6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b14ca2-4287-4704-a9ca-38bfeee283f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bed5dff-36ec-4637-8536-7bf01c9563c1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cb2516cc-bcee-4b97-8243-dc10e177aa0c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "289ec048-7f7e-4494-8a8e-74c01e431d3a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ae9713c-c49a-4188-b2d5-3119b74dc56b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dfb18c19-b07e-4518-b219-523d32b9a06f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24814c53-a088-4ea7-b02d-8175e3624651",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae0b4b5e-d01d-4671-97f0-eccf0819a5cf"
                    }
                  }
                ]
              },
              {
                "id": "f82de16f-2710-4853-8aa1-eb2c4557cdae",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "136e2f53-8c47-4cd9-881e-24e484c82c83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1fa43b44-77e0-4ead-b157-12e68a002954"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab64fc88-72e1-47ae-a2dc-3f1985ee068b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7cf1eba-6c44-4de4-9016-ac8904784db7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a9ade71-5023-4db3-96c9-28115769adbb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "20a7008c-3ad1-43ca-816d-57a9574a9d21"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3da57b8-37d3-4c2e-b7ae-522b9c42869c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5f76208-a66a-4646-a5c7-da1739ef179a"
            }
          }
        ]
      },
      {
        "id": "766de2de-5e65-449b-a98d-1b2643dde31d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e28e0dc2-332e-4bad-8e27-9904c4ff6291",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5b5acb6f-493d-4fb3-bada-efbf636d2646",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c33102e3-4a03-4c1b-8d09-8fe9c1f58d64",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1beda89d-5d67-4537-b204-c161322cdca4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e43f2e8f-9b43-43bf-853e-dcc1818249b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "796f3b7d-5d4f-447c-8479-1318684d245f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "187a653e-f4e6-4965-adbc-be957537e8c0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67150a38-9259-40ba-8d8a-226f3ccd4ce0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c995b08-f774-4698-85f0-d2fec54190e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e57c769-4349-4810-a9d7-170b1913bcdb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39e770c0-25ab-45f0-b55a-b8e34901a8c5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c599cf80-273d-476b-8558-6bcec7d89607",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "69b919e6-c133-4b03-ba0e-35215a42d74b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac0c9520-07a2-45cd-b421-6e2067f5ff52",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4dcf6ce9-bfc8-4ea6-bba0-3d8385060e84"
            }
          }
        ]
      },
      {
        "id": "1ca4939d-fb12-4d44-88ba-e8e781c48f75",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1e24d574-d8ca-4ee1-8cfd-06d107e66ad1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25953f56-4e18-4219-a7e0-d2593b1fead6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b0ea6fa-a0cf-4dbc-b156-029938d78bb6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2678161d-7407-4cbf-8afe-84ace1252bf2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ee9d6da-3b1e-4ea1-aecf-5a8ced97dfc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5a2a0e-98ef-4a2b-a0d4-c85d281321a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0d713ce-97f1-47e5-b803-7c62cfc30cd9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9645f07e-2518-4265-8a57-437685b49d53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e0d6997-377e-44a8-a551-4b76b3b4b90e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "edc81f03-229e-4d38-8200-659f3286f5fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f99de0bc-1f47-4750-8c86-d74865c80407"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "105d1461-a431-43b0-acd3-631d19a77c8f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "455f8bd4-bd2e-4f13-967b-fba3c2e37b2b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e87a6bad-2c6b-46f9-a47a-9b0a9ba460c2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29d67fd8-e989-40b3-86a2-fd61ffa8669b"
            }
          }
        ]
      },
      {
        "id": "59a2f978-b9eb-40fc-9b1a-e4070e5721d0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0b994a9a-f578-40a3-ad1e-37a5df38125c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "454a993a-2d8f-4c2e-8f35-1ba05a7b3811",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "682cc7cf-2647-4afb-bda5-003c3b8f9b1d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b3bfda-acc1-4eda-b276-4e6ed0d3326f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de299bdf-24f0-4b57-94cd-07eb30cf56da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "472564e4-d3b5-4fc2-a2c9-4debf6f5154c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd0f16e8-563e-442d-9607-78922ab7b57c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34e8ffdd-fc3a-40af-93a3-886768bf329f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55b77a08-a1c4-4fb6-b3ee-aeb218f0da0a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc493053-e88b-4bca-a981-5e4e88c347bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8056b68a-8b50-4e0f-9ae9-65e298417753"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3953a71-e422-4da3-8249-cb8525ace15e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "364bd526-2fcf-4ce0-b751-11fb93f01a43"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "993b14e6-21d6-49db-8f04-4d3a4a6cb73e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "388cc88f-49b0-4499-9ee0-e0cbbdcef4ff"
            }
          }
        ]
      },
      {
        "id": "efbc7277-64b2-45f2-a379-56d7d31906f9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "093c8c64-68c1-4471-bd27-abcbe7357551",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8dccdc68-df68-4c09-8a1d-0e33f4b49062",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0bf6b276-0e02-4b4f-9083-40bbc080c339",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f20a266f-d72b-46cb-a3a5-78e06a2b69bf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79195ea9-2741-416c-bfb3-1529eff7c680",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 283.8983739837397,
      "responseMin": 8,
      "responseMax": 7492,
      "responseSd": 788.6015626610838,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686703221867,
      "completed": 1686703304341
    },
    "executions": [
      {
        "id": "2ea2cb27-b23d-40a9-a92d-8b1a8aa446e4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0e3549a1-2d06-4746-a98b-da43944cc955",
          "httpRequestId": "6db677de-81ef-4b31-80b4-32d178f39ef7"
        },
        "item": {
          "id": "2ea2cb27-b23d-40a9-a92d-8b1a8aa446e4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "14579df9-b39b-45e2-a6b3-64bce5b7f13f",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 0
        }
      },
      {
        "id": "d8d27c31-f52e-4652-a2f4-35631bfaa1a3",
        "cursor": {
          "ref": "ab86e9d5-9899-4568-ab94-428aa6f0fe2c",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "88a8ef7e-b44d-49d2-aa31-5d64bb480d43"
        },
        "item": {
          "id": "d8d27c31-f52e-4652-a2f4-35631bfaa1a3",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "26971d28-1f9d-4b42-be8b-ae9b0c311299",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "3272b7f9-72ca-4a25-871d-6c7640e2bd0e",
        "cursor": {
          "ref": "cb52e15d-fe03-4e40-8ca2-b015eb82cf87",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "79b48f9c-2b1f-4cfa-873b-f3736345609a"
        },
        "item": {
          "id": "3272b7f9-72ca-4a25-871d-6c7640e2bd0e",
          "name": "did_json"
        },
        "response": {
          "id": "356b821a-ee87-4760-8de9-b982cb0d7db2",
          "status": "OK",
          "code": 200,
          "responseTime": 315,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b13755f-d04f-49bd-ad97-ca636a90acda",
        "cursor": {
          "ref": "c37623cc-13f9-46f1-97be-150b3097f8aa",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "787458a9-f41d-4546-8e64-183f9de05525"
        },
        "item": {
          "id": "3b13755f-d04f-49bd-ad97-ca636a90acda",
          "name": "did:invalid"
        },
        "response": {
          "id": "b0229064-42ab-4045-9c1e-dd2504ba1ec1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1042,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3b13755f-d04f-49bd-ad97-ca636a90acda",
        "cursor": {
          "ref": "c37623cc-13f9-46f1-97be-150b3097f8aa",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "787458a9-f41d-4546-8e64-183f9de05525"
        },
        "item": {
          "id": "3b13755f-d04f-49bd-ad97-ca636a90acda",
          "name": "did:invalid"
        },
        "response": {
          "id": "b0229064-42ab-4045-9c1e-dd2504ba1ec1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1042,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "63dfd16b-6181-4206-a135-7b94b1928547",
        "cursor": {
          "ref": "125ee286-0546-4722-a70e-278b9e8dce62",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "38f0fcfd-9348-40bd-9e56-be686eaa12bf"
        },
        "item": {
          "id": "63dfd16b-6181-4206-a135-7b94b1928547",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2b216dcd-551a-463e-a92e-3037cdd55c1c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cddc91d8-b9e7-4281-8750-e4eb65d1c18c",
        "cursor": {
          "ref": "a7e7eb31-c68b-44d4-92c1-38985dba52e7",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "85ca61a2-5c8a-4669-821b-db08f249a3ce"
        },
        "item": {
          "id": "cddc91d8-b9e7-4281-8750-e4eb65d1c18c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2432fc62-b317-457b-916f-81dcda207d1c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 74,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b506b2-6605-4170-906f-41d8feedf52c",
        "cursor": {
          "ref": "92cd2cb4-312a-4b9e-b984-a3f3611290ed",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e9b7b7ea-118b-40f3-a198-45eede66df5b"
        },
        "item": {
          "id": "d9b506b2-6605-4170-906f-41d8feedf52c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "aab85f22-67c2-4919-b500-890814f4f574",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "85684c28-fd95-4d18-874b-d77d7f2a530f",
        "cursor": {
          "ref": "c2d0de0c-f08d-4bb3-8b6f-b9ab18e19590",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7cebe62a-b7af-476d-a8f5-80f3a5143459"
        },
        "item": {
          "id": "85684c28-fd95-4d18-874b-d77d7f2a530f",
          "name": "identifiers"
        },
        "response": {
          "id": "7218f4e3-9534-4ff0-bed9-ffa564138326",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeec853e-517a-457b-a74d-2013eb9d6249",
        "cursor": {
          "ref": "8b9cde8e-079b-45b8-8dec-818ea39241e2",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2e7af493-2ed1-4f03-b669-08035700c257"
        },
        "item": {
          "id": "eeec853e-517a-457b-a74d-2013eb9d6249",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "916dea19-1651-4a25-a27a-d9e6af46cf86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 465,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0976f429-6bda-4bf1-b5e7-f2a15b379cd4",
        "cursor": {
          "ref": "5eec1220-c15d-47f5-8117-9b384f353a4b",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "219ca458-1aa1-400a-aab7-a6d902d4214d"
        },
        "item": {
          "id": "0976f429-6bda-4bf1-b5e7-f2a15b379cd4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "911d0292-ac31-49fb-90f9-087506939afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c02adec-cafe-4afa-9042-134d51e40d8a",
        "cursor": {
          "ref": "326022a7-4469-4075-8a24-35ea0121b327",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8f549f70-25db-4d80-81cd-6e9be0a27b4c"
        },
        "item": {
          "id": "9c02adec-cafe-4afa-9042-134d51e40d8a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8ab5c410-edb9-4d75-8bce-3a0094dc0246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e286774-d705-4baa-8d13-856a4ac2e4bd",
        "cursor": {
          "ref": "6a3f0e56-cb55-45a4-b579-8c9844b034e8",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "73bb630d-cf8c-409c-9c3c-b68a1906e8aa"
        },
        "item": {
          "id": "4e286774-d705-4baa-8d13-856a4ac2e4bd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f3029543-7453-46c3-a311-1da5518702b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37adf59d-8cef-4729-ac6e-7ec51d4d697c",
        "cursor": {
          "ref": "c8c4dd21-f545-4d57-a620-1312b5d3acdc",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cc0a565e-7a2a-4610-85ef-f896ae25ab56"
        },
        "item": {
          "id": "37adf59d-8cef-4729-ac6e-7ec51d4d697c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7fe8210a-5f66-4dd2-8e9d-abe98b1582c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958c4912-2487-41f8-8af0-4ec8a8e361ea",
        "cursor": {
          "ref": "86476391-6edb-4353-aa30-60b1f1babd01",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9420e360-86da-4af0-a671-4415749a41dd"
        },
        "item": {
          "id": "958c4912-2487-41f8-8af0-4ec8a8e361ea",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "14b5c78a-f8e7-4a06-aa64-80f2726cc98d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2aac53-5b75-499e-b2b6-2f040bdc77d4",
        "cursor": {
          "ref": "53727137-c58e-4359-995c-7d72dad61768",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1184d9d7-4e67-4af8-8cab-f26d7dabfc1b"
        },
        "item": {
          "id": "5e2aac53-5b75-499e-b2b6-2f040bdc77d4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9caad7bd-4193-4d49-bede-f9ba0e76177e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ccedce-cccd-44fc-b2ad-4cc1ed9e75dd",
        "cursor": {
          "ref": "4651e658-6096-49b7-a106-1ca27cd3deeb",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "88b2dcfe-1da1-4807-aabb-1fb1ad84bbb1"
        },
        "item": {
          "id": "a4ccedce-cccd-44fc-b2ad-4cc1ed9e75dd",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "341d7342-c6b3-4a3e-8108-00fd0167bc7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aafe3413-cc34-46f9-9863-e1ab4a7f4d02",
        "cursor": {
          "ref": "b1652748-6d4d-4f85-848a-47717f260a66",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e020a913-1d24-4da7-925c-40f1c1f967d2"
        },
        "item": {
          "id": "aafe3413-cc34-46f9-9863-e1ab4a7f4d02",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a190df7b-4ef7-4cff-bab5-727a3ff5a238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a03c5188-bc67-4b43-b861-882ea471dc75",
        "cursor": {
          "ref": "de4c3599-8afe-4c85-819b-5caa62f8d553",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ae29f8de-f022-477c-9632-0c21f7fa6607"
        },
        "item": {
          "id": "a03c5188-bc67-4b43-b861-882ea471dc75",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "80f12f12-1f2d-4307-ae64-4910e14327fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6e1b24-1d14-4c0a-9b01-2730569567f4",
        "cursor": {
          "ref": "f70b5f0c-06bf-4b17-b82a-613c47aa8aaf",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "70f64819-93fc-4aa2-b5b9-cfe882ed1a36"
        },
        "item": {
          "id": "cc6e1b24-1d14-4c0a-9b01-2730569567f4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a3781ce3-00c0-4bc3-9a1d-fa8f43844fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c08e65c-a5f3-4541-985d-9ac677761e82",
        "cursor": {
          "ref": "5f073763-72c1-4b35-8242-6f6238d852c8",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e55a4d9a-be12-4cbc-95dc-57ef3f0c879f"
        },
        "item": {
          "id": "6c08e65c-a5f3-4541-985d-9ac677761e82",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "47f6e56f-f7f1-4c44-a7e1-659d22b7c195",
          "status": "Created",
          "code": 201,
          "responseTime": 892,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "78793930-96a7-405d-97d4-7d4d0fc67dd1",
        "cursor": {
          "ref": "f34a38cb-409e-44dc-8f75-33bf7151e931",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "59640676-d5c7-4b89-875c-329c50e6173b"
        },
        "item": {
          "id": "78793930-96a7-405d-97d4-7d4d0fc67dd1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ffc2ea05-697e-43b2-9d74-0d003aaf61ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3390688-c5e6-4a99-a1f1-124a167e034a",
        "cursor": {
          "ref": "facfa643-a08d-411c-839c-3dbcaf1e9066",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f4c12182-404b-4715-9f37-337aa7acaa99"
        },
        "item": {
          "id": "b3390688-c5e6-4a99-a1f1-124a167e034a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ddb65188-8565-482c-a50e-5577ff252d1c",
          "status": "Created",
          "code": 201,
          "responseTime": 7492,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "d9fbaa4b-9ed9-49a7-9aa0-f1da9170d562",
        "cursor": {
          "ref": "2dc5cfd9-9d34-41a6-ab21-4fdcaf4f44da",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a2d1fc2b-276e-4c1f-9448-4940b4d0683b"
        },
        "item": {
          "id": "d9fbaa4b-9ed9-49a7-9aa0-f1da9170d562",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "96c0ca97-ca8b-40d3-b745-b1a81b5fdb5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b52088-4b5f-4e5c-a418-137cf89d41b9",
        "cursor": {
          "ref": "30f495e8-93fe-4981-babb-c9b3a3298111",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b031308a-16e7-4452-80d6-044df0c4f1f0"
        },
        "item": {
          "id": "68b52088-4b5f-4e5c-a418-137cf89d41b9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5cc1af57-0512-43fb-9a67-9cdae8902bf6",
          "status": "Created",
          "code": 201,
          "responseTime": 3284,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "b517fc1e-76cd-456d-b935-bf9392f94d5d",
        "cursor": {
          "ref": "8e7dea88-9d39-4645-b871-690fbd553158",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "fab3d9dc-023b-4142-9a34-285ebfd47a1e"
        },
        "item": {
          "id": "b517fc1e-76cd-456d-b935-bf9392f94d5d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "351044ce-d0a8-40b4-be17-5765051883a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf5f475-2405-46d9-aa8e-72c88c698e8e",
        "cursor": {
          "ref": "f183c334-ed36-47de-b14d-2417f0150e20",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4804e79d-723f-42fa-afe5-725ba86b24f8"
        },
        "item": {
          "id": "2bf5f475-2405-46d9-aa8e-72c88c698e8e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "67e6252a-51a3-407f-9b17-afb8a4ad0dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8040920b-d8ed-413f-bf94-8f3ca19e2791",
        "cursor": {
          "ref": "d6a47625-0949-4607-8703-039e886df451",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c42a6a07-4a6f-4c9d-9414-1ae4fa3d5adf"
        },
        "item": {
          "id": "8040920b-d8ed-413f-bf94-8f3ca19e2791",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0b73b4e9-8895-4ead-96f1-0325fdc5726f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e137821f-4a87-48c5-b653-acc5fd18139d",
        "cursor": {
          "ref": "0ebfff40-efdf-4171-bb52-06235a71476b",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2810547b-5a7a-4239-ad9d-54d6a0c5b236"
        },
        "item": {
          "id": "e137821f-4a87-48c5-b653-acc5fd18139d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "409ed558-5943-4b21-ba26-b43647b5f0f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cffb4c50-32cc-4258-848d-8835dcb3ddb7",
        "cursor": {
          "ref": "4f9db37d-0849-4de5-be13-9a856a8aa674",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "031cfec1-9a1a-42f7-9839-0afe9d270ee3"
        },
        "item": {
          "id": "cffb4c50-32cc-4258-848d-8835dcb3ddb7",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7d19653d-c042-45bb-b34c-45cf37d061bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38db57be-49e9-49fc-afae-cc90522db964",
        "cursor": {
          "ref": "b3683b04-2bc3-4955-9068-6c43c9d9b699",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1636d17f-0f6e-404d-b98e-8d91d7e65788"
        },
        "item": {
          "id": "38db57be-49e9-49fc-afae-cc90522db964",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "78248ce1-ff98-4bae-83c3-f5d7f6671977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb2af3e-d4c9-404f-8342-062f7a429ef8",
        "cursor": {
          "ref": "3c4b1a27-63db-4c0d-8fcd-4daf718d5d23",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "469ee504-dbb2-42d7-ab58-6aa2c03845ed"
        },
        "item": {
          "id": "eeb2af3e-d4c9-404f-8342-062f7a429ef8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "06db748e-167b-45f3-a997-10612a6589fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec28ba9-4358-4f39-be92-dae181176d09",
        "cursor": {
          "ref": "e9f9063c-2f8f-49c0-a212-dc1dc762a36f",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a40cc53d-ba46-43f4-97f9-ef718c6cd9e6"
        },
        "item": {
          "id": "dec28ba9-4358-4f39-be92-dae181176d09",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6d409a17-bb04-424a-ad26-9c088cf76320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb2c589-46ec-4656-9763-e6adc5265736",
        "cursor": {
          "ref": "26ddbe0b-1f0d-4bb5-9a7f-81f048f82ef7",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9c0e9ead-fbd0-482f-9fef-9700fdc1d92c"
        },
        "item": {
          "id": "1bb2c589-46ec-4656-9763-e6adc5265736",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a1baf24d-327c-4eae-9158-9effbf2ba983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a43a54-9ac5-4612-81c9-cd6e333e8d9c",
        "cursor": {
          "ref": "05a06b76-821a-4566-85df-a6ad084ad819",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3a3604eb-9f07-426d-aa80-9edd73ac2222"
        },
        "item": {
          "id": "72a43a54-9ac5-4612-81c9-cd6e333e8d9c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d82cfdf6-b957-493d-8a20-9daede861b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c8713d-8fa4-4b3f-9e53-c7874215b944",
        "cursor": {
          "ref": "ecc413bb-9bc0-4d1d-8612-0378eb5a8f82",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ab94abdf-e440-467d-904f-cb62bec2fa0f"
        },
        "item": {
          "id": "f4c8713d-8fa4-4b3f-9e53-c7874215b944",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2e292bb6-6625-4f4e-86cb-c562eb5215bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019c7645-deb5-4472-b471-fbbc9195717b",
        "cursor": {
          "ref": "d82190e3-699e-4e6d-a542-f2f5c85e2e1c",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "03759fb5-6d9a-4592-9793-1fbb029c25ae"
        },
        "item": {
          "id": "019c7645-deb5-4472-b471-fbbc9195717b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "89480f6f-2331-4575-a288-f434524386d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6986ed-23ca-4ff0-aeeb-173f76b37129",
        "cursor": {
          "ref": "8bad3258-3cff-4b59-9e4b-67c88ea36af4",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6400088a-f7ab-4994-be09-24b87f025cec"
        },
        "item": {
          "id": "0d6986ed-23ca-4ff0-aeeb-173f76b37129",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b47ca9bf-0305-4e09-8c66-e9db603b921e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c7ce791-0879-448d-b1de-e3a4019ecd11",
        "cursor": {
          "ref": "c010763e-0b80-47d4-add7-1d1967cfeb11",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4323984f-c592-4683-989e-ca00dc7eb8e6"
        },
        "item": {
          "id": "4c7ce791-0879-448d-b1de-e3a4019ecd11",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "55e400db-0c46-4f13-947e-0df4288170d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5036c71d-0ace-4613-8387-380e1ec252de",
        "cursor": {
          "ref": "8cbef74a-b0a3-437c-a00e-eb0b9316d900",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "40f5a615-6e43-4c5b-836d-40053b9ea6b7"
        },
        "item": {
          "id": "5036c71d-0ace-4613-8387-380e1ec252de",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "553bc4ef-1e32-4a82-b9c8-42afe6f05d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b895776b-f065-4319-8568-d6c45448d46d",
        "cursor": {
          "ref": "9314c81a-fd13-4d7b-ac5d-237c12548b3d",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3924135a-802b-444e-824a-d823b9d45f5e"
        },
        "item": {
          "id": "b895776b-f065-4319-8568-d6c45448d46d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f7b2ef73-64e9-4f3b-962e-54f97c58a1b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21b4561-d3d3-4513-81a2-4480043e069a",
        "cursor": {
          "ref": "1e0567a1-9c65-48f9-b34e-9cd0b49857ff",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f5d5329a-34de-48ab-98be-2e003b21ede6"
        },
        "item": {
          "id": "c21b4561-d3d3-4513-81a2-4480043e069a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f3a92ee8-0041-4222-a9ad-891a1b9b27d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530fe14b-11d6-4f4a-b54b-7a93afcaf924",
        "cursor": {
          "ref": "4fd328c9-6566-4ddf-91b1-833d2865b746",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8880ad53-78f5-4902-9085-45225817a5e1"
        },
        "item": {
          "id": "530fe14b-11d6-4f4a-b54b-7a93afcaf924",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ae45e7f1-f6cb-41f7-9a86-459f9e036f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9422fc6-4ac4-4f3c-8735-3898f9973b84",
        "cursor": {
          "ref": "1690fd17-b988-4f4b-8a85-7bd232fb8c75",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "25645c28-9785-41bf-b35a-3bbe03019833"
        },
        "item": {
          "id": "a9422fc6-4ac4-4f3c-8735-3898f9973b84",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9a03f4d9-f772-42b6-a80d-73371cf1e069",
          "status": "Created",
          "code": 201,
          "responseTime": 2879,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "40fde0c0-c5a6-4905-b880-b9ce3a56b4c9",
        "cursor": {
          "ref": "54d5ec65-9703-4543-ad30-343fca4f2102",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "301fb3f8-e5be-41b2-8340-25b21c625998"
        },
        "item": {
          "id": "40fde0c0-c5a6-4905-b880-b9ce3a56b4c9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "bbff72fd-14b4-4e04-b2d0-61b0aacb5d02",
          "status": "Created",
          "code": 201,
          "responseTime": 2854,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5aef0ea4-3495-4084-adf4-d4a31512761f",
        "cursor": {
          "ref": "ac4c5019-460a-413c-8bc5-6dde308af174",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "870fb366-163f-40bb-922e-28f5320f6a5f"
        },
        "item": {
          "id": "5aef0ea4-3495-4084-adf4-d4a31512761f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "11052000-8d25-4109-877b-b783e7917b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2464b2db-40a0-49f7-83d0-970dd4e3baad",
        "cursor": {
          "ref": "ded99a63-74bd-459e-a38e-b071d0e27863",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "80421819-ba60-4ead-8fb1-b1dc43c28740"
        },
        "item": {
          "id": "2464b2db-40a0-49f7-83d0-970dd4e3baad",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "adda6215-0363-401e-bbb5-12b314b42de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7296629-f4cd-49ec-9d74-aafbd3c9eb80",
        "cursor": {
          "ref": "cb0bf2ca-92fb-4da4-9239-86f0a04a96c7",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "256c93e4-4fb1-4291-9606-b263a617eafd"
        },
        "item": {
          "id": "a7296629-f4cd-49ec-9d74-aafbd3c9eb80",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0e5acfd6-a142-4f60-b7c8-fea3d977baea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2317176b-e44b-439a-bd2e-48c6f16ec9e1",
        "cursor": {
          "ref": "811322c1-9f44-43e0-877c-a159abcc9bb5",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "293bb0a6-d87f-404b-a1b1-86dd68bce023"
        },
        "item": {
          "id": "2317176b-e44b-439a-bd2e-48c6f16ec9e1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "980d3cc8-6884-4ae7-8355-32de7f7a5403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c69ddec-13de-4ee6-9f11-ff7751cf7557",
        "cursor": {
          "ref": "1deca1fe-1cf2-47ac-bc41-14a30404393d",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b3a8b03f-2655-40ca-b356-6c7185cd9426"
        },
        "item": {
          "id": "9c69ddec-13de-4ee6-9f11-ff7751cf7557",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "da028ed5-d7be-4b33-b6c9-763a3bb4c433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1baf048d-6f01-4512-99d0-e9f2b011dfa5",
        "cursor": {
          "ref": "05af60a0-4c0b-4e1d-87e2-9529166ae9a0",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d7897500-3151-4ded-bcdc-d71827fa6a46"
        },
        "item": {
          "id": "1baf048d-6f01-4512-99d0-e9f2b011dfa5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6ebfb594-6789-4d97-be3f-f235eb6ee16f",
          "status": "Created",
          "code": 201,
          "responseTime": 2742,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "28f28fd6-22f5-424f-9c0c-e2730c41cbdd",
        "cursor": {
          "ref": "6f9921ba-3614-4791-95d3-6ff5057fd5a2",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f4a67b67-c7a1-45e6-a80f-f23abb695878"
        },
        "item": {
          "id": "28f28fd6-22f5-424f-9c0c-e2730c41cbdd",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a2288220-135e-4688-8b61-4ac76b8fb277",
          "status": "Created",
          "code": 201,
          "responseTime": 2714,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "383c6fe6-938c-4368-8d5f-74c765239ddf",
        "cursor": {
          "ref": "b2b40ad7-2d07-4467-adfc-14b363770459",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "813efdde-1f3a-4945-9011-99d6844781d5"
        },
        "item": {
          "id": "383c6fe6-938c-4368-8d5f-74c765239ddf",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "29820753-5a3a-4b00-bdac-c1f1a3ffb6fe",
          "status": "Created",
          "code": 201,
          "responseTime": 2682,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "c1717118-e0f2-462d-a144-4b82ac050106",
        "cursor": {
          "ref": "8d89d88b-90aa-4b7b-94a8-64a8d55f5576",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8bbbe91a-ab55-4ff4-93b8-c3f14856eae1"
        },
        "item": {
          "id": "c1717118-e0f2-462d-a144-4b82ac050106",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "deeeb8fa-f6b5-47bc-bc61-6f655ad02437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665c73f4-b488-4d03-978d-125329a6c61c",
        "cursor": {
          "ref": "af6713fe-0058-4177-a5ba-108c46c20677",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "677829ac-55cd-40da-bab7-31df12d8d76c"
        },
        "item": {
          "id": "665c73f4-b488-4d03-978d-125329a6c61c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b5cd48b9-25cd-43a0-99c2-913d275fb511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb96ac51-51b4-4ccb-a7d9-0111bf10e412",
        "cursor": {
          "ref": "d355c9f5-ceaa-4243-839a-8ae40b2f0087",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "09492807-4add-4033-b4b2-b6f0614cde46"
        },
        "item": {
          "id": "eb96ac51-51b4-4ccb-a7d9-0111bf10e412",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3adb8375-4d1f-4a00-a5cf-9db69390aa39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d33d284-10b3-4f63-a116-d97b1d628bf4",
        "cursor": {
          "ref": "72d0acff-f2d4-4b9f-9d2d-31fb604df391",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1e384e98-b846-4e15-b57c-a402bda22b50"
        },
        "item": {
          "id": "0d33d284-10b3-4f63-a116-d97b1d628bf4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c44ba0cb-3754-4a31-a7f3-72cfcc051c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3398a2-a875-4d3e-a773-c9aa7803074a",
        "cursor": {
          "ref": "4836d967-051d-4884-9d94-4a043f8f33e9",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "89a02a81-dcf7-4b86-becb-a8468c1de0c3"
        },
        "item": {
          "id": "cd3398a2-a875-4d3e-a773-c9aa7803074a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "3af1fc63-956f-4e59-8ecf-f175511f9ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "676bf4db-5d6b-4d32-8ff7-ec893cb0c54e",
        "cursor": {
          "ref": "3a3a7e89-c9e8-4fe3-8ba1-d3119418eaba",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e7ab578f-fb7e-4506-b323-8a8969273d12"
        },
        "item": {
          "id": "676bf4db-5d6b-4d32-8ff7-ec893cb0c54e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "64ce59a4-b338-432d-9243-12185e5b482a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2aca3d-3b29-4d8a-8743-570e8fdeb8b6",
        "cursor": {
          "ref": "8bab6c68-c0ee-4845-99cb-24b145f65d23",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3f37efd5-cba1-4276-94be-f5c703009c9b"
        },
        "item": {
          "id": "7d2aca3d-3b29-4d8a-8743-570e8fdeb8b6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "25bd8a91-6cf8-4943-bebd-bdd24382553e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a440b86-829d-4ebf-aff7-56ad95da21c1",
        "cursor": {
          "ref": "005dc36f-812c-4c13-8445-9c53e8c5df90",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "59361b95-d9f3-4497-9459-ab5afe41b653"
        },
        "item": {
          "id": "3a440b86-829d-4ebf-aff7-56ad95da21c1",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "15680b2a-5fe1-4230-a52f-a0c38c2c54f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72355270-a1cd-4676-897e-d3647133b7b9",
        "cursor": {
          "ref": "7dd4e415-f145-4926-8828-163ea40c2e29",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a6b752dc-99fb-4040-a79a-a898618dd6c3"
        },
        "item": {
          "id": "72355270-a1cd-4676-897e-d3647133b7b9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e3d99453-1982-4da5-8065-fdf85f3ba676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c292499c-dc29-4763-8598-bbdd356de43a",
        "cursor": {
          "ref": "732e9b79-3932-4a66-b396-1d83b36fadf3",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c07e053d-6b92-462b-972a-590191630a52"
        },
        "item": {
          "id": "c292499c-dc29-4763-8598-bbdd356de43a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e91ce8ab-96f1-4266-af26-8802ba8270cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a2a462-029c-4646-a373-896408bd5d3c",
        "cursor": {
          "ref": "d2c01794-6aeb-46d1-b6e7-7980b7469015",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "eaedfbc7-4c24-44f7-b1a0-137049e9c826"
        },
        "item": {
          "id": "17a2a462-029c-4646-a373-896408bd5d3c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "290d2c44-8749-4ce9-aac5-58f1131fad83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f874a0cd-7926-4f43-8db3-3fa9da1b7b19",
        "cursor": {
          "ref": "05e3f698-ce8f-4150-a94e-1ac6fd522d28",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "83e1f8bb-e822-46d1-ad9c-98940d4457be"
        },
        "item": {
          "id": "f874a0cd-7926-4f43-8db3-3fa9da1b7b19",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c744927f-9c27-425e-a158-cb0cb0f7c0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a74baa3-f760-45dc-b38d-652ecdbc32e6",
        "cursor": {
          "ref": "3fbb174d-144c-4390-aaf0-30f7adbebc0c",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7883616b-354b-4224-8cf2-42710d9ae05a"
        },
        "item": {
          "id": "2a74baa3-f760-45dc-b38d-652ecdbc32e6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fac826fc-d5bc-4f24-b41d-268120a7b194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd6e761-846a-435a-b6eb-f8d349e7fbd7",
        "cursor": {
          "ref": "7e422059-761f-4b10-9b5f-cf304f94536d",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "cad5a132-51ad-4802-a277-424cf8bdc32b"
        },
        "item": {
          "id": "2bd6e761-846a-435a-b6eb-f8d349e7fbd7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d75ea388-bc1b-45e2-aa8a-6e8d6a0d3c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e523f1f5-b40e-4977-873f-b13e0e7258cd",
        "cursor": {
          "ref": "a797998c-8a8f-4518-a2e4-285098c5407a",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ba4eca0d-c910-4026-b13a-d40eaaf19120"
        },
        "item": {
          "id": "e523f1f5-b40e-4977-873f-b13e0e7258cd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3eed88e8-c7ba-4539-a575-d6a7dd9440ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad27d93-adcf-4c11-8e31-70c92e5c3557",
        "cursor": {
          "ref": "fece4c61-1bf7-475f-8481-ecd5154f395a",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8dc761b4-164c-4e19-a15d-757c97dc6ef8"
        },
        "item": {
          "id": "cad27d93-adcf-4c11-8e31-70c92e5c3557",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5eeacfb9-0774-47a1-a111-9e20f01fb3d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fee53e1-57c7-4edd-ac24-af875b4a9ae1",
        "cursor": {
          "ref": "067bd37e-8e7d-4257-bf64-573771f973a6",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7b3c9fee-cad9-45b7-bc4b-8a32180938d2"
        },
        "item": {
          "id": "7fee53e1-57c7-4edd-ac24-af875b4a9ae1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c06c9238-f60c-4e64-b144-02d8cdef60c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e5b53c-3fd0-4c24-8f98-da507e42abe3",
        "cursor": {
          "ref": "bd5266f6-c6b8-44ca-86bd-8e0a253c6020",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7b127f87-95d6-4126-b5be-894833c4c542"
        },
        "item": {
          "id": "a2e5b53c-3fd0-4c24-8f98-da507e42abe3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b0c868b4-7003-4a8d-8f71-28dd72e90bbf",
          "status": "Created",
          "code": 201,
          "responseTime": 2187,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "62e6ebb3-b106-4eeb-a13a-5916ec64ba45",
        "cursor": {
          "ref": "20c26934-91b5-4f5d-9be4-eb73f4fa20f0",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ead82d86-875c-4c98-b7d0-c4e238c48fe6"
        },
        "item": {
          "id": "62e6ebb3-b106-4eeb-a13a-5916ec64ba45",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d3e154a5-657d-4a9f-b36d-2a44b328df52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5921dbc0-b3dc-402a-8a25-66f0dac0c799",
        "cursor": {
          "ref": "eec3f128-632b-4289-bf8e-5824f7d87f0e",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "98163ca4-46e1-4938-ba9e-12bd2500a5c4"
        },
        "item": {
          "id": "5921dbc0-b3dc-402a-8a25-66f0dac0c799",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1a95ac09-d545-4124-8b1d-784c84f5e50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a53573a-34f5-4cf7-8c80-bc47ecce8844",
        "cursor": {
          "ref": "498ef7b0-e6df-47b0-b413-9047a8fe6df9",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9d6d9fa8-e311-4b5a-a105-c42aeca24d78"
        },
        "item": {
          "id": "9a53573a-34f5-4cf7-8c80-bc47ecce8844",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7d26b60c-7729-4e4c-9f8d-2cf90bf31fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ccc8fdd-f658-4ff4-b54b-5026e841ab7d",
        "cursor": {
          "ref": "ee97d6b3-9d2b-4e26-a4d4-50fba86de93a",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6a22bb9f-3698-4535-878e-ee24b69cc0c2"
        },
        "item": {
          "id": "8ccc8fdd-f658-4ff4-b54b-5026e841ab7d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fc933e7a-15f7-4d9e-8089-f9da18048e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103ab3ea-4005-4b1a-8029-8231fa488a92",
        "cursor": {
          "ref": "7c4e3821-752b-4e6d-868c-ef42f7e10683",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ebdec9c7-0679-4705-9a52-ba8512b41814"
        },
        "item": {
          "id": "103ab3ea-4005-4b1a-8029-8231fa488a92",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bb868b6c-0ce4-4eb4-8e77-0fa40a03d921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a51dd0-1c70-45b5-a411-89c1c0611f82",
        "cursor": {
          "ref": "80b61d13-fd78-4484-a2c8-112ac7df38f3",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6ea6bfb2-3b73-4b60-8645-1c0369ecd35e"
        },
        "item": {
          "id": "60a51dd0-1c70-45b5-a411-89c1c0611f82",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b09adecf-d8c7-4517-addc-3b3955ce4f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd93e12e-6515-450f-840d-41f2d2315ed2",
        "cursor": {
          "ref": "57af853a-86dd-446c-a41d-4b63121894a0",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "369e0c73-1299-4e59-b64e-b29dab2be05e"
        },
        "item": {
          "id": "cd93e12e-6515-450f-840d-41f2d2315ed2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4cc968d4-7387-4bb3-a7eb-15ee1ec440c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc374dea-ec38-4708-bc44-5ffcdfacd017",
        "cursor": {
          "ref": "4d4fc663-0af2-4dc4-8d6e-060f06dd1ebb",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "61c8ffb8-41b4-4a4e-9d45-c3c4769b5ffb"
        },
        "item": {
          "id": "dc374dea-ec38-4708-bc44-5ffcdfacd017",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8d16e3f6-84c7-46a1-8ae6-299b511f4dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b638e3-fe62-4737-a107-62d3eb3651af",
        "cursor": {
          "ref": "9b30b52e-8e6e-4db6-8227-b1df6367094f",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7a4d1fe3-a2e6-4bd4-a90b-114394ca8294"
        },
        "item": {
          "id": "41b638e3-fe62-4737-a107-62d3eb3651af",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8047bfe3-20e6-4c9a-bc43-810cbfade4b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c6a3d7-10ea-4ec2-946b-c0cb62f11db3",
        "cursor": {
          "ref": "33c7cb99-a83e-4e2d-bd79-6c66c037aa66",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ba1b9c6d-b337-4bd6-a1bd-134838aca2bb"
        },
        "item": {
          "id": "f3c6a3d7-10ea-4ec2-946b-c0cb62f11db3",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3101fd59-770a-4ece-a3e4-7b93cf565a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f44952b-c3db-4e07-9601-32342e2570bf",
        "cursor": {
          "ref": "125a48e1-d35e-42ce-bc8f-2024526586e2",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "decf3ea9-8354-4aa3-8ab0-1300b84f7145"
        },
        "item": {
          "id": "8f44952b-c3db-4e07-9601-32342e2570bf",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a419c732-31c8-4e8f-a746-4134c6891aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57276f90-49c4-49ae-a8bc-ccde2d7f23cd",
        "cursor": {
          "ref": "2e4de625-3ef8-470f-a5c8-bec92ada5a6d",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6f348daf-174d-465a-be00-32f8c30375fb"
        },
        "item": {
          "id": "57276f90-49c4-49ae-a8bc-ccde2d7f23cd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5f589e05-5658-4754-af00-97eb5bd1742b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0139b6b-4dd8-4350-9ecd-fa2270c50328",
        "cursor": {
          "ref": "11259462-b225-40ed-91ed-2ee3b34beb24",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "083dd37e-3e64-41bc-b07e-b96922ec7af4"
        },
        "item": {
          "id": "c0139b6b-4dd8-4350-9ecd-fa2270c50328",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c07ce944-9614-46a7-b2bb-caf692bd3f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ec4da8-111a-40f3-be35-f764cc0b0bca",
        "cursor": {
          "ref": "2f8129ec-2c0c-485e-b1fb-45654e64cc15",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4ad29e39-d513-48a8-8f21-dce3cdfe41dd"
        },
        "item": {
          "id": "d5ec4da8-111a-40f3-be35-f764cc0b0bca",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3adff415-3c67-4d2f-b662-1b8579786e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb5346d-4649-4306-a098-dd1e158242ea",
        "cursor": {
          "ref": "9615b1db-e48a-483d-83b5-ac4d39fd9490",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "af584165-7008-41c9-893c-4422b2cdde0c"
        },
        "item": {
          "id": "abb5346d-4649-4306-a098-dd1e158242ea",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8881596b-adbb-4552-ab4c-22e20bbda947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab5ed55-84f1-46bc-bcc0-a780c517b900",
        "cursor": {
          "ref": "1066ecaf-b2f1-413a-901b-c11dbf6176ba",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "cf8ced49-397b-4da6-a5d3-80b831607240"
        },
        "item": {
          "id": "2ab5ed55-84f1-46bc-bcc0-a780c517b900",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "64fd916e-2711-4b60-af5b-4247185c2624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ae6f3e-c827-4634-8f3e-896ede49f7d4",
        "cursor": {
          "ref": "d282e365-ffb5-4dd7-8036-91a73a20d17a",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8849c73e-1a06-4c9a-8c6e-a84c71fd19dc"
        },
        "item": {
          "id": "b8ae6f3e-c827-4634-8f3e-896ede49f7d4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b52874c7-13f2-469a-af51-2db3547ee3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439d4d37-26ce-4ff2-8f94-b80a39a8565c",
        "cursor": {
          "ref": "3f41a07c-63a0-4ced-8496-fcb91ff30284",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "480d9fda-dce6-4ae0-aee2-1f65ee0e831a"
        },
        "item": {
          "id": "439d4d37-26ce-4ff2-8f94-b80a39a8565c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "cac603ff-6cca-43ec-add9-085e33e0cf5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd35ceaf-bb03-4f54-807c-24036eeae9af",
        "cursor": {
          "ref": "ad6aa1ab-75f6-4056-81db-ac130ad2f403",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2f06481d-1317-443d-882f-050bd58e8b59"
        },
        "item": {
          "id": "dd35ceaf-bb03-4f54-807c-24036eeae9af",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "187e051d-c84f-4700-a416-6df37731f306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99bf9ba-aa50-47a2-8602-fed001601145",
        "cursor": {
          "ref": "af8b89c6-e4a7-4bb9-bee7-cdf212a095c7",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3ee71c0d-36be-4ea1-8070-c5c7d4e2a68d"
        },
        "item": {
          "id": "c99bf9ba-aa50-47a2-8602-fed001601145",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "acdf6477-64cd-49f0-bbf8-856f6b2ddd63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85e17ca-d5df-4f44-99da-5f942f8792ae",
        "cursor": {
          "ref": "a52aef22-e339-476a-96cd-6084e35eaf81",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8aa49838-0657-4d9b-8630-db07cd45e7c4"
        },
        "item": {
          "id": "f85e17ca-d5df-4f44-99da-5f942f8792ae",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "21bb070f-b0a3-40ea-97e5-6760365102bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b1b121-15bc-4d92-851d-d952d8ccbf3c",
        "cursor": {
          "ref": "0e730738-3021-4a7d-80d9-a4e94c1d7ace",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ee04eeb6-61bb-4880-8aa9-879e269f7740"
        },
        "item": {
          "id": "73b1b121-15bc-4d92-851d-d952d8ccbf3c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e744eea2-f547-4582-8d54-ed5fde724f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b70a0d6-9ce7-47d4-a2b2-ec9d1e0e4b29",
        "cursor": {
          "ref": "5c71f739-c6f7-4c56-b5da-7be2f19545b3",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1d789897-42b8-4c3c-8e82-5d4bc7ed5e79"
        },
        "item": {
          "id": "2b70a0d6-9ce7-47d4-a2b2-ec9d1e0e4b29",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8ce57c17-cd20-4603-b5f6-51049d9ce1ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e3742d-c2b2-499b-8d0a-c3008f7a9da6",
        "cursor": {
          "ref": "8d9a7eb3-0164-4193-8564-c8358351199a",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "38cc31a4-6e34-423c-a828-1fb22ec19b60"
        },
        "item": {
          "id": "37e3742d-c2b2-499b-8d0a-c3008f7a9da6",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1063d059-ff9f-48e3-ae48-6dd7112f0015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c06822-defb-42f7-a5cd-00d3b20f1495",
        "cursor": {
          "ref": "6b8c158c-d59b-484b-b42f-9dcc29e66845",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "58565441-e660-4181-881e-d42641e19372"
        },
        "item": {
          "id": "68c06822-defb-42f7-a5cd-00d3b20f1495",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3e152075-dad5-499b-b627-f92f34102924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618ad8d9-31c2-47b8-864c-83fec23daf59",
        "cursor": {
          "ref": "4fbb9e16-5e32-463b-a146-228d1520523b",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9b29b9e6-8600-4621-84bf-38cfd8affa97"
        },
        "item": {
          "id": "618ad8d9-31c2-47b8-864c-83fec23daf59",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ead12d37-562d-44fa-8c91-6faff68f6b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e433b77-ceb3-41a8-aaa6-875c9c33cb7c",
        "cursor": {
          "ref": "9de1e0ee-1459-4f85-a134-1c899de504ba",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f1cd103c-0e3d-479e-b19f-5f6a963a2e76"
        },
        "item": {
          "id": "8e433b77-ceb3-41a8-aaa6-875c9c33cb7c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8e9b140e-436f-4041-a718-b8573eb9bce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a20984-d104-486b-8aa2-878780da9b77",
        "cursor": {
          "ref": "1ce8ebd0-9b9c-49a8-b8d5-5ccb9d33c641",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "20caadae-fe29-4496-b9e8-de86f1299241"
        },
        "item": {
          "id": "e0a20984-d104-486b-8aa2-878780da9b77",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "565c2c81-f27a-4bce-aebe-c9bff80b464e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8dbe07-f753-4407-871c-4ea24331daf0",
        "cursor": {
          "ref": "41de4b2e-492d-433a-b046-a2f5275255d1",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "78e5597d-8289-4025-b8d2-8248191ca0fc"
        },
        "item": {
          "id": "fa8dbe07-f753-4407-871c-4ea24331daf0",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f1d4ab15-34fe-423f-9baa-f503a2219810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba7dd98-5184-4ca4-9e8a-21f3ff359615",
        "cursor": {
          "ref": "8c0f7f47-09b3-428c-9c1a-58b52be692bc",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "940e6b70-675d-4588-a444-fafbd68f68df"
        },
        "item": {
          "id": "5ba7dd98-5184-4ca4-9e8a-21f3ff359615",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "78ea8419-da79-4029-aa80-c881712fbf80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bbdc65-2442-431d-bd3d-e87ba13a7006",
        "cursor": {
          "ref": "b2774cb4-5e37-498d-baf8-a7a27567bff1",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c85230ed-c7a2-4322-83cd-6eee4bcaa637"
        },
        "item": {
          "id": "d3bbdc65-2442-431d-bd3d-e87ba13a7006",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "67917827-bdf7-4c35-9297-94b7105b2fd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "e71f3be6-4d38-44e6-9813-509ac0c6c270",
        "cursor": {
          "ref": "3b5a159c-4ff3-4763-8c10-17e268d8f962",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "214ee2f7-bff6-4699-9d4c-0eacf2329dc7"
        },
        "item": {
          "id": "e71f3be6-4d38-44e6-9813-509ac0c6c270",
          "name": "credentials_issue"
        },
        "response": {
          "id": "68014dee-39d6-4f57-a6a5-d9a21ca1e484",
          "status": "Created",
          "code": 201,
          "responseTime": 2013,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d87ea6-6165-4920-9433-1f5108d94d9e",
        "cursor": {
          "ref": "c45274e4-f6c8-465c-8867-dab632e87023",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ece862ef-a000-49d8-ab22-02a20698d0b1"
        },
        "item": {
          "id": "f6d87ea6-6165-4920-9433-1f5108d94d9e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "39547a0f-00dc-479d-b52c-3023df88f8c2",
          "status": "Created",
          "code": 201,
          "responseTime": 2663,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "78015072-bf46-4dff-9958-8dbda56ebf84",
        "cursor": {
          "ref": "18fba1ca-e2e8-4367-a49e-5acb25fd96ab",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "45f284e1-5d5b-4c23-8fc7-6db6d1af6c7b"
        },
        "item": {
          "id": "78015072-bf46-4dff-9958-8dbda56ebf84",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "467a712d-67aa-409b-b6bd-8b4d49915e41",
          "status": "Created",
          "code": 201,
          "responseTime": 2381,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7655bd9-f627-4cb3-9f11-c922c75ddcf7",
        "cursor": {
          "ref": "7946813c-b3c3-47b8-91d7-ef9f42513a08",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "97a83b33-e15b-4b0c-9dfd-953c16d550ef"
        },
        "item": {
          "id": "a7655bd9-f627-4cb3-9f11-c922c75ddcf7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a499b31c-5d9d-4859-a4a4-87c25d2c915d",
          "status": "Created",
          "code": 201,
          "responseTime": 2652,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "21295115-0e68-4b30-8647-da9122879018",
        "cursor": {
          "ref": "24ce5331-23cb-4875-a480-04ffc325c780",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3abe982f-97ec-43ef-abe0-2902e87f781e"
        },
        "item": {
          "id": "21295115-0e68-4b30-8647-da9122879018",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "586d465f-ae3c-486a-8d3a-b782d8a478e2",
          "status": "Created",
          "code": 201,
          "responseTime": 2668,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-14T00:41:16Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-14T00:41:16Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "fcf8ed3d-1cdb-477f-a85c-d2f7677c0ae1",
        "cursor": {
          "ref": "b57d95af-9992-47ab-9bda-1cb9ef98e349",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d0f81bfb-a16c-4e1d-9cef-f11cac8b0dec"
        },
        "item": {
          "id": "fcf8ed3d-1cdb-477f-a85c-d2f7677c0ae1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2da0335d-d7c6-4281-aa82-c6bd9b556618",
          "status": "Created",
          "code": 201,
          "responseTime": 3562,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20617704-8576-43fc-a596-73d057b688ca",
        "cursor": {
          "ref": "c497764e-e50e-48f4-966a-363b598cae2d",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "07342ad8-8555-4587-af45-09ffda74213a"
        },
        "item": {
          "id": "20617704-8576-43fc-a596-73d057b688ca",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "81d04070-6cff-41e3-892c-8f8abd42e8c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab952b5-ca4d-4e88-95ae-8ba49a552421",
        "cursor": {
          "ref": "2bb0f791-b05e-4e22-9b7b-17264bef2697",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b4d144ba-5576-4402-b7e7-ebeb5c21b934"
        },
        "item": {
          "id": "aab952b5-ca4d-4e88-95ae-8ba49a552421",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "edec69ed-2761-4073-8ab3-d0ed4f395894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930a10b4-619c-4a4d-a21a-f547d546ec18",
        "cursor": {
          "ref": "cd5d6e93-1ed1-4605-ac88-f2ec0f55d806",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b4c22a3e-c8b5-4d35-a572-16e283075fea"
        },
        "item": {
          "id": "930a10b4-619c-4a4d-a21a-f547d546ec18",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "46814ae2-9a17-499a-a05c-7d62ff3564aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0348a871-da31-40ec-9739-1380daab3854",
        "cursor": {
          "ref": "dcbf4c61-5adf-44b8-b3ab-5cc7877dd596",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1b88d096-5a28-444a-a76e-9308784cc11e"
        },
        "item": {
          "id": "0348a871-da31-40ec-9739-1380daab3854",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ab9c9234-aba2-495a-b347-bf2d21c008f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14cdc91-9cd2-4307-9383-f751b8fe16d3",
        "cursor": {
          "ref": "7ccf20fa-2878-4fb5-a320-44d7f001745d",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9d60898d-ceb0-4328-bb17-10013a57f37c"
        },
        "item": {
          "id": "a14cdc91-9cd2-4307-9383-f751b8fe16d3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "60b759aa-550a-467b-b676-94e9c47f974c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47428130-fc77-4ae3-900e-34966fa67c16",
        "cursor": {
          "ref": "1ee8721f-16df-4f79-9422-8c8b93c850b5",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "56d50e98-45c6-4ff7-ab4f-29e3c92893aa"
        },
        "item": {
          "id": "47428130-fc77-4ae3-900e-34966fa67c16",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "351b2980-e47a-4069-9e6a-691e8b66828c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31f8373-d652-4853-97fb-26b9c5bf4645",
        "cursor": {
          "ref": "5ed83d42-47e2-4ec4-9fe3-cf03bfac7b48",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "37f9fa7a-8019-49da-8fbb-194ef11c8ace"
        },
        "item": {
          "id": "c31f8373-d652-4853-97fb-26b9c5bf4645",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "657eb3d6-3448-4996-8a99-539e0f26d6e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb14299b-08dc-489b-8fff-ff011d557cfd",
        "cursor": {
          "ref": "726d633d-ce14-46ea-9c01-9e4ae7c91b84",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "cd04db81-e9be-4daf-b73b-de8fe0dd54f6"
        },
        "item": {
          "id": "fb14299b-08dc-489b-8fff-ff011d557cfd",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a8496bad-d0a4-4932-adfe-61c0ab88c537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963be3ac-b8c3-4b9f-a2db-2bdb34d7e605",
        "cursor": {
          "ref": "9eb663ac-184a-43d3-a869-10918bc46dd6",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "387f9941-e807-417f-b313-69e5d3d51dff"
        },
        "item": {
          "id": "963be3ac-b8c3-4b9f-a2db-2bdb34d7e605",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3ced99bc-e464-48a0-9524-2370aacfd39d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9e6691-5ed3-4599-8b44-4d7c17fb65fd",
        "cursor": {
          "ref": "ba2d9ae1-fbc4-4ef6-9812-5865fd0b7573",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d97b7749-0927-4a8d-8382-6da62e1c840d"
        },
        "item": {
          "id": "1d9e6691-5ed3-4599-8b44-4d7c17fb65fd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1ebd39a1-39f3-4217-941c-3aa6c98484f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ca448b-be96-4889-aa6b-bd9ab1a391ae",
        "cursor": {
          "ref": "b3640098-fb65-4f80-8ab2-0b259a176314",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "997d0bb6-730a-4536-829d-8a290d6bb2ca"
        },
        "item": {
          "id": "d7ca448b-be96-4889-aa6b-bd9ab1a391ae",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "74ddef79-e542-4dcb-bd37-7c84be579f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec59d00-0f59-4454-a65f-8a7ac3eac494",
        "cursor": {
          "ref": "2be4ef2a-fd59-47ca-b321-755a3830ea6f",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ca6bae13-88fd-4c39-a00a-48e76090cac1"
        },
        "item": {
          "id": "dec59d00-0f59-4454-a65f-8a7ac3eac494",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e4699997-c66c-434b-b00e-370ae7dd605e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20490eb-8320-476b-a10f-26f8c3ef6297",
        "cursor": {
          "ref": "f199cbc7-d6ea-489b-8c2a-cad637957873",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d6ac92e7-35d5-4a44-a117-7529c018d5f0"
        },
        "item": {
          "id": "e20490eb-8320-476b-a10f-26f8c3ef6297",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4a88c923-ed13-46de-8b99-b62b85c1b26f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e61e2c-f9dd-4fd5-a7ad-d78a938e3a73",
        "cursor": {
          "ref": "8c51397d-a9ba-49f9-bce1-84f1ec257852",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ca9459da-fa18-40de-a69b-5b4bf4137c6d"
        },
        "item": {
          "id": "59e61e2c-f9dd-4fd5-a7ad-d78a938e3a73",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "11727ba0-a529-47ef-b555-92375b131735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66adc065-6707-470c-a381-37e59d347264",
        "cursor": {
          "ref": "adc889b2-8d5a-4133-86aa-3a4058d56f7d",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8dc4dc88-e1a1-4829-92d3-39fba945c346"
        },
        "item": {
          "id": "66adc065-6707-470c-a381-37e59d347264",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8baf4123-4ff8-4503-bf34-e12f4f78bea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd6094e-c0a8-4e19-87f4-5ec771e94470",
        "cursor": {
          "ref": "18a4809e-698a-4e58-835a-c8814d3359fd",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "264ac45d-fa3a-4770-9590-bbdd5c7d84c6"
        },
        "item": {
          "id": "0dd6094e-c0a8-4e19-87f4-5ec771e94470",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b6fd5cf9-0ba0-4567-9bc9-d5966478345b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e2339f-cfac-4796-9d20-783c43a77497",
        "cursor": {
          "ref": "d31142c1-db6e-4675-a1b1-79ea27ce1839",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0be734f0-045d-40fd-966a-18fef5012439"
        },
        "item": {
          "id": "25e2339f-cfac-4796-9d20-783c43a77497",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "048a3dd7-cb7e-4af3-af92-7aa7b6f7c301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262244f3-676f-40fc-a286-2afa86574054",
        "cursor": {
          "ref": "713887a1-9e97-4457-b3b7-c69bb2ab201e",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3aa781fd-ce33-4859-a819-65f35e6c43b7"
        },
        "item": {
          "id": "262244f3-676f-40fc-a286-2afa86574054",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a8c413d6-f34d-4916-9bbf-c91aea435b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e95236-df1f-4ad0-92d9-80081d0c09c5",
        "cursor": {
          "ref": "e7b27d85-21b4-4064-ba4e-57aaf3976fc6",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8a2eb471-209c-4d2d-931c-d4009a8ab296"
        },
        "item": {
          "id": "c7e95236-df1f-4ad0-92d9-80081d0c09c5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fb2f94e2-cab3-4bda-8534-40d7cb676c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f2989b-7443-4b08-b438-1747e8dc9eb1",
        "cursor": {
          "ref": "291007db-9143-4430-9d83-c9878a0898ff",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "93b43a8e-5906-4b9e-b4e9-9b7f552d978d"
        },
        "item": {
          "id": "b5f2989b-7443-4b08-b438-1747e8dc9eb1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8da040d1-e437-427d-bebf-98629022e59a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227e2c61-a09b-4722-b8ea-b44386f4b720",
        "cursor": {
          "ref": "0362f2c7-ed58-4d98-8a1b-513a9d568ef2",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4563e9dc-6c60-44e5-a9b1-841e4f3274b5"
        },
        "item": {
          "id": "227e2c61-a09b-4722-b8ea-b44386f4b720",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b8a65ee5-03b0-4ac7-8411-96c252d0600f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac9150d-e6e7-406b-b34e-05f54a553cee",
        "cursor": {
          "ref": "b0438874-acf7-406e-8dfb-ed06a5f827cc",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2f6aef7b-a34a-485d-b4d5-b2816ba895bb"
        },
        "item": {
          "id": "8ac9150d-e6e7-406b-b34e-05f54a553cee",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7d58a72e-d697-400c-ae62-b8ada643719f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbc60b9-45a9-4c89-b89f-f45fea76f5d7",
        "cursor": {
          "ref": "9c95d260-315b-4538-bff9-1288292dfa20",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "43d9f0dd-159d-4dce-a242-d8b038836b42"
        },
        "item": {
          "id": "5dbc60b9-45a9-4c89-b89f-f45fea76f5d7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3716ed17-ebda-41d1-a97c-40994f71969d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73bb0eb0-d9ec-4623-b26a-2293d3910009",
        "cursor": {
          "ref": "b566d9a1-1325-4142-801e-8752643dcd28",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ae5f63ef-54b7-4b03-b222-135363894537"
        },
        "item": {
          "id": "73bb0eb0-d9ec-4623-b26a-2293d3910009",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b41a5fce-ad4a-4606-bc70-bb0de56eb601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f760f4a-7d4e-4128-b298-50f72c9b9c51",
        "cursor": {
          "ref": "67896bfa-0647-4784-9311-453eb3a671aa",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "54849fc2-aa2a-4b4c-ad10-fccd3e646449"
        },
        "item": {
          "id": "7f760f4a-7d4e-4128-b298-50f72c9b9c51",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e8d96c91-fe32-42a7-8eca-fe1b1ffbfb26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe20a581-da57-4c73-9c19-5436b34933b5",
        "cursor": {
          "ref": "39a10b5d-1925-4808-994c-d22c1feb32db",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "41527295-215e-49b6-9380-3453ec1b66a8"
        },
        "item": {
          "id": "fe20a581-da57-4c73-9c19-5436b34933b5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "627efb01-c9d5-4fc6-b33b-74ee4a95a924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a2a036-8b3f-4505-8c96-977d4518ae21",
        "cursor": {
          "ref": "fe0277fa-ab2c-49df-9713-246ca86061cc",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "25323958-a4ae-4cf1-8bab-ad384696f451"
        },
        "item": {
          "id": "01a2a036-8b3f-4505-8c96-977d4518ae21",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8f6a8934-81d8-48fb-8908-c06961ce2b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b21c6f1d-8c2c-4da1-906c-bd7b17e41282",
        "cursor": {
          "ref": "c0cbcd3e-241e-4498-a1f9-032c78789221",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ca6e4d73-9138-4330-a67e-bea0a614041e"
        },
        "item": {
          "id": "b21c6f1d-8c2c-4da1-906c-bd7b17e41282",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "17f45737-8165-4725-9111-199a61999a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ec67f7-13ce-466a-bb53-67c29a820c76",
        "cursor": {
          "ref": "dcee8d9b-4192-4a26-bee8-18451f86287b",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "646d555b-bf53-4954-8fac-ebe51f5222bb"
        },
        "item": {
          "id": "f7ec67f7-13ce-466a-bb53-67c29a820c76",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bd41fca7-3f1a-427f-8618-7639bee70f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebf4cfd-f051-4223-8499-78a36011fd26",
        "cursor": {
          "ref": "35bdf67c-3ae3-4db5-a9c3-8969df13273a",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "cdf4b7f4-34f4-4a65-846a-357798e8bb5d"
        },
        "item": {
          "id": "4ebf4cfd-f051-4223-8499-78a36011fd26",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7480a7e8-391b-4618-9783-8fb0534f36f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ca3c11-dec2-45af-a43f-2f98eeacbbea",
        "cursor": {
          "ref": "2c350193-80a6-419a-bffe-d5dab86814a8",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e3e09000-bfba-4d0b-8ab1-26aff7d898de"
        },
        "item": {
          "id": "72ca3c11-dec2-45af-a43f-2f98eeacbbea",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b24b7eac-717a-433f-acc3-9fd89c591c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9d0dc0-3795-4815-b2bb-f2d0dcfc3a89",
        "cursor": {
          "ref": "050dec11-4b74-4554-9732-18fc131758fa",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "20da17e7-e543-4d57-8954-5d5b70174a90"
        },
        "item": {
          "id": "6f9d0dc0-3795-4815-b2bb-f2d0dcfc3a89",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "076e874a-ce6a-42a8-b415-5df1be682472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "060f0d8d-0068-4309-a6fe-1f4f58b92f9b",
        "cursor": {
          "ref": "78211b72-877e-4495-8f16-1e159b270954",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c22d144b-99b3-4c03-96a8-1da485a067c0"
        },
        "item": {
          "id": "060f0d8d-0068-4309-a6fe-1f4f58b92f9b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e6360bcb-b484-4ff2-955d-369499c36cc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "355db50f-1ecc-49cd-a26e-e9e2917beeae",
        "cursor": {
          "ref": "3d8773b6-4c18-4ef5-85a0-ecd2657e0fc9",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3027c463-8d5e-479f-bab8-8ed635d5fe96"
        },
        "item": {
          "id": "355db50f-1ecc-49cd-a26e-e9e2917beeae",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0188e6d3-3f44-4fe9-b8ac-7f9a5f62ca6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b44fe0-23c8-43e0-b920-5c8556e3686f",
        "cursor": {
          "ref": "cfcadf34-2f6a-4117-b9ab-e2c75faa5b43",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d3f28265-102c-4702-9589-d7e3eebe9e07"
        },
        "item": {
          "id": "46b44fe0-23c8-43e0-b920-5c8556e3686f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f48313a3-6e51-476d-b4b5-2915b711e296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e085544-ef5c-474d-b9c5-240bf6950a3d",
        "cursor": {
          "ref": "ef711059-ddd7-4353-9976-99c375ea7a36",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "81b005fd-1169-488c-bf70-c82401d978fb"
        },
        "item": {
          "id": "4e085544-ef5c-474d-b9c5-240bf6950a3d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3365e162-3180-4ab5-9b13-fb23bac188d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3855b12c-383b-42ee-a4ca-ee75d8e51ad7",
        "cursor": {
          "ref": "354e2350-6294-4592-872a-a12e93e2fd5c",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "aeefb66e-1ed7-4b7d-8fff-988303d12450"
        },
        "item": {
          "id": "3855b12c-383b-42ee-a4ca-ee75d8e51ad7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9b7686d6-c2c1-439b-8fbd-91315180345b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e216be64-adec-4b04-8260-e1d88182ad2f",
        "cursor": {
          "ref": "1d80ab96-886c-41fe-b261-e827fd2a7164",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "93e2d022-3740-4c6d-ba9b-52790dec03a2"
        },
        "item": {
          "id": "e216be64-adec-4b04-8260-e1d88182ad2f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "aaa66167-2f92-43ef-8b3d-8556f041f09b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4490234f-314b-44ec-be67-73429b2b1203",
        "cursor": {
          "ref": "8df51612-0f5e-4e9d-87d9-e636ac4a8e1c",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "56fa3743-8a9d-42c6-9e97-8dc70ca16d08"
        },
        "item": {
          "id": "4490234f-314b-44ec-be67-73429b2b1203",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d007317c-2923-4d1b-881f-115a62348d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1007f391-d9c8-4ac8-ae27-7e8a1d0af5bd",
        "cursor": {
          "ref": "06942102-531b-4b6b-a096-15749e90373c",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f30b46ae-72c5-4a5d-b744-804886a4ee04"
        },
        "item": {
          "id": "1007f391-d9c8-4ac8-ae27-7e8a1d0af5bd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bdd2b8c3-277f-4adb-9c4f-745ef9d5eea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d4de624-ea2a-4c9a-9e14-332a88385bc2",
        "cursor": {
          "ref": "0b2f92fe-a0a4-4331-994a-fe7532a4c697",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "60424572-046b-4aae-9946-4918f8cca9c5"
        },
        "item": {
          "id": "8d4de624-ea2a-4c9a-9e14-332a88385bc2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "32fddf2d-1e57-4d9a-aebb-f04a5e53c626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5794af-bf0e-47fa-8c38-40289d437390",
        "cursor": {
          "ref": "899e5e2d-02ea-4a61-8c2f-42597d51ddb3",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "aa93abe2-72cd-4666-b029-bd41da21f12a"
        },
        "item": {
          "id": "cc5794af-bf0e-47fa-8c38-40289d437390",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f11c53b5-173a-4afa-af70-0497585cfc7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57954b7-6786-43c9-9bfe-afbf0071c95e",
        "cursor": {
          "ref": "1e2c103c-0df4-4e6e-bfbe-7f55030a7f7d",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "fe6efe36-22f5-45e0-b818-aa32dd963f32"
        },
        "item": {
          "id": "c57954b7-6786-43c9-9bfe-afbf0071c95e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "be906b64-1cb9-44b2-ba87-293e5cfaf7ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a8954b-79d2-43db-a856-ca66714a6fbf",
        "cursor": {
          "ref": "1192116c-63e2-47c0-b6bf-df7d54d84034",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d4e53383-62c3-43ec-a2d1-5a5519634a25"
        },
        "item": {
          "id": "b3a8954b-79d2-43db-a856-ca66714a6fbf",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "35d4e1e5-2f1c-4a3d-b862-984a50a40dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d927b56-aeea-433d-a0df-1434247aab2e",
        "cursor": {
          "ref": "bdfcba45-4193-42ba-97f2-c694ecf8caa0",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2e8b634a-ab9e-426d-80ed-f338b351b380"
        },
        "item": {
          "id": "7d927b56-aeea-433d-a0df-1434247aab2e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "eb21f1de-085e-41e9-8665-8725830473d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6cb32e6-f54a-46fb-840a-a7643a6c42dd",
        "cursor": {
          "ref": "ce391c57-a692-4731-a1e9-b470427fde81",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0ee0e6d6-a8f6-402d-9267-6e8af94a3193"
        },
        "item": {
          "id": "d6cb32e6-f54a-46fb-840a-a7643a6c42dd",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "aa19596b-6034-4b17-a374-af17271cfc2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79b3016-5ad7-43fc-88af-0d466012f999",
        "cursor": {
          "ref": "466b6958-2218-489e-90bb-41392533b5ab",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "184d0d08-2d01-482c-9bcc-c1bbee379958"
        },
        "item": {
          "id": "f79b3016-5ad7-43fc-88af-0d466012f999",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "580216ce-2b08-44ec-be5b-cd07e6774c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12e5ec2-0a08-490c-a984-0d6fc47f9172",
        "cursor": {
          "ref": "59a57143-fd46-4d7d-942d-43a74efda86c",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "976f8299-db03-4249-a0f3-3b917d0bcb10"
        },
        "item": {
          "id": "b12e5ec2-0a08-490c-a984-0d6fc47f9172",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "546d5af3-6613-455a-bfff-dce3256695a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a03252b-fbfc-4828-922b-ef58351fe941",
        "cursor": {
          "ref": "a8e9d18a-9fac-4332-98b7-ab4180a71419",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "af3a6e7e-99ac-4cf8-b5ba-6e123f9e2b74"
        },
        "item": {
          "id": "6a03252b-fbfc-4828-922b-ef58351fe941",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ef0efe9e-911b-4dbb-b291-dadd51f03ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd9c6a68-f542-4331-ae9c-0a55fa11d6d8",
        "cursor": {
          "ref": "72f07478-65ad-4af7-99e3-bb7ed84f4f93",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "541eba74-7458-499a-a807-409613f4a4bb"
        },
        "item": {
          "id": "bd9c6a68-f542-4331-ae9c-0a55fa11d6d8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ec73b93c-f408-49c9-b6f8-9105e5d07952",
          "status": "OK",
          "code": 200,
          "responseTime": 458,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "b701f9de-62e9-4313-bfda-7aa5b63a9ac8",
        "cursor": {
          "ref": "18861575-3812-4905-8d9f-71c871eb7d4a",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a1b1f674-7a3a-4a9c-957a-b6a18a619dc6"
        },
        "item": {
          "id": "b701f9de-62e9-4313-bfda-7aa5b63a9ac8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6a156052-4cb7-427e-b1e5-755ade372ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e448a3d0-9db5-43e0-a902-18f6a61de743",
        "cursor": {
          "ref": "872b7d18-52f3-4525-9b9a-5bee4ff709d5",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5d2f0afc-5bee-4362-b6d8-45065d481c16"
        },
        "item": {
          "id": "e448a3d0-9db5-43e0-a902-18f6a61de743",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "70532d2c-690f-4e56-957a-b0e54009e567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531719e4-dec1-45cb-b235-8d809cc6e3a3",
        "cursor": {
          "ref": "f92e754d-02b5-429f-94fc-11c195d24929",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5851f622-3ac1-47a1-9e20-ecfd69f12671"
        },
        "item": {
          "id": "531719e4-dec1-45cb-b235-8d809cc6e3a3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "61032cc5-4245-4212-9d4b-738c1219c8dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de4f1f6-2b15-4f9e-ab50-0708e0eb349a",
        "cursor": {
          "ref": "87618460-e5cc-47eb-9835-7dc10f944084",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6c27be7f-8823-4716-8def-8d297d53b005"
        },
        "item": {
          "id": "5de4f1f6-2b15-4f9e-ab50-0708e0eb349a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d3b1b93a-0a20-4979-9983-1e218b844bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b22cd3-8fb8-4348-b453-ea0dffa8a239",
        "cursor": {
          "ref": "34b73a71-5fb6-4372-8192-8190f6311596",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9a2d32d3-3a5e-40df-add6-e195f6c3170a"
        },
        "item": {
          "id": "c6b22cd3-8fb8-4348-b453-ea0dffa8a239",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6b741705-675b-4011-ae01-ed6975566790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d074f6ce-a087-48ca-82e3-4070d6d99060",
        "cursor": {
          "ref": "a95c63ea-5d6a-4d37-a300-549d1281c35f",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1955b8af-5a08-4208-a1de-de7a73163216"
        },
        "item": {
          "id": "d074f6ce-a087-48ca-82e3-4070d6d99060",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "db1e49c9-a68d-4020-acf0-05d6fdec44c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0245346e-6b9b-491a-b41e-ccde5b58be44",
        "cursor": {
          "ref": "dcd066e3-9e77-460e-a231-93576e6e8b5e",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9204c50d-b5f4-4ad3-af10-3b1c8ffc10a4"
        },
        "item": {
          "id": "0245346e-6b9b-491a-b41e-ccde5b58be44",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7ffcc043-13cb-417b-b74a-ea6d2d80da5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89088b87-7551-4856-8ca1-f95705b055c2",
        "cursor": {
          "ref": "f354d6fa-9ada-4ed6-829e-b14f8e85df9b",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "15486b47-964d-4b76-b1ad-f41edf55384f"
        },
        "item": {
          "id": "89088b87-7551-4856-8ca1-f95705b055c2",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b6fdfdf4-7cb3-4d53-8fdf-4055246b4c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7459849d-7e95-4bbf-bb83-997d694454bf",
        "cursor": {
          "ref": "64b3e994-c18c-41d6-923b-c324be88c87c",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "39712c13-b4a0-4a11-bee0-06f5a32ceec1"
        },
        "item": {
          "id": "7459849d-7e95-4bbf-bb83-997d694454bf",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a39636f2-d0bc-4643-9a5f-d4f592d2126d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7b9bdc-1ace-4e1f-9f07-bc9c8e89b3c6",
        "cursor": {
          "ref": "1cbd473a-5aef-49c0-81b3-79f0bbee4122",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2746296a-521c-43ca-96e2-bda4eccdf5e7"
        },
        "item": {
          "id": "7f7b9bdc-1ace-4e1f-9f07-bc9c8e89b3c6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "624309b2-2065-410b-a5af-92801ef2eaab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f0c98f-713a-439b-81fe-27b0341f8b02",
        "cursor": {
          "ref": "5e5b0b3b-5cd3-47b0-83bb-d71aa2579c5e",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fd5d7723-32fe-4213-954a-0b60efb51330"
        },
        "item": {
          "id": "67f0c98f-713a-439b-81fe-27b0341f8b02",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "95063c13-d88a-48e5-9386-a176d8669b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad97cfaa-0418-47a6-81d6-78da6059c79a",
        "cursor": {
          "ref": "2d69ba96-6707-4b73-b3f8-e72dc00d7df6",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fb9f0d5e-52e9-4f74-adc4-5db28da07d07"
        },
        "item": {
          "id": "ad97cfaa-0418-47a6-81d6-78da6059c79a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0bd6e406-d63b-4364-837a-bbd82401df63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6283b7e1-255a-4567-8d21-837938b880af",
        "cursor": {
          "ref": "0c1283f8-f4ec-4319-8350-37af2e40acfe",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ace6f8c3-067f-44ee-987e-4f8b1ed3a294"
        },
        "item": {
          "id": "6283b7e1-255a-4567-8d21-837938b880af",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3aa1c919-7288-4d9f-803e-ed4f3bbfe694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113c2616-64d9-42e6-8904-b93c6d73afa7",
        "cursor": {
          "ref": "be2e132a-83ae-4e4e-b08c-6ae48a7a9a85",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "99ab233f-4ba5-447c-aa13-d8636e0b92f6"
        },
        "item": {
          "id": "113c2616-64d9-42e6-8904-b93c6d73afa7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c29dee86-d862-4ae4-b0f1-f4b540be2cd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89fb8681-5764-4f53-9f98-81c0224966db",
        "cursor": {
          "ref": "03e55070-86f2-4ef6-8429-3863b810dd81",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2c916b50-fbec-40bc-9bad-5d102a353fb1"
        },
        "item": {
          "id": "89fb8681-5764-4f53-9f98-81c0224966db",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9420b2c4-2fcb-4c7c-8507-e139e23143df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35c09ae-b2d0-44cc-8613-72c10ab711e4",
        "cursor": {
          "ref": "b42529f6-6d7c-4894-968e-019ec64c3d83",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8308c591-b9bc-426e-bdb1-dea4e9da4ccf"
        },
        "item": {
          "id": "e35c09ae-b2d0-44cc-8613-72c10ab711e4",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e29ea030-efe4-4391-b2cf-f3f3fdda25bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de98382d-cdaf-40db-abbb-feb79c291970",
        "cursor": {
          "ref": "ed6309c6-d0c8-44fb-b366-5abc293801b9",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8479a588-7efb-48aa-8208-64e55126b99f"
        },
        "item": {
          "id": "de98382d-cdaf-40db-abbb-feb79c291970",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4e2b9fca-fa2e-4a7c-a57c-99d4fcc9c74d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b6e5f5-c369-4b7f-935f-e2816fda9cfb",
        "cursor": {
          "ref": "985125f5-919f-4d66-bc09-5a1bf912a5fb",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9225a8ee-8c4f-4510-8a67-e9aaadb88e6a"
        },
        "item": {
          "id": "46b6e5f5-c369-4b7f-935f-e2816fda9cfb",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "16f4db17-6f2e-4257-a715-571a8a267c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a541d6fd-9ebc-4069-8b85-92ed709fc2ac",
        "cursor": {
          "ref": "57f91946-d409-4058-9f5e-a6227aa8b2cb",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8123d0f8-3901-4198-b489-14465bb86b48"
        },
        "item": {
          "id": "a541d6fd-9ebc-4069-8b85-92ed709fc2ac",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2630b6c0-c450-4a38-a822-928e770cbace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2927cd4-6277-4e14-95a0-f04e6e550ed7",
        "cursor": {
          "ref": "50569a3d-47da-4e57-9f4f-01dd5d44e63a",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9cf7fa12-ca00-4ba7-946d-5b71101ac0b9"
        },
        "item": {
          "id": "b2927cd4-6277-4e14-95a0-f04e6e550ed7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c919f5cf-f2b8-46d1-a411-e68ac2d63273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a845a180-44a2-493f-acc1-74bb4b6ea5aa",
        "cursor": {
          "ref": "0154d279-7e39-47a6-b40b-e34889cc6189",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3baca3b6-7341-4d37-8270-faba46ab2e6e"
        },
        "item": {
          "id": "a845a180-44a2-493f-acc1-74bb4b6ea5aa",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "91e0c7ed-6a19-4d34-a070-7be179c298a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 847,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab0f21c-8c2a-4f0a-a2f9-07e16283ae52",
        "cursor": {
          "ref": "a73c10d3-d610-4b21-9a51-46535eaa5347",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a98458a6-2b95-457d-b4b9-b727296ae711"
        },
        "item": {
          "id": "9ab0f21c-8c2a-4f0a-a2f9-07e16283ae52",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "516a083a-a094-49bf-ae3a-69140b98483a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4414556a-d084-4003-9d40-3bbff66d2157",
        "cursor": {
          "ref": "026633c2-789a-4b3b-95e2-8493d3d03256",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "57501493-1c27-4dce-b3e3-e70d8647017a"
        },
        "item": {
          "id": "4414556a-d084-4003-9d40-3bbff66d2157",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "aa53e829-9046-494c-88ca-f91e1cedcecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a27355c-49f6-48e4-aa70-0efb1fa895fc",
        "cursor": {
          "ref": "70ef682b-29a9-48e1-a285-0d4b5970aa86",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0d277c0a-3512-487a-8031-2f5a29171a37"
        },
        "item": {
          "id": "4a27355c-49f6-48e4-aa70-0efb1fa895fc",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e41aa954-9fad-4698-a384-a97f8c111911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55efb77-5e25-4d00-99f3-442b1dc8681c",
        "cursor": {
          "ref": "cfa74c05-053c-4a3e-84c6-a7bf2ef68737",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f5cce929-841c-4f06-b3bd-5e33f154ce6c"
        },
        "item": {
          "id": "d55efb77-5e25-4d00-99f3-442b1dc8681c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4115431f-5d48-4e94-83be-faadb99fd995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cedf1633-6496-42a8-aac5-5e6195db4480",
        "cursor": {
          "ref": "877d69ac-9dfe-4323-9d4e-2194187cfe0d",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8a23c609-ece8-4a15-aafa-65df79905199"
        },
        "item": {
          "id": "cedf1633-6496-42a8-aac5-5e6195db4480",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d0c06b83-2d3f-497f-afa7-8ee3146696a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0528da04-e121-40ab-9d1b-7cf44d2fdda3",
        "cursor": {
          "ref": "686e3b87-c174-423a-a79d-670de18ca4d4",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "db57e8f4-90b1-48be-8aca-02fcf96fde95"
        },
        "item": {
          "id": "0528da04-e121-40ab-9d1b-7cf44d2fdda3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a7b04de1-3add-4268-af12-caabf95406d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87384e3d-b6f9-416b-8b85-54d7f1734d76",
        "cursor": {
          "ref": "a88372fb-4805-40d4-9259-b960aa6d0195",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "fbaee07e-51f3-40ae-a20e-e4d0a8d5bc40"
        },
        "item": {
          "id": "87384e3d-b6f9-416b-8b85-54d7f1734d76",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "017ec754-9286-4b02-be96-ba3c1801c588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e9355d-b007-4fc4-9309-933e3ec0f489",
        "cursor": {
          "ref": "8c4938f9-4437-48bb-8ade-6d893175c86c",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "41971c76-8552-46ae-83c4-e8e48dedbb13"
        },
        "item": {
          "id": "d6e9355d-b007-4fc4-9309-933e3ec0f489",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "14ae7a20-4aba-4afb-996a-4b1818fefaa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7852fb9-e879-4af9-b8c4-772ebe717c8e",
        "cursor": {
          "ref": "2b1648bf-e071-4a44-9450-185c1dcd0f9c",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6e2e5ddd-c9b2-41bd-95cb-92c47b2b6a0e"
        },
        "item": {
          "id": "b7852fb9-e879-4af9-b8c4-772ebe717c8e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ce47f134-6345-496d-a837-abe98faa6fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecee30a-dc8a-4ece-ada2-adb4fd35c473",
        "cursor": {
          "ref": "1983f07b-ceef-4bee-b054-573b1e0ddd70",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0f5803ec-3f0f-4e26-a4d7-ac6700199f46"
        },
        "item": {
          "id": "6ecee30a-dc8a-4ece-ada2-adb4fd35c473",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "26619f35-b789-456d-a4c8-be015bfc2ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64513de-0efa-4bd5-a485-f698c967401d",
        "cursor": {
          "ref": "d2f0d5b1-5792-474f-9efe-29b54ef78420",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e436d78e-ed7e-4c4b-ae99-19c42c982dea"
        },
        "item": {
          "id": "d64513de-0efa-4bd5-a485-f698c967401d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2c944f2e-064f-416e-8f92-66725c0a03c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d659e089-40cb-4c38-9be0-ebd143cea7a3",
        "cursor": {
          "ref": "0f4d158d-720c-4678-9f3e-95a5b6763812",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "517bc866-e126-41be-9e8d-78e5051c0de4"
        },
        "item": {
          "id": "d659e089-40cb-4c38-9be0-ebd143cea7a3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "03b5c833-827e-49a1-8968-129046a59809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409f76e5-df1c-42de-adb1-2c64d7e8fbf9",
        "cursor": {
          "ref": "697295fa-ec11-41b5-801e-f999e385b9ba",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "60fecbfe-a58f-4506-a6b7-4729f6415578"
        },
        "item": {
          "id": "409f76e5-df1c-42de-adb1-2c64d7e8fbf9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "154f2362-a010-4f1b-afd0-d34542e10cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34979d9a-6f25-4bc4-bb6f-3dceb67de325",
        "cursor": {
          "ref": "d6dac740-089b-4de6-93fe-8ae156229a38",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ce59e229-7a27-4695-983e-17c5ea04e163"
        },
        "item": {
          "id": "34979d9a-6f25-4bc4-bb6f-3dceb67de325",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2f728597-15b9-4f57-b95f-6aa56ad69448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8e1427-5ab4-4323-a87c-0a394375cf86",
        "cursor": {
          "ref": "e3eaaaec-5148-4e44-98dd-c6c7ee878665",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "19b79efc-3094-4336-8c6a-d61e9db3bc5e"
        },
        "item": {
          "id": "df8e1427-5ab4-4323-a87c-0a394375cf86",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "92caaa79-2382-4d87-9df5-8e351d3431c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff7f040-b7e9-4a64-baab-7455e1b2eb11",
        "cursor": {
          "ref": "59491ee9-9d9d-4f43-b1ff-977a842e527f",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c46dd089-0c4c-4d09-8096-4037c47140e7"
        },
        "item": {
          "id": "cff7f040-b7e9-4a64-baab-7455e1b2eb11",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b9a74715-9461-4a68-ba09-4d2d0e15035b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68e0410-d22a-4a13-b29d-698654c8f10e",
        "cursor": {
          "ref": "ebee4dfd-934c-45f1-94f5-217c5e4547b9",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9d4ca35c-cd5a-4139-afa1-94a783113994"
        },
        "item": {
          "id": "c68e0410-d22a-4a13-b29d-698654c8f10e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "536d3d7b-e429-4381-9470-7a6f756cfe54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd05da8b-8704-42e7-aba6-3dd7a7579d56",
        "cursor": {
          "ref": "f7920584-c3ca-4115-bc36-634e483c6936",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f4cf650b-592f-49ca-8890-948f22657e2e"
        },
        "item": {
          "id": "dd05da8b-8704-42e7-aba6-3dd7a7579d56",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "45229d8e-c29e-43e5-bb88-82f559fb8937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91782bf1-3cfc-443c-b78e-3361fd6d5f97",
        "cursor": {
          "ref": "89b21628-1507-4736-8717-c27244b362e2",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cc7ed304-3af4-4c28-b9ed-2b7d855b7534"
        },
        "item": {
          "id": "91782bf1-3cfc-443c-b78e-3361fd6d5f97",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "609f0f7d-5225-49d5-8f9c-74148fe25308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3dbaf01-33c9-49a4-813a-7127af4fb310",
        "cursor": {
          "ref": "7f5c9cb5-bc57-4708-8520-fd67f6c5583c",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "36fb9e7c-c24e-4812-b684-1cf5442ec104"
        },
        "item": {
          "id": "f3dbaf01-33c9-49a4-813a-7127af4fb310",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "df819368-b943-4209-a730-27bb65af55ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e35639-da8e-40a4-9aea-36b668ec7512",
        "cursor": {
          "ref": "ba684878-e19a-4b81-af8f-3e6ef85a4c5d",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7490def0-8f82-47f3-97c6-3e82695f72fa"
        },
        "item": {
          "id": "61e35639-da8e-40a4-9aea-36b668ec7512",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3eab6355-c836-425e-b535-6db743e36ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dafe92ce-2025-4ce4-894a-1208bb5cbd7c",
        "cursor": {
          "ref": "06b930a9-08ac-458c-874b-2fafeaa93098",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1dfd14f1-3b4b-48c0-ab7b-5e1fe5e49bc8"
        },
        "item": {
          "id": "dafe92ce-2025-4ce4-894a-1208bb5cbd7c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "39531e1d-97a0-40f5-b98f-643c42aa950c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e76130b-305c-4fa2-abfa-76535b8f5e97",
        "cursor": {
          "ref": "d7e7cefb-5480-4a54-b9d4-3f6451d33303",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8b6d1988-3ff9-4757-adc1-bfed2c0376e8"
        },
        "item": {
          "id": "6e76130b-305c-4fa2-abfa-76535b8f5e97",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c188863d-3fff-4c73-99dd-937ee1058e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e98e952-1c0e-4ae3-8481-243de022acda",
        "cursor": {
          "ref": "3a99f9f1-c8af-46d8-8f24-3f4c63627815",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2394d44d-0723-4209-b39c-283d617557f9"
        },
        "item": {
          "id": "5e98e952-1c0e-4ae3-8481-243de022acda",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3a911444-ee2f-49ce-899f-438c130229d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd88bac2-6eac-4f50-ab6f-d74cca53a059",
        "cursor": {
          "ref": "3b139b6c-9633-4a6c-a2d6-c16e50288996",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8e20d35b-80d4-4508-b285-c5d03f04bb9b"
        },
        "item": {
          "id": "bd88bac2-6eac-4f50-ab6f-d74cca53a059",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "634722a2-69e8-4409-9a5f-374d6ef0f7ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f74516-1e69-4a51-9ba3-541cf0aef13c",
        "cursor": {
          "ref": "10d83164-e9e9-4c3c-8485-0337f8439e77",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a3dc1a86-b5e1-4689-8f20-6c4cac5b854e"
        },
        "item": {
          "id": "93f74516-1e69-4a51-9ba3-541cf0aef13c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e715f1ae-1a3d-4651-b36c-eb593f080cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169e7d53-e77b-46d3-8bd7-8c8d15d3b644",
        "cursor": {
          "ref": "d9dc00e8-c0f7-4129-a8cc-5be2c422104f",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c8b66efa-2dc0-4b59-8046-24bc540fab80"
        },
        "item": {
          "id": "169e7d53-e77b-46d3-8bd7-8c8d15d3b644",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5b70b7ba-a455-4803-84f2-03671897266c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ddb828-a46e-4cd9-af4c-3731f9d7e375",
        "cursor": {
          "ref": "75112906-cd36-41f8-89d5-2a579f282a69",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3a30ed7f-0f91-42ca-856b-997f22b63fe1"
        },
        "item": {
          "id": "f4ddb828-a46e-4cd9-af4c-3731f9d7e375",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "32dafb1c-2a97-408e-9216-cbccf95de228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc650ac-02df-4e10-8df1-28296fc69da4",
        "cursor": {
          "ref": "c31d543e-e7e4-4e99-b152-d7ddbb70a019",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "08b358fe-2990-474e-b5db-2f7a3f6a094c"
        },
        "item": {
          "id": "ebc650ac-02df-4e10-8df1-28296fc69da4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4a23ef0a-ea13-4d93-a90c-87d38da19a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c02e4d-307c-4368-9a61-a4f9838304b9",
        "cursor": {
          "ref": "4479b239-f037-4bee-8938-12ea7c35feb2",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1c63f845-c306-4e0e-b04e-472684da9a41"
        },
        "item": {
          "id": "95c02e4d-307c-4368-9a61-a4f9838304b9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "39eb7820-63e8-449a-a3e3-a158dc43ac0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58622e2c-d237-4e5f-9d5f-87c81ee0e421",
        "cursor": {
          "ref": "252f3a07-9a1d-4195-b1fa-60e816e3991a",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "36426de7-5098-4d14-97fc-f6b682134ad4"
        },
        "item": {
          "id": "58622e2c-d237-4e5f-9d5f-87c81ee0e421",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5cc2dfd0-df4e-474b-90be-971a63fe3bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae36fcc-6651-4635-b605-a565a7d55510",
        "cursor": {
          "ref": "b2f9356e-baab-4118-bd81-d1ae93482c02",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "907e58d7-01f7-40d7-909e-1f04379544bf"
        },
        "item": {
          "id": "dae36fcc-6651-4635-b605-a565a7d55510",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3a9a0eee-fd12-4198-8fa2-d357a53a4824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24d1df4-c69d-4e22-b0d4-1483ab6b56bc",
        "cursor": {
          "ref": "5c68514c-ff0d-448f-ac90-0a5533f6fe44",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "1e7790a1-517f-41e1-a7bc-7ee0c30bafd9"
        },
        "item": {
          "id": "e24d1df4-c69d-4e22-b0d4-1483ab6b56bc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7507748c-7095-4b26-84e4-352ac2f91116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8441329b-f758-4402-86b6-691d317029f9",
        "cursor": {
          "ref": "51a1519c-398f-4948-b258-ac9cda818efd",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "70aede68-925b-454b-b923-cacfcf982611"
        },
        "item": {
          "id": "8441329b-f758-4402-86b6-691d317029f9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9d070c75-f9d3-4268-8aad-167490e5b743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf427dc-27ce-4fe4-80b0-38676b3575d9",
        "cursor": {
          "ref": "2e16fd28-7462-4a7a-af64-02ec96883d49",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6225cbef-b8d3-47eb-8c18-a3ce15f583f1"
        },
        "item": {
          "id": "8cf427dc-27ce-4fe4-80b0-38676b3575d9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2f140473-d60c-4c89-8be7-cad1594b2788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1ca407-7a1e-46e1-9b81-fe3244183ab2",
        "cursor": {
          "ref": "1502a02f-9a0c-4dc2-8c60-a15b07edbb50",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a671ef1e-bb6d-4821-a67b-d00a877b6d84"
        },
        "item": {
          "id": "2c1ca407-7a1e-46e1-9b81-fe3244183ab2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f770e71d-f93a-4ab4-871a-bb4e3347c9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3af87b-cd0e-4419-a452-2041491a3679",
        "cursor": {
          "ref": "baa1931c-54c1-4388-9085-6c38beb5f56f",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "06219c67-ca04-4d06-bbb7-9bb5ed0f4167"
        },
        "item": {
          "id": "7d3af87b-cd0e-4419-a452-2041491a3679",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "97e9dd81-e498-4d87-b7fa-8c0fb8afae7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6130965e-a852-477e-8ab2-73f8c9a0617e",
        "cursor": {
          "ref": "43e1cd07-01b5-4a1f-9812-890ecfcb6679",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6b8de941-ceaf-4bab-946c-7d1eb5004e84"
        },
        "item": {
          "id": "6130965e-a852-477e-8ab2-73f8c9a0617e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "55b73544-37ac-4299-806f-de9dd5699272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b152ba2-95ba-4a13-9062-5589c9334dca",
        "cursor": {
          "ref": "3f391228-1577-484f-8b5b-c620fa9f5afe",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "024a50f1-ab1d-4190-8491-b81079a66803"
        },
        "item": {
          "id": "0b152ba2-95ba-4a13-9062-5589c9334dca",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9dc3a909-2daa-45a1-bd90-2dd64f9ccb77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396beb12-401e-4891-bc44-fc24a50f232b",
        "cursor": {
          "ref": "78a88b49-da9f-4470-aa49-c8322d2c75e1",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ce478535-8a75-4b44-9110-e88ca9c83091"
        },
        "item": {
          "id": "396beb12-401e-4891-bc44-fc24a50f232b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3cc699be-9091-4a89-9a25-dbe424d74cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6dd608-a1ce-445a-8bc4-1327cc2c5c35",
        "cursor": {
          "ref": "4264ddc7-afdd-4ac5-a24a-6f2b9f556853",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5d60c18c-e919-4563-be00-b94e967e83d2"
        },
        "item": {
          "id": "3c6dd608-a1ce-445a-8bc4-1327cc2c5c35",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6d676c9b-13fd-41de-8c9a-36f2a000907b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "407bfc9e-8ebd-4cae-811a-0f98f3b2437b",
        "cursor": {
          "ref": "ddee1154-e9e9-484a-96f9-ef4e47785d96",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "551fecb8-8393-4ecf-9c1d-9a4103d05b05"
        },
        "item": {
          "id": "407bfc9e-8ebd-4cae-811a-0f98f3b2437b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d1c54f45-f63f-40ad-b8b2-5d3cb4afe1a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94d4b19-9e83-4214-89dc-4d5135c3c7ff",
        "cursor": {
          "ref": "9cd103aa-87a2-47ef-949f-e90846d52f48",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3b01d0a1-c03d-4412-9ca5-5031eb8b206a"
        },
        "item": {
          "id": "a94d4b19-9e83-4214-89dc-4d5135c3c7ff",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3e340bd6-cfcc-4ebf-8b4a-cb1a146e3b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8ee3625-76f6-420f-a824-f826f1f04fb8",
        "cursor": {
          "ref": "11c928c2-d1dd-4e19-9416-adcbf9c8e692",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7371d10e-86c8-4ea1-af65-063de91117af"
        },
        "item": {
          "id": "a8ee3625-76f6-420f-a824-f826f1f04fb8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9fde2e9d-1d7c-4cff-a99c-0cc9f2ead08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bcd456f-fc44-480a-b0c5-6ca2db51bd86",
        "cursor": {
          "ref": "3c9ddf9b-52de-43a2-8c6f-e38d443fb9fe",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "11a257d6-0e3e-4942-af55-06cf2f4d37a9"
        },
        "item": {
          "id": "2bcd456f-fc44-480a-b0c5-6ca2db51bd86",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cf7c55e8-8f64-452e-b47a-1204d897627d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ddfc186-b912-462c-81b2-7723bf9e0ae4",
        "cursor": {
          "ref": "a4ac0462-ecec-430d-b76d-cae329514a01",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cb7f99ad-aa74-48fb-85a2-411c53715ddd"
        },
        "item": {
          "id": "3ddfc186-b912-462c-81b2-7723bf9e0ae4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d7339838-8981-4af1-8ae1-0306652d4833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d44d183-5959-4577-a0fb-f234e63881b8",
        "cursor": {
          "ref": "a92ceca7-0071-4db3-b14e-399b6b2f2a07",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9c97f590-f1b5-485b-be0d-6ce59a41c321"
        },
        "item": {
          "id": "2d44d183-5959-4577-a0fb-f234e63881b8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "78f56770-94e5-4db6-8978-856f34dfa644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619e271a-9c70-4124-90fe-7f6e643b5acb",
        "cursor": {
          "ref": "14066f18-906e-40b5-89de-c3a9fd5fde20",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ac5a5b67-81b8-4fc8-97c7-e81e4e582242"
        },
        "item": {
          "id": "619e271a-9c70-4124-90fe-7f6e643b5acb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f89d4348-581d-469b-aff7-dd36807381b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e365a7-cb3d-427b-9498-a6d76eb3d5fc",
        "cursor": {
          "ref": "3f9c877a-cba6-4b7f-9673-f6ca549bfebc",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "45173b6c-68a5-4d1f-af43-57c1d96369ee"
        },
        "item": {
          "id": "31e365a7-cb3d-427b-9498-a6d76eb3d5fc",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "af242aa4-3980-41db-9c93-ca7dc2d80056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627750cb-d526-4a7a-b8e0-6a22c6ef02d6",
        "cursor": {
          "ref": "f4db930a-6c7a-4636-a5dd-2bc367db03fc",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8a09bbd5-1bf7-4ee8-9266-60b77853900c"
        },
        "item": {
          "id": "627750cb-d526-4a7a-b8e0-6a22c6ef02d6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4b818a52-30bd-4573-968d-9d22d918ff86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a3e42a-cd5f-404d-b5e1-d3bd739e00ab",
        "cursor": {
          "ref": "672c63c0-6ad7-4236-805d-add767b834e9",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e1b86300-06e2-4891-b302-4590871e7def"
        },
        "item": {
          "id": "b0a3e42a-cd5f-404d-b5e1-d3bd739e00ab",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "40f0830d-84ca-4f1b-ad2f-869129d6491d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db900238-9131-44b6-bf12-3f0215644330",
        "cursor": {
          "ref": "2888b11a-c3e7-4b3e-9c8d-ba08bc006273",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "dc4dfeb6-e7d4-4af5-97de-5804538fd576"
        },
        "item": {
          "id": "db900238-9131-44b6-bf12-3f0215644330",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ae0ab8c3-c69a-41a2-be48-dd38718949d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0804e0-6d94-42d2-9ae2-83b4d7444f9e",
        "cursor": {
          "ref": "407dd1ef-8661-45bd-972c-9ae82f682e40",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2a9654df-7f8f-48ab-8b86-ace4cf0e7b57"
        },
        "item": {
          "id": "cb0804e0-6d94-42d2-9ae2-83b4d7444f9e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a97f3f3b-65ff-47ff-adc8-b2c202fb5ef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dffe012-d26f-4fd7-b9f3-29cef5261674",
        "cursor": {
          "ref": "316681f6-f6fb-4101-a497-91e371ad2861",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ddbdd590-b8d6-4e79-aab1-c9f1af0457a1"
        },
        "item": {
          "id": "3dffe012-d26f-4fd7-b9f3-29cef5261674",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3f7c3b7b-8ec3-4072-8c9f-287221907fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b3710b-c68a-4d77-a7c7-8d58f56728d8",
        "cursor": {
          "ref": "6a880944-af1b-4dd7-9fa6-3806651f1a41",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6e62d2b3-46b3-4bce-bc91-b6f080c3e231"
        },
        "item": {
          "id": "06b3710b-c68a-4d77-a7c7-8d58f56728d8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "14f51aae-4c64-4b3b-a914-7a51e4a4ea36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "667fcee5-89b9-4b28-814a-2ddfaf84ce85",
        "cursor": {
          "ref": "b2bd0b91-94e8-417a-9906-582b6c561605",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c09ce331-6daf-48e2-be56-dd31b276d6ef"
        },
        "item": {
          "id": "667fcee5-89b9-4b28-814a-2ddfaf84ce85",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a682c3cc-b765-4518-80a7-178bda1231a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7f225a-f804-4ac1-973a-bd8f4c7fd5a0",
        "cursor": {
          "ref": "158da487-41e0-4139-9b3a-6481a746aa53",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "347eddc6-aa2f-417c-9512-6189bbf03974"
        },
        "item": {
          "id": "3f7f225a-f804-4ac1-973a-bd8f4c7fd5a0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1bbf9c63-d157-467a-b83c-aaab88f3dd59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf9d556-958d-4bdc-af13-982378dc7129",
        "cursor": {
          "ref": "5622597c-f257-4540-ac41-dffeae2e0028",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4a3019a4-7d6b-4d6e-bea9-e23be25a375e"
        },
        "item": {
          "id": "3bf9d556-958d-4bdc-af13-982378dc7129",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a48c1c88-7bd5-4e90-9a79-750b1628f9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a537544c-c516-4ea3-a7ea-2c4b7a94cdcc",
        "cursor": {
          "ref": "e93bee43-4301-49e8-ba05-355377e1a615",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "503ffdeb-907a-4f7e-97f6-05c338798a2d"
        },
        "item": {
          "id": "a537544c-c516-4ea3-a7ea-2c4b7a94cdcc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c939698c-920e-4af4-be10-a162398faf9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4984df7-6843-434b-a05c-31e0e371ad5a",
        "cursor": {
          "ref": "e97399b3-b04b-4198-bd21-ee5b19f0c32c",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "720cd94b-340c-457c-a29d-57207f46fa17"
        },
        "item": {
          "id": "f4984df7-6843-434b-a05c-31e0e371ad5a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c754178b-1857-480c-97b0-aeb443aeee76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "b2410066-aa6f-453d-9df4-bc2d2782d99c",
        "cursor": {
          "ref": "2e944577-2832-4b0b-9272-68a1802ba780",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "379637cb-1cbb-4aa7-8557-447dcc245275"
        },
        "item": {
          "id": "b2410066-aa6f-453d-9df4-bc2d2782d99c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c7a127e7-1dc0-433c-8196-64e4de24d69e",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "289ec048-7f7e-4494-8a8e-74c01e431d3a",
        "cursor": {
          "ref": "c5bf24d8-68a4-42d4-9ae3-28b6a16f8542",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0e89a095-209c-4059-a1a2-9623aa54bb2f"
        },
        "item": {
          "id": "289ec048-7f7e-4494-8a8e-74c01e431d3a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f4e434ed-4d9a-4a4b-a982-a2756a69911c",
          "status": "OK",
          "code": 200,
          "responseTime": 2347,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82de16f-2710-4853-8aa1-eb2c4557cdae",
        "cursor": {
          "ref": "5e47c16c-0947-4acf-a628-daa33644a686",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "182be93f-1add-4548-ba9a-85d259cb59e1"
        },
        "item": {
          "id": "f82de16f-2710-4853-8aa1-eb2c4557cdae",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8ae87248-7cf3-4662-9fa7-06644493ee0e",
          "status": "OK",
          "code": 200,
          "responseTime": 2604,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33102e3-4a03-4c1b-8d09-8fe9c1f58d64",
        "cursor": {
          "ref": "0cbabe26-b7ab-4d17-bcaa-735991368c62",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "432944b3-f13b-4ab8-bc83-61664d7ec602"
        },
        "item": {
          "id": "c33102e3-4a03-4c1b-8d09-8fe9c1f58d64",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "71c29c71-e040-43d4-84ef-ff8bb49074a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "c33102e3-4a03-4c1b-8d09-8fe9c1f58d64",
        "cursor": {
          "ref": "0cbabe26-b7ab-4d17-bcaa-735991368c62",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "432944b3-f13b-4ab8-bc83-61664d7ec602"
        },
        "item": {
          "id": "c33102e3-4a03-4c1b-8d09-8fe9c1f58d64",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "71c29c71-e040-43d4-84ef-ff8bb49074a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "6b0ea6fa-a0cf-4dbc-b156-029938d78bb6",
        "cursor": {
          "ref": "421f554c-44f8-4819-a4f6-e9047e27b4e2",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4e5d668f-a4e8-46ed-b926-b9c380e36126"
        },
        "item": {
          "id": "6b0ea6fa-a0cf-4dbc-b156-029938d78bb6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "04773ad6-9f91-48f3-abc0-79035ad0023c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "682cc7cf-2647-4afb-bda5-003c3b8f9b1d",
        "cursor": {
          "ref": "7e3ff604-7023-499b-ad0c-bf6928d53402",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4195abfe-20ad-4f92-9fa8-95f79d24ec75"
        },
        "item": {
          "id": "682cc7cf-2647-4afb-bda5-003c3b8f9b1d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a062073c-a5b2-4419-a575-2fdf97acbd37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}