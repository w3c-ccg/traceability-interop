{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e96de458-501f-4808-b6fd-355ebb4cbcf7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1705aee0-fc40-4f68-940e-90ff3b373fbb",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e90f3351-337a-476a-b69a-5c415c3b9abd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "64f74743-a6d0-47bc-8c87-056e9dc27731"
                }
              }
            ]
          },
          {
            "id": "a6d80b44-3957-4a8c-9fe4-5feab90e0889",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bc1e3d1f-ba55-468a-8cf9-8b15d225baf4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fadda15a-6c80-48d4-9c46-76bd20ae66db"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b2e4671e-54d5-4ab1-a408-1cc1dc075004",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b9a8e2e2-7662-42ba-bc7b-f97ed54786f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "26efa7e0-0a4f-4305-b19d-3e7091805ffb",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e301f3c4-e2c5-4269-9c08-9e7fd3bce549",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a512896-05c7-42f7-91e8-0e0d4eb6a2e8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5a1d52de-479d-4ebf-a316-97cc15903691",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "480d5beb-0d9e-4db1-997e-367da81bcb91"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "deefe219-d024-413e-ae04-03a019ad5500",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a50d0c38-3f2c-42e4-90db-86b356fe0259"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c0dbbb0-66c6-4384-844a-e60672d1b086",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "65d1f637-967a-4f19-9926-9d317b424499"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d8a9d4a-1c3b-4e9a-ba89-a235ea346c0e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "551a4a4c-6bed-476c-a706-c302abda1e9e"
            }
          }
        ]
      },
      {
        "id": "70e8fe28-4a99-4dea-b3d3-838a8df30320",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e0875797-05c8-4538-8f0b-769b604753de",
            "name": "Negative Testing",
            "item": [
              {
                "id": "041f271e-8510-4e16-ac72-e332b5742667",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "28784a0b-c3bd-4b85-afee-4ff5c0c319c4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18cf5f3f-626d-4dc8-82ba-aecca95467fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2ec42af-4a6a-41b1-8ebe-72134d9c8776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe43ac0-18fb-4ee1-b140-f43a57c0f23c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be15c77-cc3e-4c59-b44b-2dc6b7d69174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a88104a-c7a9-4259-9c17-acc0c26520f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117a51dc-2a58-4d99-8ba6-73ba81b495ed",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4cf2f4-153c-4a75-ad36-15f60ace4ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc71749d-42f0-4c12-96da-871ecba602de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8eaf5c0f-edb5-49d5-9a5d-5f865f2c7ce9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7553de47-65e4-46e5-a428-f2fedd874114",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72c84ac-294a-4ad4-95d2-2cef05ce2a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76d6380a-875d-4e98-9684-72d0badd53c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a49939b-5ad2-45d4-a223-eaeb058d3dd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb57bff5-e3d1-4b42-813d-a21626134862"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "61914e43-b4c9-4bb7-805c-daaab95f6227",
            "name": "Positive Testing",
            "item": [
              {
                "id": "478a25fe-0698-489f-a9a9-fe6a611c4760",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "484a0042-f581-435f-beb7-33e722d8425d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "71fdf2b1-c0e8-4510-8412-56ab21d1f2e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc8fdb77-3b9b-4bcf-9483-02bd181faad7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d6872a2d-ce08-47c4-bf27-fa256a53f2e0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5ea0442a-8a73-46eb-8ef9-2b554649cb5a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "625bb66d-02c6-4bf8-9314-fb64e1ad033a"
            }
          }
        ]
      },
      {
        "id": "4c8e5604-84cd-4fb4-aeca-0bf03b8e5556",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bccfca8f-cdfd-4971-8719-a734e84a2405",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7a915232-8057-4264-a7e8-7623c54aef2d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e69ed050-d522-4915-9451-195ed09d94ac",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d76a41-8805-45b6-a7ba-1c03b2cd65b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e13bcb-be62-4c1c-abf5-450f107490f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa894a0-826b-4ffb-bf84-55d138b99632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c7de2e4-c07c-4670-a099-b8302a8a49df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d31d43-1986-4640-8fec-4c9539f13a9b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a36d9da-a865-4a25-902b-0eb7ba7f1337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc079ea-b4ed-449b-a64c-87edd9747cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f787ac30-4540-432b-a411-a7a07778f66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef4e8a4c-0106-46f1-967a-9c5caa8b555f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfc1aa1-22f6-472f-9cdd-9e0b238f8d48",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5af5564-8a38-4cb6-b749-7067124b996b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c55436fb-90db-4f9c-8b35-5518351f5136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1bfd731-c949-41c5-a0c3-5af85c2c575c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96a99f45-dc59-4639-886a-974cc72b98dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dffd3bb-53ee-4a3b-ba2a-7ee27368232a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598e0f8f-8dd0-47a8-b08a-7ba7f9571c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28d7f7d7-ec20-435a-ba84-6c23bf8ba171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9cb1e7-dd89-4ab8-98c7-03af21d32d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe00f49a-5c8b-4e04-9ed3-2eca7710b39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48cd7bbc-41d3-45f2-8989-b555edac9f70",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64aafad-0266-4edc-9362-1fc2af6b58da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edfb4add-ac05-4412-95ef-4525fbd64a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31f9d3d-c8b1-4c50-a970-0c2ea73ca11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d5d83ab-fa7e-4879-b40d-f4aaefe5c553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f931bc-8356-4c31-bbcd-aff28c416644",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664f1338-2ca6-4566-8830-1b7acd2e6f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "975f7695-405e-43f4-833b-bd6111e8c12d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a3abc2-d876-4b01-9da9-1f830f275de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b9a7ca6-7663-4182-ba5f-3b7d1e99c751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236efc07-1b17-4dc7-a0ae-ff5504a60f12",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b3b04c-c164-47a0-bad8-58bb73f4f569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22434042-5cbd-43ab-b412-b7c257f2e324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0852dbb-6389-4006-918d-74316cb256ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1042afb4-d396-4600-b83d-08f4f74b9882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e608aa-b6c9-4a00-8578-b5d3f9e2b4f1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f84c77-7f6d-4d86-affa-c22c4f6027da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "144b3950-0f47-4d4b-9724-5d552b18dba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d37691-2a4c-4e6a-989d-6a9ae0cf9984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd29d900-44f7-4257-bb62-925edd1f59e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89266acc-aa44-4701-8b9f-ab06210c2bce",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88b1fb9-5434-48ec-8a76-c980b6059c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecbd083f-c3d4-4452-93f6-6bc0f0385949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d580f5ba-f94c-47c7-b591-6d79d6ce46c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b07a6015-e33e-4ff3-b14d-342ccfc5cdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e27d725-0905-4213-863d-a4729b0c8e13",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0946d7c5-8563-45e6-be8d-47c8d0f9b834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe0c097-e605-4986-8dcf-70b0687cbba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93444b2-bf89-4968-9a3e-2a9be76d6a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1b3ae76-2431-418d-a54a-1991e90aa7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9abee62f-f3bf-4b40-bd7c-b0bff684c70d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4573c7d9-edd9-4433-9ad5-82cd5a47f0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d98f0464-cc0d-4d29-b584-7bb05243de95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5dfba0-70a9-4913-b2ca-27ab25a457ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f35a10a-2861-4762-9fc5-b242465f9cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d86cb9-0868-43f7-bd43-dd84f0e88c44",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a19b4c6-8486-4f67-90ab-1b17570d7bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "513be2f9-8070-40f9-98ea-a380d42e1c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4df42c-b589-4298-a903-42308094be64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cafa5919-bbbe-474c-bdf3-3e5b3be77fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa8fdca-2537-4bca-8f7d-6d9cf1896346",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7280f6d3-4628-417d-8831-9790ad5fff33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0368e74c-f1c3-4bbc-a7af-0846b3dd5c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3833b6-5195-43ec-a507-c2635516c143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd67e8cf-aa82-458e-8af7-501c27ef8896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c6add2-59a7-40a4-ac19-a54cf8eca696",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a3fa21-7562-497f-8baa-6765fc490e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe5fe66-c2cf-4395-9c7c-9e048498f240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fac0de-5260-42ee-a93d-c04a128f6b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9d5c2b3-6939-463a-8253-c794c6560add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a491945-9b73-431f-89de-e0a00fff24b1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55d361e-a62e-4ee9-9824-e14ba615acdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c031ecb6-6c54-44cd-b8b7-c4c642062997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a58b211-4c89-4f0f-acc7-e1633f0b4bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6842e8d-85a9-4e72-b4fd-c11e45727a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e436f917-d3a2-4f7e-bd04-e1b1f21e23d0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5759389-b994-4a71-bb20-3f78836575c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "936ff63c-b753-4ff4-b11c-0594cc93dace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8923ee-7265-4522-b64b-8598e5d639b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85f2ecc3-68c8-4bb7-937c-e32238b0d5dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca21f46-247d-4147-9b71-a0a010f6d6b5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d71fab-bba9-4dc0-89bb-0e624e0645a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24810ba4-15f8-4705-a4b1-653529134349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "757d0932-3ba7-4fb3-b42a-c5bd98055a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8862cbc6-ae29-498c-a062-f241e7a5c9db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c08312-4af0-49f9-bfc6-32adb31aa8fa",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0970c0c5-830d-46d3-86f5-7275cce82944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101e8108-d489-4f99-8e7d-30845e58eaed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50012def-9bf8-42c0-aafd-884f1fdfc270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b26849f9-6d89-427f-a620-3e58cb834600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d548b3f-f222-44d5-81b1-a29eb7502429",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1455f874-3476-4116-add9-7c12de8b2d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8275ebbd-780c-4109-a804-535c280ed00d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2b5dce-5f66-47f8-bef2-43a83a70c678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "caf86e33-49a0-47b9-8982-4d237e6c937c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbeb747f-5442-4df9-88b3-c4f0b93b2f5e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e4ab43-23f6-4609-a596-67bfa9364e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec9c1307-b80a-440f-9ab8-bf1ffa77b807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9176ec82-555e-4b12-a8cb-fa5bdedec2e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd93ce97-81ae-4bac-864c-56da0af273a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb20de2-ca08-455f-b3b9-e2e27244ff56",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1db6c77-edf0-4476-88cb-588970b731c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ddca3d-b792-42bc-8eed-179261d31b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914a0612-af31-4822-993b-090548c81fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ef71b42-f520-444a-b2f4-bf02638fb4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f20cec7-5b9b-4f51-9282-211522128db1",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7160fab2-f2e0-4607-8a18-f98afe206de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f91c5f8e-1faf-424a-b888-08a535e2d29a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259bfff2-d5a2-47a6-bf72-39c04d8cb3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d487f42-b1a7-45fa-acb0-1a53c3ee2609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1384ea42-0f72-4c0b-b1e7-f48263708fe6",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952fdf3a-980d-4386-8db2-192be9cb2c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21046ca1-117c-44df-a00f-b1363ed4a4ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76addd5c-bed2-4395-84dd-226dff3a3c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b6eb3a-9bb7-48e2-a8fa-de9d137e7792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9d43f3-64ed-4f68-a954-ee7d1a25f69e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81f9fd9-a4f2-409f-be0a-7478dfd6e47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d94c93-d0a8-49f8-8773-3158ca8496bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37aefc6a-887f-4a49-8f0a-cdeda3db8be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f430b70-4d4d-4ab6-9112-e1f1c6fea386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d1b197-083c-498e-a6d6-4e92b80107e2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e6cab9-6190-4200-b933-ff56d209521f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcae3d86-1644-4e09-818b-cdb949b5f23a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f03636a-8497-4738-b81a-27a7b009ba0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8620a353-bcb0-40dd-8652-81fed37b6918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a564c1d-24f9-4297-ab62-e8baca6055cb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "227d9a9a-8f51-459f-be99-f75870c0d7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f1f202-95e9-44e6-a539-8a8857f38a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a78ac4-4e3c-4c70-bad8-3d3ef36d5446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2633915d-0730-4e3b-8b57-e100a196b273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b020434-fdbe-42b1-89fc-186944ba7b48",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8425bbce-6499-4b47-a12d-1c0b42775589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c8bdc2-97df-4f6c-be95-19c89d43790e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9e5105-1a75-4582-8e7b-bd914587869c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b6aa9f8-00e6-4d85-a009-b3d026a06948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfdb624-777d-4d83-b245-972e41262660",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad7dd33-23c5-40fb-9460-b3871b4f16c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26df977b-4f3a-4ea9-ad33-06c6d349d14b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b6048f-47df-4b46-a976-87e9fb70aa94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "db3033c1-788d-4bfa-8ca3-7633a534864f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bf0aab-ca02-471b-a63b-c01489bbc2ab",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb9afc8-8e54-42e9-87dc-6d7dc0410ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2470ad36-6808-4fcb-a014-889117fef141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780581de-e75c-4f39-ab19-bf640fb4165c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "abdcc94b-1f54-4f22-b14c-ca512499bbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7c4372-a8bf-478c-959c-f73b06fcc4d1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6669e38-660c-4632-95e2-287173ceeff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c998dcc7-8492-4152-aa81-39fad0df876f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4a0542-fd6d-4854-beca-7df964d95a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "09b82c47-e19f-4f95-89a7-107e45605622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828f2954-9917-4c6f-8f35-3a1fa1887f16",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d7aee6-507c-411e-8837-49b90e5332f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ce2db2a-7a98-4590-a57c-85cc4c0fce5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52df5da7-64f5-4490-937b-d398631b386c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9afad2be-7bfb-447c-bc41-dbdeea1e8cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a63bfd8-dc18-43da-8768-ddd314c30a38",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e348e3f5-9829-4847-8a67-9893f4b50426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "078fa586-46a0-4a1b-936f-af42d34d5657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd94729b-95b9-4478-b4ce-1b27d8b0b561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaf904f3-0b02-496d-86c4-416c8443dee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c545c9-ed82-4aaf-bdf3-5ea4ef162e5b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d843f5-343f-4c85-a40d-1de63f3f3ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a28d4d5-dacf-4e69-8882-9dafb7dffab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed13ab65-ef99-4f5a-99dc-c61a6336acc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e81d1a8d-7122-45ab-91c3-e74b050322a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701b726d-c88f-490f-930f-1abeedbf53aa",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cf1cb3-56b2-4dba-8cd9-bcd5e6be5b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef183cd9-3d35-4f6d-a397-9451d60bb3d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5bed13-1613-4ed8-abb7-e306ab850c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d01017db-dee6-4198-9434-5a8c45f714f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b12e8a-f728-471f-832e-8e9e14e1a626",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce3992a-7956-4246-a16f-cefe5ad58d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7cefa74-08f4-4356-b4bd-250249bc4ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432ae546-9980-4532-b8f5-24a5049092bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b12afde4-4136-49db-b90f-80036563b111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a3825a-fa2d-4269-88d4-80977c3232a1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72799cec-7588-4573-9e6a-52d47752c590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d36fbf2-a1b5-4434-8f57-08fe6a427704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4a7b6a-6deb-4294-8a4c-decd596d299b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "62cac063-5b1e-4c67-adc1-be39578bb304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402cdfa9-f201-47b7-9c79-41ac145e77ef",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca681e3-43c5-4e90-8102-59970202700c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "017bf60e-ac11-4fa5-a73d-2b25c895897f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2110098c-e31a-49b8-b413-723603f24429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0aa951da-51ef-4dca-a34a-adc8e7c0cd08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1548e11d-a282-4178-9f1c-9a9b13758a99",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6cfb16-45a7-4974-a83e-c9ebdcd39e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee95e43f-86e7-4400-9f39-90e8fd9c1c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af564c21-a76f-49df-b310-0b88420a724e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "babb7131-5152-4541-96c6-24f5422d3e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4fb4ead-a727-4f8c-b09d-40dd59ac4915",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4487619e-e0f9-4dd6-aa0c-87bc366d239a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f95a75-6050-4ad6-923c-bcc74fcfc45c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2717280e-f339-4741-ac15-d07715cbb28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "82b0d3f8-2f69-420f-a0b1-921cc3a09368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b283940f-54e2-420c-8bf0-200f01e4340d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9630239-6f13-4f62-aba2-61c084c926fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af39ab2b-5479-413e-a997-fc0dd2361ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a203d84-2035-4def-bde7-ef4191eda2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a1f8b69-af62-4dc2-a6a5-33ea8a547a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4651dc1-e799-4118-a489-043411935f54",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39fc8d78-4cbb-47d7-b3a8-66e1ba750195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5621db49-de2c-46b3-ba16-c61a732b7fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d3117f-865c-450d-a475-1aa34824f139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce349897-0ad0-4817-9ce7-6d510808421a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49aa741-2ae4-41ce-8bfa-5d0867a1c073",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8b1f88-8eaf-4556-89e0-e2bd599d70bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f978493b-e449-42e6-9a1f-8bc1c7eb824a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c2176d-db13-48ef-a6e4-98a00faa24bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a9ba40f9-2d1d-4c4a-81a8-afdcb70818e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d3f22b-8178-449b-90ff-5ede691891ba",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ca0df8-ef7f-43dc-ba9a-baa50331f834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e994be3-a985-4a64-acb0-7bb8dc7ddb80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d048f788-6ab6-43af-a603-e59a69fdc114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec50b7e-39c7-44f5-aa58-e6243b090fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3988c4ef-f0c7-483a-8ee0-988af27067da",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06706d4a-1125-4025-b3b9-17e7406292a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df1e20e2-9a17-4ba0-ac44-7bf0279d1bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ef654d-0760-4bea-b8b8-d4cbcc4ec30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c58187d-0553-421b-9d67-49d17ccfd658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c25d2ec-2de2-402d-9a20-d298c9bae94b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739acb5f-70ec-40a6-9759-72c10f0476e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e5235f9-a467-40de-ad2c-d0b80e891511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbb028e-f36d-4c64-a613-f469fa4af972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "37fcdfc6-e0d5-47e1-92d7-5f5d0cc03a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e6576b-a371-48f2-9979-1566bc0eb5fd",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab4395f-591b-48cf-a98c-0e10f1fbc352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "294e6c07-8e91-4dae-96a2-ba6576e56cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff81c81-35fa-448e-985c-081822fb2b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd6de29a-a5aa-4947-a6b8-70706667b07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd42257-90cb-4924-8879-a86b586d8822",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3356a1db-06f6-4110-bc7f-a6fc0f9a37b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b01c2d-bc51-4c0c-9eff-41fe3b45e52c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00359cec-87e1-4397-abda-962a48fbcbd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98266fc0-4649-4a78-abc2-020a5c71c5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f57acc-75d5-4850-aa8b-ffba5f8731a3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da7b9f9-a231-41bd-a76d-c50b4040871d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff985c2-8b46-4282-b8c0-e0082f1e83b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c71bc3-ae95-4475-b8a8-4ac39beed5e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8beff8-54f1-4244-bd64-333f25569544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b27582-cbf6-43e3-ba74-31767a841332",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2fc4e85-118b-49bb-99d4-410cb973c287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2877d44-41c6-4c50-806a-0a469e3e3c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d688e47f-dee5-4270-988f-5186a6e6bfb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b29dbda-bfc6-44aa-b9f5-822cd1c38bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d779021a-05c2-4e92-9b14-08a85a0f6102",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa51c13b-c23e-4ed6-8967-119f66872a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0451475d-9c28-48d9-af70-989448da2af2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c331a11-43ec-48f0-a9d7-bf05421a606f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0edc908b-f8f1-4d99-b8e4-fcc3096d4286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3fa6c15-f647-4e38-aab2-e64351669bae",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e0aff2-7b1a-4fc6-96a7-0c2e75727366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad52fb14-d078-498d-a76a-ae914f2aa933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ae9c00-535e-44e0-abcf-5e82bbc2c1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "378f88ed-330f-46f3-ab1d-48e72523f9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04d9450-7395-40ba-9f99-cfd1281b0307",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a376574-9499-480c-8f57-5f254dff9169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f562844-5665-4fbe-a932-1214f5ec8703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9fc846f-0668-481f-988d-b6243091bbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3f3e3b-f7d8-42ca-9be1-25668c599cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d3f75d-4db6-488f-a809-f1e47514eb2f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2a4205-4de9-4717-9ea5-8306cbd8d841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8deed729-1b26-498a-a720-eb6b7543c044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18aff89-764e-4686-a87e-240814021db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30a1153b-d91f-4311-867e-e6d3561c40b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144bb4df-74f2-460d-bbd8-e67ff9897e9c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04122e93-5be4-484f-9698-055f6f91f404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a3e5075-9d45-4706-8091-2d7cc2400420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323ca7db-a4fa-47b9-b267-ea786b00731b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d693af89-dab7-4ea8-be5e-4abc41f8067d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8331a831-a9b8-48d1-b122-2c835f0d7ac5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d81ced4-3bd1-480c-8ed5-57272d00d833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c3279f-eeef-48b9-bb68-21e4a520d07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478eb620-f0b9-4166-ab94-2b3baaa6e7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e72eaa8-454c-4471-b8f0-49618688c731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b139b951-7548-451e-bd40-e278698b817a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5b0f75-1f05-4f20-bb26-fabe42d7e1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e1a973-d248-48c6-9a96-fa3156eee1d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ec7644-a04b-4dab-ba71-37c321ad88b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "305cde4b-4784-4065-8a23-d36fbdbc2273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb3cbec-5ceb-42ec-b101-26e6f5964d71",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c8bdca-05a3-40ab-8658-2194321d5d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27404a6b-2be0-4db8-a0e9-b4a61a2eacc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a830fe38-7263-48e5-8434-26a8974c7858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "66b2db52-0652-440e-8e39-4152f68bb76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9e6d12-5ac3-4c8a-a533-0b23981776f0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ca899d-71ae-4ae5-94a1-c6daee80fad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "058f6dfd-f980-4620-a441-184970cd23ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ae3c17-59f0-4b6f-8e00-7ea07d9f2cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f81bd4b0-3ddf-42aa-81cd-68fd74b6f877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535ecdff-40fe-4676-8c43-296bbb278534",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb91596d-55dd-45db-97cc-f51af6bc5887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b24fe352-fff8-414b-b60a-e532678c99f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c9ab6c-a4c4-4fbf-968c-fbeca43a480a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "57ee0732-cc99-42d3-be69-d4f744bce71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e390655-2c3c-485a-a6e9-4f8029acd8c5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4e8fb8-792d-42c0-9fb4-21e2ae04db9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f857ac-63cb-4e63-9235-09250359b711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb1fd07-574a-4204-812b-873a3f467a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa29a1fd-7ebf-4aad-a8de-6818dd5c4a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0098bec7-e767-4ac2-a67d-1c0b8dc8e646",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54eb9938-788b-4ca6-9b51-c2329525edd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb120f6-3ee9-47fd-95f5-3079ccff6636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3630a0c1-18ee-4b3e-a25c-b59c20e54828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "90187cb8-df80-4c87-be67-7b7c1457527f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1094efa7-bc96-40fa-b604-112424d91cf1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3c921a-1ca2-4753-a512-f6475a179a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "febbe72c-dfe5-40f1-aae0-e257b7455822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a889b3c-d2a5-491c-866e-7ddad487d394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dcefd3f-fb2b-40ee-9c18-e86302200dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5320b43-6e4a-4be8-9af8-897dd60d7284",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdf1831-13a3-4a6e-93fd-aea385c4f030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891d683d-1c3e-4986-9fea-b56978e37ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fe17c5-fc78-48d5-8d10-80efb5c1f6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "312436a9-60ee-4412-862d-b921f5a7d410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e45cda-f22b-480e-91d6-7b4d6e7ba25b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78bf51a8-efa9-4ff3-8687-aff090f09eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3f6a42-ed9e-46a0-afbb-567932f59bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f56abed-2ac0-46ca-8644-4eea124004c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "083b0883-1877-44d3-a2c4-acdb35053767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f03356-0fd4-4e63-8952-0662cdd28459",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42cafec-9095-4794-b8e8-784f468d1e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d411bbd4-b2ae-4c67-87d8-467238be8e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de2ef84-9fa2-46b7-8775-4b25d243f17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f24ba497-e34d-4b4a-bf6e-91dee94bb749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a0ad9b-25fa-42b2-9701-416138f261a9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434b2367-f757-4936-bbb0-b64b1168d43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65351e80-f3cb-49d5-8135-eaf2370bc3c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30beaf5-8173-429c-aeb9-4c79eccd579d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4888718-bee2-4499-a0c1-e7f1215c066d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57471d7c-9f2a-464c-a927-828fd2c48081",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84e12f5-501a-4679-87bf-148dbaf9b908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d39f7d1-c434-49df-bf8a-8b22e800e6a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81ce704-b962-41b3-8ee9-99b04228506d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d47099f1-3cb1-4760-af36-2eac4e177036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78b5199-3311-412d-b660-6f4213703d79",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b258d0-5795-4975-b23f-897aeec5b910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2985c3b9-c846-4c6d-8080-450376a9ad4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdc355c-0a63-4f12-bd8a-c7269a72a79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "21d5695b-822f-41e4-a709-7f435b23a620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f1d8d1-5192-4607-99a2-84dafa4e7801",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba4f853-2cda-4185-8999-cfb1bf73151b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada3bea2-66b2-477b-b426-33308ac0a8a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc367ce5-33c1-46a0-beb3-f0b0bd00140a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "23169bfb-9c52-4d0b-93bc-534a48e38d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e17316-587b-41d1-8c4c-1db6a89a3de6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51ecd9f-ed39-48fe-b23c-a50359782083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab89ea4-d03d-480c-8647-49903929206e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "542aeb48-83b8-45ed-8bd7-a3b9dca101f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f3b3121-0c00-400f-b0fc-a0f68d1d37fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc550f18-11ba-4bcd-ba09-b5db19759b81",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fa5869-0172-40ad-97d5-34af996b1f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05564a06-e1ab-4b14-98b1-e219a797256a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100b7f64-dd8c-4e18-ae1c-fff6be96bac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d38eb33-571f-485c-9b65-df82e9c15aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd335280-9776-433c-a5ff-ef6127b95bc3",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396c7280-c697-44df-994b-901f5f0e358e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45dc2eca-1ab1-4430-8e96-4ed0c52dcd6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3a324f-0ddc-4b69-9e6c-e3a81d421c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6af307f-ec7e-4c43-8314-6e901765c211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4f11c2-3f12-4fc9-a6b9-4ffac6c7ca6d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3033e8d8-3a67-40f8-8fa3-00e6ca0ff465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8759e326-0869-4732-8707-0e7383f8d8b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bcaa8ba-7d83-430c-9ac4-20af02ef839d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "51e428a4-f05f-4cbf-bd62-f8c2a562ace4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4bf0aa-295b-47ec-b8f6-dfee3fae912a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7993fbf2-1b23-44ae-94b1-ef4042d0ae25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4dca3c6-8a8d-4141-b6ac-02ed3ecd7172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fd0872-526e-4569-80ee-c89b0f332a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dcee8525-54ed-471a-b4d1-6ffa98af7090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89c0f3b-4b8c-452c-898b-391e9cf42922",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048f3773-16e5-4dbe-809b-2338795adf73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57a282e0-1602-431a-b033-ea709bedf1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85479e74-8815-4ddb-b1f9-dfa0c71844c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1cd9fc4-532d-4524-97cc-0ec26e51b473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e8d5c2-7f23-414c-a235-559a741c6922",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82557d9-e7d3-427d-8c94-dd69b37e3dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d76e36d-25ca-4421-8f20-ba8037c87254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e416bde4-aefb-411a-8858-809e929966a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfdbace7-499d-48c1-9f2a-f79c7be510b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1def91e-df0e-477e-8738-628e7ba7b17d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b904dcf-b9f5-4312-9a76-4bb4c676ee76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61222c55-d2e4-43f3-bd32-02dd95bc2e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88dfee24-ec7f-4817-90f0-333acea3c206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "653ae230-5635-49eb-8eca-ec8cf7aedef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd91ea7e-d703-46a7-9523-843bad41d067",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3761768-a6b3-4492-9172-2639327478da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aacb26e3-fbae-4002-be4b-28fb3ea4b2cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3392e6-78aa-4f3e-9650-3e4efe2ea4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "214e6c2c-fa90-44f5-b9c1-9a110bbdb469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feccb324-bcbc-4437-8679-cd4bd9d0f882",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec003ec8-deae-4de9-a0e8-e62046eb1e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c051be3c-4a9f-4c05-8355-3dead2b68309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a60d9f-8a71-4fd3-8e3e-481600e966b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "25b4cc88-a80b-4a99-9859-2e393009b244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1616addd-f8ed-4d00-9f21-974ed8be5ade",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "158db05f-6cc6-44e0-aa5d-dc908ecea546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aaa30d3-eaf7-444d-b3b1-2820115c45c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefdf8b8-0f43-4a6b-b9f2-821b8fa998e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "03d51f6e-8a61-4f03-8ade-e3223c8feed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a36511-371a-4224-8711-d177758f176c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb156b8-79cf-452d-9c73-7a71e7a2936e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608c0a3f-4172-44a4-ba52-cf782ca626d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355984ff-3a04-4652-bda9-8c1ca082ec61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4788b5d3-8ad1-4cc3-a9ae-b82160ed991f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae99b8b-5eb0-48f8-88c8-03939ca79822",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f066158d-30eb-4841-9876-ae210f70fa0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd2f560-a581-476a-ab8a-de241ffae297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb0bfbe-0ecc-48fc-9426-8e22845f36ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e30cf506-c1bd-449f-87ad-7d8b9470bc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486e2a8f-78fb-46f7-b6db-973822cea884",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8d3ced-5866-4860-b40a-56d72ccbbf29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7a5642-49e4-4a50-99e7-cf7720f3f8da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d75376-6381-4b1d-9878-a6d6c7f4c9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4650d68-14ca-40e2-a985-a6ff542d165a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5830a58-b521-4eef-a878-e433c8974a0d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a74afdf-5bfe-4b91-8caf-fd5d393d59e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d9e3fb-81fd-4542-ac7e-6ba9a62e1769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f374ec32-fc1f-48f8-80b8-0e9335498534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1170eb68-e302-4ed3-bd44-4eb592b7b618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c45c52-f7c2-4648-a7f5-f34075977b58",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d827ab17-9221-465e-923b-e174e216d3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e0bb9d-8f59-497b-8af4-2e558cf99554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84bdd8c4-7c33-477b-a5b8-43a4ab5a4509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "83175c7e-e366-4e92-b4d3-48d28a543a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4bd6a47-39f3-4f89-a342-0db666dd5bd0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a976c6-bcd3-4c2f-8d4e-d56ca4cb7ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d83adb7e-f7e3-4782-8403-e58360150924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c46e31-7e1e-40cf-b171-466cb528b9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fffc81d0-1dda-4936-ba44-634f974fcd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34017ee-048e-4526-b8b1-7a5bd2ed7bae",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c3f274-beee-42a9-8199-8c584f01fc64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af638089-d9c4-437c-be90-ba9565db32c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcdf5909-728f-416f-a23a-7ea025492ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3dad04a-7e73-4b72-b6d3-af99ffac37e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4db122-2671-4232-b516-3b64ceaa6430",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f526a8dc-8d4f-434a-8350-461904b09d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66efb54e-0dcc-4913-aa14-c837e63b6c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238602e2-adaa-451f-8ada-46cee6892021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc4d01d5-0ea4-4807-8042-6a90ff03b6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7e3803-d0fc-4f75-b992-cf4c1d4462e4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae764b51-0106-495e-9eb0-7a11520a9075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f66339d-ed70-4548-bce0-6deea08453b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae74aa1-1ce1-4ac6-b9fc-cb5f760cb5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9669c794-c799-4a27-8a2f-fc9a0250463e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71ff36e-881c-4d30-a255-35da5e191691",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42cd1453-97a0-440d-a99f-a9d8836a90c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b077af3c-5719-4d2d-be14-c3721e53fc07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ece2c83-9622-4aec-bdfb-f629cda923fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "65da2365-d751-4f09-b5ba-f01abacba7c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5d35b8-7c8a-4dec-b576-9a3e28cf9ce4",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff944ce-87b3-47c0-8ff2-97021433a3fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "095f7252-401a-4b54-b341-c54c8555767b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c13138-0cda-48fe-9570-7868c2f2e2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f0c2583-5440-4ab2-859d-4b71d4affdba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cf89ee-8343-4a42-96f9-a25c76ac5704",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5d920c-ac8e-441f-a6be-698277dbf4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1038e872-7aac-4c28-9171-d14dc1c9c092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047366c3-e01b-4bd0-87ff-dfb0c2dd06b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "da86ba54-089b-46d7-a87c-24e4516bc727"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "52b70e3d-1875-4442-a4e5-1f82419c4e74",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24ac46ac-f6da-40e4-b733-bac1a6702fa4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c176e76e-d009-419f-b3f1-446711bbecab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2483016-5c82-4880-9cae-cc6f3366ac23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec37da3-540a-455f-816b-33204e0ada3e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20051f8a-ba4b-48de-9f3b-dca47e629b8a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5f0f504-8dd4-4246-b847-6ee300325ae6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a9c550b-62ce-44c7-8217-14b09d85fe68"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "31e40d94-81b9-4bf9-a541-4ff72834ffd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af904bd8-4e02-4379-9612-63764751a578"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1e182eb9-536a-45d4-8720-6c12b5f54501",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "83da0b8e-b117-4861-a7ac-8afa189583f2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "601ed6b9-81d8-4fb8-b9e2-d777ef9a5134",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c9b1b9fe-88ae-44c0-bae5-0e1e3f3b1e52"
                }
              }
            ]
          },
          {
            "id": "b0903881-04f5-4e88-bc2d-140b11ef84a7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6d6040bd-f7d5-4990-bb01-ec9e6e450a4e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "f3a3dcb0-5f85-424f-9110-88c39ae56265",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cdfc60-a4b9-41de-ab84-28d33d57aa13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9636f559-742a-4ee5-bc6f-3fa11b2a82de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58f86ef-dd24-4c33-ab0c-66b15443b899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b467a014-66ee-435f-a56f-f50e64cd212d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "61852d8e-70aa-4aae-9f47-4e37b06d69ce",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b3cfd21-8399-448f-9d65-3c02c2e97fa8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "66e61420-9640-426b-8ea0-4e8ecf8c38f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebd35bf1-c780-491c-a059-a61256de802d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "77755df0-2fe8-467b-8cb3-4fbf1dddedda"
                    }
                  }
                ]
              },
              {
                "id": "c72be671-587b-470e-9963-434196fb13b5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cb8cc17-1b09-4e98-a829-89bb7d4d4ed4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "75171506-0434-4448-bf49-f3793f427bc4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe977cf0-a1cc-41ac-bd5c-e99f341bbfd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3510a174-4685-4330-867a-6cc955db69f4"
                    }
                  }
                ]
              },
              {
                "id": "78b7f380-40eb-45bb-9f7e-f371ee0af7cc",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a07fc07-0d8d-482a-90bb-8941b64a701a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9dfa6c9-26d5-4271-aec3-5c48028f92e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56a82383-e55a-4a62-95c8-1c656244e10a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ae5c0efd-fc58-4410-a721-82b50f48fbb0"
                    }
                  }
                ]
              },
              {
                "id": "82b10c0c-e991-4f67-8980-92e642689d12",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3219a45b-1f5f-4e93-a646-cff1dfd8a6e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98772ee5-a2ee-4d77-9bd1-c78e25d01069"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9225728c-aafc-4f83-ae7d-a6dbd9a305c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "80e5fc2d-3efc-4df5-9f66-9f0252bea492"
                    }
                  }
                ]
              },
              {
                "id": "18f23ba4-73b2-49b6-a06e-938af9ff4a15",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb1604ec-e581-4d6c-bbc9-854911dfb75c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e3b493e-4767-434e-a0d3-f9d2c6629c8c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cb65ed9-44ca-4d33-8b04-6da8892136e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "67517999-0a94-4eb6-b313-2e2762ddd8f6"
                    }
                  }
                ]
              },
              {
                "id": "0c7829eb-fa13-415e-af68-1ff43763523c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab835781-02e3-4cf0-a175-55462402d79e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f87112a5-9733-4f14-a44d-55c05ec2f6d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e92c6a0-71d7-443a-a78e-92b98d3e6eeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c98d10b5-fff3-434a-b003-16308d4561a8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5e191578-3fd2-438c-a346-af6f5dd53e2d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c46ad8e9-12f0-4df9-86f8-f030346dd459"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5c7e1aaa-5003-4a5b-9dcc-f743b3f0858a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "78cdbb41-7788-459d-b109-155ffa815d77"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6fe98c42-e46c-483e-abc4-35456dc12e76",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "154bffc6-8525-4f4c-b493-54fd7b6c9570"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dd44f314-a88a-43eb-8ec1-1716957eee65",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f17047e-7914-470d-86a9-f3517dcf3f6f"
            }
          }
        ]
      },
      {
        "id": "a4c537d3-a176-4b73-b4f7-ae79bbce6a24",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "9d1de31a-f889-4e72-b272-109e35cf128a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "714d9f3c-3cac-451b-9999-1b6d76fad27c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6f14b538-e49e-4b19-80c9-8c8640997ad8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "418a87a2-5ddb-4c52-b5eb-2f200cf9a4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "614d6e57-4d60-4c88-ad0d-0dd933e92f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7428bef2-0364-4264-b872-26fb2cb0f0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "85a4f5ce-8df0-4494-b003-642e8ae80dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79051af0-5211-4b89-a012-cd75757ae657",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99dcd90f-a1ed-4475-9cc2-b5988c84a479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72487670-cb71-489c-b2e6-1c7307448a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3ee55b-75c8-4398-8e85-c51060f8bc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a476444-9a06-43e3-9a7c-94bb15ebb5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d282f1e5-b363-47fe-8b16-21aed3e4c338",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898cfe60-a0cc-4cdd-a23c-cd0d34eaa0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27ff88a4-63c7-47d9-b043-2df586cad864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f999472-5c7c-47ba-8736-a4edf3ef3a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e726f9d8-ba2c-4513-976e-ae339fe7f768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d99dd11-8c38-4fb9-b13e-f0d4c864e233",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6484780e-2159-432a-a8d0-55ec662b0ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a9ad8ff-764c-44e0-9fdd-8c5205d1889d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f34f73-d58e-4c7b-94cc-f1f9b93079d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1934fbe7-083d-42db-96b0-78502ae9a847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e402ef-ce65-40a9-a5f6-36884e53402c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0681aaba-3006-4e3e-9e7f-5786aca3f51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ae58ac-ad56-4925-81d5-73c514f282ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fcc469b-afa0-45af-ab2d-dffdf16da7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d8bf7f-f916-43e6-a259-4070d9f898af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072a469b-9ceb-45f9-ba20-cbc732ad9c65",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade1c6c7-3695-4993-9536-6849153582f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e635fd5a-416b-4a18-94f0-ae90f98a2a3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a50640-4ce9-48a6-ae0e-6a240f396c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9455f405-1526-49d1-bdf6-261c26bdcd58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da893ef-f492-4033-8f58-138d3bbffee9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ff97f1-9ea9-40be-9c61-5887e54b8dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18823246-da05-4414-9ae6-993d7b82df90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b153be09-0dab-4ee8-acb1-b974707be64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "51cc8185-82bf-4599-a495-016e322974a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e9cac1-ffc3-4207-baa8-494bf487337d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "571d4e3d-fc64-41e6-ac13-8b8b4ac0d4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "419dcb7e-aa18-46ce-85ee-da20ae0cea2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26bcf87-caa6-4608-a576-a292c30366f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "411c8573-7c87-426a-ad1d-f863ee3fab30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8049c33f-2f1b-412d-93df-e65a844f985f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c250343a-9a7b-4a9d-9ee2-801b87965914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf58d2d-f5f0-4d11-ad8f-ad65d6ecbef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e954e5-175c-48c6-a9cb-dbf9f99a7bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c70b5e7-1f62-400d-8d2c-73096c4e6195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7204e0-5697-4369-ac4a-c1b74d23e69a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6cb63d-def1-437c-9fea-9db9f2b1a4f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28197cd9-12d9-4ab4-9676-5bd9de6bebd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50f2f1f-5d67-4636-84be-1dd1b364cbc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d893813-4e72-444d-9d4a-73a3730b09c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf24b6a2-a92d-4010-a216-4129010cf864",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e63486-6524-4f67-b117-ab6523e65287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0784b75-a2ef-41d8-a2f3-450d4a94f57d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9e021b-f1e9-4008-b7ed-d2fcb0a67dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "443e252c-95fa-4ead-9bb4-744d563fb1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af67d4b3-1104-4872-b201-cd1770c408e2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062ca7e1-1a23-4279-b9e3-3838c55f9cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a916ba-7027-4a46-bce4-89f76a248f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44ef888-3e3f-4634-acca-1d95a4052af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4617a5ee-3c40-401a-9158-8620f1fbe7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aaf9a37-0044-4487-9fb3-43e02ac608e3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0458b96-fb97-4bf6-af5f-51e314ca3589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e772ff26-a242-4372-bd28-f5f87fe5b327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5127b67-ac97-4379-a885-0a98cc6b26e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "170a35b6-dcd8-477e-b094-261552090af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2307f2-03f5-4aaf-a27b-1f0835bf0fc7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ce776c-b28f-43b4-8e27-8ca3075de716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5327858c-b347-4cb9-b9af-6c99163aac33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f4f590-f19d-479d-b27e-d27830cd9bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e21c41b-bb57-4750-8d89-a07285e09c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f8fef0-aba9-4548-ba12-4c60fa8e716a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db348d1d-3d26-4af8-a9ed-327c3456702a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a411e675-3e84-4230-8932-1dd2712d8149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9d8fd9-639b-4225-9e79-6f18b4c36a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "458bc0ab-47ca-40f7-8ba0-c7c9948b1d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fa39cb-0130-454a-a1d1-c67f0941feea",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f86f973-e3e3-40c8-b951-87c0b38e523c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f513bebe-2df9-40bc-9d85-3c21fdc47e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58073c03-570f-4ef5-9be9-9512870dd20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e9f1892-c118-458c-8506-9ea882c4e869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b2ccab-a178-4e8a-bb84-9320bd951340",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12200b6f-c995-458c-bfd9-22da7ccc53f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b0e666-f355-4692-bfc3-2f1d7b674865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a9a339-c6c5-464c-95c7-9bff927a2e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "101c84bb-c077-4a0a-b9d5-57d8a4fd0e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddca7db2-66bd-4216-8cc2-82194c03f2ee",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07721262-d3f9-41ee-9bd6-5cf33fe45ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0ae03a9-68dc-40fd-a5f5-6c8d2833f635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cb5118-07b5-4c3c-a226-5e7ef5a36253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "048995a5-229d-4b1d-ad44-0eef77ef5ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de95141f-897a-43bd-a081-6e6ae52754a7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ecd7e45-b7c4-4516-a8f2-ff7e08277714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e2d975f-c340-4cd6-aaa6-26fbf7610d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0edca071-7225-4ba5-97ec-ea8fbcefdd6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efddaa70-7ad2-4522-bdc3-a56fb8864ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f387285-0677-4b09-82db-5fb4a8967193",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ce596b-e086-42e0-8d2e-dfa9b2848f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f2fcb7-d140-4887-955c-35daf6e63ad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a3dab3-ac1e-443d-a25d-32ddf496bcb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0566785b-a237-4a40-ad92-efcd1a3a3a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ac3555-3bb5-4325-a68f-9acb723f2636",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4320c767-bb86-4c69-b113-76ae3c9abfc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b8d0517-956f-4565-90f0-1c4efe675a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffec9e54-125e-4aef-b4c9-6dce44f2328d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37a1cbd9-6f97-430a-af80-b7f9c72f7b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e343ca28-e9a9-4632-b379-ef0dca9c4b95",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1532c79-a14f-4a09-ae7b-0509c7759c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2561c10-11f2-4efd-a84c-e6f8c819a5dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4233e28-d64d-4a15-8a20-1e2b695e95fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b2ad028-653e-44ad-8664-9cc957165151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d313f27-fa7d-4324-b4ab-8a96a7b9561c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "721f9a1a-9b3d-4692-a5b5-5920c50788bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "432ea16f-f5f2-4ed7-8807-b09b07a4900a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874b5daf-df57-4650-b9d3-a247d980daa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d87cf395-23cd-412c-8984-1436bfdc155b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d71357-668f-4bf4-af47-f441dc7c5cf8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104213d8-fbc4-432c-901f-09aea2a4e398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91dbb732-9f38-4164-829b-0914f53beca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d45008d-0eb8-413b-b722-7c2e913e36b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33d0cdd7-b437-4acc-bd50-bc426776dd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e461f69a-f29b-46d4-b0e9-bc018c1ee5e5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e09ea47-61a7-4b88-b7c0-959adcc69a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec82325a-7edf-465e-ac2e-d22e0a8812b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ea17b7-7bde-43ba-899e-36eed51bf7ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ddcca2b-8b06-407d-b1c9-785520473f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279b43dd-ca16-4117-9c15-e776944bae9a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52bf50ef-1363-450e-b422-cd75da05fa80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a22d06b-6db3-4aa6-adfe-2a903f491ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f5286b-5146-4e25-b58d-1d7c3263880c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f9bc2fb-2898-40e5-b71c-bfb171e942b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f60f489-315b-4b35-b766-0fabc35d4cfa",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddafecbe-7228-4b7c-8a59-2ac5d427ef53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f792da3-1d08-4907-9b79-dd58a4d82538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968ce481-8fc1-470b-ace3-eca1132cbceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91c25ad2-bd42-4526-b938-855f424df839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e654ef4-38e3-4890-be00-28c4c65a2ccd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0342041-7980-46bf-b421-fa1cf3b57ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59e7a476-4461-453b-a1e5-50b5d93ed2f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ed8e7e-fa85-4728-8a82-080a56541615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b84935b9-c6ef-46b2-a6f2-3502e5bbf3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8af036-59bc-45e0-bfd7-f3609a392795",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b13a8d-18aa-4d6f-b95f-9d3c2ccbd267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4e40df0-e5a2-4503-8d1b-0128ceb50248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf7bb0b-c8a3-4814-b93e-e76aaa75c90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3550a023-4eb7-44ed-8cd9-d3fa38772f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fcac271-9b05-43ef-8456-9d4523f52f76",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c1bcb7-11a9-45e7-afff-7d59f2bc900c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e66361-25bc-4f56-a0c9-d289f7aa183a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af91736-28ed-4dac-b994-fc4d4e366bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "840be4a9-5c1f-4008-9780-26b5ce15e006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca0fc9d-bb50-4e04-b990-7f9f85d9a19b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03979195-3944-4b0c-b944-548fbbe47e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db2f8148-13a3-4357-938c-ed57bb7595eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ec17d3-5504-4505-bb60-cd1ec15200d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13f9ae7d-884e-4c4a-9295-3ff7c6032b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577a6543-98d4-4f99-a46b-7cd946925160",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7136c5e-1ea0-4832-b296-7fd651433c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e032e4-8c1d-49eb-b91a-0a8acbf449ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b94da9-9b6a-4231-92b1-a0969d75a26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17846532-f8d4-4bb6-856c-d7cf3b7c1af5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "de527087-0afc-48fe-b0ed-3158b07a8007",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "62d60a84-c1bf-4949-ac61-8c1a54115508",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50cc76bc-1ad9-4d01-ab5b-14ec672c085b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "681a428e-8e12-4753-90e3-ac3efa1ce0b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07e8533-eebe-4e42-a2bf-264cc0d796d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "754c32a0-df4f-4503-844f-9d4bf7a47b32"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9fc89233-0ddc-4299-b8dd-1ae50b7a874b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98da991b-c57e-4940-b040-ec99e92def67"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2be9c92-52a7-4cc6-b810-41b779b3100d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aeedce8b-10bc-42e3-8d63-b801b206c957"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9278e738-4d93-4543-9bbf-eaf545539fd8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b346c4b8-a700-41cc-a4ff-10d1abf06f23"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a6908369-9682-4bdc-952a-4a061746f4c7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de261770-bca9-466c-bdce-58d6876514fd"
            }
          }
        ]
      },
      {
        "id": "e5029df5-5fa9-4c25-98f6-2ee80f18482e",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "daf4d2e9-9e37-40f7-b19c-4c150f087cf6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a951cf95-50c6-4665-91cb-36d2913501d3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cbedc1d8-defb-4fbb-b199-a37439b2b60b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca7ae12-03ed-4f7a-a333-d5d9601be363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60aeb627-11d0-419c-95c0-f292250827fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0d2598-90d6-4021-a187-5416d80fa42d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f871e765-c20d-45d8-8b1c-009f2c1e99fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d066c9b-d8fd-4029-81bd-c7f1996b2bbb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd58465d-313c-44b4-ad34-2594a92acf0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa76804-e808-4eb4-8e36-6657ca75e2f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403d7409-1317-4f24-a70f-b33d7155f0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "74f3db17-502c-4508-855d-2fd15985fcb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d4505f4-a6cd-4d35-8d46-546299ad485b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855da987-05ba-45e4-b5b0-2ae09dd0805d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1267155a-c034-49a6-bd4a-3cd26ce7ed18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40e84d4-1f1c-4570-adea-cd3467ba487b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc84f37f-2496-47ec-bc62-24c4db6e1bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8bc1cf7-3999-4c82-a25e-8907572e6bdb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ab6214-6105-43ba-8456-eadcfa51b71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78bca253-afcf-44c6-9edb-8397720718af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bcf63a9-25eb-41d7-8b42-5cf8da658232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7acd9528-c3ee-4411-a4af-017da145a26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43440e67-b397-4668-9233-d4e2f5a23496",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b09026-1012-48af-8597-3c2c2268d43e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57737c73-fb51-44e6-94b8-ad27f4d49f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4365dc3a-a8b5-45b6-ac79-bdfb738f2eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a30638b7-0263-4adc-a177-fad2e9445f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa991ef1-cad7-44ba-a0c1-ec01392d06c3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac7116f-a2aa-4126-b7f4-79a01f7fa223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a75ff9c7-0693-439a-b343-8d9a9e0cd79b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf54b1b-9906-47ec-9920-c620b8737551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "574a0852-683f-4444-94c5-5bf72b0bee5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5866844-c7f8-4db2-bf9f-997731e960c9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0b7cea-f38b-4565-b579-e7cdbe459c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa66d6e-5f27-45ff-8bc7-a23b5a47744b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83055ec5-b498-4527-ad04-b048d8c9b363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d46801a6-8897-49c3-b730-b8fb98fdd16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efa7fb3-1324-44f4-9fca-eabfc44efb78",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7675e9-f70c-4207-87d4-b67e50dbd1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3453ba1b-14a7-4486-91e3-538d332c7071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48101f4e-2695-4e42-a060-4c92c2caeb44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2a32eed-d32b-4c1a-8c96-e6b0cf88bd16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068c8ed3-35d5-4ba7-90c5-0a4614918fd9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f65e59-c911-41ad-8090-a82d60893931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f730599f-95e1-47f2-9646-2f0723d57696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100422ac-9ba3-471c-9954-4785eb03e77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0bddab5-e417-486c-ab05-0610ebb6b634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19849f70-ddb2-4365-a94b-f0659e96a733",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a873c4-6e0c-44d3-9da5-e0fe6bd61b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daae6600-056a-4223-b613-d26409b4f3fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0d9e8b-61f1-4cb6-b4f3-f80c471c75b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7185158-6b7f-4b84-a8fc-00923aef634f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4c7754-53a7-4442-aea6-679636dd277d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9483165e-d71d-481c-8c33-e5e2e199ea8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba27586b-a1e5-4b16-80af-ae22f65ff9d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b902250b-b461-491e-854a-f08f4447f9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8d93a6-d942-4cce-8106-1b9c22b9d4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f4f579-3814-4a06-957f-64d21a08b600",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a40389-498a-4b4f-a5e4-4a3eb751aecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3285833-e22f-48c2-bcd1-4041fcf428da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f65562-5f9d-4cba-b0a4-8435a653a723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b443c064-61d9-49cc-a429-b2c6e3890746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cba6071-ce3f-4d54-b957-614b9395f8d1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5960a2-5901-434d-b493-d33029fc9334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ace5c6-7b03-4d83-8ae5-b87e682dcddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca99770b-726c-4088-90c7-3628fa6e5a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be134465-60b3-4e80-bc32-87134b44dffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3ec812-a60a-43e6-b18b-9bd30ddbe453",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b03a4d-573b-4937-b832-33ae34a6f2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b2c9ab5-4012-4bde-9c4a-b9a2cfbcfd3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9ca228-76ce-403e-a8c4-ed1f6139820d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b69fa437-dbe2-4bab-8a50-7b3e225cae48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76362739-f209-4a7e-88cd-ecd735747d8c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8ea799-b833-4658-a893-bf834e740b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0753bddc-6ce0-4a77-90b6-2a7622bfed6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7d2247-0749-4cd0-8d6e-0389f0b583f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6c73a39-0d78-4be7-8b6e-e43c45f4622a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc2ce2b-d6fe-4baa-8f57-c32adf1c6cd0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1238550-fcea-4372-89a3-39d93b463acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f5f23f-ccf9-42fb-8ba5-132bdb20bfcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e09094-e377-4c78-b83c-2d295b0f3e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff4a7198-7f76-4638-9cc4-a5ed21054e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7aee649-2208-4ec0-b1ae-c0943c82cb0f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa58c25-9a07-4825-a16d-f515b339ee05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e13c0a7-c6d2-4267-bf55-64c5b23fc8b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf4ffd7-df04-4186-9215-a6173ef66b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca173e4-4ea4-40f0-a943-7994f74d8e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d25874b-23e0-43c0-ba33-6d4c9e355a10",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702aac4b-1537-4cf4-944f-5ee79b38751b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297350ef-c7a8-4a2e-a635-41b0a17dd865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca0c038-66a9-4b70-b346-3bfba2ec58b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd71cd5c-9240-439e-be0f-468a5f2a4fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5e8bb8-21cb-4845-aad9-75ad20a166f7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a747d8b-c01d-4ca4-8925-35e735e8ad55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cffec8a9-5c57-4e5f-aa31-a7d1c5627c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bca3ae2-c94e-4d3c-afb2-6f7858fa8dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "373c1406-e882-4a82-8496-e8d7f619d203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe5705c-3d7f-41ad-a3ef-a882fe9ae0ad",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed5436f-4336-4f24-ad72-09b229c0e6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d9399dc-5db4-4e22-a719-9249d794397a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99efcc4-0908-462e-9931-1b40876f384f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a9d1dde-48c4-45b8-b308-626763b0ea56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "020a98f2-4f08-4e60-b0d3-07c6217e599f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f2f691-f4da-442f-b40e-12f6b4205288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66c891fc-445a-4efe-9245-1a3d75c59e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49cc9ba6-c217-40b0-ac54-39ff4b24f4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5a179a1-64ea-4745-9c9e-7c756ba7d35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04424ed4-ddb8-4213-9219-7705c7317a8f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ca0076-5051-48f9-a877-e5c7092a4ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b67edd4a-b618-4d66-9940-a0d61f9341f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85b738f-ead2-4736-8ba7-72f8e160b131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a701e30-2229-4e1b-b6f4-72cb3f4d2831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4fbf2f-d70f-4efc-8b80-d6b05b4318f1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b225ccb-0b5c-46e5-9696-20962e5ab53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14e4c25a-ca4f-411d-9ea5-c6935970d154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec62706b-564f-4ca6-873f-4db44d96d4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e56a6f0-74e2-4a41-be52-197351811443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93bcb93-201a-4819-bc64-372389dc8328",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7410947-f0fd-49c5-9a1a-1aaf8622199c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b6056b-955a-4596-8beb-9b0e602c0878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6220858e-6d33-4eb7-8557-3fbf928f87f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c8680c-f477-45f4-a6df-d2d971c7d580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27243f1f-5e12-48d7-a476-5a38ccb686dc",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1789639b-17ff-4d5d-998b-22c1a079e3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb76d38-cd98-43f4-8845-82d581d43c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62fa7d9d-d4f4-45c6-8e14-b1d7a7135de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2183ff01-5471-4102-8634-52cb48f6508b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418017fc-75eb-446b-9342-d50ab8707a1a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98120241-e21d-4700-8145-7af884db3a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db2929e0-6524-4cb1-b099-f937de6a0e0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da5aedb-4f7d-4af1-9e73-0258488c9036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d42841ee-bf14-4953-918b-54cf131143ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa82ae0-06a8-4243-9ee9-eb0f62a69784",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea5ce15-68ec-4bf9-a88c-8061e5cdda5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3870b87c-4f3c-4576-8763-aecf255a6382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026ce7b0-75cf-4aa5-928e-2a3396072869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62bb77f8-f5cc-48de-ac13-d50db78a1a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac35dc3-005a-4613-ba12-bc597ff4a88a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04da284b-daf8-4f2d-abbd-1d836f93e366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dcdb2f5-badc-49a8-a523-6969da5e06fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bdd5fd2-d3be-46b4-95f2-75f539bb628b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e66320e-2dbd-4cad-81ea-eacdbdc58b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf0c780-f824-41f6-8f03-997830b2316b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "839bdcf8-7813-4b65-bb5e-940c197f2a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b42209be-62ce-48c0-8f51-cd5be5dfc552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3b3b0a-e367-4760-b5b5-0808d2993232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80509b0c-dcb8-463a-b013-10267c068b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5a1e77-9735-498c-ad87-b6d46cce3bfd",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4438193-b6c2-4d12-8c7e-14d38177228e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b202d83-a891-4baa-ab76-7960707ae1a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55281408-ad05-4bcd-a60b-bfdaab71495d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b870303-52b3-4cd5-bdcc-6870cc82b1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3508512-c860-4b47-aff3-e58f5cbd8029",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5572b4de-e030-4554-9329-a2ff18168ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea24e276-3c36-4c53-8b93-2ec0c65d1a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33043d3f-fcc1-4136-b0f9-8426e13a45a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b29a80da-09c8-49c0-b9fa-2ab48610cf3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133e20e6-8cb0-42b1-aeca-2fee147d9b2c",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad010a9-362b-4f31-9062-2039818eff75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e18870b-9bc6-4ea9-9ddf-e6e14bf73bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885db489-2167-415e-b117-58b55b30695a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b152c5f1-8840-40ed-9ce1-3de372dfb05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d622f6e-4076-40d7-8916-2f4de87bc243",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "820a82e7-4187-4714-8032-2c3d9160d391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "826624ed-4663-49a0-920e-8ee2dbe5d67c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef87fd25-5658-4ef1-8874-ecbffdb5cdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12367194-95b2-4b89-8d6e-b5945e58dc95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679ed9b8-6291-4ebf-95a8-74a459997ee1",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e201d02f-f033-47d1-b3c4-d755776976ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52579693-02af-4242-bbc9-b0d7329b938a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0240874c-22cd-41e2-93e4-619e2188d091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "564dcbe8-4a89-4e5b-9d21-7163b2cdb84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959cac17-6f01-4354-bff7-4df69491d273",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3887cc26-48a9-4267-805f-5891eeb49863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d99ed25-58bb-4094-9bf9-d1f13122a383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652460a6-0e2b-46a9-9939-9b2947c19bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a199a93-3c05-4e1a-a6aa-0292c549d87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e7e4b5-0cfc-49d7-82e1-7cb90dcd8de2",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33be773d-1346-4943-a43e-091c4d9c5707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e62c1cab-47ff-4a4c-9b14-0c020228379a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86db1562-6ede-4efa-a770-61e0b8cb91b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bcf1456-54cb-4ef0-a720-4aebda04d46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698da626-aa49-468e-a697-62f07b5b26df",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95fc13f6-4ce1-4f5c-bd09-adf6c0492af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c36003-bdb4-4e71-917f-32e1e22547a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2b97da-997e-4edf-8e1a-8ef323855453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87e2e7ec-02a2-4969-8fe0-61fdd5bed109"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "53b6c014-461b-414d-bbc4-f285733c6850",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d6ae5a8b-6955-45f7-99ed-1d22af776a6b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be6cb78-c4f1-4f6e-8b37-596dadeaf11a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d9e5021c-0d4a-4f5c-b8fa-8a7407050766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "806cb06c-1f9b-4cdc-86e3-22f237565971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b711bfb-ef39-4d83-b8a3-cfadae7daa66"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "adb4ca42-7127-4626-9140-09f7a3e1cc6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfcfb91f-4c21-43b7-93bc-0d9d1326d9b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e60b070-c13d-43bd-a7b6-b366cd16dde6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f206ef4-f455-4cf7-9ab5-4f48c6a86916"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d893b908-f3d3-4bb5-8e5b-8b657d24c944",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bbc5a1d9-e67b-41a0-ab4b-25db49b08761"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e5272d4-28b4-46e4-9e8e-29212369c61f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e6a121b5-cee4-4811-b62f-b6649be2872a"
            }
          }
        ]
      },
      {
        "id": "824cb0aa-563a-4e20-9095-d561066641d3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5e5f8c17-3ef5-4161-908c-8c3b22495732",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc38ad9b-a474-49be-823a-7a4f24d4bdad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dea29e05-3d95-4321-8a5a-f7c375bf393e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f7b335-6206-47b9-932f-7aaf5849151a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a9e2002-d1ee-4b98-b8c0-4f5dd1e7f92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405adab1-7b84-4415-a24b-3cf44dfc4e73",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6e843d-49c4-440d-9113-8c095f5c1951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b89065b-5de0-4c50-bdf9-758112aab98a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af98f41-f682-4115-93a9-d45bfad0a268",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f754549-af34-4c01-88b1-9386bb150b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9722e15b-34f8-4817-9716-9c60220826a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96cfc9a-63a2-446d-a6f2-8b290e0bf7e1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe4b7ae-09d0-4ceb-a0dc-41c16bd86f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01856952-e1e9-4069-aa85-b9c720933418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62793cb2-82dc-432b-a454-cf561819c452",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaab566b-0790-47d2-b73e-fe85e490eec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cbb4f40-8cf0-4aa2-9e5c-9e62a735d18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3357feef-6bc9-4af5-93d5-51e2ee5abcd6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6ab2b8-8391-4251-b88b-0329d41032a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad8e9117-758c-4109-86bb-6acc6cb23d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ef850f-e217-40c2-b1fd-2b37cf1de595",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4c4958-4e63-4732-90e2-d4b82b1250ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b22ea0-539d-42c8-a2d2-3bad8d8fb2d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8bbc886-4388-40b4-a8d0-7a8ace59cc84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b78d074-d69b-4f58-b637-bd998bae4e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b8418f-b33b-4f5b-bfb6-cfea3ec5e8cc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e97fba-61a3-47f4-981a-8b2806629805",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5276ed5-07f2-44cc-a0bd-65dc907c083b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a422464-af99-4f3e-afb6-2390cf7034d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8959bd-017e-4f84-83e1-68eb28265148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7481c2ee-dd65-498f-8f36-cee7ff128cdd",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9893e22-6921-45aa-afe5-ccdfc0c047c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1557c68-1e5a-4fa0-8486-55a9398f1864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41855933-9533-4caa-b71b-4a97990cd786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d5c05ee-df06-4d37-8332-fa03b52af258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22bb8db-9343-4faf-bdc4-89b14c80e9d5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847831c0-344a-4640-93a1-1edee420bc87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72eaf0e4-35a1-45eb-ba5e-6aeab4afb8c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2f1aab-6727-47a4-961a-b6cab64470d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea325409-184e-4450-9401-7eb70f348044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10e2a7d-2e17-486a-a0ee-bc4153d2cb46",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02cdab5-8695-443b-a917-ce55a9769636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e65358-a0b3-45bd-80b8-c8056cae8bb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0740eebc-0e49-4696-af4a-da4b6b113ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ecb418-550b-454c-8a80-f0a3d6e02cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58b6281-ba01-4bd0-9d4b-1e8eed485bf0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9895df77-79b9-49b1-b11f-75e22a5d871d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1713a555-f25f-4651-87a8-df7fc7ae556d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c661319f-8d45-4820-bc56-5cc64c31fc8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a497f57-fcb1-4615-9a0d-982db289f4f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2f2580-8e0d-40b5-8b4a-ce4ec4ccd469",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4547b1-26ea-43ea-93da-9b80afd5579f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb31464d-9b14-4a69-8fff-1b5f18bee924"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8763ef29-eef9-4938-ad8f-685f2ee166cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "355b9ad7-fc20-4ab5-ae0e-b3f98297fa30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1014cadf-8023-499e-a7cd-3b7a3cc96a6f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c643586e-5135-446c-b0f0-f283f6f32fe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1dbc1b6-125d-440a-8d2e-1b19928b33e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2426968b-340c-440b-a35b-555e22ec9b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e30797ed-c5ea-423b-b3c8-2a80ba26b33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a51190d-68ab-41d6-900e-eae35a974b8f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9cf603-1702-4bf4-a93d-dc22d198e47d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88f4bef2-fe40-458b-872e-53e2cf1e08f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c2da41-b774-413b-b9a6-6131e64fe1a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "723d1f15-bfcf-4d91-b5b4-01e211ff66cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f78a1a-c16e-44f7-ade8-33998c9982af",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c68406-4dfd-40c0-83db-6d6ac7dbab00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "244041b4-827b-46ef-86e4-26de209eee72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da033926-179c-471d-9633-e2e6be6a48b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d8469bd-1cf5-440b-8e08-7903120cdf7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176386d6-ef4b-4036-a8d4-81982322afc7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b78f8df-086b-4218-88f9-e7e3df25aeb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55befa8e-4ea5-4e8b-82a9-2828b1db2b99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b9f982-2e8d-4df0-a7eb-d43326fc921f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50bb9e76-c371-42ba-871e-40395a2f7e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6763e9f9-ad62-4dae-b9d9-1d381899647b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204140bf-8a65-4aa2-b41d-3a85aac472c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e14cd5-b1eb-491a-903d-94558500cd97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf6100a-b0f9-4ec0-b32e-11ac83477b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c33741-726d-446f-bd31-5f5d88881e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3d1b15-f59a-4c58-a06c-0e82a54cc70e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfeb2aef-4d72-439a-bece-8e0ceafcab59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f872fd-4280-4b80-a4e4-b56c1c7dd1b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "613f0980-938e-49cc-8e94-50a108e99182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0108841-7e7b-41d1-a36c-856bb6afcf4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52421f9-563c-4d22-9216-ab7d103b5317",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d044664-86a2-4249-953b-5f873fed7e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f13065ac-6459-4c51-a969-2b274df296f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00326911-061e-4bc2-a29a-31c7882eee0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19b1f6af-470c-4c09-87ab-6936ce48bfe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335ded23-9a61-47c5-ac3b-2a5e8a1e94d3",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f565e556-72be-403a-83b5-1689c87f1418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3234ba8c-64bc-44e9-a9e3-5521f6c7137e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91edcbd6-d8b4-4c91-90a2-fa1e4ef82595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a289894c-d1bc-41ad-807b-d4a13f51176b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb0b793-a332-4c15-8616-8af7cf68f57e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "effec74d-d593-4f0d-91ae-adb44e12bd11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f81de3c-aac7-4ead-a6c7-098690ea2412"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "368f547a-1587-4452-8245-deaca67b947a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f0ce54-e8d9-4b55-93de-bc2df5820e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32897fcd-a51b-494b-a371-d509a78e894b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df68b357-683f-4d5b-8a6a-f7e44b6ec74a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51abb1be-0ba2-46a2-bd5d-224cb160a89a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3a642d-7328-4d09-ba98-9f798ff69e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c01b9983-b8cf-4ac7-bed2-83e6823f069d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec26a442-607b-4048-92ee-7a4865806d5d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5ce361-92cf-4779-b652-338efd53b41f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9866a277-617d-4b16-aec0-ae68d90066da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca65f678-c52e-4ff7-a1bd-69466a90f7fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420537d0-ba34-4d43-9b34-dba0021b9029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c15867f-8b01-4ad8-b3c8-4df46da27293",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18fd4b91-f2cf-428d-a8f5-e0299a29dff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68868142-7fb0-484d-81ab-1a521a21ec70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c84c6c2-bfcc-4b29-b56b-42eec49822ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c434e84-590d-4b33-9348-3a20478e63b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69579561-5755-4289-adf0-ea78e0cd0cb8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4bf10cf-8c03-4de1-9fd6-02e98cebc35b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b851996-22f8-4e48-9a6c-2a741f232514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd6c8d5-6bd2-428b-b190-1643e0c2ec7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5c56d2-37cc-40f0-b649-9f91b31315be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ceaa556-d36a-4c58-8ade-b7b120cdbc7f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de505e2-d592-4743-8708-233c508b3d2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78744598-1262-4c1a-b063-59e20bf7755f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc82d03-81d8-47a0-86ae-d287096cb88f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0fa878d-cd59-49c0-ab3f-5cae74584d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfb88d6-30ab-4d6c-9bb1-bb723540d482",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3665c55f-a530-41af-b983-6b48543ad86d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f726ee8d-8b5f-4bf7-b230-e1ee53b6d2ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c412a6ee-dde0-4283-b561-6de4b4e5edc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5262a61d-04c9-4a32-a81c-70ed92380e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1001afd-48f6-48b8-a1ee-28f6f2432728",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1523df-76ee-43d2-b68a-e9cb5487d42e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c965992-8386-4c77-9c10-2805d4b10852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0deed2a8-2fc1-4577-b2bb-21524402aa14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6685917-b493-45df-a972-c667e131735c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c17c94-fb64-4144-aad6-5af70835c2d8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227d61fe-de5a-465d-8735-4a391504c79b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f306b67-baba-4df6-b595-0e5637f22b88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a22814b-1e0c-4ebf-afbc-50342e2118b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5af8aa-b458-43c2-ab83-0fcbd76b8e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aadf37f-b9f7-4f38-812e-0553b503c2c8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79847ff5-820b-4a51-a226-5052e5cda4d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f4a7dfa-cf1a-4106-9216-61c42e61c2a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb506783-06f4-43c0-96a7-8e8b434351d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b01f3717-51d6-4689-91ff-434d007d588a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe1a82f-73f4-45ba-aa83-637af205f215",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9224b8c-faee-491c-9c21-0e2bc78218d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8feb8a6-21a6-4415-bfed-f61c93def87d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b749653d-7a46-4d99-a3cb-7dd5c78f228f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88bc1a98-b14a-4a78-8b69-3d3ed37e88c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d804eab7-1892-4037-a3e3-4a62be5876bf",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88acb092-2e3f-41c5-8486-3c710c522b70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "deef1266-2f21-4fe5-9cbf-02a17e5bd321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5436175b-ef05-4671-ba67-9920a1072416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8314e7bd-ff0f-4bd6-bc44-a497ea9057db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8dd6956-021e-46eb-ada0-b12933ea8e54",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f294e4-5421-4a0b-a9e8-85686e48b3ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daed43e4-df5d-4e15-a41d-92df52c20485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d3e7a0-e386-496b-aff0-ae554fdaf27e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98c75da3-2530-4a8e-9de3-da812368a22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5210d0-f683-4809-a692-2ff0b8836cad",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52f83bf-cec4-4e67-bd5b-c3daf1744825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b39e344-da46-4c09-a3be-4577d49f6328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fa52c7-99c4-494a-a5d2-bd30b3a1b9c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cc0e19f-5251-43e4-bd31-e46f2356c726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91679567-9d84-4828-9d89-a7e6747d16d5",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea7380b-48fd-4864-b40a-5cb8d76d2cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "217c3873-9978-43a0-8fdf-64a7bb92e627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a049fb26-a5ae-4892-9990-468c92215ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8492940a-b332-4e65-97e7-9fafab8e484f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546cc7b3-92d5-47c7-b715-8c595f727355",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f604ac62-73a0-4d6c-b3e0-6ba14e6c2505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa50a18-a7dd-4fdd-99a1-4159206609b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "062acc61-6275-4067-93b4-e433c477eb8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "645dd738-772f-4883-a0e9-deffbefe2578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de28e27-8dc7-4977-a14d-9b75bf682934",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a7869b-3320-4ead-978a-a578040b5e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38819a6e-2e83-4b98-a468-425dee858c20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a52d0c-c51d-4af0-9758-aa80a0667f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab37045-235e-4410-999f-feea9dd3c4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a3d9bc-21a6-474b-b197-ee91936ba592",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40182542-2e7f-4d2a-afd4-1f077cb67fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451e9822-4c37-4ec8-ab9d-8d97f4536904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b21bba-c637-4c6e-9152-801a2ef9730b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66e6ef24-c56f-4dd6-aa12-33446a698f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b150db46-5a9a-4f99-bf02-f2250f1029d0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dcb9bb5-0011-497a-b298-17a3494d244c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3fe67f1-4ec5-4246-9caa-4e5d1024cf52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ea20c3-6910-4f50-a035-5ed22aca73d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf610d3-95c9-4350-8e90-39a9b69a784e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4fee9d4-07c9-4b5d-92c3-c502d1614396",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9b674c-2042-416a-9bc1-62a32b46e7ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675ca9c6-5ec7-45c7-a65a-5f9656992ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeddc465-10d6-4f6f-b637-c68942742a52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e07ff1f-8b68-498d-8b8e-b04d07e66876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc016fb2-5a62-4c10-8fdc-63653a15534d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd73321-18d7-4920-a39e-f81aa96542aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7cdf19c-b876-4370-881f-62061239ea6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e08173b-fe4a-4607-86e5-b6d1c9076eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d201fa-ea1e-410d-ac78-1dc62a7d62b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4c9be5-ec3d-48e1-be64-84bea04c882a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2819698-5fcb-4fc4-b048-9113adfc22eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed3adbfb-c21a-4b55-9900-20ac90a5889e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b746b88-1bf9-45b2-b7af-9add1ef59a7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "144896b2-3f29-42ca-94cc-7924b7575751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3bcd8a-3d64-4d62-abb4-bca317d9d713",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ee1795-b26c-412b-a526-6bd605ba7992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "178e7eb7-b6ff-406e-964b-cd5b8a1d131f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaad48b8-26b6-4c9b-8668-15447d3c76b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19bcb7e8-8460-42c8-a17f-f308d5c81e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e35794-5a94-4d84-add4-190664745ebb",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c780cf-14ea-46e1-986a-d12994b062d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b58a046-c81e-494a-998b-25e5e7f7f6ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80b5367-b602-4144-bfb5-978e8cebe8f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412bb842-0db0-4420-9959-b9f6c41a4c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5726b570-0aad-416d-8a2d-38164de08315",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f945932-d8e0-4379-be2e-f24d76323f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1367f6-7158-40b4-a344-4bb6d8ba4e1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb332b7-7534-4a76-8446-5058cd6368a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a076dcf9-9312-4c2e-a286-c5d02cfc28ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c136433-3991-4edb-b777-876d3d03a19e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a31dd89-b87b-4e5b-8b75-f410376bc53f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff110771-d6fa-47c3-8978-7afe72e38688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d85c8c-5129-43b5-a755-cca8b79892e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac6769b-8dc4-44e6-a44f-8d0b171c37c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986f8bd4-67d2-419a-a35e-c7a341bd2092",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22e2d63-c12d-4072-bcbd-e9686c1db7af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8a6616d-7acb-4847-bc6b-5312f048265f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4fe1883-e267-4ca5-9c82-558e02df7885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e74282-6411-4d72-bab0-d64908b18e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a4ecc5-8059-4aaf-b355-6c49e6e97986",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a726f4c-b9ca-4b94-8a07-2bad4c930030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d3bc05-77f8-4c93-8ac7-fdd0738932e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "979e9317-21ee-4bec-84ee-8eebd8b75494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38cc5f95-ea09-42f0-86b4-f2271a5fdc6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23da382-76d4-4535-a605-9654c575096a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4299eccd-5c13-4471-a313-af4104a4dbf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "598b5692-7d3e-49b4-aa2b-d1d83ef3c112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2cee12-305e-4c9b-af3a-313fb9fbe36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd53c2ba-335a-4203-8763-198755428119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c3b731-63cb-4358-8d17-14289ff23ca3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a790f5-7e77-4edf-ab72-4a22e3f78bc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2082faa3-7ebf-4b23-b3af-970517f8d781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33759687-0d24-4509-be57-342678bf28d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6c01be-9af0-46a7-b2fa-7f728181747c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22ea55f-2f43-4f79-94de-bf6603330e8e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73adeb50-6771-4190-a16e-f8ae70744ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c136f99-0fab-4aaa-ad84-8d016f299d5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e59d49d-db36-4112-953b-8b750d4ee8e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c33518d7-b44c-4dc4-8ede-a90adacf4184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de6b4fc-4543-4621-aee4-1edc1b9a0a08",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c29ff37-824f-46da-bfcc-2d24393a5a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e1ca96-6de9-4ead-a411-ebeb14c85547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f1c253-63f1-4e23-bdac-f48ea9835750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "789493e8-ba58-4b29-926a-285b3b507dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c07c094-a340-4dd6-a4ec-2ce36a296da1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05ff917-6844-4454-84d9-4332c84362cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26dccd94-acc0-4cc7-b940-58c7b44cb41a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "898e9e49-25cb-4e6b-9b20-499d4881e3e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e27e057-f896-480f-a8af-3e2b1d37f1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef909e5-0585-4801-95de-55140a4e695f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9820720-c113-4346-8f61-48ece70eaf64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbdc5659-fb42-4609-a23f-e100566d196a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf21070-462f-44c1-9473-01d9916c9139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6015ecad-0281-4833-95fa-981470ad5924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f0848c-6b03-46f8-8fd5-1d636ccf18d3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25eb54eb-6393-4f6e-b14a-7fe66a7ca200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2773da-a5bf-430d-8d35-4aea82e54fc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b3fc3b-fbea-4197-8005-cb7fa57ad55b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af87b37a-4459-4da4-ad7d-9afedfe3d490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e84947c7-2131-4c07-a9fc-fe5a9e0d0352",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04dfd22-677b-4c23-994d-a2ea207fe846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa791878-a503-48b8-8773-bec5c57b9d13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b8017e-b4a0-4dc2-abfc-b6abff1666fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f9d03c0-29a9-4e8f-8069-d39c26a17ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a34e80-ba52-47f7-a81c-9a606db9d5bb",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e4913d-133f-4542-b24d-17b9235ebc41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a184d6e-0396-43ac-82cc-6353a385df0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d139f7fe-6cd2-4ca8-b6d8-d7cde14d400a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5476de07-e452-468f-85a5-d0c73c0a467e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5def1199-7b45-4940-ad5c-b6993e2d53d3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c9571b-3501-478d-a416-99adbb70f356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e221266f-d211-4d25-b65f-f8ffda6d5995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19575cee-7a8c-4cbd-8284-4b590f00e0bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "329ed24f-9732-4556-a693-7f409690ab6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e65112e-974d-4419-82f0-d5ae0509c030",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d49d722-ce09-4420-a3d8-a61439782e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccdb6bb0-5461-401d-9dc1-f901b8ae8deb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffa3fbe-15be-475f-a9ce-75c42c7c1298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f49e93-505a-45cc-8952-e8f8f7d5ee19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f482f21-5135-4547-a6a4-096ebbc58f68",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33af0034-f392-428d-9475-8763e6d08741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402ee768-52ee-47fb-bb5f-fbeab9086764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc0f718-a0a1-45b6-9789-729cfa9b830c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "097e4678-f56f-4568-98c4-e5a95bd72c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480736bc-76d8-4d26-874f-f6d4b60fd5e5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a84085-7460-4cd7-b99e-96366e0bd150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "066a61b6-10ba-484d-b088-89c3b052f184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56fd110-79d2-47d4-ba68-7235b51ca28b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff9c2cb-b06a-474a-9318-b324638b06db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9dd7f0-d3a2-4190-9047-43ae762089de",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4264f13-cc4e-4afd-8adf-d528aeb1a2bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc75ad2-dc95-4ba3-b794-e4c9477c4a5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cda4814-d337-485a-82b7-71761a83bce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc0bbcd9-2bfc-4550-a948-85f6ec4d7920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40dca510-0fb0-48bb-948b-f77a43c04cf5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58c971d-b454-4c8a-b285-ecd84ec55753",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6877e985-5c6b-442f-80c2-5f832df4e2e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac1657c-6000-437c-8419-0d49ba15f8b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36035643-d46a-4839-82b3-e4be9094d6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ee6278-06f1-4baf-9987-91b35acda899",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435502e8-8f1e-4185-87be-e62492bdf682",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7882aeb1-5ad4-435f-9b59-1822fe32a56e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc19bbd8-7d3a-4ed7-9921-38d1c4b6ff7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c9a6272-b543-4415-91cb-033347d31c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c075b8ef-9117-4630-b41c-211144057e12",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69255851-3c26-42f3-9d63-4163e1ef64da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b345f69-9037-4344-8e2c-e735989f65ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "209ca3ae-e43c-4fae-8891-a27502dcf5e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743b3905-84b2-4beb-b19b-b45a4a52e11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c75a46-70d9-4ebc-8bfc-08558d6ec6b0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7097117f-03d4-4047-b940-0d233952b901",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad0e47b0-ed45-431a-b44a-094883d636a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d4cacf-406d-486d-8670-8045f4f0cbba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f07d279-983e-43cf-a259-dd240977e6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf02036-06b6-4fe1-b02d-858c7d622a96",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176cb755-0527-4720-b968-e7e6549c9373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4a57d5e-7512-48c4-976b-3a5b72a0746f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3800dc-11bd-4466-a1f4-afd1acc80fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266232cf-d2d9-4ef6-90fd-53024688a8cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a79e08-bb30-4b10-b9e0-031cd939c56d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8063fae-80ab-46eb-9fcb-533f92f068a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65274a69-e8af-43f9-a4cc-77e72a725db2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7201bb4-03e8-4b69-8be5-220550ed0f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd606d1-d2d9-4639-b311-a6e154344d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91fc977e-f81c-48de-a782-f819a9ede31a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871dc6de-94bb-4fa4-8b58-0b2c9645aef5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61888df6-908f-48af-b94b-983f74ad31d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c6feb3-8333-42db-8fe5-bcd3e1887488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e11a0b86-02a0-4a4a-8b8b-d582c4aed9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd0122c-a58b-474e-bef3-ad40958ec48c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7f255d-aa18-4a54-a0ef-8669c53ac71d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ce3b091-f0e7-4b60-a6ed-472018686ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f655db43-06f2-42ed-8c27-8156285c710d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b89d58d-9d5e-4500-845c-3337895207c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48d572e-dfb6-4485-b522-e5cd6470290e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f715b8-42b7-4197-99ad-a8bb3df3d4c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0737f22-61ff-41dc-998a-755951ebf521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "681ee1df-c0ea-456b-94ba-d5d7b428076b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21277731-e1b4-458d-abca-58af576f62e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6f7a57-71c3-4cad-8a02-2dc0cb99f648",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab22d315-7eab-45b8-8ece-a47c8a9dda2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7368b8a-a3a0-4670-af69-e67f7b00fb17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56858ba0-a283-4eba-a561-90880730e34f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8925db8-466c-4740-bb79-a46d49319398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6f0816-887e-474a-929f-64ba9d0ba5fa",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b480436c-98a7-4ec7-a688-aadea59cb71a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cf4f4da-6cc2-4815-a49f-ce3fc9ea7f1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcae6550-9819-4fc2-a6d1-46624368ee0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff3e610d-5627-43cb-b591-464f24ecb14d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a07504-d7bd-424d-a8ea-27339be7bf79",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887ba9d2-f0eb-4dd3-9f94-469001bdbf90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91d17acb-ee75-4de6-b46f-6b49e00d750c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27d1ac4-e620-41ca-8f00-050064206361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "184b6253-de3b-44b0-bf4c-adae035365e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7025f9d-ee13-484a-a42a-62454d531e7b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb05f076-f9e6-4eff-ae61-42a174941ff3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "209c9eb3-53e9-425c-8a0e-f12155cf4964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59dc8b6f-020f-4d34-a7ab-2a11c3678cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45118fc5-2b7d-4e67-a809-4434da6713ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7215438-5ec4-421a-be02-3607d99b661a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc13aab-c5d0-47a7-9db7-711a56959aa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16f11e2d-51fa-4c8b-807f-3e8c3e256fae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbd17e2-6480-43fe-93bc-c5c145ca51b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4660852-a5b1-4235-b726-93fa5dc9c077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756128c5-14b6-468e-b8db-e6703e5146d1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd634db-d3df-4fdf-a68d-4ef6074669e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "708c1830-b8da-45a4-a2c2-28dbe68f6ed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0cbf13-4d0b-44c7-9839-6b14e6f1ac49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcb72198-2409-4307-a97f-6502f761dc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c547fed8-b3a7-4af4-8110-b476bb83a45a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687b746a-2775-4f15-ae6d-68257dc0c24b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28d1c7e0-beaf-480c-84ea-f6835e6dba79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a111bc60-b1fb-4ed3-a8ae-b1f9ecdd9097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac518589-477c-4c4e-a0e8-8d1ac0640bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33cdea52-636d-4fe3-a14b-705c64159f61",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10c028d-27d3-40f7-996e-a2a5992592bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b39b5116-006b-495b-a69d-1fd06ac6f05c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf465e3-1ee3-4be2-b13a-a255d9b0bba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd1286a3-486a-4054-9429-76926f9fbf14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d27793f-47c1-4076-9bc5-5dbaaca2eeb2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eeae5c4-5122-4208-b36d-5acdf9e9879e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa82a1c1-4c53-4c0a-8e27-c2333ea16154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4567f96a-e056-40ea-a28f-fe961607be48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f25b592d-f991-481d-b722-c56cf383f630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af066f64-b3ee-4bc0-be50-5d7463b754ee",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5ae5ec-7eb2-4e31-ac00-333a88973938",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac179610-a590-4fd3-9e56-f18464956fa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68eeeee5-8f81-4906-925d-0c72a2fc8e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ac0dda0-df0f-4320-a47d-926715313df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f365c21-00cc-4985-b26b-c2488fa101a4",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e721d1ba-9571-47c0-bdab-4285e1adc197",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd9e19a5-1161-48c6-9d1a-bef3c09ba20f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "670a34df-1ec2-4cc8-8312-a18eb7e84e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed75c8b4-c0c0-4251-9f2e-92acf264632d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf222d75-cfb7-434a-9991-beef368a52de",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f351a46c-55f6-4afd-9549-bce66e7a7a50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "052864ec-7a48-43a6-af64-e412f8b0fb8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d35308-1a50-421c-9f61-54cf3f45d228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3190d229-f935-426b-9abc-e8ec0b422586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b004f93-d59e-47ea-a371-9373e307b717",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7191ff9a-09e1-4298-b5c2-cac53e24068a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb1c890d-7571-4e68-aedb-be52e1a909c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee24153-a3cd-48cf-8b21-bace57485972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4918a116-1133-4991-8bee-2be193e64eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53aa94e5-f99e-4ed7-8832-7000c0a34957",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f327a9a9-b6ce-46c7-923d-4e806b9bf0b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1d9cb89-6514-40fe-9421-26964b958c4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31d9861-bf55-4ed8-abdf-fddea8673c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe4c97b0-fcd6-4350-9f83-c2bdb56d9819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04166f4-9671-4613-b9e9-42ebea7894a7",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c094d230-d9b8-450e-b672-14ca3bd80e9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cb9c12b-81b9-404e-886a-a311f4200e59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "544a2840-aa5d-4e9c-a355-6b6e9ce899d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f5d742-3c2e-41fd-85d7-ead65730e54f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9deb0f-78c1-4110-84e7-3ca8eedc3b08",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ace3d14-c6b1-4a46-af3e-c5112713d646",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87ac0da5-1d61-46ca-a000-9fea0679990b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2cb90d3-1341-4dbb-9a20-a9496ef80b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837b05fe-739f-4f99-ae7f-30ed73ab408e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb3d532-bd1c-48c2-bc88-8385ab4741a3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72570a6c-45db-435d-9d87-025b36dbf0bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b3dcc07-e86c-48c0-b66c-7c4f260197fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ac74e5-b20f-4dee-8f26-f32dbe00ca0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c2f321-8a95-4f5d-a6d7-b6ed35bc0a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678efe6d-e0a7-4a1f-a205-c72f890f444f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49daa600-c39c-403e-aa83-05d29571dce2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cad7492-aa91-4b21-af5e-f670e5710b2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b68f99-3e02-4faa-9eb3-c8d298104829",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d584dc94-a681-48c7-a1d7-1c3703b3ca81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a68cea-2f3a-4218-8d4a-739b54dafb74",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad52625c-0d2e-41ab-b14f-78af5cd0d9c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88c5ad4e-4e0c-4165-aa95-bb27a41f9ee2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2664da69-18fa-4797-acc3-c1808ca7dd1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc22d07-969f-46f8-ab3d-f52c1b505669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f888c482-abf7-4592-8726-bf66336f0ace",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fdbb8c7-454d-488b-b765-70d5f4474c05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e30338e4-2c82-48b9-a7d8-064f72f10d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf6be99-9302-495f-9693-59905da0e9d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "697901eb-a2a8-4f61-9c78-fd8efc2e80f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1946f44d-3bd0-4fb6-b5a6-70b2f0d16f06",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9684dccc-93cd-4ce8-8f25-07b4d7c07643",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "768c4bb5-db24-4b50-8e61-4ef5309c9ebe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b10a3f-a99c-41a9-acdf-085fd5b5529b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d68c0a-522f-4359-9883-d7beca6a187f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802c3184-6be5-41db-a0bf-947d2c19e8b1",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5ac77e-54c2-4ac5-ba02-e92ce1a3ccb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5030dc5c-e19e-4c2d-a92a-cbb59d381e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e026ff6-bea3-49a5-8c05-ad5573674941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2363e1ee-aa79-4f72-9804-5a1f5a6e1f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41400544-722e-4ccc-9318-199837ab6070",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4285d5-2960-4ff8-b649-07dc6a815145",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e055165-1b3a-4560-ac5f-2fc4615ec0eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b84e04-1c3d-45f1-8609-2f7b5faf01c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e2f285-3e70-4c73-a5ef-6fee03a4a30c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ab8b8e-7c77-4a39-a418-c8b585be38ef",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722e8a71-4f83-4df6-bd20-30433f5733b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5290aa8c-099b-45ac-9354-732e53d8d00e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55cbe8f9-d24b-41aa-89d8-32edda37c311",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6ce6298-736f-41da-9641-cdad61fda8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc351e51-763b-49b2-8303-123a018e6348",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2415cc29-a7ab-471f-83a5-cd72e0fe66db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90ec604b-691c-4080-b44b-d71301ec1291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7653382-4ba4-47d8-984d-084d43333501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f5f4095-cf46-4bf9-8d85-8de15c56e03e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c756296-2744-4fa9-9298-ce15537e63c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad8ace17-5942-4685-b671-d1a005193690"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4941d7b-9fc8-4294-b8e9-2d229ae855d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ed8e0865-e192-4143-b761-63671f8283b8"
                    }
                  }
                ]
              },
              {
                "id": "c51321f7-796e-410e-86e1-e7cc15e3bf37",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d62da70a-a101-46cc-a5e8-b5fd5e74966e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca1525b-8924-4f71-9375-173c52139b18",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "015cf1f5-0aee-4c90-bf93-5853926ac6a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "550a3f62-2170-4513-a71b-3fda94597351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab58b6a1-9293-4a18-b7a9-51777bf81e93"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f79e4b0d-31fb-4ccc-a3e8-1854aa3c0d15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b45f6c5a-a058-49fc-ab38-0892fb697a2e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "92a8c3b5-3369-4821-a438-733f281e35eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1793e5f-d837-4eb4-bd63-794326b63070"
                    }
                  }
                ]
              },
              {
                "id": "aa6505fa-6d12-4c90-ae97-0ec11d535317",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5f6e2b1e-0a92-465d-9df0-58b88d72c3da",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33def9c1-2555-4018-8764-1b8079eddd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6a5e1213-4d5c-437a-a0fa-f11c5eb9b778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae9ffa2-aadf-407b-a1c5-510b01e176cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2467017d-3e8b-44d5-a503-44eb3a55240b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7c1af3a1-517b-433f-9b76-ee328b4342f1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "09e8bba1-da8b-45db-b659-5b124da650f2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9373d7c-1889-4057-a331-aead4b359d53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b05e7408-b61e-4425-86e5-d6d11244e8df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d84e17b0-1082-4626-930e-ee7f45861de9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10ee1160-97ea-4a1b-8b21-9ca08f67075c"
                    }
                  }
                ]
              },
              {
                "id": "0f914b5c-b90f-40e2-a3b2-8aae4b6d2761",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ba276e8-d415-4506-8253-305854155ced",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e2af728f-e9e9-4034-84df-8e7a239f3c55"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3b1a9f1-15a0-4cad-8d58-0a817b7dacd2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "818b4734-7300-4998-8367-b225b4201d60"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d5beb54f-afc4-40b1-aece-6cd92b531591",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5ac0fe89-9a9e-4d69-bcf5-df0b50b98fd1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f879bda9-eafd-4bb9-b1ae-b9616e250b2b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4205cdb8-bb56-4e8b-a7d3-b7f5e7f0b584"
            }
          }
        ]
      },
      {
        "id": "f5c3a861-c0e4-47ad-827f-d383c315ed83",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5a84c12d-7930-4cf1-8b27-3ebc1d6eee33",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1c7cc60d-8954-4228-8583-75e2479e080f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bd57606b-203f-4e29-afd5-e8e5a3b4f42b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16d36e3-09cb-48bb-8a9d-0a98e090859b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "637c7ec8-981e-4663-917f-8fdeaf72bee5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ebe501-834a-4eee-829d-e6850a944dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e778347-21c7-4285-b34c-0d4b42ea06a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "675db5ec-98d3-4ec2-97fb-80cee0f115ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3a5cb7b-6571-4301-9d40-1a2c2b2b5027"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3749a5e2-4ab7-42ae-ba29-4899456f50ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ab144ff-be18-4052-962d-c5cc6d63ea2e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "051d5a96-b432-43a8-af45-23ff27e23a68",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "505b0973-b799-4241-b251-b2a5af03e7c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50c84d23-4433-45e0-857f-017cb679c2e0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c2b412e-47d8-4749-83a2-c9212f721b5e"
            }
          }
        ]
      },
      {
        "id": "5e94f7c2-c985-4670-8d99-03c2311ba261",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "12e385fe-2252-416e-88e3-2ac3c3371ed3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "494b0aa7-a5a6-4883-8e4e-2e002a7558a3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de7aabee-c142-4807-835a-3e731dc1b89f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2fb54c-dd01-40fc-bf9f-a158fa6857dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31584f80-8105-4279-bdc8-57e69184db70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c903b13-e49d-48b7-9e0c-822589128533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67cc379e-5570-4506-979f-90c43e8db58d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d2cf53f-0236-40ac-863a-5f22d515b07f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e808409-933e-42f7-b1bd-11dc97943be0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "780b2924-76ad-447a-b928-784b00830000",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0c574d3-ac69-49b8-81a3-c09f79b8ca79"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44427470-d53d-4f6a-81c9-630756261756",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7f508ca5-0a3c-46d7-b71e-a47453abd8a3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6bd042c7-5deb-422b-9c38-3b394c56b54d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8ad23af-fefa-4947-9b5a-65d1ce4de8cb"
            }
          }
        ]
      },
      {
        "id": "766019eb-38ba-456c-822c-d14a03cd5be4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3f358937-8d28-4cec-9438-e2032e745e66",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6bba1a0c-fa98-4e62-ae5d-278fa9d63fad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f307af50-f42e-4666-b802-8f3562e9f4aa",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9019f3a-289c-4b79-9873-ddc1db070799",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51039231-204d-4882-8e43-e8d366ca2897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bc7bdf-a0cd-4a02-9456-2e60785fb9d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e6e3409-d3ec-43b2-8b06-87ed3eb359a8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4bc21690-797d-483f-a570-60568bbc50f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "291d305c-ea2d-4b9f-8d6c-21e8d440fc4c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e297be62-da9c-4599-8593-f3ef97e773c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f67e1270-a1eb-4684-ac97-5441aa907077"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7386701b-2015-43fb-a691-a9b4a2e68a92",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0657d950-26f5-49a6-8ee7-0dfda9a15339"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0756756a-b0d9-4cc2-8d39-878b22cd2837",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "58891e41-6347-4aa1-b26d-349b53649f19"
            }
          }
        ]
      },
      {
        "id": "c3f2198e-26c9-408e-8b5e-4f62b4ad64d8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45a8f57b-b2d4-4877-be89-06030e1bf0e3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f6816e1-f997-474d-950e-99de6113ef3d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ea9c546c-3cc0-408f-8a1a-72cd1d20cc8b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "335c4d8e-5460-4222-9c0c-4f46d2d6d84c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b139a6bb-4915-468a-bb16-c94d10226788",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 57.940350877192984,
      "responseMin": 11,
      "responseMax": 504,
      "responseSd": 58.7248112770574,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1699058002746,
      "completed": 1699058028445
    },
    "executions": [
      {
        "id": "1705aee0-fc40-4f68-940e-90ff3b373fbb",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "dc7d453d-a4d5-403d-a3df-63a4e73c3e62",
          "httpRequestId": "252b5862-69df-431c-8eb5-15c36fdad4a6"
        },
        "item": {
          "id": "1705aee0-fc40-4f68-940e-90ff3b373fbb",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "65a178fc-5e15-4a90-9968-ec9bfbccb937",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 0
        }
      },
      {
        "id": "a6d80b44-3957-4a8c-9fe4-5feab90e0889",
        "cursor": {
          "ref": "92bfa043-bc57-45c2-8106-e1db728a229c",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2e644ade-f072-4ea8-bd55-70c5ca130ac3"
        },
        "item": {
          "id": "a6d80b44-3957-4a8c-9fe4-5feab90e0889",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "479136d0-b97a-487b-8f28-ec00116d98e1",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "26efa7e0-0a4f-4305-b19d-3e7091805ffb",
        "cursor": {
          "ref": "f8a7af06-8451-4200-8608-e160d6cdae6e",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "32285b24-69bf-4250-a897-7d1a966c3584"
        },
        "item": {
          "id": "26efa7e0-0a4f-4305-b19d-3e7091805ffb",
          "name": "did_json"
        },
        "response": {
          "id": "8e71fdf7-7947-4e2b-b0f3-0b714301ff1d",
          "status": "OK",
          "code": 200,
          "responseTime": 290,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28784a0b-c3bd-4b85-afee-4ff5c0c319c4",
        "cursor": {
          "ref": "2f8448b7-016a-4fbd-8474-3ca8ea2b5b5c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7c5b612-8bfa-44e1-9ff4-af769a611223"
        },
        "item": {
          "id": "28784a0b-c3bd-4b85-afee-4ff5c0c319c4",
          "name": "did:invalid"
        },
        "response": {
          "id": "cd22f344-813f-4786-98f9-c27c244cdbf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28784a0b-c3bd-4b85-afee-4ff5c0c319c4",
        "cursor": {
          "ref": "2f8448b7-016a-4fbd-8474-3ca8ea2b5b5c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7c5b612-8bfa-44e1-9ff4-af769a611223"
        },
        "item": {
          "id": "28784a0b-c3bd-4b85-afee-4ff5c0c319c4",
          "name": "did:invalid"
        },
        "response": {
          "id": "cd22f344-813f-4786-98f9-c27c244cdbf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe43ac0-18fb-4ee1-b140-f43a57c0f23c",
        "cursor": {
          "ref": "db3847b0-e91b-44a5-8b6a-0684b24ee639",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "25bfbced-fb63-4f79-bfae-6cdda2f69eaa"
        },
        "item": {
          "id": "bbe43ac0-18fb-4ee1-b140-f43a57c0f23c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7892615b-9850-486e-ba86-00fa32ebbec5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 120,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117a51dc-2a58-4d99-8ba6-73ba81b495ed",
        "cursor": {
          "ref": "cb53526b-e15a-49aa-99e3-2c7be738d6ca",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "defcd6f3-a36e-46f6-bfed-ed97cc0f493d"
        },
        "item": {
          "id": "117a51dc-2a58-4d99-8ba6-73ba81b495ed",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "96789b29-60e0-4f23-a89a-18cad19590b4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7553de47-65e4-46e5-a428-f2fedd874114",
        "cursor": {
          "ref": "b471b578-7b1e-446c-9d77-f0d3e4679bc8",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a71e810f-c942-44ee-8e8f-f93e1abdfd90"
        },
        "item": {
          "id": "7553de47-65e4-46e5-a428-f2fedd874114",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "93dd509a-82fd-487c-8519-75f3c4f8bfb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "478a25fe-0698-489f-a9a9-fe6a611c4760",
        "cursor": {
          "ref": "249ac868-581b-4935-98f9-7179d5ca891e",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "73155ca8-55d4-4618-94fa-c8665a88f0d1"
        },
        "item": {
          "id": "478a25fe-0698-489f-a9a9-fe6a611c4760",
          "name": "identifiers"
        },
        "response": {
          "id": "75df4fe2-eb35-487a-b801-362aee8fe7f3",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69ed050-d522-4915-9451-195ed09d94ac",
        "cursor": {
          "ref": "662f63d0-707e-4143-ba92-cac0ca173715",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9dc0295e-53a4-4d58-a9aa-5f6f15564544"
        },
        "item": {
          "id": "e69ed050-d522-4915-9451-195ed09d94ac",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8f2f4b5c-3edd-47ec-81f1-2634885aaa0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d31d43-1986-4640-8fec-4c9539f13a9b",
        "cursor": {
          "ref": "ad3784b8-bd5f-4169-9b08-7f4734f17eb7",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e9312163-9116-4675-b990-017264a081ff"
        },
        "item": {
          "id": "c2d31d43-1986-4640-8fec-4c9539f13a9b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bd53471b-2f99-43a8-897b-19b3a6fff407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfc1aa1-22f6-472f-9cdd-9e0b238f8d48",
        "cursor": {
          "ref": "1a429d3f-b9a8-4e60-b3c2-62590503601b",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4c5e269a-7082-447e-9b76-8853fb6e0f1f"
        },
        "item": {
          "id": "fcfc1aa1-22f6-472f-9cdd-9e0b238f8d48",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "cf9d0f17-0d15-4b1b-822a-f05c239eac5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dffd3bb-53ee-4a3b-ba2a-7ee27368232a",
        "cursor": {
          "ref": "ce0d7dc2-1653-430c-b8a3-4afb51723999",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "fca2cb2e-462f-46fe-b877-7db6ac886646"
        },
        "item": {
          "id": "8dffd3bb-53ee-4a3b-ba2a-7ee27368232a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a09fd8bd-7e5b-4b13-835d-31c789418f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48cd7bbc-41d3-45f2-8989-b555edac9f70",
        "cursor": {
          "ref": "c561fb28-2665-4d81-9d68-97601ef1da5b",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b5e3c676-08b8-4dfb-813e-731f690a724f"
        },
        "item": {
          "id": "48cd7bbc-41d3-45f2-8989-b555edac9f70",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bce68023-667a-4203-af62-65a574862241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f931bc-8356-4c31-bbcd-aff28c416644",
        "cursor": {
          "ref": "b722e32f-8bdc-4a19-be96-8bf099ccaa5d",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8799fad1-3329-47a9-845c-d04eb24a6459"
        },
        "item": {
          "id": "43f931bc-8356-4c31-bbcd-aff28c416644",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "487ad7d5-82f6-47a4-a1de-dd62207eae48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236efc07-1b17-4dc7-a0ae-ff5504a60f12",
        "cursor": {
          "ref": "c9c5f957-0026-4c44-925f-007881361bea",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9c96f95a-bbd8-4b9e-ba64-3f9729445a01"
        },
        "item": {
          "id": "236efc07-1b17-4dc7-a0ae-ff5504a60f12",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "01b0efc4-20b5-45df-b728-c5e0c4fe9615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e608aa-b6c9-4a00-8578-b5d3f9e2b4f1",
        "cursor": {
          "ref": "a4b879c0-b17e-441e-81b3-a382c7b071cd",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "dd8a5227-6e0f-432c-8c3f-c957881b9d47"
        },
        "item": {
          "id": "28e608aa-b6c9-4a00-8578-b5d3f9e2b4f1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5b41c0a0-5394-4771-b927-23ce8ad51e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89266acc-aa44-4701-8b9f-ab06210c2bce",
        "cursor": {
          "ref": "f60dab44-cd42-4ea3-9ef2-37e288daf08c",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "747c0157-ea23-4854-aa84-8a5524058f8d"
        },
        "item": {
          "id": "89266acc-aa44-4701-8b9f-ab06210c2bce",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c54fbeda-0b87-4edd-96ff-85fe9212092c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e27d725-0905-4213-863d-a4729b0c8e13",
        "cursor": {
          "ref": "5826da96-9127-445a-8753-3bd9261c876e",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "15abc7ab-68cd-46a6-8e5e-e36bd43a9ce3"
        },
        "item": {
          "id": "3e27d725-0905-4213-863d-a4729b0c8e13",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5a34c7ad-1053-4af8-9a97-5d4ffca8bafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9abee62f-f3bf-4b40-bd7c-b0bff684c70d",
        "cursor": {
          "ref": "47fc5fb6-f37d-4f0a-94fd-79fd7d66ad4a",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d52dd4a8-d4d3-4116-890d-6255196320fc"
        },
        "item": {
          "id": "9abee62f-f3bf-4b40-bd7c-b0bff684c70d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c8f9fe1c-9cb3-4387-920f-fa24ef5ffc0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6d86cb9-0868-43f7-bd43-dd84f0e88c44",
        "cursor": {
          "ref": "d176a11e-bdc6-4033-a540-c17616585a79",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "bcc570c6-0d31-4790-a569-fb236c43e792"
        },
        "item": {
          "id": "c6d86cb9-0868-43f7-bd43-dd84f0e88c44",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e3a96044-b5b1-4b59-a4d7-4de49244fab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa8fdca-2537-4bca-8f7d-6d9cf1896346",
        "cursor": {
          "ref": "181535a9-6b3f-4947-bbb1-97141415e519",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a4dd69d6-0270-4684-a33a-a7bc7ca3c498"
        },
        "item": {
          "id": "7fa8fdca-2537-4bca-8f7d-6d9cf1896346",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9603e4ab-f5e9-4242-b700-0d86530fe192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c6add2-59a7-40a4-ac19-a54cf8eca696",
        "cursor": {
          "ref": "3b871ea6-9a0e-4b72-9612-612f9b79f40a",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a5dfce2a-987c-49f5-9d13-6eaef3e3f066"
        },
        "item": {
          "id": "e8c6add2-59a7-40a4-ac19-a54cf8eca696",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1d88641b-2e36-4f27-810b-fb498ce0b669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a491945-9b73-431f-89de-e0a00fff24b1",
        "cursor": {
          "ref": "f771e093-ce5b-4cac-a751-edb430b00112",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5634d2c9-f0ea-432e-bf51-3b1b208b4ad1"
        },
        "item": {
          "id": "9a491945-9b73-431f-89de-e0a00fff24b1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "482ac595-7046-4042-a99e-f0487ce1e8bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e436f917-d3a2-4f7e-bd04-e1b1f21e23d0",
        "cursor": {
          "ref": "3598c9ea-dc0c-4921-9075-ca2c07be8ddb",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d5997fc9-8108-4997-add8-cc2152597abe"
        },
        "item": {
          "id": "e436f917-d3a2-4f7e-bd04-e1b1f21e23d0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1b2cee94-ad41-49dd-80ad-fb1a6a98c91f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca21f46-247d-4147-9b71-a0a010f6d6b5",
        "cursor": {
          "ref": "2ca29f55-4a0b-45a4-babf-7cd674d2adce",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8460942c-1292-47ff-9376-1852b6b1b58c"
        },
        "item": {
          "id": "6ca21f46-247d-4147-9b71-a0a010f6d6b5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "42a42598-f3c0-4748-a852-8a193af06833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c08312-4af0-49f9-bfc6-32adb31aa8fa",
        "cursor": {
          "ref": "afd02c26-a3a1-4876-8cb6-e56d853d837f",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2d58eb2a-bea7-4320-97a3-de530d442303"
        },
        "item": {
          "id": "82c08312-4af0-49f9-bfc6-32adb31aa8fa",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "60a34aaf-944b-4ff6-932c-2fbe0b5e5af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d548b3f-f222-44d5-81b1-a29eb7502429",
        "cursor": {
          "ref": "4689203e-bd8d-40b1-952e-7a2e6b50beb6",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d1463af6-426b-4189-b6fe-96d9d701ca25"
        },
        "item": {
          "id": "1d548b3f-f222-44d5-81b1-a29eb7502429",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6b31ca8f-a1c0-49dc-99a2-76422ba7e484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbeb747f-5442-4df9-88b3-c4f0b93b2f5e",
        "cursor": {
          "ref": "0db400c4-243f-4518-bf05-8f96403da472",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a12c21c5-bcda-4c74-afd1-ffd4a6ec4f50"
        },
        "item": {
          "id": "dbeb747f-5442-4df9-88b3-c4f0b93b2f5e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "42c9100f-2c37-4921-8819-62720e4398cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb20de2-ca08-455f-b3b9-e2e27244ff56",
        "cursor": {
          "ref": "07ec43bd-8a6e-47a5-af1f-4f6ce9543350",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "60de7b2e-5239-4ed0-8ec8-cb1d684ad459"
        },
        "item": {
          "id": "abb20de2-ca08-455f-b3b9-e2e27244ff56",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "226c8ba0-e900-41ab-bfb1-66d0b0f30c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f20cec7-5b9b-4f51-9282-211522128db1",
        "cursor": {
          "ref": "5f6bbfaf-3fb0-4786-81bf-71f3fa7f5c22",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7a766912-9fe8-487a-9657-d9c4a54e901c"
        },
        "item": {
          "id": "7f20cec7-5b9b-4f51-9282-211522128db1",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "70fe1ad5-4792-468d-9ac9-82ded3c3db3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1384ea42-0f72-4c0b-b1e7-f48263708fe6",
        "cursor": {
          "ref": "12996443-edbe-438c-8efd-950c4bb392b8",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "48f55a79-d41b-427c-a86d-10e1f12290c4"
        },
        "item": {
          "id": "1384ea42-0f72-4c0b-b1e7-f48263708fe6",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "16ebfbef-27ff-467c-bc41-e477ad0b2650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9d43f3-64ed-4f68-a954-ee7d1a25f69e",
        "cursor": {
          "ref": "b7d3e01b-e853-4fe7-add3-4a71aae88779",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "80a7a52a-5575-4481-a726-774ea801d6d9"
        },
        "item": {
          "id": "2a9d43f3-64ed-4f68-a954-ee7d1a25f69e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "baca4103-a1d8-47bd-855b-d015c7e81fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d1b197-083c-498e-a6d6-4e92b80107e2",
        "cursor": {
          "ref": "dd6928d6-f342-4bbd-afcb-60a116aaaa5c",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ea47a089-71df-4c09-a23d-4f272e5a480e"
        },
        "item": {
          "id": "38d1b197-083c-498e-a6d6-4e92b80107e2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7aca4c3d-624e-468d-8e55-16c9368f6d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a564c1d-24f9-4297-ab62-e8baca6055cb",
        "cursor": {
          "ref": "2234c8b2-8b75-4cdd-bb7e-7fa9b6eeee52",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "157832e0-a423-4341-a001-7b398565c6d3"
        },
        "item": {
          "id": "5a564c1d-24f9-4297-ab62-e8baca6055cb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "49c697ca-f664-41a9-b976-59de0949395e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b020434-fdbe-42b1-89fc-186944ba7b48",
        "cursor": {
          "ref": "8fa87548-4585-4955-98e4-91df7c728a81",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b88d6d87-79b9-4d7b-96e0-cb4262882e25"
        },
        "item": {
          "id": "3b020434-fdbe-42b1-89fc-186944ba7b48",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e15893c7-7125-47ef-b40e-dd2e4c984ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfdb624-777d-4d83-b245-972e41262660",
        "cursor": {
          "ref": "5b58d93a-57e2-4536-a683-066bd3540890",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9af72c49-bcf6-4474-a2c1-17ec2addfb2c"
        },
        "item": {
          "id": "edfdb624-777d-4d83-b245-972e41262660",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3b6cac84-5192-471f-88a5-4b9631d678c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6bf0aab-ca02-471b-a63b-c01489bbc2ab",
        "cursor": {
          "ref": "9de94b35-ea0b-4a53-925e-63dd14b6e8bd",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "eecf263f-5411-4b29-bd16-00af81f1ef6f"
        },
        "item": {
          "id": "f6bf0aab-ca02-471b-a63b-c01489bbc2ab",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c19db292-927f-4914-81db-3f087bcc406c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d7c4372-a8bf-478c-959c-f73b06fcc4d1",
        "cursor": {
          "ref": "615f519e-31d1-4b90-815a-3e7dedf13ad7",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e0f1a666-1738-4a7a-b4d3-df51f54efdb1"
        },
        "item": {
          "id": "8d7c4372-a8bf-478c-959c-f73b06fcc4d1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2d1307d6-0e83-439a-b3b6-c0433459de33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828f2954-9917-4c6f-8f35-3a1fa1887f16",
        "cursor": {
          "ref": "7e81cf3c-3501-4e98-9e74-2580972d7cb3",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8337eef6-5efb-4277-98b8-e5914719396b"
        },
        "item": {
          "id": "828f2954-9917-4c6f-8f35-3a1fa1887f16",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1c7e1606-e959-4d8f-a1c9-f2f60373df9a",
          "status": "Created",
          "code": 201,
          "responseTime": 504,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "7a63bfd8-dc18-43da-8768-ddd314c30a38",
        "cursor": {
          "ref": "f606797d-3fb1-4c43-a8bb-775e452ab846",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "32292103-8248-4646-b966-8e393599d8ce"
        },
        "item": {
          "id": "7a63bfd8-dc18-43da-8768-ddd314c30a38",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "713005dc-9be8-46d9-9611-336d1c3ed467",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "76c545c9-ed82-4aaf-bdf3-5ea4ef162e5b",
        "cursor": {
          "ref": "31532464-d08c-46c9-ba19-e726853e34ef",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0eab6213-cb9a-4527-9216-e652fd571f9a"
        },
        "item": {
          "id": "76c545c9-ed82-4aaf-bdf3-5ea4ef162e5b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4f9d9377-40bb-43d8-8301-74a8a6d0c1d2",
          "status": "Created",
          "code": 201,
          "responseTime": 218,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "701b726d-c88f-490f-930f-1abeedbf53aa",
        "cursor": {
          "ref": "2fbe2ab4-cb13-4c20-8c6e-2fbb52260c8b",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "721eb715-2104-412c-8896-dd7aff72edce"
        },
        "item": {
          "id": "701b726d-c88f-490f-930f-1abeedbf53aa",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2a51140d-fdbb-49ff-91fe-1c5578e9cf59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b12e8a-f728-471f-832e-8e9e14e1a626",
        "cursor": {
          "ref": "057dfa6c-052c-415d-a6ec-103bdeafff51",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "355165ec-2d28-4684-ad87-5f049cc9dc2e"
        },
        "item": {
          "id": "13b12e8a-f728-471f-832e-8e9e14e1a626",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d9f8935b-20db-484a-86bc-06162d586e6d",
          "status": "Created",
          "code": 201,
          "responseTime": 206,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c7a3825a-fa2d-4269-88d4-80977c3232a1",
        "cursor": {
          "ref": "b23e82e9-75db-4446-bdba-c8d012e54ec6",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8bcf04bd-c33b-4848-9a85-0b7054446e2c"
        },
        "item": {
          "id": "c7a3825a-fa2d-4269-88d4-80977c3232a1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0c83dbb0-32d7-4795-8341-8f9a88e33eba",
          "status": "Created",
          "code": 201,
          "responseTime": 209,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "402cdfa9-f201-47b7-9c79-41ac145e77ef",
        "cursor": {
          "ref": "a62453de-42cb-46c0-b11b-6af85c9a8ac9",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "05e9cf0a-76af-4fcb-b8fb-2c9d89717030"
        },
        "item": {
          "id": "402cdfa9-f201-47b7-9c79-41ac145e77ef",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4cace655-84f0-4a9b-a985-32994dd473a3",
          "status": "Created",
          "code": 201,
          "responseTime": 209,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1548e11d-a282-4178-9f1c-9a9b13758a99",
        "cursor": {
          "ref": "5ae60f66-fcc4-4a55-b660-e509bcc5b1a4",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "46cbdea5-ee6f-41b3-bec8-e8adc4fae014"
        },
        "item": {
          "id": "1548e11d-a282-4178-9f1c-9a9b13758a99",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "05b46d1d-6ce7-4b56-b3e6-137d3fc7d54b",
          "status": "Created",
          "code": 201,
          "responseTime": 204,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b4fb4ead-a727-4f8c-b09d-40dd59ac4915",
        "cursor": {
          "ref": "5dab1a26-f289-4c0d-a20f-ada063cf31f9",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9ffccc82-0fcb-4c68-b301-b1233fc33d2b"
        },
        "item": {
          "id": "b4fb4ead-a727-4f8c-b09d-40dd59ac4915",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "35663e49-8688-4ee6-bc0c-ae6ce95670e3",
          "status": "Created",
          "code": 201,
          "responseTime": 194,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b283940f-54e2-420c-8bf0-200f01e4340d",
        "cursor": {
          "ref": "896ab30e-0ebc-4c5f-9e59-1954846247b0",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "cba37ac8-040c-4759-977b-315255af368d"
        },
        "item": {
          "id": "b283940f-54e2-420c-8bf0-200f01e4340d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "98ec9fb0-8dee-4dcb-9d57-23679dd952f1",
          "status": "Created",
          "code": 201,
          "responseTime": 194,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f4651dc1-e799-4118-a489-043411935f54",
        "cursor": {
          "ref": "b95d045b-b251-4ee1-b7fd-5f43267345bd",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1e42e9ac-c4bd-419f-b706-ee0a2d98f6de"
        },
        "item": {
          "id": "f4651dc1-e799-4118-a489-043411935f54",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5046ae88-4dcc-4c87-8939-ef5299b0c30e",
          "status": "Created",
          "code": 201,
          "responseTime": 211,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d49aa741-2ae4-41ce-8bfa-5d0867a1c073",
        "cursor": {
          "ref": "e98b4f6e-4822-4049-b9d2-d29074cf08c5",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9d485160-c61a-465b-890b-c9b5dfef7f18"
        },
        "item": {
          "id": "d49aa741-2ae4-41ce-8bfa-5d0867a1c073",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "797ffb85-c9b1-4c90-803a-25dca771ac63",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "20d3f22b-8178-449b-90ff-5ede691891ba",
        "cursor": {
          "ref": "cfea63d1-90fd-4928-8fc5-e7e6da9bf81b",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "62547709-d21e-4066-b3a7-4353253811fd"
        },
        "item": {
          "id": "20d3f22b-8178-449b-90ff-5ede691891ba",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "14a53474-46f4-4a17-8fc4-01afd5ed4a7b",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3988c4ef-f0c7-483a-8ee0-988af27067da",
        "cursor": {
          "ref": "ac012e3f-a4d4-4f42-aa89-9cb04fa93261",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "99f865b7-5dd7-4646-9d1f-2bf53e7fdb22"
        },
        "item": {
          "id": "3988c4ef-f0c7-483a-8ee0-988af27067da",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d503807d-174e-47ee-b7c8-7477661beea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c25d2ec-2de2-402d-9a20-d298c9bae94b",
        "cursor": {
          "ref": "c5ef3ddf-a929-460b-a5c9-f457fc8db414",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1da07f60-17fc-468a-88ee-b1b1fa7b304d"
        },
        "item": {
          "id": "0c25d2ec-2de2-402d-9a20-d298c9bae94b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ff735ab9-bf28-4bfc-9726-8881b2d88df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e6576b-a371-48f2-9979-1566bc0eb5fd",
        "cursor": {
          "ref": "324e9829-df56-4db1-81f7-013bd0be9989",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2b8eaef9-03a8-422f-9e83-ccc4bc3794cd"
        },
        "item": {
          "id": "f5e6576b-a371-48f2-9979-1566bc0eb5fd",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "856b0a1a-d41d-45df-8efc-ddeefaaa23ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd42257-90cb-4924-8879-a86b586d8822",
        "cursor": {
          "ref": "d306c9d1-47d5-4358-ad16-d69391df56ac",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e4c69918-8a5f-4acb-a083-5ab814d7449f"
        },
        "item": {
          "id": "4bd42257-90cb-4924-8879-a86b586d8822",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "988795aa-28d0-4b45-8ae1-3f4fc246b9e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f57acc-75d5-4850-aa8b-ffba5f8731a3",
        "cursor": {
          "ref": "d271a43c-a70f-434d-944b-582bb44aee4e",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "08c98818-a7be-43e7-a3f8-51553cbca65d"
        },
        "item": {
          "id": "c7f57acc-75d5-4850-aa8b-ffba5f8731a3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c8c11ccc-a0dd-46cd-8ee7-b9d14b050dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b27582-cbf6-43e3-ba74-31767a841332",
        "cursor": {
          "ref": "d743236b-1c73-49a9-9132-d9e4f439cf62",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9f8071d1-0628-4965-b03c-dc83d824bc47"
        },
        "item": {
          "id": "87b27582-cbf6-43e3-ba74-31767a841332",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b51c8f52-bbc8-4463-a974-9304c81d7c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d779021a-05c2-4e92-9b14-08a85a0f6102",
        "cursor": {
          "ref": "98ef3c82-f994-46d1-95d6-0fa3e638fa27",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "def8a690-072b-43b2-818c-1b8cc900de84"
        },
        "item": {
          "id": "d779021a-05c2-4e92-9b14-08a85a0f6102",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "be42e8f6-0e7d-4308-981b-312e69b1502d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3fa6c15-f647-4e38-aab2-e64351669bae",
        "cursor": {
          "ref": "779e4235-619c-4628-801d-9f121c0bf69f",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c7abaa4a-779a-4168-87e8-8f6d8711c4c1"
        },
        "item": {
          "id": "c3fa6c15-f647-4e38-aab2-e64351669bae",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4b68e7cf-ffaf-4bdb-b004-07a24fc048d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d04d9450-7395-40ba-9f99-cfd1281b0307",
        "cursor": {
          "ref": "06f85b9d-a236-458a-8f62-39144b73e824",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "670e31da-09eb-46e3-b00c-ef6cd91535f8"
        },
        "item": {
          "id": "d04d9450-7395-40ba-9f99-cfd1281b0307",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e3c8f980-30f0-4426-a25c-1be27adb662c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d3f75d-4db6-488f-a809-f1e47514eb2f",
        "cursor": {
          "ref": "ae958eb0-5023-476f-b4ed-1b15af36126f",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "562ac9fb-5461-4c4c-9949-0d61efd69ed9"
        },
        "item": {
          "id": "11d3f75d-4db6-488f-a809-f1e47514eb2f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2fc0a045-a54d-480b-abf4-20f52946cde4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144bb4df-74f2-460d-bbd8-e67ff9897e9c",
        "cursor": {
          "ref": "5022663e-11d7-43d5-a4a4-27a99cef2e47",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4549c7ed-2135-4065-8b0e-60b97148701e"
        },
        "item": {
          "id": "144bb4df-74f2-460d-bbd8-e67ff9897e9c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "491f88af-2006-4f22-8dae-3dce3748a881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8331a831-a9b8-48d1-b122-2c835f0d7ac5",
        "cursor": {
          "ref": "e7fe493f-a66d-4268-9978-e47a3a80972c",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "360c0112-a12c-403c-bd91-50ac0443b188"
        },
        "item": {
          "id": "8331a831-a9b8-48d1-b122-2c835f0d7ac5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8682be95-2222-404d-8d74-36764fd0fc16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b139b951-7548-451e-bd40-e278698b817a",
        "cursor": {
          "ref": "2ff37a1b-8092-4f72-be07-de71990eed51",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4a831e38-914a-4734-aed3-4e6ab199ecc9"
        },
        "item": {
          "id": "b139b951-7548-451e-bd40-e278698b817a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "919aad9c-7419-4812-91be-b75b855b06b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb3cbec-5ceb-42ec-b101-26e6f5964d71",
        "cursor": {
          "ref": "f84fc4e4-d260-478d-84dc-8a744cd707a6",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a869ae6e-a68f-40c2-be0f-91abe4eba72c"
        },
        "item": {
          "id": "dbb3cbec-5ceb-42ec-b101-26e6f5964d71",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cc07bf7f-4e91-47d4-bf33-5364381c6baa",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "5f9e6d12-5ac3-4c8a-a533-0b23981776f0",
        "cursor": {
          "ref": "b63ad327-c7fd-47ca-8797-1f583836e128",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "91c16819-da58-4094-ae40-ccdcd8cf8e0f"
        },
        "item": {
          "id": "5f9e6d12-5ac3-4c8a-a533-0b23981776f0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6a878290-7bc0-48e5-9784-435bdba68c32",
          "status": "Created",
          "code": 201,
          "responseTime": 214,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "535ecdff-40fe-4676-8c43-296bbb278534",
        "cursor": {
          "ref": "38cf8d66-13a8-4888-8d6e-549573b8cfe0",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "febe5563-066c-4a18-b58c-cc11ff053fb2"
        },
        "item": {
          "id": "535ecdff-40fe-4676-8c43-296bbb278534",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4c76ac87-0ba0-4a4e-ab91-dc30eca0bc4f",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "3e390655-2c3c-485a-a6e9-4f8029acd8c5",
        "cursor": {
          "ref": "3c5b1811-b313-4b77-bde9-030804fec7f4",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4d7fcbbd-26ef-40d0-9fdf-93106cb63917"
        },
        "item": {
          "id": "3e390655-2c3c-485a-a6e9-4f8029acd8c5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0597687e-cefe-4114-962a-b9acac8d22b7",
          "status": "Created",
          "code": 201,
          "responseTime": 210,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "0098bec7-e767-4ac2-a67d-1c0b8dc8e646",
        "cursor": {
          "ref": "aa53915f-d3cb-4c1c-ae88-3a1ce59a1e90",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "dd92b233-073d-4062-b603-f7a2d0592e24"
        },
        "item": {
          "id": "0098bec7-e767-4ac2-a67d-1c0b8dc8e646",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "dbcd414a-8dce-4533-9d7e-40a64c729512",
          "status": "Created",
          "code": 201,
          "responseTime": 198,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1094efa7-bc96-40fa-b604-112424d91cf1",
        "cursor": {
          "ref": "ce637c33-7221-4f5c-8d05-1eea44a0cdad",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0ff44522-e68a-4836-96b7-81fd4402dc81"
        },
        "item": {
          "id": "1094efa7-bc96-40fa-b604-112424d91cf1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "53388979-d1b8-47aa-92fc-b4dd819a218a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5320b43-6e4a-4be8-9af8-897dd60d7284",
        "cursor": {
          "ref": "7e98ee1c-a836-4d58-a905-b45149198ffb",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "89ccd3df-bfbf-4587-a60e-15361d7d7e59"
        },
        "item": {
          "id": "b5320b43-6e4a-4be8-9af8-897dd60d7284",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "38b1e692-502f-4214-bd41-0bf1231446b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e45cda-f22b-480e-91d6-7b4d6e7ba25b",
        "cursor": {
          "ref": "60aea4a6-3c26-4b6c-98c6-1a00a773e97e",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b8256b97-e2b2-4685-8412-c19ec848108b"
        },
        "item": {
          "id": "b7e45cda-f22b-480e-91d6-7b4d6e7ba25b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a1902520-9be2-4718-b877-8f2da3223e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f03356-0fd4-4e63-8952-0662cdd28459",
        "cursor": {
          "ref": "ac604d34-5bce-461b-974e-ce7fd890032f",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2dd4434c-a950-4303-9d28-847d25c8cbed"
        },
        "item": {
          "id": "67f03356-0fd4-4e63-8952-0662cdd28459",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1bdd83fe-3ad2-4313-910a-db6be0c585cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a0ad9b-25fa-42b2-9701-416138f261a9",
        "cursor": {
          "ref": "529b9fee-56d7-44c8-8eaf-c773750b8757",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9cfae4ff-263b-4ec1-9eea-125ec71bf6db"
        },
        "item": {
          "id": "d9a0ad9b-25fa-42b2-9701-416138f261a9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "be8954c1-0672-4bdb-b686-693b34743baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57471d7c-9f2a-464c-a927-828fd2c48081",
        "cursor": {
          "ref": "8cc882c1-4c1f-40c9-afc0-8ebed2eb4d7e",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0b04a693-76c0-4947-9b37-498c180ae102"
        },
        "item": {
          "id": "57471d7c-9f2a-464c-a927-828fd2c48081",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "535f7f4c-723f-45a0-84da-5656b609fc08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78b5199-3311-412d-b660-6f4213703d79",
        "cursor": {
          "ref": "6c06f3fc-bc80-4ad1-adc1-0bfb5858744c",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3ff2a5b4-441c-4623-85f2-b3ed12a96d86"
        },
        "item": {
          "id": "d78b5199-3311-412d-b660-6f4213703d79",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "fd51aa63-539e-421a-a233-a13bbdf21fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f1d8d1-5192-4607-99a2-84dafa4e7801",
        "cursor": {
          "ref": "e51f368e-8c3a-4669-ab5b-1caed74a10ce",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5bf9443b-cd02-43ea-8715-133a9bf67875"
        },
        "item": {
          "id": "a0f1d8d1-5192-4607-99a2-84dafa4e7801",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "90d36e42-a7bf-40f3-8030-139fa2b4ff8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e17316-587b-41d1-8c4c-1db6a89a3de6",
        "cursor": {
          "ref": "94985315-34c5-404e-a191-dc8826f87c25",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e5809f53-29e3-4d6b-a1be-fb76d67b9897"
        },
        "item": {
          "id": "06e17316-587b-41d1-8c4c-1db6a89a3de6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "80d618c5-7263-4364-8309-e44b9a06cad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc550f18-11ba-4bcd-ba09-b5db19759b81",
        "cursor": {
          "ref": "18c2b1e3-6d38-47bb-8bc1-9087204bb1e0",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "72172ea5-ffb7-466f-9eaa-13887ccf0f92"
        },
        "item": {
          "id": "bc550f18-11ba-4bcd-ba09-b5db19759b81",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "10d9acd2-76e6-492d-9108-d89b3b57ff2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd335280-9776-433c-a5ff-ef6127b95bc3",
        "cursor": {
          "ref": "6904c871-c210-48b4-b1a3-7570b51a5e1c",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "99c1d9b9-9405-4a0b-acdb-5abc6fbf63a8"
        },
        "item": {
          "id": "cd335280-9776-433c-a5ff-ef6127b95bc3",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6b99617a-fc89-46dd-afe9-2b784de82d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4f11c2-3f12-4fc9-a6b9-4ffac6c7ca6d",
        "cursor": {
          "ref": "799cda96-39a9-4f16-a221-0efe26457690",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "30ca919a-1523-4777-b796-07a86bf2a1c2"
        },
        "item": {
          "id": "bc4f11c2-3f12-4fc9-a6b9-4ffac6c7ca6d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bbe56058-dce6-4af5-94dc-b960131114ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a4bf0aa-295b-47ec-b8f6-dfee3fae912a",
        "cursor": {
          "ref": "c48abecc-ea96-4ed1-8f11-1b637f499038",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c4920d22-d12e-4730-8c49-b97514f5eb16"
        },
        "item": {
          "id": "6a4bf0aa-295b-47ec-b8f6-dfee3fae912a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d4cfde7b-7b20-4aa6-a089-e731dd68043f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89c0f3b-4b8c-452c-898b-391e9cf42922",
        "cursor": {
          "ref": "7e5e2ae4-0632-4197-bea2-df296258a3be",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a6468ebf-fa64-4e06-851d-3f75f6384d31"
        },
        "item": {
          "id": "e89c0f3b-4b8c-452c-898b-391e9cf42922",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3ffe76af-fe8c-4105-bddc-1831a049cbb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e8d5c2-7f23-414c-a235-559a741c6922",
        "cursor": {
          "ref": "540a0605-3b60-4f0f-86fc-a79d152c24e9",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "cd3fd1cd-2f2c-4f58-b28d-dbf026449bfa"
        },
        "item": {
          "id": "66e8d5c2-7f23-414c-a235-559a741c6922",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0c25e37c-44f3-47f4-a204-7a3480d3b541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1def91e-df0e-477e-8738-628e7ba7b17d",
        "cursor": {
          "ref": "0bffc8f1-2375-4f41-989e-dfc2f4ae8485",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "40452c1c-5bde-4281-937d-a31d278d3402"
        },
        "item": {
          "id": "d1def91e-df0e-477e-8738-628e7ba7b17d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "525fd572-6453-4c9f-bc4c-f9e611120859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd91ea7e-d703-46a7-9523-843bad41d067",
        "cursor": {
          "ref": "5dd1ee47-9170-473c-9eb9-7b2e28aa6545",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "00138a9e-eec1-484c-8aac-f2e698b8903b"
        },
        "item": {
          "id": "cd91ea7e-d703-46a7-9523-843bad41d067",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "02fda324-9342-497c-8c81-2b73f86254ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feccb324-bcbc-4437-8679-cd4bd9d0f882",
        "cursor": {
          "ref": "ba5b83b8-673f-481d-9aac-8629916949a1",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "49888d80-4d57-40da-ba0a-b35f08b0b207"
        },
        "item": {
          "id": "feccb324-bcbc-4437-8679-cd4bd9d0f882",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ccc8b5b9-33fd-4ebd-8eb1-3e3e436d5631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1616addd-f8ed-4d00-9f21-974ed8be5ade",
        "cursor": {
          "ref": "a3f0c669-fa34-4146-9e15-1d8fcc9a9d40",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "92f07a0f-3832-491d-a911-ddadaef6d9ae"
        },
        "item": {
          "id": "1616addd-f8ed-4d00-9f21-974ed8be5ade",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9d633d64-2574-4903-aa41-446265f9a803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a36511-371a-4224-8711-d177758f176c",
        "cursor": {
          "ref": "7a3a33b5-3290-4c99-ace8-5fddeb05eac9",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d73c8be9-2434-476f-97dd-576e59514a78"
        },
        "item": {
          "id": "92a36511-371a-4224-8711-d177758f176c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "644691bb-8017-40e5-b009-bafa9caee153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae99b8b-5eb0-48f8-88c8-03939ca79822",
        "cursor": {
          "ref": "c175d7ab-d5f2-4997-9a77-63505fb9f2a8",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e0b0f4cb-e8ce-4a9e-8dec-7d1ea0e5e872"
        },
        "item": {
          "id": "eae99b8b-5eb0-48f8-88c8-03939ca79822",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "78508239-0741-42ee-a281-e7bca7f2c25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486e2a8f-78fb-46f7-b6db-973822cea884",
        "cursor": {
          "ref": "df3cd221-f7c8-4ee1-a464-9500dab400c2",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b1318a80-3d6e-4951-9c2e-915e82577785"
        },
        "item": {
          "id": "486e2a8f-78fb-46f7-b6db-973822cea884",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cc9172d2-d93b-4b5f-b8e6-c761d2f62adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5830a58-b521-4eef-a878-e433c8974a0d",
        "cursor": {
          "ref": "6ba1996d-7ad2-4527-b70e-98a92e814379",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "93065844-d86c-4d1b-80e6-e534be427f7d"
        },
        "item": {
          "id": "d5830a58-b521-4eef-a878-e433c8974a0d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d2f33ec8-dee1-44e4-b61a-e58c80f75b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c45c52-f7c2-4648-a7f5-f34075977b58",
        "cursor": {
          "ref": "64bcba30-9ce7-47a7-8e0e-fa24e0a0e30d",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ed1658d8-73b4-427f-b7b7-1664ad9ca826"
        },
        "item": {
          "id": "e5c45c52-f7c2-4648-a7f5-f34075977b58",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4a1d83af-7e56-43ec-b4e9-08bb46db9865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4bd6a47-39f3-4f89-a342-0db666dd5bd0",
        "cursor": {
          "ref": "d13f8803-2201-4b74-bb23-aade34be645c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4fe06c86-7e1e-408d-9f07-cbfd906b9b3e"
        },
        "item": {
          "id": "e4bd6a47-39f3-4f89-a342-0db666dd5bd0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "949e338c-8e1e-4b15-bb49-ff435bbf4c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34017ee-048e-4526-b8b1-7a5bd2ed7bae",
        "cursor": {
          "ref": "c533745c-a179-47ed-96ee-9b2f79f6dfdf",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "cf80533f-2f3c-4b17-a0f3-7d771ee91f7c"
        },
        "item": {
          "id": "e34017ee-048e-4526-b8b1-7a5bd2ed7bae",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c5340fe5-4943-4c9d-b38b-79b2d3b8bcb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4db122-2671-4232-b516-3b64ceaa6430",
        "cursor": {
          "ref": "778bb536-7f8e-4a89-944d-99abecbcf8d3",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8ff7b205-e4b2-40cf-8bfd-ac92c7e979b4"
        },
        "item": {
          "id": "cf4db122-2671-4232-b516-3b64ceaa6430",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "07e9842c-3abe-4442-b367-fe46d16e2767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7e3803-d0fc-4f75-b992-cf4c1d4462e4",
        "cursor": {
          "ref": "f903fe32-c2ca-47b0-b387-c1b1d1796e5b",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "440f04e5-8295-4ec5-910a-5f40db8c8dfc"
        },
        "item": {
          "id": "bd7e3803-d0fc-4f75-b992-cf4c1d4462e4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6d9ed42c-329b-43b4-b1b2-c8213fdbee90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71ff36e-881c-4d30-a255-35da5e191691",
        "cursor": {
          "ref": "29446937-4812-4373-8e87-8dda137124dd",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b8fd155e-fb2a-4ef6-b11c-65cafa8c44c3"
        },
        "item": {
          "id": "b71ff36e-881c-4d30-a255-35da5e191691",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d7b1d419-9197-44a8-9873-e2c8c0a0f2cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa5d35b8-7c8a-4dec-b576-9a3e28cf9ce4",
        "cursor": {
          "ref": "037cf7d8-8afd-44a9-8ced-c6021966ea3c",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "99db57a7-4779-4d1d-b4f4-5a85c64a9f3d"
        },
        "item": {
          "id": "fa5d35b8-7c8a-4dec-b576-9a3e28cf9ce4",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5cd8dec6-dc8e-4882-9dd2-2be3a8b12260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83cf89ee-8343-4a42-96f9-a25c76ac5704",
        "cursor": {
          "ref": "2fbec14f-75c2-4ecb-9f6a-2abadd71d711",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a3d4a6f5-cc62-46e6-aac8-b075958bae86"
        },
        "item": {
          "id": "83cf89ee-8343-4a42-96f9-a25c76ac5704",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b4772926-c0dd-41bd-a56d-4f44850ef509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ac46ac-f6da-40e4-b733-bac1a6702fa4",
        "cursor": {
          "ref": "d60c4320-9a2c-4b78-9fa2-78a046c5de7c",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "69d22022-d894-4756-8859-3ebcfb10cd8d"
        },
        "item": {
          "id": "24ac46ac-f6da-40e4-b733-bac1a6702fa4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "365b23d4-bfa2-4a43-8998-316f4de0205c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a3dcb0-5f85-424f-9110-88c39ae56265",
        "cursor": {
          "ref": "15a1e161-e88e-46ee-be41-d91278eac23b",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "973c5abe-849a-4eea-909a-68a7a47b9162"
        },
        "item": {
          "id": "f3a3dcb0-5f85-424f-9110-88c39ae56265",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "a0661c69-c5f6-4f6f-a754-d95a1fdec796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "61852d8e-70aa-4aae-9f47-4e37b06d69ce",
        "cursor": {
          "ref": "7608af9a-f062-4ed5-be91-ef637b7a9487",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a530d363-d87c-4f01-a33a-31092116de12"
        },
        "item": {
          "id": "61852d8e-70aa-4aae-9f47-4e37b06d69ce",
          "name": "credentials_issue"
        },
        "response": {
          "id": "98c60422-fbbd-49f4-9811-e9bbbb24c03d",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72be671-587b-470e-9963-434196fb13b5",
        "cursor": {
          "ref": "9a5ecdd1-3f37-41c6-8795-e7d2db60e218",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e1592f27-aa11-4540-bf6c-1c1ddfe6938d"
        },
        "item": {
          "id": "c72be671-587b-470e-9963-434196fb13b5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "3085a199-abe1-45b3-8ea4-df8136dabd83",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b7f380-40eb-45bb-9f7e-f371ee0af7cc",
        "cursor": {
          "ref": "97aa44eb-05c7-4d7f-a3a0-308dac93ba03",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5c90a12c-9b89-4aec-a169-92fadcced683"
        },
        "item": {
          "id": "78b7f380-40eb-45bb-9f7e-f371ee0af7cc",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3562ab4f-5cb1-4537-bc9c-ad5189afcd14",
          "status": "Created",
          "code": 201,
          "responseTime": 203,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b10c0c-e991-4f67-8980-92e642689d12",
        "cursor": {
          "ref": "a8cd0988-8370-4014-851a-e7128f47ce64",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6ee7d9eb-be2b-4392-93c2-30fcd0dc9f76"
        },
        "item": {
          "id": "82b10c0c-e991-4f67-8980-92e642689d12",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b53ce363-47c8-421f-97b6-587a03127185",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f23ba4-73b2-49b6-a06e-938af9ff4a15",
        "cursor": {
          "ref": "1c6fef77-e161-4dcb-ac24-3922c7080bd8",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c454e63b-42dd-4a21-9d5c-70de289f5af7"
        },
        "item": {
          "id": "18f23ba4-73b2-49b6-a06e-938af9ff4a15",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "19315ebb-f154-4663-ab3e-9b800eb90602",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-04T00:33:35.413Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-04T00:33:35.413Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "0c7829eb-fa13-415e-af68-1ff43763523c",
        "cursor": {
          "ref": "9659e65f-a7ef-4864-8655-43652dd13e9e",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0210baa3-7715-4b0b-9911-253091e2b7f8"
        },
        "item": {
          "id": "0c7829eb-fa13-415e-af68-1ff43763523c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b482f842-fc2f-4f3f-84c0-afad033a0d05",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f14b538-e49e-4b19-80c9-8c8640997ad8",
        "cursor": {
          "ref": "b5ffcea7-90df-407f-be5b-211091ef2e8d",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "51503eea-4fa5-4469-a989-3efe11fe2bbe"
        },
        "item": {
          "id": "6f14b538-e49e-4b19-80c9-8c8640997ad8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a315c26f-a2b6-4a8f-80a7-67263fadccf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79051af0-5211-4b89-a012-cd75757ae657",
        "cursor": {
          "ref": "50e15240-b910-4c95-9bec-1ba06599fa2a",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b689b0af-f37e-486b-850e-8536cf23320a"
        },
        "item": {
          "id": "79051af0-5211-4b89-a012-cd75757ae657",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "39731332-938b-4333-bbc5-57f121373fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d282f1e5-b363-47fe-8b16-21aed3e4c338",
        "cursor": {
          "ref": "2892e9bd-3cd7-4183-a46f-cacff0a7e357",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "31ba5a48-3455-48b9-9813-7d84adc757ce"
        },
        "item": {
          "id": "d282f1e5-b363-47fe-8b16-21aed3e4c338",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e7de60d0-c51b-4a46-a9a1-c7ca4da21703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d99dd11-8c38-4fb9-b13e-f0d4c864e233",
        "cursor": {
          "ref": "cbac2c46-79fb-4e3f-8e70-8601e4517914",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "422687cb-e879-4a32-81e9-27dcb10b074d"
        },
        "item": {
          "id": "4d99dd11-8c38-4fb9-b13e-f0d4c864e233",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "364696ab-b28a-4707-97e7-041bfafbe53c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e402ef-ce65-40a9-a5f6-36884e53402c",
        "cursor": {
          "ref": "8040efcd-d75a-4682-a37e-db931d00d1df",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8214064c-a3dc-430d-9074-a408067cf647"
        },
        "item": {
          "id": "b5e402ef-ce65-40a9-a5f6-36884e53402c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "81384926-75d3-45d2-8695-7448f3fb8f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072a469b-9ceb-45f9-ba20-cbc732ad9c65",
        "cursor": {
          "ref": "bb595886-f9b6-42c2-8c16-096418f2e581",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a8187be8-1da8-4f70-ab5f-c43bfaf9c5ba"
        },
        "item": {
          "id": "072a469b-9ceb-45f9-ba20-cbc732ad9c65",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "14875b5b-cca6-42dd-89e8-38f200cda883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da893ef-f492-4033-8f58-138d3bbffee9",
        "cursor": {
          "ref": "95451e82-f030-4534-a0d3-1a8bb1f86e88",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c4a44a75-ef9d-4c39-a357-33ca79985b71"
        },
        "item": {
          "id": "5da893ef-f492-4033-8f58-138d3bbffee9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "51452a4d-5c63-4cfe-81c9-63ca33abae2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e9cac1-ffc3-4207-baa8-494bf487337d",
        "cursor": {
          "ref": "71c03e88-b12a-4c69-954a-54c9d5cfd988",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5a2cac3c-fa70-435f-9465-4fe35c5a9dae"
        },
        "item": {
          "id": "d3e9cac1-ffc3-4207-baa8-494bf487337d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f5667895-83e5-4e8b-8d0e-22a8f227c0d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8049c33f-2f1b-412d-93df-e65a844f985f",
        "cursor": {
          "ref": "4de028f0-0fc2-426b-a2dc-70567669b661",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "17b094b1-bce6-48a4-aafa-347ba6b8e7d2"
        },
        "item": {
          "id": "8049c33f-2f1b-412d-93df-e65a844f985f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0eaeba60-8c5a-4611-a219-8821cf35cbd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7204e0-5697-4369-ac4a-c1b74d23e69a",
        "cursor": {
          "ref": "f46c0a95-7ca7-4d19-9d05-490fa84d5f7c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8ba330a3-ef9d-4120-a457-ffea2a491c8d"
        },
        "item": {
          "id": "1f7204e0-5697-4369-ac4a-c1b74d23e69a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4418ce9f-77f4-4154-920c-085447cf2ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf24b6a2-a92d-4010-a216-4129010cf864",
        "cursor": {
          "ref": "79fcc447-5574-4eb2-891e-5a4bee563041",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8046ac6d-1a44-4819-a4b2-ffd9f84f3418"
        },
        "item": {
          "id": "cf24b6a2-a92d-4010-a216-4129010cf864",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "44afcfb3-e7fa-4c8d-bf81-ae345099df5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af67d4b3-1104-4872-b201-cd1770c408e2",
        "cursor": {
          "ref": "3c8e501e-874d-421d-bdb0-1280ddfc39c4",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e52e6f53-1d25-4fc2-9e6d-7e915d0bd39d"
        },
        "item": {
          "id": "af67d4b3-1104-4872-b201-cd1770c408e2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9fa37308-5ab3-4373-85f2-794d99e0ccf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aaf9a37-0044-4487-9fb3-43e02ac608e3",
        "cursor": {
          "ref": "d014eaa2-2b1a-4f27-904e-7e66a3e36adf",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b9e3cbc5-a860-484b-82ad-6ad04625892c"
        },
        "item": {
          "id": "2aaf9a37-0044-4487-9fb3-43e02ac608e3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "74c3d96b-040a-4ffa-a355-cf28c25cd49b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2307f2-03f5-4aaf-a27b-1f0835bf0fc7",
        "cursor": {
          "ref": "baef0f1b-857e-489a-acbb-9a92b1d31e6d",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f7d964f4-6232-445e-bd99-52003e1d9c48"
        },
        "item": {
          "id": "2a2307f2-03f5-4aaf-a27b-1f0835bf0fc7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "42f2af0b-8474-49c8-bb96-bbe7015ffc89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f8fef0-aba9-4548-ba12-4c60fa8e716a",
        "cursor": {
          "ref": "524367d0-7b98-4068-a7c6-216b47555716",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8dd647db-2f3a-44ed-b99b-047d87b1877e"
        },
        "item": {
          "id": "e0f8fef0-aba9-4548-ba12-4c60fa8e716a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "640647f1-b7dc-4ea3-86d3-045ba23056a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fa39cb-0130-454a-a1d1-c67f0941feea",
        "cursor": {
          "ref": "a0adddcd-b0b2-46ef-86bf-d4eaec506840",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ea2af5c4-2b4c-466c-a3c9-795acf32dc84"
        },
        "item": {
          "id": "38fa39cb-0130-454a-a1d1-c67f0941feea",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e1fb7c10-edfe-4cc0-92d3-78d2b3d8d892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b2ccab-a178-4e8a-bb84-9320bd951340",
        "cursor": {
          "ref": "f0a66821-5f4f-4793-800e-03664098e908",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "527d7cad-0b42-45bf-afb2-5dc777f78785"
        },
        "item": {
          "id": "43b2ccab-a178-4e8a-bb84-9320bd951340",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "83bc70c9-55a2-4d17-868c-bf61815b386a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddca7db2-66bd-4216-8cc2-82194c03f2ee",
        "cursor": {
          "ref": "1e038d3f-bf92-4331-b67b-b0d4ebfcb759",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f7d73a00-bbbf-48c6-bb46-5615889e6636"
        },
        "item": {
          "id": "ddca7db2-66bd-4216-8cc2-82194c03f2ee",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f231c820-6a68-4be5-b5ed-f8f767845b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de95141f-897a-43bd-a081-6e6ae52754a7",
        "cursor": {
          "ref": "48e8899b-9796-48c5-97bc-8a5cb6942f9d",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5af083d1-4aab-4873-ab22-550c05d5a270"
        },
        "item": {
          "id": "de95141f-897a-43bd-a081-6e6ae52754a7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0ffdd977-16ac-495a-91b4-e512b2c36fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f387285-0677-4b09-82db-5fb4a8967193",
        "cursor": {
          "ref": "9162ff14-a149-4915-a18e-a7473259c1d6",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "38d417ea-ed08-4795-900e-1fd6081c2c72"
        },
        "item": {
          "id": "2f387285-0677-4b09-82db-5fb4a8967193",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "00c91107-1e09-4ecb-9f90-8f1b08db672c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ac3555-3bb5-4325-a68f-9acb723f2636",
        "cursor": {
          "ref": "cdcd2930-23e6-423d-825a-810a30282f6a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "30c364bb-f022-4601-a328-23d158883b5c"
        },
        "item": {
          "id": "83ac3555-3bb5-4325-a68f-9acb723f2636",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "675d56cc-7577-4b22-8259-3e36ce1c7e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e343ca28-e9a9-4632-b379-ef0dca9c4b95",
        "cursor": {
          "ref": "267847ed-47bd-4b9c-b28f-02ab108d685d",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0294c6d3-a419-480b-a39c-462e24d18cb1"
        },
        "item": {
          "id": "e343ca28-e9a9-4632-b379-ef0dca9c4b95",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c4e70274-4568-4773-92be-3ef409f92319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d313f27-fa7d-4324-b4ab-8a96a7b9561c",
        "cursor": {
          "ref": "8b5918ef-9a46-4f71-8680-1b4d7f6abe9c",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9a8cd22c-6946-42b2-84b9-19a0966942d5"
        },
        "item": {
          "id": "8d313f27-fa7d-4324-b4ab-8a96a7b9561c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "88ce2a2f-0199-4583-948e-b761b80f03de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d71357-668f-4bf4-af47-f441dc7c5cf8",
        "cursor": {
          "ref": "259f5352-b553-4d2e-ba41-46b40437a70c",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "34544944-ac9f-488c-86cb-7a3442113adc"
        },
        "item": {
          "id": "31d71357-668f-4bf4-af47-f441dc7c5cf8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "53accb52-038b-4445-b829-fb3679fd687a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e461f69a-f29b-46d4-b0e9-bc018c1ee5e5",
        "cursor": {
          "ref": "163a1426-f9b3-4080-b337-451fd8228908",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e48a1264-11e7-4891-9cd5-f8d20d14c00b"
        },
        "item": {
          "id": "e461f69a-f29b-46d4-b0e9-bc018c1ee5e5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "08902083-563a-4317-9511-04c724fd59b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279b43dd-ca16-4117-9c15-e776944bae9a",
        "cursor": {
          "ref": "14133900-4e66-44bf-b346-5697172f1a78",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "251a1fd7-8923-4685-a6b0-9834df2b8dd2"
        },
        "item": {
          "id": "279b43dd-ca16-4117-9c15-e776944bae9a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d1da77b9-4f82-49c1-a6a5-94533539e27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f60f489-315b-4b35-b766-0fabc35d4cfa",
        "cursor": {
          "ref": "22f6b978-d0aa-4e31-9822-30c20660afee",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "229b5a62-930e-48ea-8d70-2748b20b8bb7"
        },
        "item": {
          "id": "8f60f489-315b-4b35-b766-0fabc35d4cfa",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "58d57e2f-aab3-401e-a33d-ff06a21738f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e654ef4-38e3-4890-be00-28c4c65a2ccd",
        "cursor": {
          "ref": "271c077b-1645-4dee-8f0e-13c5564a11f0",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ec6a1ab2-85a9-453d-bc8a-3e3cd163ed22"
        },
        "item": {
          "id": "3e654ef4-38e3-4890-be00-28c4c65a2ccd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b270f938-088d-4e15-88a6-baf1a9ae304a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c8af036-59bc-45e0-bfd7-f3609a392795",
        "cursor": {
          "ref": "759789ff-cf2b-4226-9719-44290bb423f4",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9882490f-b130-481d-b0c7-c630494d4d88"
        },
        "item": {
          "id": "6c8af036-59bc-45e0-bfd7-f3609a392795",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cfc04476-4f82-4352-b75d-cd26ed83fdf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fcac271-9b05-43ef-8456-9d4523f52f76",
        "cursor": {
          "ref": "2585696f-1249-409d-b26e-da852e49fb05",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "47c27961-b80e-49ff-87f6-ef071e4889f0"
        },
        "item": {
          "id": "5fcac271-9b05-43ef-8456-9d4523f52f76",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "07ad587e-ef50-4b53-8bf5-5538285cfae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca0fc9d-bb50-4e04-b990-7f9f85d9a19b",
        "cursor": {
          "ref": "c4a8cf27-a013-488f-b6e5-960bc939c74b",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3ec2ed29-6d99-4407-98af-9f000f221903"
        },
        "item": {
          "id": "8ca0fc9d-bb50-4e04-b990-7f9f85d9a19b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "688af292-def7-4e26-b05c-f9706971197e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577a6543-98d4-4f99-a46b-7cd946925160",
        "cursor": {
          "ref": "6e7fe17e-bebd-41a3-aac9-952b92af1b04",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5cb4e3fd-7349-4ed0-977a-3e877d568e25"
        },
        "item": {
          "id": "577a6543-98d4-4f99-a46b-7cd946925160",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c17f8d3b-04a3-451b-804d-655c58d4ffb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d60a84-c1bf-4949-ac61-8c1a54115508",
        "cursor": {
          "ref": "e293db2d-5c62-4010-a7a5-bab9e5d3f678",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8c806bfe-fd49-4e98-8354-69784ed4c1e3"
        },
        "item": {
          "id": "62d60a84-c1bf-4949-ac61-8c1a54115508",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9bbdacb3-f183-47c1-82ec-12ef0d17880d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbedc1d8-defb-4fbb-b199-a37439b2b60b",
        "cursor": {
          "ref": "e4c574aa-0dc8-439f-aa35-3a94aa844719",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7bf29fcd-00d2-4bad-82ca-c4d4fbd864e9"
        },
        "item": {
          "id": "cbedc1d8-defb-4fbb-b199-a37439b2b60b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ce693b6e-6a5a-4521-83b4-b6e990afc6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d066c9b-d8fd-4029-81bd-c7f1996b2bbb",
        "cursor": {
          "ref": "f793b172-f479-4bfb-8a6f-6e8a7fca8e00",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "84143847-19f3-42ae-9fc8-875658660e44"
        },
        "item": {
          "id": "6d066c9b-d8fd-4029-81bd-c7f1996b2bbb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f4c9892a-6a7b-4369-aa3c-41184b317e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d4505f4-a6cd-4d35-8d46-546299ad485b",
        "cursor": {
          "ref": "d4585c55-0f16-421b-8101-efe79fb09dc3",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fb4854d6-1cc2-4d3b-8cbe-5e2132a5f9b3"
        },
        "item": {
          "id": "4d4505f4-a6cd-4d35-8d46-546299ad485b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4fa6c240-fc4a-4044-8d89-ecedf36d2dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8bc1cf7-3999-4c82-a25e-8907572e6bdb",
        "cursor": {
          "ref": "d8a551e6-1f47-4cff-b5f6-46ba23dfcf0c",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6a42c564-7298-45f0-b2b4-0334d7208c41"
        },
        "item": {
          "id": "a8bc1cf7-3999-4c82-a25e-8907572e6bdb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "23da646e-8d51-408c-84bc-b144c6506971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43440e67-b397-4668-9233-d4e2f5a23496",
        "cursor": {
          "ref": "b5cf8e2c-a4e4-46ad-8d7e-8aa4665e8867",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "23d15367-4892-443e-b6a1-d872029b42f1"
        },
        "item": {
          "id": "43440e67-b397-4668-9233-d4e2f5a23496",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6adc4233-1aaa-4f3e-a622-a58120d541c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa991ef1-cad7-44ba-a0c1-ec01392d06c3",
        "cursor": {
          "ref": "f652cf72-ccb3-4778-9627-b95bcbf9fc06",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0c9d6030-5c99-4944-9b2f-3a00172c294f"
        },
        "item": {
          "id": "fa991ef1-cad7-44ba-a0c1-ec01392d06c3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "facabd1f-8a7a-449c-a224-3a4aab6e2428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5866844-c7f8-4db2-bf9f-997731e960c9",
        "cursor": {
          "ref": "877d062f-a11d-4ee4-8ade-454901c9f7b6",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d47674e7-819b-4227-912a-dbcf14fe66f1"
        },
        "item": {
          "id": "f5866844-c7f8-4db2-bf9f-997731e960c9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "38e1d051-cb78-474a-a848-f33c3c567519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6efa7fb3-1324-44f4-9fca-eabfc44efb78",
        "cursor": {
          "ref": "1324a7fa-83ca-4c8e-ac5a-0d0d5a7b9c64",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d77a69a1-3b07-4078-8f87-2ba1601d129e"
        },
        "item": {
          "id": "6efa7fb3-1324-44f4-9fca-eabfc44efb78",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "222ff1fe-2f77-4e6f-af5f-8073a7c8c6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068c8ed3-35d5-4ba7-90c5-0a4614918fd9",
        "cursor": {
          "ref": "53550e75-1618-495c-84f8-e6445ffecf44",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "124695ac-2d18-477c-9a8d-f56c810d3d50"
        },
        "item": {
          "id": "068c8ed3-35d5-4ba7-90c5-0a4614918fd9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fbca073f-90f1-457d-aeb5-8002c1c5c6ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19849f70-ddb2-4365-a94b-f0659e96a733",
        "cursor": {
          "ref": "3402f50d-66ec-4334-b815-888fbdf50863",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6c0114e7-00fd-4ab8-b1d5-876952a497a9"
        },
        "item": {
          "id": "19849f70-ddb2-4365-a94b-f0659e96a733",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d71e9df7-0485-4590-aaac-f88f45d99340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4c7754-53a7-4442-aea6-679636dd277d",
        "cursor": {
          "ref": "029e3007-d7b6-42b0-9730-1cc7f381c944",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "408877bf-c886-44c6-9a11-85506bee6c35"
        },
        "item": {
          "id": "bf4c7754-53a7-4442-aea6-679636dd277d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4cda7496-6a6f-4889-8b0d-ee22ea3a2370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f4f579-3814-4a06-957f-64d21a08b600",
        "cursor": {
          "ref": "4300bd6e-7a43-44c5-b8fc-f099b9dc3ad3",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "cde6378c-544c-4b96-941f-b56f94c1b6bd"
        },
        "item": {
          "id": "a2f4f579-3814-4a06-957f-64d21a08b600",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d0f72e62-8e6c-4420-981a-f746b81b383f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cba6071-ce3f-4d54-b957-614b9395f8d1",
        "cursor": {
          "ref": "e4c1fd40-735e-4f9c-bc30-55d9c52f7aef",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8f7bf271-39d3-4aa0-881b-c55de667b4a9"
        },
        "item": {
          "id": "8cba6071-ce3f-4d54-b957-614b9395f8d1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9df39f38-447b-4479-8d51-f82788ce71dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3ec812-a60a-43e6-b18b-9bd30ddbe453",
        "cursor": {
          "ref": "664f2afd-302f-4bd8-a775-f1e47a51e6b9",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f3764edf-6d64-4edf-9ecc-5b1b3cde61c2"
        },
        "item": {
          "id": "8a3ec812-a60a-43e6-b18b-9bd30ddbe453",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "85002cf3-48e0-4c78-8f4a-2f49a4c577f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76362739-f209-4a7e-88cd-ecd735747d8c",
        "cursor": {
          "ref": "360aaa41-609b-4ca1-b52c-d23ab53e00e7",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a282b427-5abf-4bc0-b371-4bdf18542c42"
        },
        "item": {
          "id": "76362739-f209-4a7e-88cd-ecd735747d8c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "18287d9e-67c2-4b90-9599-90c61b0fd4b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc2ce2b-d6fe-4baa-8f57-c32adf1c6cd0",
        "cursor": {
          "ref": "6f53d5aa-6a77-426e-b7c1-529fdda92330",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6bbe3e87-df84-4448-a569-8bf7e4c37f51"
        },
        "item": {
          "id": "6dc2ce2b-d6fe-4baa-8f57-c32adf1c6cd0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fa2cd2ae-4f1d-4b6f-9487-a2c58bdfa95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7aee649-2208-4ec0-b1ae-c0943c82cb0f",
        "cursor": {
          "ref": "fa93914f-1e6d-4a91-9796-f9873abcabd7",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "492764d0-d3a6-4b0d-8f3e-869ea743c1b3"
        },
        "item": {
          "id": "d7aee649-2208-4ec0-b1ae-c0943c82cb0f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e5c1395b-101c-40c4-81c1-70cd8498ad7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d25874b-23e0-43c0-ba33-6d4c9e355a10",
        "cursor": {
          "ref": "541ee2c9-e7fd-447a-b63d-10093f0a0514",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "23facd9b-b83f-49ab-8199-567f7c9066a3"
        },
        "item": {
          "id": "0d25874b-23e0-43c0-ba33-6d4c9e355a10",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "98a4e0bc-56e4-4b08-8ac9-bad3e7980629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5e8bb8-21cb-4845-aad9-75ad20a166f7",
        "cursor": {
          "ref": "63e94500-058d-45a6-bce9-0be56429df92",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9c796aac-e51a-47e3-8e2e-453c627add1f"
        },
        "item": {
          "id": "ff5e8bb8-21cb-4845-aad9-75ad20a166f7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "251b9671-b54c-4ef6-99e4-37e201b30076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe5705c-3d7f-41ad-a3ef-a882fe9ae0ad",
        "cursor": {
          "ref": "20e47d7e-087b-48a3-b466-bf05b924d3b2",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a45f527b-249c-4532-95d9-746fd696f6a6"
        },
        "item": {
          "id": "ebe5705c-3d7f-41ad-a3ef-a882fe9ae0ad",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "90fc9c9d-5a9a-42db-b0ed-c84ff6ef57d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "020a98f2-4f08-4e60-b0d3-07c6217e599f",
        "cursor": {
          "ref": "1d90cbde-b2fb-4e77-a176-777b0d08fe86",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f8d706b4-d30f-4fd7-bbca-8e2783803888"
        },
        "item": {
          "id": "020a98f2-4f08-4e60-b0d3-07c6217e599f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c4e4acd4-9629-4901-b110-e709d188c821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04424ed4-ddb8-4213-9219-7705c7317a8f",
        "cursor": {
          "ref": "61f75542-98b2-4933-9f1c-7c937df19809",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "69598530-84f1-422e-b7e2-6ddec4c4b694"
        },
        "item": {
          "id": "04424ed4-ddb8-4213-9219-7705c7317a8f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b618613c-b923-41d7-97ce-4df474b29c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4fbf2f-d70f-4efc-8b80-d6b05b4318f1",
        "cursor": {
          "ref": "cad491d0-179b-4fcc-baf5-0cc7122a264c",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d9fd70d1-c35e-4477-acb3-31551e7ced25"
        },
        "item": {
          "id": "ee4fbf2f-d70f-4efc-8b80-d6b05b4318f1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "cd2da819-ba09-4181-8b78-7fb72aef8c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93bcb93-201a-4819-bc64-372389dc8328",
        "cursor": {
          "ref": "d95a798c-14df-431f-8136-b42b9ab4676e",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3baceda0-b43d-49e5-b09d-dd8797cd5391"
        },
        "item": {
          "id": "f93bcb93-201a-4819-bc64-372389dc8328",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "87eb0f48-ece0-4f86-b563-6477bdd5cacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27243f1f-5e12-48d7-a476-5a38ccb686dc",
        "cursor": {
          "ref": "784228b5-dca4-4264-b2e6-51a036e63b48",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e22788f3-9a96-4c5e-9280-fc966cf78cc9"
        },
        "item": {
          "id": "27243f1f-5e12-48d7-a476-5a38ccb686dc",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c2cded8a-5ca6-41d3-afac-3321f810cf87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418017fc-75eb-446b-9342-d50ab8707a1a",
        "cursor": {
          "ref": "8dee9ab2-f7fb-40d7-b44a-5bfc7bd70395",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "04e3f35f-f751-48c8-a0d5-284709f44696"
        },
        "item": {
          "id": "418017fc-75eb-446b-9342-d50ab8707a1a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4c66a3a7-8521-42fe-a259-badd39036d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa82ae0-06a8-4243-9ee9-eb0f62a69784",
        "cursor": {
          "ref": "ceb1aac7-da39-4ab0-a071-91079c13e450",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "62a3234e-d097-4c75-b30b-49f13e854ed1"
        },
        "item": {
          "id": "cfa82ae0-06a8-4243-9ee9-eb0f62a69784",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "528df44b-591a-4ccb-ba94-a48bfc205dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac35dc3-005a-4613-ba12-bc597ff4a88a",
        "cursor": {
          "ref": "044ee8c7-a8a9-4aab-aa2a-dce26509f6ea",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3535e5b2-fa93-414e-8a80-77a288eead20"
        },
        "item": {
          "id": "9ac35dc3-005a-4613-ba12-bc597ff4a88a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c08cdce1-2d9f-467c-b83c-ec8006fe32b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf0c780-f824-41f6-8f03-997830b2316b",
        "cursor": {
          "ref": "4f61d15a-cc08-417e-bf2b-5dc9d586c9d7",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "377ad5be-159d-4cf2-bf25-19713c61d1f8"
        },
        "item": {
          "id": "8cf0c780-f824-41f6-8f03-997830b2316b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "85073526-2b0f-42ca-8bd7-a4b8e3ac1367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5a1e77-9735-498c-ad87-b6d46cce3bfd",
        "cursor": {
          "ref": "39495efe-1cde-4d24-b118-edfb6d64fa2d",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c0904533-53fc-4ce8-b4d1-60a6432d0fbc"
        },
        "item": {
          "id": "fb5a1e77-9735-498c-ad87-b6d46cce3bfd",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "08d4ec9e-01a4-407c-bc6c-a61429ed729e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3508512-c860-4b47-aff3-e58f5cbd8029",
        "cursor": {
          "ref": "b7238d0a-af3b-4255-a18a-aa1d2417df35",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e9a2cbea-a94b-46b2-8c5a-4b468ffa1b0d"
        },
        "item": {
          "id": "c3508512-c860-4b47-aff3-e58f5cbd8029",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ab94465f-3b24-461f-88f4-13579b303b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133e20e6-8cb0-42b1-aeca-2fee147d9b2c",
        "cursor": {
          "ref": "695912cd-fc8d-45d7-850f-144ae4cfbf5c",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8d6f8398-3876-462c-9018-c41680c68775"
        },
        "item": {
          "id": "133e20e6-8cb0-42b1-aeca-2fee147d9b2c",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "5905483c-4766-4144-990f-4e1bfad438c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d622f6e-4076-40d7-8916-2f4de87bc243",
        "cursor": {
          "ref": "92253d23-dfce-4f03-b2b5-cac4f970ee46",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0722de00-cd34-4d2f-8f47-97f75f8ec3d3"
        },
        "item": {
          "id": "4d622f6e-4076-40d7-8916-2f4de87bc243",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d792c17d-bcf4-4755-91b0-5be5586fdbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679ed9b8-6291-4ebf-95a8-74a459997ee1",
        "cursor": {
          "ref": "3eacd19b-8f8b-438b-8897-e64667ab1721",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7ba44692-d9b7-4129-aa78-92646b657b2b"
        },
        "item": {
          "id": "679ed9b8-6291-4ebf-95a8-74a459997ee1",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f42c546b-9cee-4c73-b78e-6b01f290d9da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959cac17-6f01-4354-bff7-4df69491d273",
        "cursor": {
          "ref": "f7b5df65-d2e3-44a7-bf1b-722d8a97d413",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "70f6eb6f-abe7-4178-a42f-cbeb7582b0ef"
        },
        "item": {
          "id": "959cac17-6f01-4354-bff7-4df69491d273",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "8cfb7f0d-a4d0-49a1-b800-433d96adec9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e7e4b5-0cfc-49d7-82e1-7cb90dcd8de2",
        "cursor": {
          "ref": "d89869dd-ec8b-48f5-a0c0-bc8413ce3c07",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "366b4f15-6d0b-44de-a5d1-700186990447"
        },
        "item": {
          "id": "15e7e4b5-0cfc-49d7-82e1-7cb90dcd8de2",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "53323622-b670-4346-b51a-26f2706658b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698da626-aa49-468e-a697-62f07b5b26df",
        "cursor": {
          "ref": "d4f4909e-1a10-42a6-8231-24f396a14cd0",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a307af35-d458-4570-bf56-86f8f283da62"
        },
        "item": {
          "id": "698da626-aa49-468e-a697-62f07b5b26df",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e6d34721-54a5-483a-9f3a-867c41ed4c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ae5a8b-6955-45f7-99ed-1d22af776a6b",
        "cursor": {
          "ref": "2ff84503-1a87-4572-8437-73fe6b354c1a",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "44cc5d1f-77e7-48d0-bda0-5f4d5eec66b6"
        },
        "item": {
          "id": "d6ae5a8b-6955-45f7-99ed-1d22af776a6b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e987a718-1d51-4d06-88ee-09865ec3cf94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea29e05-3d95-4321-8a5a-f7c375bf393e",
        "cursor": {
          "ref": "a3b5846c-72f1-433d-a33d-8f2bc48a32ac",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "397f67a8-591d-4a3c-a4dc-075fb694b6e4"
        },
        "item": {
          "id": "dea29e05-3d95-4321-8a5a-f7c375bf393e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "01be5df0-24ed-40d0-b6a7-f69c631d55b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405adab1-7b84-4415-a24b-3cf44dfc4e73",
        "cursor": {
          "ref": "d87ee998-af06-44f9-80e9-d6b6c99b5adc",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c669bf09-a207-469f-9bf5-0963b98af6ca"
        },
        "item": {
          "id": "405adab1-7b84-4415-a24b-3cf44dfc4e73",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3366353c-b06e-4d8b-b180-290d026e7750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af98f41-f682-4115-93a9-d45bfad0a268",
        "cursor": {
          "ref": "0235fc28-d9fc-4421-97bf-3ff7c5b232f0",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ac5e3a6e-1e83-4dd0-811c-dbf7002f75d5"
        },
        "item": {
          "id": "8af98f41-f682-4115-93a9-d45bfad0a268",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9a789008-b367-4e07-aa9b-5fc2c946bd2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96cfc9a-63a2-446d-a6f2-8b290e0bf7e1",
        "cursor": {
          "ref": "5c53afe9-3fa3-4467-9f01-fc2ca53a946a",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c5e9c930-59cc-4e46-add4-e7e85ffa3569"
        },
        "item": {
          "id": "a96cfc9a-63a2-446d-a6f2-8b290e0bf7e1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a3edd27a-b0ee-4522-b7f6-971dfa6ad3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62793cb2-82dc-432b-a454-cf561819c452",
        "cursor": {
          "ref": "1a364c2f-100f-43a5-86e9-4894d2fc277f",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b0b5dea4-1ffc-48c7-a496-6169cdfca692"
        },
        "item": {
          "id": "62793cb2-82dc-432b-a454-cf561819c452",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1f46124d-42c7-4925-8a43-fff10548006d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3357feef-6bc9-4af5-93d5-51e2ee5abcd6",
        "cursor": {
          "ref": "7a914e5a-1a34-4a46-8788-c6152d91b03b",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5ff2b5da-8629-42d8-a189-0736d76a0853"
        },
        "item": {
          "id": "3357feef-6bc9-4af5-93d5-51e2ee5abcd6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "310edd7f-e392-4a10-ba68-eb85b5da19fe",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "60ef850f-e217-40c2-b1fd-2b37cf1de595",
        "cursor": {
          "ref": "20ed947c-c3a2-4021-be43-f585bdbdcd52",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e9b2bb7d-5038-4cd0-b71b-e74618ab80b7"
        },
        "item": {
          "id": "60ef850f-e217-40c2-b1fd-2b37cf1de595",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d5129eb3-4898-4bcf-a7df-407bd1c39f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b8418f-b33b-4f5b-bfb6-cfea3ec5e8cc",
        "cursor": {
          "ref": "459f1d8b-009c-4f5c-bbcf-5f4c1616a3e0",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7f44f5be-63f2-47ae-9327-0e6dba8ecc7f"
        },
        "item": {
          "id": "76b8418f-b33b-4f5b-bfb6-cfea3ec5e8cc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "17c6bc4f-b92c-4081-a60b-d793d72e2daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7481c2ee-dd65-498f-8f36-cee7ff128cdd",
        "cursor": {
          "ref": "a202f9f7-9d9c-486c-a95a-d0ea9fcebc9d",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e6448362-eef3-4fed-8bf5-5c5ab2133a6a"
        },
        "item": {
          "id": "7481c2ee-dd65-498f-8f36-cee7ff128cdd",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7e9320a5-be1c-4bc0-aea9-ada22402e2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22bb8db-9343-4faf-bdc4-89b14c80e9d5",
        "cursor": {
          "ref": "be48c695-91eb-4c61-af6a-9fdeae4f92ce",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0642eaa1-3d9f-4a59-aa88-3c435194f4b5"
        },
        "item": {
          "id": "d22bb8db-9343-4faf-bdc4-89b14c80e9d5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e525335c-8830-432b-b425-3a7825094754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10e2a7d-2e17-486a-a0ee-bc4153d2cb46",
        "cursor": {
          "ref": "464f77d9-0202-4384-93cc-29d486feaea2",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "807a51e5-1c54-48e3-b524-428febfb2b5f"
        },
        "item": {
          "id": "d10e2a7d-2e17-486a-a0ee-bc4153d2cb46",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c5e7f5cb-4261-4959-8ddc-8f8a3a0cf61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58b6281-ba01-4bd0-9d4b-1e8eed485bf0",
        "cursor": {
          "ref": "1b812bf9-e1c8-478b-9008-551b82329f3d",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d6a9d576-aaed-444d-abaf-e68343f0e6e2"
        },
        "item": {
          "id": "e58b6281-ba01-4bd0-9d4b-1e8eed485bf0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5df0db87-2a5a-4b41-926c-c6046f7ded44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2f2580-8e0d-40b5-8b4a-ce4ec4ccd469",
        "cursor": {
          "ref": "a01fa505-ab9d-4a74-812e-9a7a36607918",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e5a389cb-7508-41ff-85e7-67dd6f1e37e5"
        },
        "item": {
          "id": "5b2f2580-8e0d-40b5-8b4a-ce4ec4ccd469",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8abe230f-c82e-493c-9da1-faeb11887a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1014cadf-8023-499e-a7cd-3b7a3cc96a6f",
        "cursor": {
          "ref": "982e4113-4525-49fd-a373-7b47b168d546",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "27181e5d-304e-4335-9b23-13d9ac9090e5"
        },
        "item": {
          "id": "1014cadf-8023-499e-a7cd-3b7a3cc96a6f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b7a2501c-03fd-4291-8960-b4eb51a77863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a51190d-68ab-41d6-900e-eae35a974b8f",
        "cursor": {
          "ref": "97c71f44-5110-4435-b10a-cf0a41faecbb",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "37311923-e548-4f70-ab4a-203ec15c2739"
        },
        "item": {
          "id": "4a51190d-68ab-41d6-900e-eae35a974b8f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "be696cea-106c-4fcf-b07b-7944169e7c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f78a1a-c16e-44f7-ade8-33998c9982af",
        "cursor": {
          "ref": "de11220c-7e7e-4b58-a51e-78a29f7263d7",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4788e285-05c1-420c-b59e-b5ce9a74fed5"
        },
        "item": {
          "id": "25f78a1a-c16e-44f7-ade8-33998c9982af",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c25908a5-fa49-470f-9896-f46479cddc1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176386d6-ef4b-4036-a8d4-81982322afc7",
        "cursor": {
          "ref": "b3595248-84a4-42f5-8a07-3e51dd96010f",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c6cf87a2-3f65-4868-b405-cda6d3e94def"
        },
        "item": {
          "id": "176386d6-ef4b-4036-a8d4-81982322afc7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "605308c4-c104-4833-ba31-5186d5ea846c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6763e9f9-ad62-4dae-b9d9-1d381899647b",
        "cursor": {
          "ref": "57f2ce43-06be-405e-a592-78d6a8f2f723",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3a5b1ee1-1502-4d41-ac52-955c08fd91d1"
        },
        "item": {
          "id": "6763e9f9-ad62-4dae-b9d9-1d381899647b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b0f1c8f6-2094-4393-9b9c-e96176837fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3d1b15-f59a-4c58-a06c-0e82a54cc70e",
        "cursor": {
          "ref": "2480d96a-fb1d-40d7-a1e6-601b9a257175",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ca0ce119-bc5c-4121-ae89-0f41a979f96e"
        },
        "item": {
          "id": "aa3d1b15-f59a-4c58-a06c-0e82a54cc70e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6b8ee4c7-c67c-49c7-bf9a-ca5e57819701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52421f9-563c-4d22-9216-ab7d103b5317",
        "cursor": {
          "ref": "47cdcc1d-bda9-4fcb-8bbd-863b865dfb42",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c63f863a-e258-4fd6-9acd-88677bbd0d62"
        },
        "item": {
          "id": "d52421f9-563c-4d22-9216-ab7d103b5317",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4655c940-7c30-4361-9d3d-b8a0d6a0b73d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335ded23-9a61-47c5-ac3b-2a5e8a1e94d3",
        "cursor": {
          "ref": "28343ec6-ee3a-47d3-9f31-0f54e6c72604",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "cbc6fc75-aa97-454b-a301-59a9ae61a230"
        },
        "item": {
          "id": "335ded23-9a61-47c5-ac3b-2a5e8a1e94d3",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "785005a2-65d6-4088-98f8-452e51527b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb0b793-a332-4c15-8616-8af7cf68f57e",
        "cursor": {
          "ref": "1d45a036-c759-44c3-97ce-a4cf702cd7af",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "07ed082e-d510-4034-bd9f-d61893cce250"
        },
        "item": {
          "id": "efb0b793-a332-4c15-8616-8af7cf68f57e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4488ce46-15ea-429a-a37f-fe1a7c3676dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32897fcd-a51b-494b-a371-d509a78e894b",
        "cursor": {
          "ref": "cb8c1442-b65e-4d3e-88a0-a2261301e414",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "79ef9531-6947-4f38-b75c-47eb549dce73"
        },
        "item": {
          "id": "32897fcd-a51b-494b-a371-d509a78e894b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "20dc284f-a1bf-468f-b3c8-5b1572d08f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec26a442-607b-4048-92ee-7a4865806d5d",
        "cursor": {
          "ref": "2f12094b-e70e-428a-941b-395cdf843211",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e3155bf0-0d63-4c43-b185-648050d1cf9a"
        },
        "item": {
          "id": "ec26a442-607b-4048-92ee-7a4865806d5d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d5a73035-7d12-4033-9b08-f1d72ee0065b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c15867f-8b01-4ad8-b3c8-4df46da27293",
        "cursor": {
          "ref": "78a85156-e436-451c-923e-7ad6355745ab",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ed78b4b2-513d-4582-bf34-0b83c06f0459"
        },
        "item": {
          "id": "7c15867f-8b01-4ad8-b3c8-4df46da27293",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ba96f251-4d76-4fb8-958e-6040a341f5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69579561-5755-4289-adf0-ea78e0cd0cb8",
        "cursor": {
          "ref": "d56416e6-9dad-47ed-9b9b-b744b9901281",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5ebef4ea-c1b4-43df-bb32-fbff9916e9e1"
        },
        "item": {
          "id": "69579561-5755-4289-adf0-ea78e0cd0cb8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d3d948ea-a35d-4ea7-ac4e-24942679cf3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ceaa556-d36a-4c58-8ade-b7b120cdbc7f",
        "cursor": {
          "ref": "a4e19885-c00d-424c-b6d9-2282c7c726d1",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "16e054e7-c0e5-4798-a5b0-c193620a36e3"
        },
        "item": {
          "id": "9ceaa556-d36a-4c58-8ade-b7b120cdbc7f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7aef167f-4d2d-468c-9b11-b07b73d685e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cfb88d6-30ab-4d6c-9bb1-bb723540d482",
        "cursor": {
          "ref": "d211845f-8f49-4357-8ff2-bc5371d5405d",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0a08dcd5-a415-40e4-9342-4e437ff9fe86"
        },
        "item": {
          "id": "7cfb88d6-30ab-4d6c-9bb1-bb723540d482",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7757d36d-979c-4cdb-95fe-b825a9319cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1001afd-48f6-48b8-a1ee-28f6f2432728",
        "cursor": {
          "ref": "96ad3e1c-9d28-486d-91da-46337541cfc8",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e313bef4-ac45-4992-aab0-8f4769162159"
        },
        "item": {
          "id": "b1001afd-48f6-48b8-a1ee-28f6f2432728",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0bc5faee-0d5c-43a4-8105-593f4190e595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c17c94-fb64-4144-aad6-5af70835c2d8",
        "cursor": {
          "ref": "7ffb3df1-705f-4db0-bf91-fa410b01b9c9",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "62c5a880-a084-4b2d-8fdd-051b92eeff51"
        },
        "item": {
          "id": "17c17c94-fb64-4144-aad6-5af70835c2d8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ff6edf3d-279a-47dc-9704-896033a35ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aadf37f-b9f7-4f38-812e-0553b503c2c8",
        "cursor": {
          "ref": "bb8ed3b6-0258-4179-bfda-ff9d55cfd0b4",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5170da14-6fc6-41ed-8b33-21e6061342e0"
        },
        "item": {
          "id": "8aadf37f-b9f7-4f38-812e-0553b503c2c8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e4916d27-4de2-4e29-874c-27cd705a9096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe1a82f-73f4-45ba-aa83-637af205f215",
        "cursor": {
          "ref": "026d4e51-c1fa-432b-a079-d77a658b313a",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "20c29441-6568-436c-b310-ffacaa3b6739"
        },
        "item": {
          "id": "bfe1a82f-73f4-45ba-aa83-637af205f215",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "41b8e52d-70be-467f-8e05-c1af751ff8cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d804eab7-1892-4037-a3e3-4a62be5876bf",
        "cursor": {
          "ref": "e699f03b-3645-4cd2-8c73-0618e5028f89",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "96d1b0ae-37f3-45bf-81b7-cc9ac0872c5f"
        },
        "item": {
          "id": "d804eab7-1892-4037-a3e3-4a62be5876bf",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ba2d49c1-922d-458c-9c9a-0d539506c9e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8dd6956-021e-46eb-ada0-b12933ea8e54",
        "cursor": {
          "ref": "6eb62b6a-c4b7-4f0b-b77e-1a8dd011eeb8",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3bdcf919-a673-4c77-a3c9-51f9b77ae8c9"
        },
        "item": {
          "id": "c8dd6956-021e-46eb-ada0-b12933ea8e54",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "278832df-07cb-4da6-a4ea-188fd62384c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5210d0-f683-4809-a692-2ff0b8836cad",
        "cursor": {
          "ref": "5c918e68-e8f2-48fa-a396-cf5125333534",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c973d575-5b65-44dd-aa31-525397b0c194"
        },
        "item": {
          "id": "bc5210d0-f683-4809-a692-2ff0b8836cad",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "617f9cb4-65c2-49a3-8595-e6e1e62f1eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91679567-9d84-4828-9d89-a7e6747d16d5",
        "cursor": {
          "ref": "17d44017-b20a-44b3-b46b-61326e2b4d8a",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d16cf563-918b-4c78-8f43-24fad367744b"
        },
        "item": {
          "id": "91679567-9d84-4828-9d89-a7e6747d16d5",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5bf919d4-559b-4f9c-b7ce-9be7017b2c3d",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "546cc7b3-92d5-47c7-b715-8c595f727355",
        "cursor": {
          "ref": "da664599-cde5-4b06-afed-60c45cb4e364",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c0bfd5b5-41d4-4de9-937e-385d0bed42fe"
        },
        "item": {
          "id": "546cc7b3-92d5-47c7-b715-8c595f727355",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "333ac253-ae28-4084-ad90-01603265d5a3",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "7de28e27-8dc7-4977-a14d-9b75bf682934",
        "cursor": {
          "ref": "b487dde9-b928-4bad-8d42-853ac01d3d53",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8ce5fbb9-7997-45a1-afde-77272604c542"
        },
        "item": {
          "id": "7de28e27-8dc7-4977-a14d-9b75bf682934",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c55e0941-9ec2-45d3-a88c-202bc4313728",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "a6a3d9bc-21a6-474b-b197-ee91936ba592",
        "cursor": {
          "ref": "c42fb817-9f9c-478e-9899-bc74fe686bf2",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a34e7e40-b8f8-43ed-b323-b03ef8eefbc9"
        },
        "item": {
          "id": "a6a3d9bc-21a6-474b-b197-ee91936ba592",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e98a4ea7-ae10-4e8c-b205-42a15c483d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b150db46-5a9a-4f99-bf02-f2250f1029d0",
        "cursor": {
          "ref": "f2655b3e-f85b-46c4-a51c-6b2698b80669",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6e26c59c-fa31-4926-b001-90afcdd8c9e9"
        },
        "item": {
          "id": "b150db46-5a9a-4f99-bf02-f2250f1029d0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7e413f21-52da-40f7-a9ce-d58d25c73323",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c4fee9d4-07c9-4b5d-92c3-c502d1614396",
        "cursor": {
          "ref": "167095fd-dc89-4601-b8d6-7c336efca06d",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "81b5f48e-24f0-45bb-a2b9-cb2e8882a1a5"
        },
        "item": {
          "id": "c4fee9d4-07c9-4b5d-92c3-c502d1614396",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "de369a35-697e-4922-a41a-c91672ce7798",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "cc016fb2-5a62-4c10-8fdc-63653a15534d",
        "cursor": {
          "ref": "e58a19f8-fec8-44a7-b869-282198aff781",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "29f8f16e-a628-45ca-ab5d-48ead76ef910"
        },
        "item": {
          "id": "cc016fb2-5a62-4c10-8fdc-63653a15534d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b294b1ab-377a-4674-a409-19eed1715cca",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "fb4c9be5-ec3d-48e1-be64-84bea04c882a",
        "cursor": {
          "ref": "9c76eeac-06ee-43f0-8e72-c38656d5806a",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4b894d81-b16e-4e29-8863-686d128773e5"
        },
        "item": {
          "id": "fb4c9be5-ec3d-48e1-be64-84bea04c882a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "00af714c-3cc7-49dd-a68c-31f5f663500f",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "1d3bcd8a-3d64-4d62-abb4-bca317d9d713",
        "cursor": {
          "ref": "dafea8e3-9d26-4ab8-83ff-ee5c41aac63f",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "32c6dd6e-6a27-4d53-ab30-dbdede570af0"
        },
        "item": {
          "id": "1d3bcd8a-3d64-4d62-abb4-bca317d9d713",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "751c2888-fead-4a0c-91b0-b6229531486a",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "83e35794-5a94-4d84-add4-190664745ebb",
        "cursor": {
          "ref": "a59ba76a-0e37-4739-bc81-1ce64f57ef50",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "398957e7-ed60-4bb1-9092-2539b08378cd"
        },
        "item": {
          "id": "83e35794-5a94-4d84-add4-190664745ebb",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0eb87d4c-1f8b-4b84-a2f4-4555765a377a",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "5726b570-0aad-416d-8a2d-38164de08315",
        "cursor": {
          "ref": "eea2f30f-f784-49f8-9ad3-3e0215b3828d",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a07f1ec9-ff92-4fe6-b241-ca323a66a050"
        },
        "item": {
          "id": "5726b570-0aad-416d-8a2d-38164de08315",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2fb19be1-62fd-4aac-9efa-d128a577fd50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c136433-3991-4edb-b777-876d3d03a19e",
        "cursor": {
          "ref": "ea78fba7-01a0-4659-84dd-ea4415484a98",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3e918ecf-aba7-4e05-9992-e8dd326e46f9"
        },
        "item": {
          "id": "1c136433-3991-4edb-b777-876d3d03a19e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "39155b7f-35b8-4854-bd5b-8f62009749c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986f8bd4-67d2-419a-a35e-c7a341bd2092",
        "cursor": {
          "ref": "78f1d1cf-bf92-460d-9bb7-aeb4f6cc9af8",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4172eda4-1bcd-473e-8316-67bd91d95557"
        },
        "item": {
          "id": "986f8bd4-67d2-419a-a35e-c7a341bd2092",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9b612ca0-66d6-45f3-ae9e-6ac30f622c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a4ecc5-8059-4aaf-b355-6c49e6e97986",
        "cursor": {
          "ref": "8143d474-124d-4de3-b241-3de1a8f146b4",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4f35ae6d-4fe0-456c-944f-ebec312be24d"
        },
        "item": {
          "id": "80a4ecc5-8059-4aaf-b355-6c49e6e97986",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "31602acb-7971-4b14-bfed-c8bbfd2b7a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23da382-76d4-4535-a605-9654c575096a",
        "cursor": {
          "ref": "d60c8aac-cd78-41b9-9e11-489e8b6dde03",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b4209814-c91b-4865-a526-7886e9bb75a1"
        },
        "item": {
          "id": "f23da382-76d4-4535-a605-9654c575096a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "228727ee-9f7d-4152-ad51-7e81909522cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c3b731-63cb-4358-8d17-14289ff23ca3",
        "cursor": {
          "ref": "dad83766-9ed9-4b10-aa98-d7fd50433e73",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "81a17d4e-2eff-4e0b-a8f6-2d6961121062"
        },
        "item": {
          "id": "e6c3b731-63cb-4358-8d17-14289ff23ca3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "95333bb1-fb9b-42a3-a523-766630bc7418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22ea55f-2f43-4f79-94de-bf6603330e8e",
        "cursor": {
          "ref": "9798e60b-f795-4da0-975d-946f3a23ee9a",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "47f8a0f0-653b-4c4c-97b6-4c93de1037e2"
        },
        "item": {
          "id": "a22ea55f-2f43-4f79-94de-bf6603330e8e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1098f574-08dd-409c-978c-715dcc973cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de6b4fc-4543-4621-aee4-1edc1b9a0a08",
        "cursor": {
          "ref": "82b135e5-e801-48d5-9692-7b104b9ef822",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b88e0ac4-a457-4556-b78c-7db9b3381429"
        },
        "item": {
          "id": "5de6b4fc-4543-4621-aee4-1edc1b9a0a08",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "fb4405f8-b293-41a2-9768-e4b79dc7959d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c07c094-a340-4dd6-a4ec-2ce36a296da1",
        "cursor": {
          "ref": "20aa0417-ed24-4fe0-9df2-860ee8c92c34",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "df9239ba-43d0-4ce0-a33b-3d39ab5e8712"
        },
        "item": {
          "id": "2c07c094-a340-4dd6-a4ec-2ce36a296da1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "007ac872-66e0-4e14-98d8-9e65457f2f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef909e5-0585-4801-95de-55140a4e695f",
        "cursor": {
          "ref": "aed1d26c-1731-4525-81ca-34277facd666",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1baf5803-3d4f-4c28-bb38-09fec4cabd72"
        },
        "item": {
          "id": "7ef909e5-0585-4801-95de-55140a4e695f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "796f1840-0b23-4f1e-8ce5-13e639bb32df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f0848c-6b03-46f8-8fd5-1d636ccf18d3",
        "cursor": {
          "ref": "e36ed50d-17fa-4230-b556-7cd969b39d14",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4738b20b-00ed-45a1-891b-cf2ee770dbe1"
        },
        "item": {
          "id": "01f0848c-6b03-46f8-8fd5-1d636ccf18d3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3fbd2479-ac3a-4afc-b1de-cad67b15b57f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84947c7-2131-4c07-a9fc-fe5a9e0d0352",
        "cursor": {
          "ref": "62cd9378-314a-49b6-b4cd-e42dae32e691",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c3ada774-d029-494c-ad7b-564a04a0afec"
        },
        "item": {
          "id": "e84947c7-2131-4c07-a9fc-fe5a9e0d0352",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2596e0d9-8429-40d2-b24c-7792377d3a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a34e80-ba52-47f7-a81c-9a606db9d5bb",
        "cursor": {
          "ref": "c95a8b4d-d81e-4ba6-9b0e-dbe1e43793c0",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "00b7b2ec-fbdf-4257-9aab-24c74a39b043"
        },
        "item": {
          "id": "71a34e80-ba52-47f7-a81c-9a606db9d5bb",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b5fd86bb-58b3-4572-9378-193c6ab9e8a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5def1199-7b45-4940-ad5c-b6993e2d53d3",
        "cursor": {
          "ref": "af986938-3f26-4d91-8bdb-2e60c365ff68",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b5c1bd1e-573b-437a-97ad-c6d2b767d176"
        },
        "item": {
          "id": "5def1199-7b45-4940-ad5c-b6993e2d53d3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "05c1cce0-d955-4a7a-a35f-4b4bc3fc29e3",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "5e65112e-974d-4419-82f0-d5ae0509c030",
        "cursor": {
          "ref": "91869841-508a-476c-a02c-efa4d5a8b211",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "54f8fe4c-d0d3-4494-91f7-1e1a542e24bf"
        },
        "item": {
          "id": "5e65112e-974d-4419-82f0-d5ae0509c030",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d224e9d6-427b-40e7-8ad1-cde39dfbedb6",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "4f482f21-5135-4547-a6a4-096ebbc58f68",
        "cursor": {
          "ref": "91cfcd79-da4e-40b5-abf6-40106d5eb938",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "86c478bd-3130-4468-9ddf-2ce8eab0b20f"
        },
        "item": {
          "id": "4f482f21-5135-4547-a6a4-096ebbc58f68",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "424eb41a-b1bf-4e7f-b535-e7b2776f491e",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "480736bc-76d8-4d26-874f-f6d4b60fd5e5",
        "cursor": {
          "ref": "50d1ba99-6a07-40b5-8def-63af18adfa96",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b618d15e-320b-4135-af1b-018a387e9300"
        },
        "item": {
          "id": "480736bc-76d8-4d26-874f-f6d4b60fd5e5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a88ae459-78ec-41e7-afa6-178835fd7111",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ec9dd7f0-d3a2-4190-9047-43ae762089de",
        "cursor": {
          "ref": "7becf09f-5a49-4547-98a2-bf1354e5bf98",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a0e46870-4435-4ba7-b5f7-70329c1b2323"
        },
        "item": {
          "id": "ec9dd7f0-d3a2-4190-9047-43ae762089de",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3ad251fb-cc11-41c6-921c-1185b6a7b7c7",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "40dca510-0fb0-48bb-948b-f77a43c04cf5",
        "cursor": {
          "ref": "b61cfb22-3d4a-45a9-9589-53e57139c890",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9cc4cc71-1887-4c7f-9bda-cd179d4d6f75"
        },
        "item": {
          "id": "40dca510-0fb0-48bb-948b-f77a43c04cf5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "43ab9fa1-00f9-4e22-82eb-1c12b52ba294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ee6278-06f1-4baf-9987-91b35acda899",
        "cursor": {
          "ref": "5903ad1b-6cf4-4193-8040-3e680d7bebe4",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "64018db3-ae98-461f-bf8e-2f945e578456"
        },
        "item": {
          "id": "e8ee6278-06f1-4baf-9987-91b35acda899",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ff98da22-0ff9-48c9-992c-647d8193ed6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c075b8ef-9117-4630-b41c-211144057e12",
        "cursor": {
          "ref": "f1cdb1fe-b082-4ee1-a1a2-6bb7edafe080",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "09e86849-1cbe-4123-a3f6-4dc6917d6c14"
        },
        "item": {
          "id": "c075b8ef-9117-4630-b41c-211144057e12",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d3b0518c-b016-4ab6-8869-2ab12ccc9de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c75a46-70d9-4ebc-8bfc-08558d6ec6b0",
        "cursor": {
          "ref": "6eabf9a1-dd66-4b4a-8399-85d07209f2b4",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fc96fada-e945-4113-90af-04e35d2b4103"
        },
        "item": {
          "id": "52c75a46-70d9-4ebc-8bfc-08558d6ec6b0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6f0b64aa-498e-496e-b52b-5d93ad69be1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf02036-06b6-4fe1-b02d-858c7d622a96",
        "cursor": {
          "ref": "f2984965-141d-4c18-a442-de89ec83d29e",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fdf2d93c-0301-4bf2-b469-a51362412840"
        },
        "item": {
          "id": "cbf02036-06b6-4fe1-b02d-858c7d622a96",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ba89a6a1-abd9-4fc4-b511-ecfee4983655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a79e08-bb30-4b10-b9e0-031cd939c56d",
        "cursor": {
          "ref": "f64ba6e5-4e0a-48a2-b06e-9a1cfbcacf86",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6ed6f088-7a59-4b14-b01b-c0f808e982f2"
        },
        "item": {
          "id": "62a79e08-bb30-4b10-b9e0-031cd939c56d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "499702b5-df32-484f-a9a3-5e7b90474d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91fc977e-f81c-48de-a782-f819a9ede31a",
        "cursor": {
          "ref": "affb1ec6-22aa-4a25-ae1b-61f5a7eb7876",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c961cc47-8570-419f-a102-5bc3da284236"
        },
        "item": {
          "id": "91fc977e-f81c-48de-a782-f819a9ede31a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9ca0aca4-f777-4831-91ea-0aa71b0c6a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd0122c-a58b-474e-bef3-ad40958ec48c",
        "cursor": {
          "ref": "b54d5262-e19b-445a-a8e4-22ad16a41e01",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "29b7dd1b-14c6-442f-aa46-a90e096f7140"
        },
        "item": {
          "id": "edd0122c-a58b-474e-bef3-ad40958ec48c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "21305058-a7a8-49d0-b0e8-6899fa81ff0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48d572e-dfb6-4485-b522-e5cd6470290e",
        "cursor": {
          "ref": "d8dd2cb6-37b1-48f6-90a1-4683c180c045",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e68126e6-ee22-4934-9d32-339624fd2a2f"
        },
        "item": {
          "id": "c48d572e-dfb6-4485-b522-e5cd6470290e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ffa97502-1284-4ace-ae61-7d9410bcd0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6f7a57-71c3-4cad-8a02-2dc0cb99f648",
        "cursor": {
          "ref": "6ef519e0-8741-4bcd-9903-f156ddb71258",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "465e2baf-ba91-4167-8dca-34ab0a8584aa"
        },
        "item": {
          "id": "fe6f7a57-71c3-4cad-8a02-2dc0cb99f648",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "25b63e3b-d516-4605-9d7c-d62ecd8300a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6f0816-887e-474a-929f-64ba9d0ba5fa",
        "cursor": {
          "ref": "0dc53844-3dfb-4bd5-bd44-526b13e0bd03",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "0d3eb99a-9714-4722-9e43-8820e3500ee4"
        },
        "item": {
          "id": "4a6f0816-887e-474a-929f-64ba9d0ba5fa",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f489317a-20de-4231-be52-0781c1b2067a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a07504-d7bd-424d-a8ea-27339be7bf79",
        "cursor": {
          "ref": "ecdc55a2-2d98-4f10-951e-78badac8c390",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "b484bbad-3858-4ce6-a5a0-ca36347fc30d"
        },
        "item": {
          "id": "f2a07504-d7bd-424d-a8ea-27339be7bf79",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "534c261b-95e8-433e-8f18-47f337667f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7025f9d-ee13-484a-a42a-62454d531e7b",
        "cursor": {
          "ref": "7bb49a0e-6d9e-4a71-bc1c-9fffdec6dddc",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "1cc7f9c3-2706-4136-a719-c7fbe5dc1d7d"
        },
        "item": {
          "id": "f7025f9d-ee13-484a-a42a-62454d531e7b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "389ba27e-b691-4ba5-bddf-5ce20a88080c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7215438-5ec4-421a-be02-3607d99b661a",
        "cursor": {
          "ref": "a1d9c7ff-32fc-4e03-af67-262931f98cac",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "eddf187d-78e7-4e49-977a-9eaccaebafc0"
        },
        "item": {
          "id": "f7215438-5ec4-421a-be02-3607d99b661a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "54b88878-2719-4024-b749-dde894d1ada0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756128c5-14b6-468e-b8db-e6703e5146d1",
        "cursor": {
          "ref": "601cb143-bdc6-48aa-a81c-cd1ae5436438",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "e31a4c05-1c12-4b4e-ab66-b8b8e9459705"
        },
        "item": {
          "id": "756128c5-14b6-468e-b8db-e6703e5146d1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "52a1834d-49f9-449c-a01f-5d4c1e55ffd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c547fed8-b3a7-4af4-8110-b476bb83a45a",
        "cursor": {
          "ref": "893d9174-1871-434a-9747-a4bd501427ed",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "b054ff27-9b78-4cfa-9816-93590c652490"
        },
        "item": {
          "id": "c547fed8-b3a7-4af4-8110-b476bb83a45a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b5b1b0b7-8922-41af-bc4b-5257b9b6518d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33cdea52-636d-4fe3-a14b-705c64159f61",
        "cursor": {
          "ref": "89195bf7-e097-4759-907d-e128316ceb8b",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "3a3653b8-d4b8-4c93-bbf4-d98315f8928e"
        },
        "item": {
          "id": "33cdea52-636d-4fe3-a14b-705c64159f61",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6fc45810-617b-4794-8f0f-6dbc6ad65947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d27793f-47c1-4076-9bc5-5dbaaca2eeb2",
        "cursor": {
          "ref": "775c0fea-6e83-4cb8-b1ee-251d6d32f674",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "91c3ab26-8e34-441a-8c95-c2c5b2c3f37e"
        },
        "item": {
          "id": "3d27793f-47c1-4076-9bc5-5dbaaca2eeb2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1546c2b1-7e35-4aa7-89a6-ca9243837ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af066f64-b3ee-4bc0-be50-5d7463b754ee",
        "cursor": {
          "ref": "f499f37f-1c14-4e65-a2fc-f5b018f70440",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "639d6e53-aebb-4230-963b-48a0f2ccab01"
        },
        "item": {
          "id": "af066f64-b3ee-4bc0-be50-5d7463b754ee",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c31a9307-b5b8-43f0-acfe-8d03df1a144f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f365c21-00cc-4985-b26b-c2488fa101a4",
        "cursor": {
          "ref": "bf0c3d87-a4ce-4dfe-ad17-be00b41c8afd",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "7a31ce3f-158f-4e08-88cc-17ec614acf39"
        },
        "item": {
          "id": "7f365c21-00cc-4985-b26b-c2488fa101a4",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f86b83b8-f19f-432b-bc4a-ca8eb2fdef94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf222d75-cfb7-434a-9991-beef368a52de",
        "cursor": {
          "ref": "2966e1bf-1b3f-46ff-8536-0f7a50f7e458",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "6c72dba5-e561-49f5-85a5-032fae1b970f"
        },
        "item": {
          "id": "cf222d75-cfb7-434a-9991-beef368a52de",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c11a9ecb-abdb-4c86-8b14-afd63735efff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b004f93-d59e-47ea-a371-9373e307b717",
        "cursor": {
          "ref": "4dcdeb1e-194c-4a0f-b4e0-46e1f03c3897",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "cd543271-1090-4d43-bc0b-5364da186ede"
        },
        "item": {
          "id": "3b004f93-d59e-47ea-a371-9373e307b717",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bf4fecb3-3059-46eb-851a-542cb0e0a2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53aa94e5-f99e-4ed7-8832-7000c0a34957",
        "cursor": {
          "ref": "34fbc6c3-5a5d-4a9c-83b3-4e55ebc6eeaf",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "e120ea57-14de-450d-af9e-7feedcdf3781"
        },
        "item": {
          "id": "53aa94e5-f99e-4ed7-8832-7000c0a34957",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b348a33f-7bdd-418c-b731-d035c3bff5de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04166f4-9671-4613-b9e9-42ebea7894a7",
        "cursor": {
          "ref": "5ecfbe01-1dfc-4889-a0f0-6819d3797668",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "fff15c23-33b9-4cc2-b842-d462fea83cc3"
        },
        "item": {
          "id": "b04166f4-9671-4613-b9e9-42ebea7894a7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2266b2a4-eba8-49e4-9dff-1eb41ec0e514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9deb0f-78c1-4110-84e7-3ca8eedc3b08",
        "cursor": {
          "ref": "d2b7adb4-2ad9-4222-8457-7b073cb5ab6b",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "622180d6-1376-4385-b53d-03458d0409ae"
        },
        "item": {
          "id": "1f9deb0f-78c1-4110-84e7-3ca8eedc3b08",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5b20678d-8f8c-4276-9cab-74cc3936cede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb3d532-bd1c-48c2-bc88-8385ab4741a3",
        "cursor": {
          "ref": "ef2067b7-7aa5-472e-90f0-74ee3cdc3cfb",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a068aad4-d6ca-402c-9c69-17c7568975a4"
        },
        "item": {
          "id": "6bb3d532-bd1c-48c2-bc88-8385ab4741a3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "da5ea580-f11e-470f-bef0-ec5cc9a10418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678efe6d-e0a7-4a1f-a205-c72f890f444f",
        "cursor": {
          "ref": "97a66c1c-9b6a-48c8-aa9e-29fb153a9aba",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "24589f98-3e8b-4d02-9315-7199273ed25f"
        },
        "item": {
          "id": "678efe6d-e0a7-4a1f-a205-c72f890f444f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "463ffaaf-38aa-4582-a494-a9f5b8381517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a68cea-2f3a-4218-8d4a-739b54dafb74",
        "cursor": {
          "ref": "d6f262ea-a948-4883-bcc3-2f03f5a5c314",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "83431e4c-8cfd-4483-a7e5-dd0d1a224e5b"
        },
        "item": {
          "id": "e0a68cea-2f3a-4218-8d4a-739b54dafb74",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8461ce93-423c-4750-b592-db3d58248ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f888c482-abf7-4592-8726-bf66336f0ace",
        "cursor": {
          "ref": "9c16e3c8-7723-4adf-8645-7edd79ad0b14",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "3cab9348-cc92-4ead-bc66-91eb1a59482d"
        },
        "item": {
          "id": "f888c482-abf7-4592-8726-bf66336f0ace",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "73535a3d-9658-4359-8d00-2570f1e9f1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1946f44d-3bd0-4fb6-b5a6-70b2f0d16f06",
        "cursor": {
          "ref": "70366fb0-e17f-4a21-8585-ccda76e957a4",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "53d20487-0e3f-4e58-b11d-dae34a37fcd9"
        },
        "item": {
          "id": "1946f44d-3bd0-4fb6-b5a6-70b2f0d16f06",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1022b8f8-8640-4617-88a2-d5cac4af5fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802c3184-6be5-41db-a0bf-947d2c19e8b1",
        "cursor": {
          "ref": "da835da9-891d-4fa7-b61d-d570eceff4ed",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "b3148cc8-1337-4827-b802-2491a6e7e39e"
        },
        "item": {
          "id": "802c3184-6be5-41db-a0bf-947d2c19e8b1",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "82d60707-01c8-4b5e-9cf8-c429596f9105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41400544-722e-4ccc-9318-199837ab6070",
        "cursor": {
          "ref": "87defabe-e407-4f68-a7f9-1cb20901cc80",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d5211133-82f0-434e-b46e-cd4126ee7563"
        },
        "item": {
          "id": "41400544-722e-4ccc-9318-199837ab6070",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a9e8b779-408c-456e-b54d-a8eba5b28f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ab8b8e-7c77-4a39-a418-c8b585be38ef",
        "cursor": {
          "ref": "d3a98048-0291-4a3d-8bce-140ec7e8e513",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "34b2f82b-a5a4-4503-b61b-8a790e7777e1"
        },
        "item": {
          "id": "77ab8b8e-7c77-4a39-a418-c8b585be38ef",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c7e77b1b-5e2c-4ed2-af40-8fbc85be7433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc351e51-763b-49b2-8303-123a018e6348",
        "cursor": {
          "ref": "d6dd80bc-741a-40d2-a0a2-80a0ccbca294",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "703f978e-ddbe-4a38-8889-137a436cca38"
        },
        "item": {
          "id": "dc351e51-763b-49b2-8303-123a018e6348",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3b39e386-f0c6-40f8-ae1b-7de73828c605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62da70a-a101-46cc-a5e8-b5fd5e74966e",
        "cursor": {
          "ref": "6778f76e-c90b-4462-8ba6-1be121485593",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "ede8e832-43ed-4b1f-9ac2-2140e73a247f"
        },
        "item": {
          "id": "d62da70a-a101-46cc-a5e8-b5fd5e74966e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1c2e0f74-4428-4856-ab6e-7334a731e963",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6e2b1e-0a92-465d-9df0-58b88d72c3da",
        "cursor": {
          "ref": "bab4a6cd-5277-487b-82c4-2cccef3630a8",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "53bb2ca3-a2dc-4fab-bdf0-b4cd960ef194"
        },
        "item": {
          "id": "5f6e2b1e-0a92-465d-9df0-58b88d72c3da",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "52cff05f-0aa0-46e8-b703-64cb491d143d",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "09e8bba1-da8b-45db-b659-5b124da650f2",
        "cursor": {
          "ref": "461f00ab-2752-4142-913f-e9cb0ab43fe0",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "03b03079-3658-484a-9eec-f55d764f0f83"
        },
        "item": {
          "id": "09e8bba1-da8b-45db-b659-5b124da650f2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d26b8d32-8ab0-429f-9258-d5d64a2439ee",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f914b5c-b90f-40e2-a3b2-8aae4b6d2761",
        "cursor": {
          "ref": "7ae6827b-aad9-4055-8584-d2b469ab6797",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "7f9c21d4-fe42-4bab-9424-7b45aae9f1d5"
        },
        "item": {
          "id": "0f914b5c-b90f-40e2-a3b2-8aae4b6d2761",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4a327cc8-36af-4267-b109-2deaff5d272e",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd57606b-203f-4e29-afd5-e8e5a3b4f42b",
        "cursor": {
          "ref": "b739b885-6f5e-4b8f-b53b-9f5eacd01311",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "5ca2c244-750f-4202-9b9e-4939d60c5026"
        },
        "item": {
          "id": "bd57606b-203f-4e29-afd5-e8e5a3b4f42b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8aa38080-41b7-4e3c-bf45-c1477d9a5ff6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd57606b-203f-4e29-afd5-e8e5a3b4f42b",
        "cursor": {
          "ref": "b739b885-6f5e-4b8f-b53b-9f5eacd01311",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "5ca2c244-750f-4202-9b9e-4939d60c5026"
        },
        "item": {
          "id": "bd57606b-203f-4e29-afd5-e8e5a3b4f42b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8aa38080-41b7-4e3c-bf45-c1477d9a5ff6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7aabee-c142-4807-835a-3e731dc1b89f",
        "cursor": {
          "ref": "d7219407-096e-4d0c-8f9f-9a84eaf37a50",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "ff4d01c5-6951-4e35-84e5-271519118e85"
        },
        "item": {
          "id": "de7aabee-c142-4807-835a-3e731dc1b89f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b43875e5-826f-40d0-9b0f-7677601c7fa6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f307af50-f42e-4666-b802-8f3562e9f4aa",
        "cursor": {
          "ref": "1bba3eee-ba14-4905-89fc-550cafac9054",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "650c8c41-3a96-4473-9acb-e8cf80001a21"
        },
        "item": {
          "id": "f307af50-f42e-4666-b802-8f3562e9f4aa",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0e863c27-f697-472f-a78d-b1cdc7ea2f78",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}