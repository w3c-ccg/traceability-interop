{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d9847f76-d5bb-4bf5-bff1-0fd0388d74d9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "0b06dfca-98bc-4fcc-ab65-845874c0202e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d9990aa1-b45b-4669-89d3-923aef36d07a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cc77957a-3fdc-493e-821e-84213e640d7a"
                }
              }
            ]
          },
          {
            "id": "e8a8ab4c-db36-4137-aefa-e2d1c2e8c2bb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a0754631-3fd4-440c-be86-9ace3a99a740",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c693c865-d8da-4a63-8d07-e1e06de7f5a3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "53c7a71c-7709-41db-a902-f524f523ff1a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e3e1c101-ad06-4912-bc2d-f7b96959d4c1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0f3f4595-2eb7-45c9-9c2f-e4486651257c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9ffcb78-3be9-4dcc-aaa5-b35eabe7a6a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d655a7a1-972b-4472-934c-19dd3921d35b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ee92aa28-92c0-4617-8798-6c58e927102b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "106329e6-1467-4e07-9d65-1ec34dee2b8a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0b16a251-e428-4d7e-81f7-dd48ff1a47cc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "49af7ad6-c0bc-4909-8234-f4e0f66ded3f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "552dda08-d22d-496b-afcc-368d7241c8c4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a7b49bb1-34e2-43dd-82bf-6dce2a60425e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "16e61cb6-35a7-48ef-9be8-245e5894ddbd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9556fd34-7928-4817-a102-406888b21b4f"
            }
          }
        ]
      },
      {
        "id": "95c15c95-1100-4c85-b324-9629badf16b4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "eb1e7991-4108-473e-8bb6-48f53526f904",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e087363-d3f9-4cf2-9013-eed3b8fac994",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3ba9a0bc-6e83-4a60-9bc6-6b7624494f1d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8759e67-87b8-4c80-9be5-fa31d57693b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14a591a2-b484-4313-935c-2e1d618f0e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d03b21d-0ba2-40ee-863f-1b7fc2888e24",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e622ef-a713-4818-b620-04730e587022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3e15a14-f286-4cd1-99a0-452e058bb074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb3c07c-2a96-4a8e-8246-6637ed2dfae0",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69010fe1-5bd3-4bb6-b130-f062d3d8b670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57afe190-af4d-4f2b-9133-a06b85652b77"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d5e72e70-94b7-41e0-9c13-e6e8e3870bca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d1ccd71-5ea5-49c1-a705-a30bf13932dd",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54082d3f-cfa0-4250-af59-5e917f098628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cf1e40f-9d6a-4c47-88bc-c4c9cd7a2c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb84433-931f-4e16-82da-101ad09e2d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c635db4d-af89-4328-9e09-07e8ec328a20"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9dcb8ea4-4feb-40d9-ac7e-ebffb28dbee6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "58b6e378-8246-436d-b479-3732ecdf5c75",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41ef28f3-6f16-437c-9585-ea210ab9ad98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "65c1b9c1-d617-4f5e-b009-a3abab4d7569"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0da97e31-26ff-4d6a-9a40-d71c0d1ce015",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8347115b-8683-48cb-97a3-66a1e02c6b89"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fde1e507-671c-4d53-94e8-3531c76bdccc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0b5c5cb2-cd6a-4a2a-86a9-468bd8fbdd0e"
            }
          }
        ]
      },
      {
        "id": "e25b238c-cd59-4b50-b0e9-1c66881fa0d0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7eef9e3f-0a33-4960-9a3c-e3674204fb1f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f065cd0-a0e2-4e82-9421-11fd6b323942",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e15ba606-2d7c-415f-8716-b059dbe1a54c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee404ecb-8ecc-49a0-8a4d-741efe25cd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4bf72e2-c4b1-4d45-ac1e-92d5afc9388f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f998cdd5-63bb-4193-bff7-44eb37c55921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbb8c80c-dabd-4616-825f-134ca4fe89be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f061ec27-0acb-4500-9bc2-53fc3a7432a8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3779cc-bdca-4847-b8b8-1090dfc456ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d31c546-da13-4080-8eb0-dc7ebb36f1b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7467e53a-a461-479b-9144-eadd8eba7c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0079566e-c6d4-47e2-8b3b-8d6cf37c81d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52050b0f-9c45-4cb8-9b38-d1feeeaaba60",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24882f53-5a2a-4f07-995b-a0f7acebcb90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304bda1d-2c40-4da1-a648-1a81ba5ed63c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bbdce5-2a01-436c-ab15-54e597395c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "420cc92e-0829-43d9-a58a-5a8df6729af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9f213d-00aa-4f54-9ef2-87164b25c368",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac03cf1-f089-4b37-9fc8-96df4893adc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc15572-98ca-4e80-ac20-40bdf19ea034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debefa9f-0f4a-4d99-8106-c1adfdc08146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fef52b83-d6a8-4b3b-8087-f4af089c1b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7527b02-6eae-477a-adea-05c6505e831b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb352a96-6a13-40be-bce5-945ecce4e26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c15d945-8075-4cf4-8106-683d188f67c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cac5681-c6a9-4db5-878b-3e0973202f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26f04a20-ab1e-4933-9d4f-adb41184772a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a698acd-5bdd-4a8c-a59a-b0cf24a31ad4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a804ef83-3069-4002-a6f8-8f325d71f317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0159a5d9-f7a4-4761-9422-05406993bfa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69aca353-7296-4b18-a586-7aa1dc3dec61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ad29044-055d-4c35-b2f3-994798a5c32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d5cba04-90ad-40d7-9e08-2570dbb37a11",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783f5053-a6ce-478d-b684-84066162b521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad17a52-f132-4c3a-8e6f-8e9c4caa0ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2474004-1a04-43c6-b1d3-c9fb3b17ce6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ab3bdc4-e92d-406a-8015-71efa5729ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0606d44c-c235-46e9-9f14-b5746005fa47",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b51cdf-c44c-4ade-bce2-6f7c3a4a9b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7f48ac9-8c7c-4f3e-be27-0a2ddb587aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf67bdd-107b-4910-b95f-668a0b05d002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66c025b6-15e9-469f-9e1f-79d396b6c95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5444f54-b1d2-4b67-94e0-9a998fdcae2f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "067f4460-22bc-4455-8b1e-1c7afd0f8a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43d33a9d-4a16-4c21-a723-edfa8ef1d9a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25cb48f7-1d59-492d-a040-22352dd8e40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fb8871e-0b50-4082-b2f6-0da822157f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d32c92a-143a-477f-ba94-991d0c6cf18e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bf91e1-a3d5-4e7f-b244-94cba91c5a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e072f46-e847-4913-a21c-97fd2adc259c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900ca7bf-5552-491b-a04e-9d767bb07dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5642e3d5-6de0-4360-ad3b-465d8b6a9c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5e4cab-c5fe-4a00-b731-fbf4d5031fd3",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406ba3b1-9352-4c15-9d84-df3a615358f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad577e2f-7be5-41c1-81ba-3dd0aad20b87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8188d2f1-fe6e-4303-9d27-a5ece9840860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "494ff2fc-39e6-47fd-b53a-b540cb17e768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322581ee-258d-4bcc-8525-51b4a7990b8a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "151d49c8-1907-4c42-b922-e9e30fe7cb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a55cc77-0015-411f-ae5b-61c531104440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ba0711-3cbd-444f-8056-3224f8ee227c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bc3ce11-4ee3-4dfd-9ecb-5112660bd39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac37e212-db1d-4d02-bd4f-ecec346dd597",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd05f00-3ad9-45c5-a529-93c93fb7b8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "214b357e-69bf-4034-8a5c-123e1cc875ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8e4cad-7e26-41bb-863d-2a32fb5d11f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9327dbc3-3292-4a06-833b-d8ea5624800d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d53f16-02ca-4649-a9aa-d612b8dd081b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b358dd2c-7ab1-4082-ab9e-496b0102493c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c15bdd4a-15c5-46bc-aac5-7e24681eaa54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8385ab5c-cd29-44d7-8453-56307a4825ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b1d16bc-4149-409c-82e2-046a6d2aef5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b5ff14-9222-487b-a8de-4fe9eb5c817f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02be5c16-3960-4589-a063-9c976350306c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8833c04-0e17-47cb-9124-815b500413ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7efe15-29e1-48db-9db7-86a0b13b742f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5dee34f1-e986-43b0-abad-1bfc3e2b0a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1337715d-855f-4730-b614-f463b6483285",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd51420-885f-4466-b2da-7d9e95986ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "260d6231-ba5c-438b-aedf-aee90d747cfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab7aa7e-cd81-48f8-89c2-9d0818d47945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12092f1c-cba2-43f4-a305-b24df5f1c7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b0511b-7a55-445b-95b6-0da4c3f20abb",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a57c866-ba53-4799-a7b0-b2a479e41e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dbe3115-e6b0-405e-9e5e-0d92c3cb4f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ffe1cf-a5c8-404d-91ec-285eb04a12ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e99e0680-2459-4b5b-bb63-498f5bce9219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca617ff2-1bcb-4f83-9c9b-2721f8a10a65",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d43ef98-8c10-4e80-bea1-0d2406c05e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d5977a3-6831-49c4-aed6-34a8aa333ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef36bf0d-2f34-4500-8368-6e4840f2925d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdfe8492-c226-40b2-8f60-e514a01969c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad145a8a-4623-48de-8122-2c99019ad2f2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "692f0844-1436-4aa0-b45e-5cc94f30ef0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3188691-b6ff-435d-a64a-665a18849a5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92dac417-ea1c-4cd6-9c14-fa5a20f6645d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b0842fd-0702-44f3-8a73-e1bf481e98b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32bd1c2b-1397-4007-a47a-375992cfa9d4",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1c4637-3c0d-4414-8327-19467de2b5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43a931ba-8921-4cb3-af6a-58dbb7157b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733d672e-287b-4a47-a988-c7ccab78798c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "feaeac11-046d-48c8-89b2-05d13f00d9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61064fc4-9148-4317-9269-20728afbc92a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0565aba3-d5ce-4968-b4c8-fc23b4c8915c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d49766-ad1e-45ae-bcec-1f21f6f6c1a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d562fb-e060-48af-b163-795e461cbef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c7ad032-8f3e-46d3-8825-656c70777475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29397493-fdf8-4212-b963-ffb878373df8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf80f7a9-689a-4fab-a7b3-095e1a6869c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dc98751-e514-40ec-80fb-ac584d07410f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df90346-e93d-429b-8aa7-690913bf28b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "93cdef0c-1a3a-4090-b1e1-fa3c9f9dee5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68773f59-01e9-4423-abce-441d18af24c4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f59c8a-b619-49d4-ae69-9fce4c300c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "036033b2-069e-4dc8-9e4e-4da062bb4a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b57722-c38e-49ea-aa7a-f5feba7ac331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "000788bb-177d-46e1-9740-68887933e25b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8276d77e-6bd9-409d-bdf7-1325486ca5fa",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a01419-07a5-4cb6-8c22-a6638969faa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0115d0-8921-4ad1-911a-6cf41a540f89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026a8ede-e0cc-47fb-b49f-bfb395824081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b086e8bc-fcaa-46cc-93f2-09f729ec9996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6249766a-1319-4d31-a26f-420da384db00",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "174cf7a9-ac8f-4089-92bc-005538dd2075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a14d583-499b-4841-b90f-65ebc1ffbd7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa10eca0-e373-44b1-87c7-c3cef6126223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4916f109-b6da-4683-b39c-afaf5751e41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aead77c-b917-41ea-8bfe-30b62b519676",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5ed072-0598-4519-92ec-cc42cd72b558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe04fa9e-13e2-49e2-8c17-9889ace926ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012b8d50-7d36-4e28-bb08-d565d212febd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1232a0b7-657e-45cb-a700-7d0f9d19e25b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b75049-2090-47bc-b478-a60dc21768a7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f11d5ea-b0d6-45b4-8167-3a7a9ff93c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc809d8-5eb5-4fe2-9393-240c3b5b1ec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1036bb64-2fda-402f-b466-ed1fecf9ccf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "18e8f590-bd13-4c21-87b5-aaeac7fff5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59adda43-b7fc-4e05-a4ac-289e295959c6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "934cdf35-898f-466d-85bd-3fa9fb0a9180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9680789-93de-4d4f-9964-aec58edba583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb74191-e704-45aa-a160-0e6384037910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa277e3b-ea3d-43ff-aa9a-a1c7cbdc5122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e17e6d3-2873-4388-93a0-35d4eecb14ca",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "888ad26b-6f8e-4e3f-993b-328c065c8922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "486ad9f5-f612-4d5d-a051-803900eeb3bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc9fd42-6094-4911-9371-17f6c954cda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab6b46d6-eae6-4caa-85c7-323c523befd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e7e079-f0a9-4832-b82f-2ec5830cbfac",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d603c18e-8ed1-4c67-99d8-d89e7f1e0e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ff9248d-6447-4e05-9fad-68fd5e11f276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bacedc7f-98a8-4726-863e-e3a2ae15621d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f495a36-c027-4bbd-a740-9b2942012bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da05e3c-6b16-4bd7-9a2c-ad7669a8aafe",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "322c5315-78e7-424e-86cb-19e8390276ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2f4faf2-ac76-4fa5-91f9-ca221842d23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84405a58-840c-4827-a863-fd08b2a6dcea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "33538595-b84b-4f76-9ee8-86909854b366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e1db61-e16d-4c21-ba01-6d8c99f944e3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af7d3ef-3e9a-4f2b-9bc2-9cd636c3ffae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f7f4a9-0ab7-4cd5-8eb8-731098d1212b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8f981f-2ac9-4550-bfd2-6dd25fbdf00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cceb533-020e-4a2c-a160-cbdd28845512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c25b198-72be-4fa0-9074-1e74ff1563ab",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78aecc5f-4381-4305-aa68-5be600342f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d53e13f-878d-40c9-8aaf-2c3213fcaa67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c39b1ee-b227-4472-b1d0-4c2f5c15d28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c31bacfd-8cd5-4d6e-a6cd-9609a5a49e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ee4072-7e62-4dcd-8e19-4303fcb3c53f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0ca300-7c19-40fd-aaf0-e473fd28f472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fac7d95-e7a4-4fe7-82b4-85b8897346fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a224a80b-3271-4565-8c88-fb2a7371926c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "68384a79-55bf-4d18-b74f-9bb58effc380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c8b329-68f8-447e-b759-887e34b60c47",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11226245-4a50-4070-b701-01a5b98b2fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c78c25-8418-4cfb-beb1-49b40c90f39b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbffc16-8173-4f0b-a260-7cdcb98381af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "89fce3b3-57cc-45e9-854a-7458f9aaaeca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf43aaa-9d3b-4bc1-8899-59ad635a2d84",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c878562f-a3d8-4d87-9d70-0c9691f9960b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31d61836-c5a6-4126-af48-b824d088c995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09ffb11-fe72-4c6e-9767-f42bad8f2d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72e9cd68-635f-4c44-9d82-20ef30344b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042f1903-e2f9-4e59-98f1-93f44f009c28",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250eb7c5-94e8-4fcf-98d6-13a826712255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ad7e660-ad6b-4019-a7ae-109d01eab930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87482b9-e173-4c3c-bd58-d5582ebbc621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "354b971f-2187-40c2-a5ba-fe0ee41366db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e8093b-923f-4bdd-b764-c8d32f0ef017",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "275acd50-5583-4e71-b16b-82d3b99c3083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a346729-f45a-4b55-82ba-c28cb7fce39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd4c393-9fd7-4aff-b352-55f4386a4bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3eb8796-0d38-4b05-8e39-403c542c6399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33dcef43-9c22-4c7a-a108-5370359a7d7e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda90d03-5f19-4e64-bd46-192843a9e08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18348a5b-c65e-48e6-b8df-f9472b0eb340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c390f91-6069-4f90-b47a-d8f29f5bb695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b19e753-4105-4449-9918-9f0742571559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45fbb942-2556-47ae-8733-390aafd226e1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b340b9-0bb3-4a18-bc0e-a44d38445e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d8639a-aa51-4301-896e-93714dbc3ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0317272-d2fb-4db4-b599-55d23ec52b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecdfb813-260e-4854-b041-cedd57ac687c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f5e57d-1e58-4ef6-a16b-5419f935384d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2022323e-9b32-4a62-8185-12083f904f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f647d327-9736-4df9-ba15-7998f770c30f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6dbff7-bf3b-4788-8a97-21b69e3fe880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce268a68-83e0-484b-9da6-5207aef3f12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a63ff8-3168-4c77-b136-682db7716f00",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce9a582-47d3-4e2c-9ce6-5c8f9bc1d3fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd822176-6c0d-4e93-a133-351ec315ea5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cedbc2fa-188c-4fa8-998e-d05087f10474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "72645034-b102-43a7-9eda-62d1788261ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb9cb2d-d7b4-49fe-82b3-a1ad37ac7c6b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4b457c-6ab9-4667-8989-09861999794c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a08004e-66c6-4927-8cbd-5df4a0953eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8852bc-516e-47a2-bd1c-3c0050c53a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c703eff-79a2-4fb8-9fa4-f30c9ac4b58c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51acb8ce-b296-41dd-b887-9a6189f19715",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8910a91-7441-49aa-bf60-ab4058c2f0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0bf9a59-f7fa-48c0-8f34-b075b3776131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42897d7e-5559-47ec-85d2-f1dccd55fb95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a3c6553-8d76-438e-a902-18b828fd8b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe3d5cb-99f3-4538-8aad-92870e2c38ec",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d883ee-7a77-4b5d-af6f-fc817de5e1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb39c7e3-588e-4a01-a714-948a21db9654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8634fa-43c3-481c-8967-8707df5b2406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b0b10dc-faf7-40e8-b84b-77abc8446c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8efcddc3-829e-464f-abbc-cddab2dcc054",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bbbb94a-1764-4678-8ec6-faf388a74199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "259f1d63-eef6-42cd-8bed-fe87fbe6e93a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d76bc9-fb19-4825-a279-1018b10a918f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3766a129-e520-4699-b074-738235bf03ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c234f1ca-2324-46ef-a021-34861dcfd905",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b461360e-81e0-496b-a2a3-909eac1536ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dca23a74-33c3-40c1-9fa2-d5e35014150f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ed0591-20cd-4a07-9072-f617654b73dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83253b29-0935-4984-9f4f-9a1553774b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b6225e-8b29-4fad-a3cb-5b4327fd6029",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d3bd8c-e6e5-423a-8612-ca26fa36ad88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521a77dc-7abe-4daa-9d93-4cc84f91b51b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cac0096-2a22-41c0-ac2f-0ccafcd9451e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a141b0ba-6aba-44d4-94c0-8d19e67fe1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd856769-0e10-4951-ac3e-d8b6e52dc37b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f08d5f10-d64b-4649-ba13-a52bfef76ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e64681a-2999-492f-87a5-1db7f3c8f4ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841f7a3e-b623-4b7c-b311-93a451f4c637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "32d6cbc4-2970-45ff-a640-0c12efe6102b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8341850-a8e5-47ec-b006-a9971020f08c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836f73fb-129b-4688-9960-06fa6b321743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e02a5d-c6ef-42ba-a799-f2b1aa9b815c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2333774-659f-468d-9c3b-09a848fcf3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a751f09-1aac-4d47-a22f-be98827edcdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a8b8a5-39d0-4016-bd5c-039eeda0e146",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f105560a-e64a-4872-8a84-0c7a60223c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383e47ff-1a33-4a25-807c-0a5baaf7c73f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f134c4-0837-4739-b04e-45dcd8e34701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f331dd2-7aca-4b23-b3e9-2b7b1cf653c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e31d612-254d-48e9-9822-e304011a1f08",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae4b89f-1ab0-427c-8630-c27fae44d964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2260ba5-f26e-441d-a7bd-9417a57a79ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d92906f-f398-484f-b927-6ef9f8d2b41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9800207-8550-4c41-8937-2f303881ab77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f19c8f-eeb7-40ec-99bd-ba64bc9f5bdc",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682af6aa-4aab-4c21-9ade-0c5bd58b512d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd1d7993-be3d-4264-bbb8-0b9cf245142b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee6ce97-2181-430a-99f9-55de12db0855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fce2377-a701-4c40-b357-b609c2a1b549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce9dc74-e8af-4708-acdf-fdeb29793977",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4528f986-3674-476d-82da-7bab526b95e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb9c9de-da27-4320-903c-47db30502b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a035d8-67a1-4346-af38-468e6cd2ea6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "05a91db6-6f23-41c9-bf54-da45f86d0182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0a6387-0c6b-46ae-a8e7-c63c289bf9f7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f3861d-f3b7-4629-97ac-0038eefdbdbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "163b5ce8-5077-4ee3-acf6-679bba7aecbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723de1d0-bc28-4994-a62b-174b6835508a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83229917-edda-48b4-92c8-3e82e38d8ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e42bf47-ee50-4c16-9180-4fbeab057b7b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9666686a-78dd-48ee-90d7-5e2d68fef7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd799cc-d5e1-4b51-87d1-1cc204176543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a715d4-1d8b-42e9-b166-1ebcf64cabd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8859c721-7cfc-4e5a-a86f-48cad1c3ab0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09cd9ff8-5c88-4bc9-9869-935227854802",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b667b5-bea8-4a00-ae05-0b6c241370da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8af1a7bb-ef5c-44fd-89a3-f2efd82a2222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55dcbb9-695b-4955-8d9d-3eb3589eeab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2231406d-8c1a-48b9-8978-cb8d535ab220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7917bd-2aed-4b24-9494-6fd9ab39c98d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c490ed27-d21a-4ba3-8194-f921ef2567ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7152836d-82d7-41d1-8040-2a3b6238b50d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a04bc87-0010-41e9-9b6b-ad9de3f44be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "be527a45-8c25-40e2-a6d8-8ba359c5afde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1f3453-4619-437f-b87f-bfca9c143179",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f01186-c1f3-4016-81e6-a2ef718d2bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f323729-dd14-4820-b8e1-de7ce5ede86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1bed9d-1011-4bf3-80a2-a047825715a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c65c4d5d-b397-4169-9531-efa893ca8a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1af405-8a32-447e-b861-201d5144b449",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd4f92b-27db-402b-9759-8bfc9f35450a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d6e44a-5283-461b-9323-c69cb4f272a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4002c7ce-0a09-4f55-b40c-4bca49afa4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "89bf699a-1e19-4b0c-86fc-4390730afc35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bafc94d-b2e7-4109-be27-cad35d5c6e78",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2be224-925c-44a7-9c8f-67d8302f2223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f2b0c0-4338-42fb-a416-237f245a5907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf7eefa-ed62-4196-8cc6-7bad55860312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "24b93140-ab7c-4536-a461-35230098dec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa403d2-f2c3-4fb5-b6e4-3f49c820fb74",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "720571d6-b3bd-4903-9df6-22610915f922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e56c83a0-37d9-471e-8342-c46205719b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca930200-437e-4abc-98ef-34647f9814c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2707b668-11a3-4731-83e2-83c015f033c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca77498-7aa7-4aa4-81bf-dc7a4bc7c934",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805d1d2d-9983-437e-9d2c-ab5c97c47a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44e691d4-af2d-4562-afa3-ad2897399b79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecae425-4484-440b-99f1-7e702320ead1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7558d4c7-0f79-43b4-a781-5ba5c379f79f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141f4849-1c63-4fa3-87ea-dcab7cb9ffa0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f2ea39-8543-4a1f-93d1-a16e263854a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc7bb82-5946-43c9-b880-cabfa876d3f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93c9f85-7b10-4909-8002-8f456f727128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea63f6f9-6957-44ef-a059-9294b91ddbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfade5c-1027-494b-9075-a06051fae6b8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3f9aa3-8690-4163-9b4f-f0b55f6da3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d6c516-dd79-4ae1-8ce5-57c06460b179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3692a6d0-b7a7-4a55-b2ad-94a1304fdefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dc2d06b-0eaa-4fee-a376-4b55e9c86ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9174f207-c2ce-4cfa-b4ab-3cfbe75a7a74",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d782b6b-b2c8-476d-9a1a-33e5209a9cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178599d3-71e4-4f7e-b452-fd577ad1c4ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23dc842-4628-41e3-ae5d-419174c8aea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0791686e-d6d9-406b-9949-0a8f66fb97d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a5f89d-bb53-4f05-9d9b-2f8756d14218",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa292225-34f3-4607-ad1a-4fd22dc89d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb7a51dc-c086-49b5-bc11-536ab3c23461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a0aa26-d024-41b0-a0a2-908e81b36dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4eeb4a-65b9-4364-b85b-c5791fa746c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8150de5c-6b67-4492-bc2c-ab09a36d3752",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d71e58b-3c52-4953-823b-713a9c325156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a43bf446-f2eb-421a-98c3-42067eebf0d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe41d019-0a15-43cb-a6b8-06a5bf1882f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d91d99f-f2e4-492b-836d-9c7cea6e23ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcdbb0fb-e91c-4ecf-99f0-f84616e2a386",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9490df23-148e-4375-b837-44b8b2562906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a0dcd1-e306-47c8-adde-2623f6910021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ac4e38-03a6-480a-a417-a2175c3c7d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f82c55ca-ea25-4b8a-8b93-10399b4fdb6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c5efc5-4f7e-460b-a544-af0e4dc92dc7",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afa8fbf-7d47-4a81-9182-8870a1036dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23eace4-821f-4147-85c9-07a7636bd54b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9549b4d-c85d-49c9-8ac8-85c12635891b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e2c1e4-1b07-463b-9750-2fe12f3c67a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87dbe4b3-c979-46ee-bab8-1babb0ba7083",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85e3a0b-8d5b-4180-8bc6-d87b9766dc63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab47ffd-c896-4a3e-ae07-1c5924e3c3bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a8972e-170b-4c39-b42b-16f070aa9e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1495ce1d-7705-4787-8906-639e38196ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7e3799-6f18-460a-88a5-483101298583",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6440f3-b975-4cee-b097-b61b0ca5498c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc131271-b258-4c26-a6fd-80d7489b283d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04ddfc7-c2da-454b-85d6-934a9aff9cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1cd4323-a901-4439-a1d2-a9f2f3367835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140ae23a-f9e5-41e6-a4bd-005659c4cca1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b2b3aa-afbf-410a-9f3c-40e4125a1ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "787c844b-097a-4694-b4bf-3072102b2442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4634cc8-0b9f-4991-9738-e49d05af8343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d27e3f4-a37e-4120-bb1c-b96466c49676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370f51a6-0d6a-40a4-a88b-830070212997",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3540d39-3339-4886-8f67-730c38ac8336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa7aa09-12ba-442b-95c5-74931657991d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4040b556-589c-4127-bd6a-7ba50a3b5d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91429bdc-9743-42c9-9371-5182148b021a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d71ea6b-154a-4507-88ab-48b0cef569d3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a09a769-275a-4d2f-b4fb-0ef0479feb7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7a1f945-a496-4f68-930b-0561bec59437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd24a59-6173-48cd-82fd-8ea3e33c414d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b0371f0-6115-4ff1-8e61-ec2a549a01b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256acf8b-8537-4f55-8da9-c970b1b4380e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dde2c01-7d71-41e0-8b11-3f012b8f30b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fd9f84c-2c1f-47aa-8a0b-8b46b9e56508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afebea17-be3a-42ff-800f-30173ac0226a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b9c418d-bf7f-4eab-bb6b-9c3f51d6303e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f369bbe-92df-4997-a64b-a6986253b5b6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a9195e-7340-4403-8c0a-8ea63294b383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653013f9-f3c6-4e5b-aa02-b7ef11f75853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f30c7c0-4ceb-44bd-998c-595bb63e78a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "67a794e3-5063-41e0-99e2-367f8b6df63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e52711-3abd-4f15-b9e7-dd8a9f334afb",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa8b344-d139-4c31-9c87-a3cbf348b2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfc51774-42f1-4eba-a4ad-374aa2d596e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d6dd7f-2126-4883-98b3-19c4afbb8e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cab73e0b-ddb7-4af1-b8d3-80400069b931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f962852d-a11d-4327-95a2-796b378af7b6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef44e45b-c8e7-4b26-92ed-314cfc0d6c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7723a848-e760-4541-9336-c0d275ccc791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f50a4b-87b4-4eed-a335-ea0851c64407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc668da9-46c5-418f-9dc2-3442b6b6c88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038446ce-51f0-4835-8d5e-1b336b3bce11",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80be9fa-ee84-4f72-971f-4f9fea80f8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e3b446-1087-4c1c-a5d6-82c4db348b19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86e41ac-d6dc-4515-a141-4bff53cb8f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da858f63-feef-4049-afd3-21fa1e815cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe2a03f-5b4a-4007-8726-d0809dd62854",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff606873-3b64-4dd4-815f-5d072bc6340e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4583cf29-7022-4335-bbd3-5179c2763f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052b3c20-091d-4f71-b4a9-d531f9865bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb8946eb-1ad1-4f64-b42a-60e671218201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa1db77f-0cdf-4b39-bbdc-57f5ba9c87f0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cead15-4d30-4d29-be03-39348c76c896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b4e46b0-3e39-48fd-aa0b-875a9005a099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6a642f-51db-4408-9a83-00b17900c2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbd5aef7-aea6-4951-a0dd-222c9bca93d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2caa3ac-5ac8-473a-bdc5-ab399d3ab961",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1097aad-d4eb-474b-a385-0af4d0798ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2da2ddf-8875-4325-a51f-ab1451725bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0600f1e4-2c17-44b0-b76a-4ff29a1cfb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d09238c6-2026-4b30-a3f0-3f5544b5cfad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ea8dae-399a-4a45-9d76-af7ddc3b0cda",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eebb373-21ee-48bb-8c5d-e6415a868622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a62a476-1419-4dd7-8856-97454f5cff9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5ba08e-95ad-4d23-9e3b-c2ff1c3568bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3022e445-fce0-4d51-b80a-cc1780a95c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ea09c9-133f-4e67-9e25-b5014f71a856",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5f381a-4cbb-473a-abf6-9abbead530eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "664ec47c-1cca-4bf2-a339-b24bc14b7f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8ac39c-f7fb-4436-93ff-9f548b243c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c27f17dc-e980-4e7c-a916-5dd3ebca216f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e8782e-6cf7-4929-bc77-5a92e8909fd2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a7823b-da27-474b-9b90-147b6c82dd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ece7f9e-5c2b-405a-9672-c39bdcf14760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9d9129-2b24-4d35-87d2-253c284e91a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5103c961-9938-47e7-9a06-907567f843f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05f2f39-4ce1-49c5-915d-0f85db0dc311",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669d7400-b2d0-4d0d-8357-d5fe23240dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5518d43-f517-4505-adc4-e37f982983e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "375eea65-06fe-48a9-9e73-5f989cedc908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "833958a0-57d3-48b2-8729-3fb960ecdbac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0cdaa93-6cde-4053-b221-1261b0f6a27d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b2b1be-79b5-48f5-ac22-7528359447e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4852dfd3-0000-4ec9-a3db-bac7272bedaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc27a879-ac0c-4d6e-819a-d93a2f0bb86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae38868a-87bf-4188-b561-518e9b3fa73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4628bc76-62d8-4aaa-9803-6e70d323b65b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb34ce3-bac4-42fa-a8df-f09c9228158d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9efeeb4-6e10-4691-9410-06b24ff0632b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e2e29f-3520-4235-9d4f-25a6664e5f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4086726a-246e-44be-8e37-eb9169874a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d322d20a-4023-4088-a864-80f9f3eb9b7c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4de365e-990d-46eb-be1b-28bf394dcb90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04bc54e9-158c-4991-abc8-dedac829d743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ff23d2-75b8-4b4d-a4ce-d27ae0122a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a36109dc-64c8-47f4-a0b6-f2bcb0f23ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7133ca33-6a66-4abe-9d90-d394dc28e677",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3158cf5-2c82-47f5-9e35-246fffb07c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17603a1f-e8e8-4959-a91c-4ce26be83416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ec410c-00e6-4e62-8357-5a77953c5e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "343a1846-7af0-43c8-b84b-27b8f95c9640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24428b3f-0bc0-496b-b289-5ebed3a21a57",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16516f89-62a4-4ddc-9a83-a9db7e9be4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ef6e5fd8-2efa-47a2-ba92-3e6af5b7c1a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e363e2-5701-444f-a39a-9a9587dfc5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "52acb9e4-8df6-4650-be00-026f670098c4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b928eb8d-f124-453f-b81c-29a911887e05",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "506a7145-725e-4161-bf1b-4f4c307f52e2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f318bda-14cf-4f14-9e92-f4b36c897d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23598fa0-8fe6-41b2-ae8a-eca9704cef2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893f4fb4-44c3-4b83-a4fb-f83c606cdb07",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da47b40d-6327-4a38-8c46-56092cf874da"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f93af02-067a-49ba-95c3-75ba9f5dc00d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa6d26f9-be9c-4986-9d54-e4c342139fef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "faecef50-5f8a-4aef-93c6-6761884f48bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9eafa6f7-0fa8-44f0-b3b1-83008c45a528"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cc53f6db-5857-4ccb-b391-fde61f453c4d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "16d73529-2a6c-419a-b6cf-796c2cb564e6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9816ce55-c10c-4c46-b64c-56feae5156d6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1c7256bb-645e-418a-8e54-8f7fbe2607ae"
                }
              }
            ]
          },
          {
            "id": "97c38d81-846c-43ce-8e22-959f88463c43",
            "name": "Positive Testing",
            "item": [
              {
                "id": "499a725a-729e-4e5f-8e24-8415404bde2b",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "83ac3a1f-bed4-4382-ab9b-c927d058951b",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "441f4e49-a048-4c45-a9ca-1d2ff1e3d355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3fab17c5-c41b-40b3-917a-85780d80fd7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3984ce1-169d-4fd6-bff3-82ad83d23e5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a668b8-d1f7-421a-85c2-37dec0dc9b22"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "64de32ae-2264-4ffa-810c-c2634c47eaf0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52584418-6d7e-480f-8f9b-293f87d717d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd4d3d42-0e41-4e72-9186-57201dc45ba9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "650eea06-a2fb-4e05-87e9-5a612d0fcee1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0dc882ed-2bca-4550-9ed3-921c2028a03c"
                    }
                  }
                ]
              },
              {
                "id": "52538d1b-d74d-468d-930e-997f3f976909",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9555df0-0b50-4ff7-b8b9-f9161cb01c71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a34ec7c-5464-41ee-83ef-4788bd1cba09"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "514f9e0f-03c3-435b-b658-4b35fc888997",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "899cc465-6562-41f4-baad-78e2a463b372"
                    }
                  }
                ]
              },
              {
                "id": "b0ba4ebd-de29-403e-9d7d-35d3ef1447dd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b825d621-896e-439d-9160-e73c878fd3a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "76087bb9-c5a2-4fa1-a282-50e937b8c4ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "acea13cf-cde4-4782-af3c-291b6c731470",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "18a8028c-f4d4-4a2e-ac79-524a09a99815"
                    }
                  }
                ]
              },
              {
                "id": "33628a5f-8c4d-4036-99bc-4cce7a740ace",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3d9d87a-2995-4465-8e3a-69b8d3cd2acd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c729bfff-c4ee-4c5d-b5d3-cb5e06fc6491"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6368563-8831-4de0-8ace-efc8c27ea1d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2d0d990f-6b25-4bd4-817e-c4f081336383"
                    }
                  }
                ]
              },
              {
                "id": "35e39736-4d18-476c-b56b-63b3b940070c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8eacc62c-6cbf-48d5-9775-5a3eba8a04a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "797adda8-dc57-4b90-a5a8-c8fcc6e5d023"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "394d0c4f-646b-46b8-a057-ed3070f68779",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "425c77a5-c7ce-4bd3-b681-cd747ccce7c9"
                    }
                  }
                ]
              },
              {
                "id": "259f72d8-415d-4dad-bafb-01addfca146f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc996885-2775-474f-bb16-d62c1db4d7ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c286328-a0a8-4ed8-95d2-4f980134783f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "208a3781-d193-40f0-9d0f-afb5ee24db31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9e9fd3fd-b520-4f90-a5d0-967af5417a00"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "98357f33-45c7-4d8b-b299-1df130fa70cd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5e032064-7609-49c5-a425-233e1de9ed9a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3a24addd-5f1f-492c-9ddf-cd294d0124a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5914bb2f-c8db-4311-a927-970f92c5ba1d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43f934a9-2ee4-4e7d-ac9c-cf5d97cb825c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "432616aa-bd19-4b0e-9116-16ff445d4508"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be00f5a0-0988-46d4-86b4-8baea89f1baf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "709bae8a-ab3d-4422-9a5f-838e3c5b5294"
            }
          }
        ]
      },
      {
        "id": "b8ebb033-da51-4bb5-bd42-453af5224756",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a3d08adb-9827-4bcd-a0dd-ede07fec47d4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9e48eb17-88b6-41c6-a3a0-4b9dbab78a13",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c14f5296-9df6-4081-8579-3f669688b607",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e26b99e-08a1-4cff-9eee-45942d15209a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54117cf5-fa70-4ece-9ded-144ed5899a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d61cae-f36c-4cb7-9c3a-e1eebc9ebcf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2156dda-2443-48a2-8bbf-25a71a6fc153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7aecb6-5d9e-4291-bb48-41455af328e6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9323ee52-5bcc-4466-af78-3e3f63e20c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e59539b-5c99-4511-bfcc-20eb8db69a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b12ea3-854c-4644-8246-e7a86ff3514b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e55b4ea1-138f-4bfb-b4a9-892ad63916c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd78600-db65-4cb2-b5ef-1df7362be6b7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9517accb-1faa-4585-bb58-651ddd6fef06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "091a7095-d09c-49e4-8dd5-b6a61535e3eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abced1f5-79c8-4ec0-bc79-98f7a4e6f5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ec35e1-1d79-426d-99a6-b295f301ef28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c7cf8a-c23b-4044-a33e-675488f2eda5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14e2d03-8039-433a-9c47-0e870a3dbe9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6f6ac2-6859-40bd-8f67-270bf194c494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bfee8c-02d2-41b6-920c-bc302e367c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "438a5ada-cb87-480d-adc3-cfbc4f6fd3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8171d1-e7b5-4f0c-b14b-36ec23a72156",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c64a6f-07cd-4e5b-8bec-84700ae4b5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daa82bd0-fd05-42f5-9e72-83337f101012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3cb385d-86e4-4479-8808-d308701c1228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e64b4984-eae6-4eac-862a-7e3aca1394d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89404b14-0387-4c30-b977-a7a45d3b117e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c8e2ed-c0fe-4496-bb2e-40f896eb0830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c7ea32a-cfb5-462f-8f29-8ac4f7cd8c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa74968-15e2-4181-b409-d42b051e80e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eeca062c-5a52-4070-8b1b-52c91f80dc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee1d00d0-0c6a-4e78-a8e3-4dcb1137715c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50400e2-5b91-4934-9a67-ba1063e99cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b1ebae-2504-41ee-bf78-93adfffcffb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652debba-62df-4ab8-989d-8fc6e79cb24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "359ffea5-9712-4706-b9b5-c169537accf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c349caaa-396f-433a-b2da-e5a1c811551c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae38422d-8039-4d51-b332-5141cdadc41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39df6c4f-94b0-4808-805c-391fe415663d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2328e95-9a02-4a53-96ff-a4701e5a6ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "371e7260-2ad1-4baa-a715-4d8e759ff789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cada1680-23c0-4e28-8d40-9e58e1acb4b0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723d634f-3c4e-4662-8691-673d4c75bae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886a8281-ad74-47ad-bcee-8192d83e777a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7fc5b5-7878-4050-a846-ec36bb51ae97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "271ed4f8-7d45-46bf-a424-d1e042e4c44f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca78e84-c522-4010-86ed-98064de42627",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa515645-6877-4730-b8a4-33d5b7a783a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9212fd1d-bc97-4bf0-ab28-d18a141dbc04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220cd3d9-3c1f-4d21-ac09-7d55eec48f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "00e002dd-fe94-438c-a8ed-b131eb662a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff7bbd9-3111-4c63-9bb7-0f7859b1583d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36202b29-9b48-4893-9ead-20fa168062ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "483df2fb-2c0e-4143-8be5-a4df39ba0c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c75250-bd37-4330-99c7-4a4b073c4223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "07990e70-f4d8-451d-b074-42b1b495bf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb07ef73-ff91-4d13-94aa-5d1728a33bfe",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39afe70c-2253-467d-9e7d-0eb2ae8d4e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f23411-226b-46dd-8aac-dac208d71733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cd536e-21c2-42fd-84b3-10ab17a9e275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "86c7b1e7-fa64-4aa1-bf18-66c393744668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189d1dc4-5cc6-4d0a-9608-0c36d6300e0a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d867a2d-0931-4a53-bb30-354c498adc78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d24bf5f8-c814-49e6-9fa8-cace75635e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5cb155b-4084-4e99-9457-5b775ab82843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2151abdb-61ab-4e17-9f8f-4aee461df456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4823bd-4e0e-48b4-93f5-ee9888f0f6c2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "093d69c2-b41c-456b-a600-b04be802c29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c57e914-4f9f-4810-be1c-4d7625062e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f45a00d-b024-4a83-a174-f1cd47f67f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "035d6f2b-21bb-4192-8c75-eef2203b0598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd994f3-e625-4212-a16b-ea74234e4d04",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656f994f-3e4a-47f1-a390-5332069d1e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95b57f01-dd1b-4d70-a570-b62f0f011e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67958c7-8aa3-4294-8023-aed6b870667e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab2d50c2-f2a5-4565-ac46-22ddc2ea2fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377d1cef-929c-4e94-bc10-bc1c7af682e4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2f35b7-10b5-4203-ab9a-378f3c01bc40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfb71cf4-cc08-49c5-a627-c8ed21b859db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16d1dae-0b5d-4ec1-9093-cb064944b699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e25ca8d-1b49-428d-8fb1-67acba657292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e905fb-1686-44d6-b288-27f6dac4b314",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4236ac-3b5e-4814-91ee-482d8bc6e57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932d65c4-157c-47f8-88b0-1df1e80303ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3620815-d11d-443e-bd48-12ae6dec95a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b5901c-1432-4ae8-a5b5-0c0e09e9895c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa762b90-86e7-4923-8fc3-3a148083f398",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14211df-85b8-491d-b62b-939a43b6f3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe130c62-7cce-420c-9044-88c7e6eef9e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78fb9038-e219-41ca-81bc-f1dc1d7a71a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b9135b3-7cad-45ff-bbab-462f68805815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aacf204-5e85-419a-9b04-94a37908649a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088fe29c-aa91-4288-bed4-37406342e892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225b3342-1636-4c82-9fdd-5e6233b23b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b2e552-51f0-4c29-a19e-bf2c95e90d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "adbc580c-2533-4097-9b74-26a8ae61b212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e74ad03-0fa6-4922-9d2f-389dfbf0c7a2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e11cc85-bbab-4c1a-9081-5dedb078d713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca80d70d-8687-41bc-8e2c-e0aaf7571d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc7a960-4a8f-49c0-afc6-3f4ce4ca72ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f3a3c65-8ab1-4a0c-a26a-d59b57c7877c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fa0d86-eab3-4d1a-8abd-81f8cf95227e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fe6bd4-c3d7-4b6e-bea3-b333e141127f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8869efe3-3ec3-4984-a2e3-f9ebd710322c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b45c001-3d2b-451b-a289-b47005145385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd097b85-dfa5-4321-abf6-b1647a960d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45fed97-27da-4729-933e-a30c47567d4c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77314d8a-8935-49cf-a61b-c755576f5d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdf6f774-63c6-4040-957b-4c1758e92aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b123c48-ecdc-4e15-8122-35965a31aa09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfda6a0a-6429-44f4-b62c-4ddf7eb5d888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e639859d-9e70-44d5-9c2f-2ebbcb54bde9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "391147a4-d079-4011-a8e7-2078f1634c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "137384de-dddd-4630-a844-d55fee084001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf46ef6-5ffb-4c42-908c-074f880089d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "028c283e-0bd6-41c7-80f8-1eba3d1698b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7b10e0-234b-4790-901e-220db61dfc76",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a20da4-8e82-4a3a-bf42-08b15b08b707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24b6ee7-7474-4425-b1ea-dd8738fee70b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076feb04-ff6d-4027-8acf-80963835afa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "968797ba-0536-4daa-8618-718461a5476e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e3866f-2459-48de-a389-26009176affd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "343eb4a6-2269-4247-ae54-2f7a7caa16f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bdd5c70-8d82-41d8-ac13-0d57296c6cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cc1bea-4565-4ca9-afc2-83e98c04ae10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd9eb41a-74d9-46f0-b5df-12c1885b4cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc317cc2-9e46-4709-a992-93f9574da310",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4ca226-c091-43c0-ab7a-2737f323f82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1729157c-ba59-4482-8aca-2cca9356ba46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ff1532-695c-4476-b3cf-55d9edb7dcd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6246088-8c42-426e-870f-9866f55e22e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72758bae-4976-43d5-b755-bda1b4430a51",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d483755-92ba-42b7-a88e-536d0d7c1dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "706b14b5-2b17-4659-915f-d57b87ac26fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173b23b0-061d-45e3-880b-3ba592d1e05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4626c998-eea3-4d39-8331-10e812b85ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803bf47e-e7dc-40e5-8f88-57eb924f698e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dffe1bc0-79b6-4c8e-afea-315f7f2488c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6756b322-439a-4bec-b11f-2b47a3b66b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cf4077-6dab-4d14-8ba6-8217fa601674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4536482b-4cbf-4c4f-b552-288adc1d738a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef87aa50-0835-4566-82b7-53d014c415a3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "532a2653-0d6f-47d2-a2d7-69379ad4cd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f6d3002-c207-4c38-bfb7-5f325031a331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd75b94d-5e82-4181-ac3b-1a48c47629cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8df644ba-9525-4511-9de7-34aba958e42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ce5af3-91e5-461d-ae27-08cbbfbcfa16",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6440ca15-2f1a-4b36-a87d-ef1713d1b959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044c9608-4c0e-46d9-afdd-ae8086e6528f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1642e4a3-1cf9-43ee-9da2-fcfba76323ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "505b8031-a125-4dea-9527-56746ff76101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461b7168-7263-43c4-835b-8ad4ce61c1f9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a44d0d2-ac1c-41ee-8138-2dd255691480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a4c34a9-b832-4b66-b0ee-a77afae0c1c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806592bb-fc32-4503-99d6-5cb22edae72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab023549-7166-411a-8278-81b4e36f3583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab5989f-b215-440b-ad33-27d40667af2b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb7250c-ace5-44b4-89e9-14e3ebbfec52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c2775f9-f317-4414-9c8b-a334b9b8f58e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7764048-ce70-4d82-9ed8-b4b7f1220c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "742134f0-68bc-4c90-acf6-6cad9b67c4e6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1de0c81a-bee1-4731-bae3-a228293875db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ac68def-2c46-4e35-a284-5d22460373e0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6246114a-c49f-4a15-b97a-dd4c583f93cc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "db891ec8-4c4b-4c67-b7cf-469a50ded5e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "349e3bb3-510a-45cd-a7ef-b60da0d204c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c30391a3-18f0-4971-b0ae-43634d589646"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d58de69d-7e21-4509-ba5f-2a682214534d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74111ceb-ef47-4e82-a9f9-10062e5421b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c02fd278-5b85-4e0e-a1f1-53664073f5f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "682c7220-5dce-4d5b-9f17-b96fc3453c47"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17e94185-faca-418a-967b-6bffe60346eb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c2321e43-4d89-4ec7-afb2-8f040de7d5b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ebe1f14c-e795-420c-8139-fa9f06ff0e01",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5be6e881-1643-4534-bc00-730cc7d9f2ea"
            }
          }
        ]
      },
      {
        "id": "0abca6cd-5d1a-4c3c-b56f-a64dd7d3bd19",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "82466715-6229-44df-bfde-15a80a939ee3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "adfe1b2a-0d5a-4ac0-b751-4c2221a01449",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5ca264e1-fc56-4dbb-a320-fc42493b75c3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38991479-ff2a-40fe-bcab-aba43d504ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30110591-0bfa-47d0-954b-5520b9ca688b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e658606c-57e8-444f-8682-c2accb53559b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0e8a265-143c-45a6-bc10-d9118429bc44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c46ad12-0542-45e2-a2c7-1d06fa577a9d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2ee423-20b1-4122-a156-75c1d37e7739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66721588-9a0a-41a9-8756-7b1e9c148853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88deda58-fcb8-485d-b2ba-570524296908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "81ed94e9-5bd6-4636-80c3-573a57a0a0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c81d787-ff10-4d94-8656-c6878881afd4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2fe6e80-b265-4e22-8291-1db8a0cbf947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9ca32b7-4eda-45ca-a8b0-909987feab4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece4e40c-ee71-474a-a5a9-15ca4bf84b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02ea6b92-230e-467b-bb81-7da230918d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e520f0-9267-4e85-b2d9-880ee471359c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4334b16b-b08a-4f12-bdc3-638eadb77f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e4d97b-7e77-4e5b-a313-e9985214fcbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877d2232-ba6b-4fa7-afdb-0c2c04d253cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65fa801b-3619-43b2-806a-66ac7091894b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb28fae-56c1-4f78-821e-b8509e964408",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c1852f-6645-4051-affd-82afec8ba849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36480a6c-0e02-4cb6-a320-3f01ba12f4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0fdb20-b352-4db4-9365-af6c850b0913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b402a6bb-28cc-4b1f-ba20-1298343f5dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f050387b-6840-4e95-9458-ca351c0b03db",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf9682b-6634-4c20-bf60-1ffd942052bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa61f50a-07cc-418a-a2d3-a631fb15661e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e13a87-ab09-4988-9e85-98a7f9dc0816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc9c4ff8-ac57-4cf4-a97f-a03b45f38488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7810e81c-81f1-45ce-9f2b-a7a946c1c793",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc80fa8-f052-4c7e-be9f-51453675abf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd4f4b1-4371-4a14-bb44-441796caca17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac55b1e-b5a6-40cc-b3ee-a121e123f762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6e6133-cee0-4e5e-806c-7caedc07fac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5afd82cf-de23-4678-9e6b-7aed75f0ec4f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0d4ddf-531a-4fda-8385-cbe311fa5cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1205a4e-51e6-4c82-b8c3-3a66ab5320dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9386a42-f23f-4f27-abdb-8c40d34f1250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5c42dd7-2f67-45ce-87c1-7a9c1ab9d559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc16513-c5a3-46a3-9d25-2f8bacaef1ba",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4665dbf-dcee-4084-a1cc-c88917550867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ad59c1-0e55-4f0e-afed-812f7314e510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee748811-e147-47a3-8789-b2e73446c0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eef8768d-7056-479b-a5a4-b14700a39c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01552389-a3f0-43d4-8e10-2b43ab702641",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c37d6e3-b1bc-4305-ba3d-28c3ca77d828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c99e76-d8db-4b59-9927-d0842bbd7c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0d474c-6ea9-4fc0-b00d-aea2f429d52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85f4fa5b-bdfd-4dbd-9729-bc384364b259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21468049-0ede-4cf0-b5fa-e75fca54e7fb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b757eb91-cc93-4cd1-8792-37558e57fce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58630788-c759-4e50-8724-45778005ce2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d422a7a8-2c23-41df-baf7-8d8d45fbabad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3ff9913e-29f3-4564-a992-66c31154d46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0ada0b-127d-4e3e-9d07-3b2df47673a8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf994eb5-15d6-435c-8c35-e77c92a84ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b182ce81-8d2e-41d7-9d1e-20b3ce7a902c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e131fd-ebc8-48da-b51f-2932a7023b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9e6509b-b722-4d8b-bc73-6174bb47134f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e983b76b-56b9-4d12-9c13-e01de446722d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe83305-6544-4b5c-bb64-941cbb6710f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3dc5a9e-c9c0-4a9a-bd7f-98554cf24e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31415ae-5bcd-49d9-adcc-d7233889e350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "57c2b0cb-9abf-49fb-901a-22583dc5c7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b411e34-fdc3-455a-8e5e-469bf39c5137",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "570b6b90-47fa-4b2b-b76b-9e03e9c02c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "860526f1-ad10-4e6a-bced-5c53859128b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5522c335-b526-4eae-8e14-89227d04dd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2223cf2e-949a-4c45-9484-8fb814b577be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff6ead7-ae12-4208-807b-8406139680b5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6856a6b-ae52-4b8b-915d-691478b63990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57363456-5ea9-448b-941d-50fd1e05d18e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e93354e-e2e2-4cca-805f-221bfeec00c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8f3409b-ac6d-462f-ab0d-fd738c1e9ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fbafe0-db01-440a-b00b-3783ba99e2c1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87418f49-d89d-4423-b2ae-0df230487b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a70fe1-31a0-4763-bfa7-64cf67ad547a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6471d253-3e4e-458f-8ece-227191cb657f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "99464a8e-7e87-41d8-b035-bd514363fcce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155f7723-81a5-44b2-a510-51f6bfec4875",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3711d24-4a7a-41d6-9ce5-048d57b72a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62579f19-bd0d-413a-91fa-b727d8ce4926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0d3fc5-8ee8-488f-891d-03b9364662ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6aa4fa3-0af2-485c-ad82-33db76a31927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6def9ff8-c74b-46b0-83e4-1788f29a4e0f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3a2c06-701b-4d22-91bc-4ae975f1fa0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb2e725-42da-4432-924d-782f633d182f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4451374-2fb4-442d-96c8-90748ea58638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "02217498-bac5-40f9-bcec-c82a349171b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e268d5a3-f9bc-4bd7-b793-ff7c1fee8eae",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "151948d6-81f5-4dfe-a50c-668d9868072f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c7e1cc9-74fc-4295-b1f1-f8b817c523d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a91821-349c-40c7-b320-a407c8b21734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc13c2d-e987-4603-a39f-9462fe693cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6deeb2b2-92b6-40b1-ba76-aec732891583",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d4b131-f33b-4f62-b1b0-35947d14fbc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b49934cc-11b0-4624-b85d-7d3cd4fabc8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfc8631-7c7e-4c13-a765-9fc9e0f6d5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1596f7e-5f43-465f-81bf-9ff6e3e2546c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955aa27c-3756-43b3-9966-888175e5d65d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7127b5e-5669-487e-930f-1b0001d697b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3fe092b-5bbd-4239-bff3-4316ff6ebebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277c2b5b-7874-49e1-a946-db42d90f135b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f69001-83d0-4825-a6d7-e447278609d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71edcb55-1529-4dcf-a6c0-5f5636d898c2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739cd749-7dca-4222-beb3-7ad3e150f209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c568b0-03ae-4a62-873b-db1cdfb95a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f49f294-ee75-4070-a624-561b977eb957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "634affef-fb4c-4586-b925-dd09725959a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914c2d8e-b431-4790-b002-25bc601a2ac4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25611fe0-b270-4ca4-b587-2a6408b89055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "382a291c-d553-41d7-8523-2adfd2ca0d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0faf2708-c369-4d4b-8c28-b504ec0b4a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08d4a998-6ace-4a0c-94b2-0b7f1605012a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9db100b-e91c-4f5e-9751-ed81fd399e0e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "709e53d5-9754-42c2-bba0-66492c97cb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d783bda8-34d1-4082-a58c-e857caab8b4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223e2dd2-499f-4ad7-bce8-ca3fea55d18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9141bc76-008e-4f8c-820c-8f01e14c63fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed85025-e36c-45ec-b412-e06b6fd841aa",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b5b80b-759b-45b1-bf7c-b1725afff9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ac6eb5-2476-4b4b-8fe7-0da1793daf40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6419b3-7f23-49f8-a2d2-9dd8a6a52e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "847e6166-cb28-4aab-b7c2-044c9ec2ae72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d934bd3c-7341-41c6-bcdf-43373f7b1842",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "616149e1-de21-42e3-b5d7-c3b37e1cfc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c7d996c-2c45-4ad2-a0bf-20433ab5478c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebf12da-64b9-4390-a215-2e411d4628ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68462948-0cc0-4a9b-8eb4-466eabb27341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a229ae6-a00b-4143-8889-09175ff38db6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a1f637-a6ff-4d8f-a59c-a25f7d3eb7e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c4bfc5-f132-4bff-8867-18c36fac8913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88b21ad-4b9f-41b8-95c4-5f24b3ba2c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b205d5d4-b872-4019-a312-dd521bf752b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26986f8e-9353-453b-b5bb-44a3d29c7210",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b59cc0-9012-496a-aafb-5244a4410e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8dc737-d09d-4f35-8458-e96716d7147a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3d8a15-e92f-4468-bcd2-42fd9382c5e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f602cd08-7e75-4b15-b9e8-e2f0a68a900b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c897eab-bfca-49ab-894d-43301b58e53e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4930c2-0f9b-43f9-9f99-c186019f5a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c700a6e1-3b84-4807-b3a4-d8cc19feb21b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310a089d-4162-4c0c-8d04-b746f775c099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10d53ebd-272e-4fdb-9892-0700af48f58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ff51e9-8826-4efd-9626-7016038d9236",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b5f3a9-ab1f-4c4f-aeee-3be60223be48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "758e44de-479d-4c48-ae07-a37539853ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab214d3-3fc7-458e-bf5c-e2a1946c20b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "daa649fa-e461-4e04-87d5-58e45ff6bfb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8488d705-160c-4832-a3c0-5ec97d40ab18",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "722148d5-13d8-4ad2-bccf-2e4817d3ea98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b058f481-41d2-4373-a00f-3c7b83545b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac173e8-a7be-4603-9e1f-695ab3fb401d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7e04c06-3035-4651-89c7-7b6a6713a6f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349ac33f-7d17-45cd-b8ea-6b1ccf5b2cd4",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fe59cd-3ae5-452b-a509-2cdd2f99d228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f930c903-1216-4504-8ce8-96688356dead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efcdc15-6155-48fb-b86f-f09727ecd1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b38e119c-8f89-4010-9545-080890cf5b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea54ea30-4931-493c-8ef2-b76702a78596",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f394e6f0-4b90-40f7-8123-e27c20ad1135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65857eb4-81f5-4ba2-96d1-4454815893a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871a4eb0-3d32-49a0-9517-15a899a9d3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4474c01-0a1f-4ecf-a569-4541b76d5079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3547cf6e-214b-4e55-b937-cc8e76804bcb",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d3c150-45af-4e0c-b809-e80d225d7eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38ef74f6-a92b-407f-a167-1f0bdbc2c463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b47bc6b-3ec8-42f3-aec6-74e596adfe11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3cf630d-ed4f-4a88-8ba2-69f95fcf3a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be76108d-7c71-40b1-a8d6-451ff29ee767",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b359e370-2367-4d0f-b90a-818e7d65ec69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb683e46-bc77-4e25-9c91-a3fbb25e70ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ceced05-ccb5-472a-b0fe-f0128d4dc4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c96d18ab-b287-47c9-a89b-6a4fe716a7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc3524b-27ff-412f-aa9a-4028d0049279",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9055a7a-8f23-4684-be09-75e4c71168ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0aadb44-3124-4445-b0be-bfc3c1b7c185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfcb1975-d8b0-4930-a460-22f649de78d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34e7e070-b5d3-4a0b-8889-c364be698cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92874f93-8a19-423c-9ca6-1f8373045257",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be43c70c-a73b-42f3-b548-506fa4aa4f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "024aacd7-7959-423e-b5c1-bdf5f4af4722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07ea53b-a196-419d-aaa3-1f5d6df51526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c5584d2-a053-4439-84b0-de58d13c5617"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c02a73d4-9ddb-422a-859d-08f43bccbc27",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d74c11a6-612c-47db-a9f8-27c1ee60c6c0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054f0447-661c-4757-9604-c92d5ed5fe69",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ef83e6c6-c912-42ca-a60f-bfca2c144f8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "157aaddc-f343-4ed9-b218-4dbe6e6ef5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72586ca3-962c-4826-8f6f-fd21e247d066"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a3df1ca-6316-4f10-a23a-7480204e6c20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03a98f39-fc2c-4317-be50-de7dc65bf633"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9032992-0201-4bde-b205-47b10144ccd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3eaedd06-e741-4e2a-90ad-59421e012aaf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7192eb82-a1ef-42e2-bd42-e0a1d144fc31",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "caa8978f-08b3-4385-bc28-a72b9d5d5fbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dfe34d19-3850-4a79-9c8c-f4f227a5a597",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d723713-301c-46fe-814c-9a96340a75b8"
            }
          }
        ]
      },
      {
        "id": "257c7672-84b4-4336-ad0e-99c0079e72f1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "84b31533-299e-40c5-9a30-e082c76bd0a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3ad53dc0-f55d-46b3-a394-5333e0df740a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "20549ccb-0d26-423f-9019-82fddb9a54d7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3dec876-897b-4843-bbcf-047169473789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe3d4bf6-f36d-4660-8693-52e098b2ab8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5f0f25-2d4c-4a4e-b7df-30fa43e93b1d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f751b04-edb1-4665-ae6d-d5ef6862ace2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f802b9-9b43-4faf-af53-09f8f3ea864f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7e5ec4-e378-461c-aae3-383d2940f282",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d5742c-813b-484a-a9ee-64629abd0a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d63a7e-73c6-4f4d-b092-754f152f9a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbaaa455-5aaf-4ca9-aa07-547d6794b571",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cae5ff-fcac-4145-b39c-7dc537a5c2d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a974b42-c44a-4b36-8c44-3d567ee5ed46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e0f093-810f-480c-9977-9099dbebf681",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29602bb-daca-4b7a-8acf-ca2e99f5e80a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "938277c7-2293-4c71-82ab-2d8e2ec54e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5fb861c-44ee-4f77-9a85-5382be830bb9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a877aeb3-41a4-4142-84a7-f60b66b3cde3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ed08e2-6fc9-4b74-92fd-5776147150aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a63b2f-f7a3-42f1-ad38-6932c370d8c1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3df34c-589a-42b6-9e16-40e4bed91a88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c299ffba-e1eb-45b6-a9b2-21ef66692fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a9fa70-549a-4def-977b-33f95604b0db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eacbcb44-dfd1-4b11-8ed5-8a3f020860ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835f8fbb-dda4-4274-93a7-e378386b8784",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366c9be7-8c95-4d83-8c24-532d6554d109",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1f18a49-384a-410a-ad06-a86a0f06ae8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29db9ae-c68c-485b-a13c-fd9c8568964a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6827c236-25a6-47b7-ba62-02b8b7523236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564335b1-a7bd-4199-b725-3373d3750821",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d1cb23-b61b-4086-a279-cef56352c216",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f60d029-7ebb-4586-a50e-7571f70e3d43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6315fd-ef82-4a0a-a2e6-65eaf7802e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9e92d99-0c39-45b4-b88f-23dbab277f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71fdc22c-cced-4c34-ad3b-527b8e253751",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc30e682-d5bc-4ec4-bb84-d51e0c82c91e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27b76ee2-d65b-4863-adfc-32ec314eabd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ec6603-016d-42d0-9c97-3784824ff247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a8517b-8d64-4727-bfb4-580b6ec6b81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4fb0fbf-6f55-4362-a7b6-a823ec505377",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5229ab2b-b35d-4f71-abd1-e42fa79d4d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09b4087-3f5e-4343-b846-86ddef523843"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f8e3f7-9fde-4519-93b8-e73742d77868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53e9bdb-a132-46f7-b595-034f5e598563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb2b2fa-a483-44d4-8d57-f44e987a6b02",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d23aac-e04c-4e34-b348-7b5eaa322223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bdce179-d116-46fa-bbd7-fcd9dfb7e59d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48f01bf-dc2b-4a17-b470-1a5336a53627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe5bd5f8-ae4c-48c5-bf13-0f2d6990c6ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e9225d-2a81-4266-aaca-13681dcd38fb",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f416b24-e35d-4b52-add1-9308159ea9e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6481ec7-f574-44f4-83fd-ba9a513f1c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40926b2-cc11-4313-9944-f80dff336558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93ab3fd9-b742-4b9c-9d2b-a3a5eecc879f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236eb9a4-3e7b-4ae9-8702-13b069d0f9b9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf9cbcb-333d-4cfe-9952-4af97378ba05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cfa3219-15a1-4576-bb5c-b2215a2828fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "322dca75-1851-4758-a7cf-3fe8c61fa321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b4a0499-4d8c-4aba-8119-5b917f7edfaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c3b577-6310-45d7-a54f-1021553b6015",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da447bb2-ab98-4a94-9281-b56712e9164f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11a9fd82-7bb0-4934-9a2e-b506c1945fc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f810f6e7-489b-43fd-8875-c3f1155926fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac0a309-cb8a-47dc-9441-a172c1c400ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528009aa-14fe-46cb-8d2c-cb9a350ac44a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9720d5-d5cd-4c48-a728-f3dd734bc2b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39d1ddfe-8cb0-4cea-9ca1-b6aaab8c798b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2cd349-bd4c-4824-a335-c38d33fffcd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f88168d-b3d1-406e-ae76-b9efa509c331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73830aaa-a28d-4682-9299-17fdecf27925",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c42411-91f7-4b42-b3df-5bd2c17dcac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "390d48f4-fdd5-4fbc-9fbd-62a84809100e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa770211-4ad6-4b25-838e-28e5797e386d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3934713-cbab-472d-ba49-3e7643d1a4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1710a166-dbc6-47e2-8f88-be6b95fe7f60",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b13a87a-7cc3-4795-8ca6-e206848e28ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c33aaf7-a69d-4491-ab59-3be3fc2af3d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "104a0ffd-f3ee-4da9-8e90-d15843962bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceea38f0-394e-4b62-9d28-a9442d3f4554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf7aaf7-132b-4b58-b804-bf8d501e85ab",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5ba175-7261-4f07-9899-6fe56f31c8cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d77db3b-6062-4a72-9610-4fa9a72895ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe1a18a-edfc-4375-b74c-fb87f6dce358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f1c20ec-5bac-44a4-87bd-e46224195af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4548070-8e09-4fac-8aaf-11bb4f462f22",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb632e52-90ac-4365-9f8a-aa182b98bd3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8a32661-d8d0-4a6f-ab89-c39eea241aed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4978988c-2db0-4044-9693-19616723b84b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1c94900-8c7b-4403-8215-3bf0ba3ed759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b85363-b63b-4427-b92e-32c9104e912a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fbafc4-77e6-4776-8703-6024ebe4d5a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f223de0-d30f-489b-bc31-d2a7a3fec485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59181a2a-17e9-4531-ae51-a9c89a1d1ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "565dcb75-5b3e-48fc-8c97-5f38be312ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42f9367-aeb9-4bd9-b6ef-cb317587421e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f804a1-0383-4fc5-a4a4-5c2c3f51b4b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa4cef0d-3255-46b6-b89a-e87e06d0aea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5159eeef-bc41-49ea-8c13-062b402cb43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142cc5a1-0882-438c-8984-30647b3f6ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91400071-b36f-4f4f-b2de-3c34f09fe2cd",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603a7385-ed72-426b-bb2b-06217cf92f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5ebb024-179d-4813-84f5-ac3c7fa7365a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0fec74-a01f-429b-a67d-c68f04421d25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197b8b71-4680-4b0b-9d80-edccdf813283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80747a87-2d08-4a58-b993-7de7036c3689",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c28e79-81ce-4d53-b19c-a1de943fa7fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea502fa0-adea-47c6-8aee-3a0952437aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51bd79a9-57f0-4133-888f-480d02604d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9e9877-f386-4afa-a466-de160ec5ba7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12fa757b-23c9-4a16-8ba7-d6288ab6f82a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb21fa6-8b45-4b6f-ba85-25223bc7b80d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e355b66-698c-4467-b05e-75e1f64c867e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aee9abb-e4d1-4977-90e7-dac76477901b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f2818d0-fe1b-4fa5-ade6-f88af7dcbba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941586c5-66c6-4acd-ad9c-ab0cf8c2dd4e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459e26a1-9d26-4167-80c0-7266984c204c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8800a3c-3f7d-4be4-870a-bc7fb80a61af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b49f90d-58bc-414c-97b9-20b1f0d77bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "940eaff2-c4cb-4211-83b9-d0deed93f8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958d7b5f-1292-4325-9a9f-bcf8fae03ba6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f39dcfc-56b9-4019-8f01-c87b06af6801",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64d15865-8585-47fc-9ecc-642671c5c537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31dcc4c-1c31-46f2-a5a7-b2c732fb0417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfdf1c67-8115-4af7-b183-1fea42941d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee875362-94d5-46db-b85d-d7f5a51a71e1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300ab9d2-f162-4f2b-b59e-4473d380eb09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15898ebc-7cb5-4007-a3c4-0e47ee80bde5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99563dc6-b3fd-4def-af53-fbf406ec1c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b596837d-5035-48dd-a128-7f320c5ffaa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba244b5d-6864-437e-8a14-2aedac36768b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98047fb-ec2c-4c29-92ff-042a7faa37cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34b1255e-1429-47b2-9526-39224385e302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04885d5-ff1a-436a-8cb7-dce1c8adee43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83286203-15ea-4c2d-838a-c9a6ab48e109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a3e318-0bbd-40ed-9406-2a4dfe86515d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ed7c36-6a3c-497a-97a8-25f1065c07d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d03d0441-ce35-4996-b774-ff8b1e8b70c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be99be4-1b9a-4b6f-b802-2a1e1815cb08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cf0fff5-84bc-49f2-b616-8ed315f60cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca62136-6d6e-403d-90bd-939128b0f991",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c17e3d-7400-44f2-a70b-bbc406a9ccb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74d86c02-576a-44b7-9886-603aab799145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "511c13f3-b868-4dee-94a1-f75c63a038a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d3599c-c322-4132-9d60-ed033160742e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24c9a2b-0243-4ebe-8d2b-6bb6ff17dfb8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8489bc6f-8191-4726-800e-8a847d89cb95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee0af656-bc3e-4133-8ee1-953bb15792a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7944f830-c158-4bbc-b6e9-c49980a48dfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21682c2-4bad-4124-b3f5-15bb27b1b31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0cd8db-cc46-495f-ae46-da7640f4e970",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ae8e6d-415b-4b23-b7e9-06add5fe9988",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae9b8809-9170-4161-8b54-2bf2f6b420aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9af0f4-199a-4754-bd9a-0dc7b1ccdf07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88203e3d-e1d7-4c8e-b70b-acebe8fd14b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd4b4c2-df4d-47b1-b3c0-1dc26f0f498f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489cfd26-ee6a-4193-91f1-cf650280354d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a93637b-0a35-4ada-9109-a5fea6f88410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4eb3f37-91a9-43ab-88c7-bdc598a00427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "822af310-1a85-4690-8f86-ec9ed0446d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07164a07-ca42-479c-a4f0-9c218379ccba",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e86467-e15d-4a38-b337-e012f6ed06bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b3154f9-901e-492f-bcc4-4f4443d9f4ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3845600e-0b26-483f-8a54-3b5c24f12ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a3ad99-00d4-4fe5-aa4b-21192d78a7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07fb9926-ded0-4724-a008-54f27b123d25",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c872506b-2ea3-4043-adfd-17a5716e4e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc53a2ec-2a24-430c-b851-8fa4566048f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afcbf81a-2ee0-4188-be56-f76321299f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19638683-471a-4073-bddf-18a5badd07d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446d5e62-8520-4978-aeb2-ffa85cd698d6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215e0b0c-04f6-41cd-b5ec-dbba40a25ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fb0be9b-6e6c-49a3-bf32-a376c0fa7713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6204807-e3b7-426e-b1db-c5609eb99072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66483471-e64c-430b-b707-a3ad8b8cb224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f15dea-3724-4dc1-9e28-e906ef04681e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86c4b3c-23c4-4ea1-8ffe-339fec5917fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d791236-7957-4a73-b5dd-94d3b1542eae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9c05c3-bdf5-4068-b17f-b9e34f00a386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b572f76-e441-4871-8e58-d01e46f7b72f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b8011c-6fb8-46b2-80b4-f552263c6786",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978aa9bd-f2f9-4ef4-88fa-9f884ca5af7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f3b0f42-2a90-4144-bc7a-4d855a3a1fef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2843ce30-7043-438a-98b7-a4f0557e27fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c9f6624-ff23-4038-92a8-84f35a1871fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4f2361-b01b-44d2-916b-269a7642b297",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae300615-84ee-4602-ab76-eb3f6bd86e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81bfd18b-8516-40ff-bc51-181f6493ce2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3670a9-193d-452b-b3a7-034bd2bf744d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d2ad3c6-6a64-4ed6-bf27-4f27d3e3a6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5077a2-3049-4617-8d74-81633a4e86c8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dfd4799-915c-47e1-80df-6b4dcffa3de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb196412-ee56-4394-9a98-926f290b7ae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4600ecde-3ea9-4242-beae-72a68dce77db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bec2edf-7795-42b2-a82a-08a228b11aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe52120-1156-4d4c-acbf-f3e2396604f4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d361d12-bd63-4360-935b-f97b73ad5af7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d4620e3-6b88-4525-a379-0636714b3bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5472cc56-0566-40b4-a0d0-e7831d53f045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838eaa06-67f7-4fe0-89e7-0572ce1112aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e32ec43-4b09-4d60-a786-6cbaf159c815",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f3376c-4cb9-40d9-ad3d-b5383b0e415c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c04b75f-a5a8-4dab-a31d-5b7edb2e7a95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7610d41c-40c7-4a91-a951-b299ba26f174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b59305d-fca5-4d50-bcdd-14318beec5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246143bf-fa51-4b62-9a8d-f1b4c72f490a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6c1d8b-e4e0-4e7b-9a2d-c288c74b3f05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209d6917-d749-4b3f-a066-6edebad6a38b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a3ce5f-df4f-4e39-af7b-ccdc185058ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b8e0d3-fa86-4cad-9a49-ea2eeb989f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c9ced1-6b3b-427b-9812-f50c9100dfc5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e7de47-4ff3-44ca-adde-c6b0d9392615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b352470-4b09-48de-a1b1-689fab21ed2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae6d3b1-64c0-495b-b8d3-9427797a9639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d8c7d4-0523-4358-8009-57dc8bf736fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de901d3-b827-4a42-b1e4-0238762424d3",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c340ca-47f0-44eb-932b-97ca6a9ce3d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e815e3-bf5a-4440-9d18-8ced0596f195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4aed4d5-567b-4b40-a37e-e01a138677d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65957f30-de7d-4d50-97b8-e68eb39924a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f573bbf0-c522-4244-9bb1-0c49cec28a25",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166d07f6-dbb2-4fc3-8d8b-68d933d24fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d78679e0-ce57-4ddf-931e-b9e886740316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "803779e4-a62b-404f-bf22-4e2495cec972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e889524f-ce6f-4cfc-a3bf-ecd2ae503523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9020a869-d377-4265-a99d-21917249016d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8afdda-bc97-463d-a527-a26ac79cc469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545c0ac4-bb85-4598-b06e-12241988280b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6086412-a609-465e-afac-d84811effde9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8921242b-2e88-4583-a4a1-f554f8324e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751d0dd7-3d43-453f-bbf7-e2f5b9fc37ac",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aca984a-11d2-4f4c-8fea-85b641cdb2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c6ca6e-787b-4291-bdb6-00c4bd807db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed71a24-3a15-42ab-ad77-7ba01f65c538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed73bbb-1c5a-42ee-9bc0-2d27317a1969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c150de-1dae-4b19-b4d0-cbdbbc3199bb",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceede75f-4b32-46a2-a597-d12e5b956ca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13fb4790-4868-4e1d-b9e7-45db9f40f725"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1f269b-da0f-45b0-850d-5efb6321b2b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d6884f8-b586-4ca6-88db-f6363240f6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414231f7-0667-4610-af6d-492edaa0fdd0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3a5794-9b71-4e0b-8013-b565e33fe337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7069b1b-46f6-4ba4-8c5c-85cf1b04cfa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6232b65c-aa6d-4a30-9f01-a3b08a616cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60655bd6-3a4d-477b-8558-a53b507a5abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82246848-79c8-40a7-ba11-3a327d7a78ce",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9d9e7a-3b52-4343-9126-8b06dede0802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "046ad715-2724-4bda-9ca0-554531d90827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0795a18e-86e9-463f-bea3-c47a2c7c960c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "821ddb66-8f60-4254-9fcd-163b08686b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609813c6-d048-4711-b78f-3a07d37834e0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11515c31-92a7-4011-8fe6-99d6622b074d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b0fcf16-d789-4147-b776-90f05007aa4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9597fd05-6f51-4ff0-9b44-e3d39e9607e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c459856-2c8a-4dd3-9f79-66e640c33017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d284e8-1cff-47a2-b8f0-9245eb7a76eb",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4125e2-31e1-47ee-a0d3-46e5b785b71b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3609e168-1226-4180-8065-e7a40f8de3d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f906fc8-4f46-48cd-b4e7-0e3f39d030a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c68a99e-0328-49b4-b9bf-728dfe16ec4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0395d31f-62aa-4841-9197-48a7a04ee597",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24cc31a-0f01-498c-a6dc-86a67f35eb2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f13d362f-c4d7-4318-add9-f6341d248c6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e4a11b-b2a8-4cc5-8515-d3a0a8a0948a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81ddf4d2-90af-4cb8-bf64-c0a6c44081aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4613859a-942c-4408-b617-97aaa70b8e77",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a9d588-0666-4eda-ad1c-60b0fe949264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "100b63fc-27dc-447c-b96e-e1ac6b73dd86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cab1fa1-84b2-4cfb-aa34-25ff28425c0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501070b6-8d26-4d33-945d-0e04deaa4761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806dd2fa-17ed-4bd9-b5d6-ecff1787687f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6052b87c-a96d-4689-85a7-6dc72718340d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e40acf39-3bab-41fd-9655-fac687f0028c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "433b762d-8708-41e7-af28-4fc88a763c0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374d8c88-ddfc-4a44-ab09-b7090b4f9846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c602c2e3-3370-44ad-8f24-915e236c9ffa",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b2d13df-37c6-4245-a427-47e080162830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e2b8925-298e-4839-8368-3ef269cbc6b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57fb050-f395-4e56-a6ee-bde1703eb091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f286f03f-a44b-4f98-ac1b-2d4745da376f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294f6cfe-554e-4375-b7bd-90b740f9cecd",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06394dd-4297-4fb5-80eb-c755514a52f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4eb301-8a07-4d49-93c0-5ab1f6b2cd6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "354334d9-95d3-454f-b94d-3e9f2f7734d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5970069c-c382-4dd9-a76f-4adbe4ab5272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe0ef3b-db94-4e6c-882f-52cd756ee878",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33559cd-2f86-4e51-95d1-8249599fcd08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a80743-2c1c-4df4-9abf-b2c3ceaf69ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "621126b3-e108-4f38-879d-e011ce113875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efcd0f83-3829-4d85-9ea2-e7c63757ea22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ef8159-ece6-42ae-910f-7399603c6505",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51dc8e26-a00f-4447-b015-7de2b827aa1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a6ba143-7f75-4b10-bfe9-37f9b45536aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d975a44-dc9e-4432-972a-a36d9d75e103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b29b9b91-403f-4d93-99ed-bf2acb8f84c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e43015-d176-46b1-b09d-db75569e3453",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83afc04-5a36-4456-b4ac-5b17edf6f351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44cd19a9-5194-46e5-a016-5c8cd3ea9677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a018a6d5-37a3-4568-b9eb-7d048cf7c5fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b243d122-2dc2-4592-9fad-dc514eb43ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722e8bbe-c0d3-43af-8ccf-612b0ea39e1d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8763e2ff-a74f-4077-97fd-42925a3425d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56061a37-b80a-4986-b05d-97669e990fed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48dacea-0478-4cf5-95db-25817dffa6fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9846f2c-806f-4c23-bd35-a25a500f676f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a3dc23-5434-4748-9ce4-a05e8de6a4ed",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8971e32a-38c2-4b04-a05b-e5b1eed16c5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c28bd3be-87f4-475d-bcbf-5a38fd115c56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a55c97-c3c0-42ac-aad3-997a3c3f2f4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48886072-d565-4e40-89ed-b536e68385aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf6b947-2821-4575-84c2-9c87c72d6843",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae4a08c-9d03-409e-822e-17118e96217a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3042a4a-ba0f-44a3-a019-86331ae8426a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd04af3-2c0b-49a6-99a6-fbbf541412ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24294e58-bbe4-4c93-9e7d-38d76448e844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a6eb2f-92f1-43de-aaf7-1938efe4afbd",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba3cd39-a712-46f4-a6aa-36ffe0f42e6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a679cb0-2366-4459-851f-b5089e321910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e28cb62-3164-4841-90d6-3af686ad24b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dccf904-fa7d-4944-980c-92d66a3cf66b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866089df-9787-4f64-bb8d-e1421e27d0d9",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44829c16-f79c-4001-8766-84a9e0710ff9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e78ac00-d177-4f18-b4a0-7152a9b64368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a05318-8f06-498c-af79-0b73d19ce1e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97079cf3-a205-4c3e-ba09-fca02516e7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f13f18-6681-41a8-aa35-674862b61307",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e759e7be-d8b9-4b6f-815f-e5f4e8eca020",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "586e8e40-e0ed-4c95-9d90-84a43b8ab75d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc09f8c9-80f5-42f9-8d29-2fe785128c34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c225c6f-7a5d-441c-983b-c343dc52930a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2f8d9c-9d18-411f-9154-b03afc0227ec",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe2e6e9-cc82-4748-a5ba-e25481b03194",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f21c6d7-6bf6-490e-bf23-0728364e01e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a35f284-96f2-4a01-8d5d-67088ee9b021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dbcbfbc-14c7-4aa2-8e81-a94e62efec1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7be640-98e3-43c7-ba92-2228e144cca5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110ba117-fcf2-47e4-8dd6-d0f05255081c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d407bfd-b2c0-4040-93bf-c5b81d691d0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e0f780-06aa-47da-b0e8-91d6c5c0bdf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e788ae-7e69-41b9-995c-f06c1757500b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab41ace-3d78-440a-b02c-fb2c51a82e44",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047e7456-62fb-46aa-b3a3-469bcc15ce58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ff80825-651f-406d-8a99-bf894a954894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7d6755-7964-4e5c-a96d-1d0366f76162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1392713-8260-49af-9fef-a272fb6bdc73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338b1818-abff-46bf-b451-98d9a1f9025c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f6151f-0742-440e-b7ff-d7b70ced437a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9a3de56-b7d8-45ce-a58e-c4472debf722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c573564-0a35-4620-a10e-440dc3aa4f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b421777-af96-4031-a779-ecd0c782ce83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7734774-98e8-414e-b2cc-d47095fd7429",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a548662-bbb7-4747-ae33-7bc12ddda401",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3c639c7-4795-40db-a606-626d043d4589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db267c5-4605-4d50-bbb7-c8bac3121f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "613fc702-fa11-426a-b538-865e0e2f0f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38edbec-3a90-40d7-9164-0c853a670c4b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d300f2c-d0df-4724-bab3-b9b653a5af15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "353e58b0-e22e-4ddc-9f41-7520b070ec38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ee0206-8f91-40ee-837c-4d6577b2dd1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a1d014-c68f-4aee-a5a6-cac8c8457fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5abd665-f710-45fc-9f9f-ff22892233d2",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba57977e-e008-4706-bd0b-40e63f17af50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70a53bbb-5925-4a39-860d-25e1a2f2fdf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28dcdb2c-43d3-4b25-9b1d-61b8537d358c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ae851e-17e7-424a-8aee-b3a3e959ff06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738146b3-8590-44cb-9882-0e1241ff7ccb",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2252235-a775-465e-bda7-313c53f7ba03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42884ba7-574f-4a37-9fbe-c93588b97b1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe8252e-cec4-433c-88e7-76e368f82f4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b782415-cdd0-4ffe-9e83-06ee5cb84e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ecf6e3-73b0-4d26-acd4-fa4d0a04145a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa70ea7-a5f1-4b53-878e-75b96fde1daf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03aa995e-4fa1-4d5c-aa99-9b9462bb4318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd0679a-5684-4bca-923e-b13c272154dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1681405-65db-4a28-93fa-69ec78be0471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06a96a3-fb2c-40b3-8ed0-2ffa9ec05fe0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbc2f20-148a-4499-9ee6-9e5707e16eb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1512d952-cca2-4bb9-9217-40b983082dbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acdbad6a-1b32-485c-9d9f-c2257f544414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "355a866d-0c92-4484-9a57-8d67de347e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347485fb-430c-4e1e-901d-0646452e0122",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14796356-682e-4357-bf59-76cb4eb70436",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fdf1229-1ede-4478-a6b3-817affa8cf84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded7bf1e-1d43-4815-8c8f-5dc7b6b4a162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e133b8dc-87e0-4dea-9e27-829dcfc81055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33ac536-ecba-4e76-bc90-cfeec93457f7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6e5b41-a928-4c95-9038-c25c48348470",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6fa7232-073e-45de-a0c2-e29bea67fcf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "455a6602-6656-4519-9e0b-b6e50fc1b9ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e80074ec-4d27-497d-b192-4e79d158fc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1ad72a-70ad-49b7-b8ce-a9e9ac204a5c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f24d3c-f95f-41e7-af73-4bb2ad952369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a187c64-71e4-453d-9ce3-f3ed8f570db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e2023d-0f96-4a1d-a019-f1043e943270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0e522e-9dc0-4dca-bf16-5d70de444e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104635d8-f815-411d-bb89-4c0b31cd625d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6aa952-4d84-409e-a438-5701afc9733e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61f88f74-67df-4c1b-be33-f8de78727c94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13d8eb2-bf4b-40d9-baa9-6328100c228a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "991d5118-0c29-4d28-9341-f3a4fecec5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7a2ea7-0a81-4fb7-93db-3dd4ab999d76",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708e2779-ad41-4d5b-8f28-3ffaaac07889",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc2e4119-ab3d-40a2-887f-2f2e2c182040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed7f6ae-fcef-4473-b164-c69cf39c7b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3963db9-9149-460e-81c5-a078eac37c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4c64bf-3c1f-463d-a058-748749023847",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3f8212-a8e3-4de6-b4a2-39a3a7e52c0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f577ba63-4bd7-4c6f-9d65-b97416b2cd59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5697d33e-ffba-41d0-95ca-5d40bdcfaae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a829eb23-5229-41f1-a93c-d6915bf3dfff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca478809-42dd-4eb1-9225-7936c485e24d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e08ed5-5851-411c-a7da-c841d5ddbb3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53c179e3-06ee-48be-900b-20e4cfe6fe9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "218f80b4-76a6-474e-8cf4-8b5bb9cbef21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbf8164e-d197-4abe-a634-73b560f2dace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79a7b85-cbd6-4288-9202-d99009b89300",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac17ad9-9866-4dae-8084-40c9861a099c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b916ba9-99e3-4341-a950-3927a582e064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bf31c1-09ab-48d4-a3d4-c2962b934a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8222ede-dceb-447d-8922-4311aaace61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef0712e-7577-41ed-b5ff-ddd586614755",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13c4088-9c42-4885-a47e-183647fb9f14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c62552c6-fdad-47cf-b3a8-3bec93c23abe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c068c0b7-363a-45ce-972b-f4ae86cde018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be08d0d-3c15-4fe8-9e25-546d7ca45ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9da2f9-18cf-4249-a95a-9e5d26ea0871",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b31c41c-7476-4d9f-8ff0-ed7e4dee123f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52d89367-7673-4d19-b601-47be68e6b3e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e0307b-96f1-4c46-8e77-78effd7f5dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f180b9a-281a-4c80-98b1-ac7fd2a8f366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701fd7d5-c199-44cf-b935-26b6c7e0fdab",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59cea73e-430b-4fb8-91a4-23361629afe5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71599a3c-ba1d-4a9a-abcf-0d3cdb0e0b0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbf4641-b9e8-4d41-80d2-413f0be38cfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdbd330d-d3c5-4682-9571-48c2fa828034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7052fe2d-d92f-406c-aaa0-cf050d05f1c1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88875add-7f21-46da-aaf1-7fd4404f5bc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ae612b2-9683-4505-bfca-034586aec2b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "613622f2-0233-43bb-9dde-d25b4329aa61",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f33478-143f-46a5-9888-dc73a214de27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dcda501-5c9c-4b4e-a253-a14313e570c2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc79082-d431-4021-af8b-439cc2c25663",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a468bb1-58c6-495d-84de-045cb4f43363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb593ea-316a-4b50-ae2f-e978e3a13221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0adb684-f10e-4cd9-b93e-61e2590d04ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0215dce-b319-401b-937f-4002b22965a4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02d2d43-66d7-494d-961c-36e0c7f4ad76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "465f5af0-f069-4294-a9ac-e9b1305b23bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d351cb1f-2184-4413-9492-86ceb8de6888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6706416b-4399-4d7b-a74e-724bffb2d479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4556373e-71f9-4f8b-b05a-601b71dac58f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75206b6d-93ae-499f-bb3c-35a3ceb6774f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e8b8a6d-69f4-4517-b3a9-9c3ee1707330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0c192d-d0d1-4280-b921-478d6d080612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75327ecc-7a0f-4fc4-917d-8f1ee93495f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534eb843-46e6-4e82-88f7-162809d5dc4d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d617fe51-f172-40e4-bb94-3ca6ade11b5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9996c839-8d23-4b02-a1c2-12bc44ae6990"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c75e2f2-31c5-4658-a1e4-17d6d8718c29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40b385d8-933a-464d-afc3-1389968dd178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9274cc-e96e-4d8e-b0e9-be20e9df5aae",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e17c53-f73d-4df1-927e-796b2813cdc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18200cce-b28d-44c5-9ce7-9acd302f83ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d658563-f353-4e73-ba1c-37d72562774a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ea415b-3508-4ade-8315-614c18d9d5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c09279-5925-416f-bd62-827ff02ead0f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753734f1-3c97-434e-af65-ff370dc49def",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45fec395-b0f6-4f45-8226-3e8f97d476fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c37ee2c-cfce-4965-9900-4c4e55b8af99",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c83ac32-9cc2-493a-aae7-315808d4ca5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1e5ea8-b623-45ef-8625-82e756ae91e3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74736820-fc3d-4b36-a48e-a0b74e80cb34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "008ec0b1-cdc6-4d7b-9c13-a9b56fa9bde1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6c3740-1167-4ee1-9b07-bc0219cf09a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe0fd872-1ad4-4516-9aab-976b0df6fc79"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1babf612-afbe-4462-aca1-c9f2e8c10bc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f206aef-0599-469a-a758-87ec377dc529"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2dc409d-06a4-4981-9ade-d2ad0b17a731",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "375cf2a1-4146-49db-b3f1-ec74d596af29"
                    }
                  }
                ]
              },
              {
                "id": "88854691-3bd7-49f3-9454-419ac3a43637",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5df6e93c-3b54-4415-933d-8fac91e2935e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4aae0b-edbd-4510-8006-8b2af9599fda",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "62935bab-b668-4a15-9986-aa7d7d9b9e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f313131-3764-42cf-a78e-18d548bc5c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a61fcf8-45df-40cd-bd20-2ed01667d66a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0cb61c82-79b5-4785-8840-d719927e7466",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f50a861d-103c-4bcc-9ebe-7559e7c15730"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "58dfabb7-f249-4ff7-85af-feba4f612c27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efb78bde-40f1-43ca-8513-65fb5c0729a5"
                    }
                  }
                ]
              },
              {
                "id": "a383306d-d8e0-4bb2-8cc4-2b3cc6c43859",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f543a9f8-6de6-42b2-870e-0abf277272ae",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717824f0-85f2-4ff3-91e2-c6dfef72789e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "958d88c5-847b-4457-b0d8-654808e4add2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b195b9f5-1731-49ef-a1f2-754abf1dc81e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2b89cae-f22b-4806-b02a-f7b2b71f9afb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "460ae13f-56db-49be-9d22-23221f12e766",
            "name": "Positive Testing",
            "item": [
              {
                "id": "258ddcde-53dd-45db-b087-5b9ec7060240",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddcb15c7-4687-4bf7-9465-0eada38ac5a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f830e034-a3eb-4489-99bf-67af8e924a64"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e79ccbd5-9e08-4f80-880f-41405e6c9e15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff1a9a9d-b158-433b-a28e-a8711e6ba4c2"
                    }
                  }
                ]
              },
              {
                "id": "9662a900-8e7e-4443-bd5f-10c502c54555",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcdd68ca-6ee0-4d8a-9b83-369b80ff458e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "06cbbabd-2df6-4f5a-b361-60833cd33062"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9963f71-19a2-4036-9a91-0c5180d0ee76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64dc22c6-a52d-4a85-a60c-667644d7a1df"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ae07743-e826-487b-add9-68808bd14478",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9179f7e6-c835-4e85-b2ba-a4faf96f5fa0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4dfab631-279d-433a-b015-fcb783104c6a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7067874-ce40-47d7-bab9-e72e61a8a2eb"
            }
          }
        ]
      },
      {
        "id": "63a119fb-785f-4524-a464-514905cb9098",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "677395d9-f19a-408a-b96e-f1cf15659858",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77fbf3d6-3e59-4d93-ab05-c98ab8ce7d10",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f05a868-b445-4676-a123-37a8394c41ab",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862f85bb-05c5-4c71-bbf9-de6c406ad473",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "56161124-b474-4947-9641-1f7b34316a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1365b01a-9aea-4525-89ee-6747669d7d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb395dab-bbdf-4d91-b0c3-2f4d168dc3c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47901553-dd04-42ca-a70f-d932222c0e17",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abc53565-a89a-4c19-9f74-e4778528816c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b329546-a509-4ad8-b769-a0e003742e71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86f055b1-c070-465f-b048-66331f56991d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85db2f70-e573-42c2-8314-83fb76fa9c92",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cb78940f-5874-44c9-87d3-1883c0325514"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac379117-c85d-491d-96e6-424b7bbd4a69",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "61fe7bb7-10d4-4208-8566-c55d137d444e"
            }
          }
        ]
      },
      {
        "id": "3197d55c-06e5-4e0b-8aea-00c10376eef3",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6f231517-8f5c-41df-a3e6-4334f30b0a39",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5eac5c1c-afbe-45f2-b35b-444b560ea9b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bbf10e79-092b-4205-88ca-5150390321a1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f820c8b-25d3-4f3f-8ca8-a01e7699a375",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9adbc11f-0810-4b25-a659-d095053b0879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b29c72-cd0a-4d72-9372-9450a8209177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f773f497-c7e9-474e-93b1-f6a98c886959"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "124cbd75-01ba-4248-a777-e6c543f882a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed93378f-b950-418a-8efc-96dc0de08bad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f967f379-bf10-4ad4-9160-8a5fb7cbfd59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be025dfb-d14d-4448-9971-149532bc1e5f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c24f6a8-37a2-4584-9e05-5d13fe7f9f33",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e8510222-63ac-4db6-9fc7-7fddbd9adc0a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be0993be-76ab-4870-bbe0-da4616c5ae26",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "689b24b4-6ec3-4ae7-83a5-79ec8495f16d"
            }
          }
        ]
      },
      {
        "id": "a1c65e58-1191-4af2-8192-97a8e0e273f9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e5e3170e-1fa0-483e-9016-046c9ea607c1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a627827-bdb1-4e7a-96b9-d03b1fe6d512",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "88ecf64b-12da-4304-a98c-42db06fbc276",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15185e74-2d79-41ce-8e61-389ad26a89fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61ffc27a-2568-40fe-a03f-27d7da6c2a3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fabbfc2-ff1c-4052-9850-cde23ddb2022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e674112d-899f-42b7-ab66-ccc0bc9cee65"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f79dd11-106e-4525-9744-a87ce04dbd69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f35a4f60-a239-4554-92e1-32b89fa098b4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d028fc67-68e8-48a9-a771-2a4bda2a277f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "731dfae2-7635-4c5c-ad42-dad172ea1b14"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "65fa3c62-3124-4449-8c81-800125b077e9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ed707a53-453a-4f39-bea9-23154113555e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "704b629a-3544-4034-87a4-27ef7688f3c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5dba651-9ea3-4ffe-a672-7f1298b867ac"
            }
          }
        ]
      },
      {
        "id": "9fadcfd0-8c1f-45d4-9b84-24ea899c44f2",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f426359-4346-4867-8855-830970f77e3b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0bed9115-945a-4e84-b8b7-f2900b9223f3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "93616390-7691-4318-82a1-57dd0f19712c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ffe01e3-12ed-4a59-a2ce-3cb1e67e7785",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "869d6cef-8c8f-4a14-b969-25722f252ea8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 56.32982456140348,
      "responseMin": 5,
      "responseMax": 719,
      "responseSd": 72.14184362575989,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1702600585256,
      "completed": 1702600610512
    },
    "executions": [
      {
        "id": "0b06dfca-98bc-4fcc-ab65-845874c0202e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b72a7be1-a8f4-4125-aa19-8dea1d5f8378",
          "httpRequestId": "04d1e2ad-df15-4806-9aef-6594bd0f5e0a"
        },
        "item": {
          "id": "0b06dfca-98bc-4fcc-ab65-845874c0202e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "abc6368c-f8df-4d5b-89e8-230f2f71777c",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 0
        }
      },
      {
        "id": "e8a8ab4c-db36-4137-aefa-e2d1c2e8c2bb",
        "cursor": {
          "ref": "c1c018d9-c57e-4253-a084-054b41076fd7",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3a6ea568-b8e5-4ec9-b5e1-dea427ed6074"
        },
        "item": {
          "id": "e8a8ab4c-db36-4137-aefa-e2d1c2e8c2bb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2b58fac9-ed30-4d0f-8c0c-9a78561a1e93",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "0f3f4595-2eb7-45c9-9c2f-e4486651257c",
        "cursor": {
          "ref": "a4ed3352-be65-4441-91ae-dcf405202a53",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f851d937-89cc-4e77-a9e1-bffcf47899d4"
        },
        "item": {
          "id": "0f3f4595-2eb7-45c9-9c2f-e4486651257c",
          "name": "did_json"
        },
        "response": {
          "id": "9d3e53cb-f9f4-4c03-aaf4-337eab847f33",
          "status": "OK",
          "code": 200,
          "responseTime": 200,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba9a0bc-6e83-4a60-9bc6-6b7624494f1d",
        "cursor": {
          "ref": "1576c3d2-d78a-4ab5-9272-53faa969142f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8852d5e7-f3e4-4420-baed-07079c170984"
        },
        "item": {
          "id": "3ba9a0bc-6e83-4a60-9bc6-6b7624494f1d",
          "name": "did:invalid"
        },
        "response": {
          "id": "df3edb7d-deda-45d3-a24d-5ffeb3ab49ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba9a0bc-6e83-4a60-9bc6-6b7624494f1d",
        "cursor": {
          "ref": "1576c3d2-d78a-4ab5-9272-53faa969142f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8852d5e7-f3e4-4420-baed-07079c170984"
        },
        "item": {
          "id": "3ba9a0bc-6e83-4a60-9bc6-6b7624494f1d",
          "name": "did:invalid"
        },
        "response": {
          "id": "df3edb7d-deda-45d3-a24d-5ffeb3ab49ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d03b21d-0ba2-40ee-863f-1b7fc2888e24",
        "cursor": {
          "ref": "ea08ed3c-02aa-4e34-a773-c0204c83b2bc",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "27db67e8-0058-4378-a9a1-0f12266544eb"
        },
        "item": {
          "id": "8d03b21d-0ba2-40ee-863f-1b7fc2888e24",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5d6ec9e5-1087-4653-bd4d-be6375ae8722",
          "status": "Not Found",
          "code": 404,
          "responseTime": 90,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb3c07c-2a96-4a8e-8246-6637ed2dfae0",
        "cursor": {
          "ref": "2262356e-fbc6-4d77-ab0f-3834310f45af",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0d1c305d-1328-497c-8964-d4fee95bc772"
        },
        "item": {
          "id": "bfb3c07c-2a96-4a8e-8246-6637ed2dfae0",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0794fb9d-ed39-494a-9de7-d59161067e86",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d1ccd71-5ea5-49c1-a705-a30bf13932dd",
        "cursor": {
          "ref": "bddba960-b351-4f04-b893-72c28f72f012",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "372e0085-88cd-4aa4-8ec8-2f93c34df8cb"
        },
        "item": {
          "id": "7d1ccd71-5ea5-49c1-a705-a30bf13932dd",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bda30dfe-7e80-4f5a-a417-26d5fc281479",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b6e378-8246-436d-b479-3732ecdf5c75",
        "cursor": {
          "ref": "20a75fcd-173a-45e9-966d-b79d56428b3d",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "68025013-4a4d-48da-a7f7-6d561a031e95"
        },
        "item": {
          "id": "58b6e378-8246-436d-b479-3732ecdf5c75",
          "name": "identifiers"
        },
        "response": {
          "id": "9f891791-da79-4220-911e-8a1a95d18b24",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15ba606-2d7c-415f-8716-b059dbe1a54c",
        "cursor": {
          "ref": "1fd31491-af1d-413b-ab94-fcd1a27d14f8",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "478ff0fa-bc08-4299-9361-7da4ba629d60"
        },
        "item": {
          "id": "e15ba606-2d7c-415f-8716-b059dbe1a54c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6809db23-213f-4bf1-9947-eabba6136b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f061ec27-0acb-4500-9bc2-53fc3a7432a8",
        "cursor": {
          "ref": "e7a4909a-9fdb-41fc-9211-e15cfec5364f",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "453b75f4-ff61-4834-8612-051a8fac57b7"
        },
        "item": {
          "id": "f061ec27-0acb-4500-9bc2-53fc3a7432a8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "47ce5049-336b-4a71-9ee6-b0176869d9ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52050b0f-9c45-4cb8-9b38-d1feeeaaba60",
        "cursor": {
          "ref": "b9fb8c07-5b89-4c0b-ac03-94d413b918b1",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "efb7660d-aadc-44c5-a075-4c47c29a0450"
        },
        "item": {
          "id": "52050b0f-9c45-4cb8-9b38-d1feeeaaba60",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "91940656-1137-47d0-961b-cbf7eb17fba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9f213d-00aa-4f54-9ef2-87164b25c368",
        "cursor": {
          "ref": "1ea97d60-db94-408a-87d0-ddbc38cd2858",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "20f82ca0-8edb-4a4e-9182-83c123037000"
        },
        "item": {
          "id": "4f9f213d-00aa-4f54-9ef2-87164b25c368",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d7475ce4-c10d-4802-993a-e29a273ef3c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7527b02-6eae-477a-adea-05c6505e831b",
        "cursor": {
          "ref": "82f33d2d-0c16-49eb-bd77-af05370dd6f9",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "38347034-ce3a-468d-b845-a5c8dae205bb"
        },
        "item": {
          "id": "b7527b02-6eae-477a-adea-05c6505e831b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "93820fb4-2165-4e56-975d-087f3ef66cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a698acd-5bdd-4a8c-a59a-b0cf24a31ad4",
        "cursor": {
          "ref": "4943bcc6-daca-4e89-b128-3c0b288431e1",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bb333aa0-3efb-4baf-8d47-d37fe42917e2"
        },
        "item": {
          "id": "9a698acd-5bdd-4a8c-a59a-b0cf24a31ad4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "54329b28-2040-4ee3-b9a1-5cd7dc31aa8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d5cba04-90ad-40d7-9e08-2570dbb37a11",
        "cursor": {
          "ref": "ffa267ad-7510-4cb3-a0de-ad28350f1d8d",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "62081feb-d476-48d8-bef2-83cc300963e4"
        },
        "item": {
          "id": "2d5cba04-90ad-40d7-9e08-2570dbb37a11",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f8f5d6fe-f087-48fc-be71-4f650d88ed2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0606d44c-c235-46e9-9f14-b5746005fa47",
        "cursor": {
          "ref": "e66ae93d-aa40-4768-819f-1a8d2a2c4723",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2cfbee3e-7c4b-428a-b563-6365f52c9220"
        },
        "item": {
          "id": "0606d44c-c235-46e9-9f14-b5746005fa47",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "363c3ffa-6761-4439-a0c4-bdf2ea06b4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5444f54-b1d2-4b67-94e0-9a998fdcae2f",
        "cursor": {
          "ref": "6561657a-7f17-4f9a-9ee7-212be96ace39",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bc9d9f3b-37d1-4277-a0a4-4d9c0bde9ac8"
        },
        "item": {
          "id": "b5444f54-b1d2-4b67-94e0-9a998fdcae2f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2f843200-2a55-48b3-a580-de38ef964bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d32c92a-143a-477f-ba94-991d0c6cf18e",
        "cursor": {
          "ref": "d25142f9-dbe2-4308-bb2b-09cd420d7021",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fdaa7527-9440-432e-a259-5324a4a09e8b"
        },
        "item": {
          "id": "7d32c92a-143a-477f-ba94-991d0c6cf18e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2bc00f31-ffe3-47b9-bcf6-4f428dfd5d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5e4cab-c5fe-4a00-b731-fbf4d5031fd3",
        "cursor": {
          "ref": "566158d6-4dcb-4665-9d99-cf3b704de4eb",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a5d3bdde-d9c9-414d-82ea-429bf87b7587"
        },
        "item": {
          "id": "db5e4cab-c5fe-4a00-b731-fbf4d5031fd3",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "dac40705-adad-4054-ac09-e0b93449c3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322581ee-258d-4bcc-8525-51b4a7990b8a",
        "cursor": {
          "ref": "46ecb2ea-17bb-42cf-aa1e-aa2bd2c4844c",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "88c5ebe6-776a-40a5-b41d-4b7c3ea3c61b"
        },
        "item": {
          "id": "322581ee-258d-4bcc-8525-51b4a7990b8a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1a273924-9e4b-4f23-a799-76003e095c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac37e212-db1d-4d02-bd4f-ecec346dd597",
        "cursor": {
          "ref": "39abfd54-fe43-407e-b7f8-903da3008a2f",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7884b89e-95f7-4b38-9764-d398e07c393a"
        },
        "item": {
          "id": "ac37e212-db1d-4d02-bd4f-ecec346dd597",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9da0ac1c-e148-4300-ad24-26f6497b1739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d53f16-02ca-4649-a9aa-d612b8dd081b",
        "cursor": {
          "ref": "491eb137-cfe8-479c-97d3-d0374f8544cd",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "537322b1-65c6-4f1f-9ce1-ab87ca1befc0"
        },
        "item": {
          "id": "33d53f16-02ca-4649-a9aa-d612b8dd081b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "580d7df1-3ffa-43d4-b5cb-dbb8b3f7f11b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b5ff14-9222-487b-a8de-4fe9eb5c817f",
        "cursor": {
          "ref": "bcec9874-4d83-40fc-b9d4-7267f9941ab6",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e2bb445b-bd50-4ae7-93a9-3abd10425900"
        },
        "item": {
          "id": "68b5ff14-9222-487b-a8de-4fe9eb5c817f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "91ffe70b-c97a-480b-8947-1e1ab8f427b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1337715d-855f-4730-b614-f463b6483285",
        "cursor": {
          "ref": "607f62d9-7ebb-49e5-9651-ea6358c185c1",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ed8a6d6c-37d6-4e83-b127-1d4811896257"
        },
        "item": {
          "id": "1337715d-855f-4730-b614-f463b6483285",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "eb1edaa0-93d7-4275-959a-c3602add28ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b0511b-7a55-445b-95b6-0da4c3f20abb",
        "cursor": {
          "ref": "7d0995d8-05be-483e-bdfc-57d0c748a31f",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b04a2cb5-74c9-41b5-ab99-bab633537a6d"
        },
        "item": {
          "id": "e2b0511b-7a55-445b-95b6-0da4c3f20abb",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a8541a0a-1e5f-4154-ba9d-f2a93b4b65e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca617ff2-1bcb-4f83-9c9b-2721f8a10a65",
        "cursor": {
          "ref": "7e73fd49-d7c2-4e68-9b14-4b01ba8b7ac0",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2ba9ed90-1996-4741-8624-e76ac4d7aed3"
        },
        "item": {
          "id": "ca617ff2-1bcb-4f83-9c9b-2721f8a10a65",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5136aad0-54ad-4c47-b6bd-6a97f50fe6bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad145a8a-4623-48de-8122-2c99019ad2f2",
        "cursor": {
          "ref": "f6beae2c-7c10-47ce-b6d0-27a1e8b994a3",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ce38a35b-048c-4ebd-bbc0-9afb8b94ce9b"
        },
        "item": {
          "id": "ad145a8a-4623-48de-8122-2c99019ad2f2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "37f64bf5-864e-43e9-959a-9cae4f620469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32bd1c2b-1397-4007-a47a-375992cfa9d4",
        "cursor": {
          "ref": "2f880b17-3a30-4c51-a5ca-31eba4273ba3",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9b04da35-2c51-4156-8d59-1e3764bb1a3f"
        },
        "item": {
          "id": "32bd1c2b-1397-4007-a47a-375992cfa9d4",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "cdc070fc-c040-4015-9588-b73b2272abd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61064fc4-9148-4317-9269-20728afbc92a",
        "cursor": {
          "ref": "73979e79-ab7d-44d3-bfe9-35b8e6398803",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c6438e2d-1532-4593-a32b-194c62becdfb"
        },
        "item": {
          "id": "61064fc4-9148-4317-9269-20728afbc92a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9503c5e0-4653-4655-a811-35945cc31ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29397493-fdf8-4212-b963-ffb878373df8",
        "cursor": {
          "ref": "f3c302b2-1c44-4393-afa2-cebcbf010bec",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e0d6dd07-1a88-4ad4-aa5f-f2c48ac17b1b"
        },
        "item": {
          "id": "29397493-fdf8-4212-b963-ffb878373df8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ad5cd670-af28-4755-b6cb-af9bc4d0baae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68773f59-01e9-4423-abce-441d18af24c4",
        "cursor": {
          "ref": "53f9432f-23e4-44e4-8c10-674ff4cb883d",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "fac47671-4c47-4e88-92e8-7d3d4e41522c"
        },
        "item": {
          "id": "68773f59-01e9-4423-abce-441d18af24c4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e8be1410-3ce8-4923-90f2-78ce16cbe529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8276d77e-6bd9-409d-bdf7-1325486ca5fa",
        "cursor": {
          "ref": "7a0d6888-8594-4aca-bb92-9baf5ef6b430",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fb590b03-77b5-4697-9b7c-6d7336bc852a"
        },
        "item": {
          "id": "8276d77e-6bd9-409d-bdf7-1325486ca5fa",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b1020b82-6f0a-4058-8221-829a52beb98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6249766a-1319-4d31-a26f-420da384db00",
        "cursor": {
          "ref": "f61e5098-7ad8-4b9e-8586-72ca30510346",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "123a0033-5024-46e2-b0da-b55fa44c1fc2"
        },
        "item": {
          "id": "6249766a-1319-4d31-a26f-420da384db00",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bdc35611-60c7-48b3-a701-f24f92a46aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aead77c-b917-41ea-8bfe-30b62b519676",
        "cursor": {
          "ref": "b51de52c-f21d-4335-a656-0e675daead6a",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "de27f0a7-87bb-49d2-ac3b-db467fc50a56"
        },
        "item": {
          "id": "8aead77c-b917-41ea-8bfe-30b62b519676",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3af36a18-b6ce-4edf-a025-518d9ff3154b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b75049-2090-47bc-b478-a60dc21768a7",
        "cursor": {
          "ref": "db770b82-5226-468c-8c98-6d2a56106e46",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0dcf5e7f-92ff-407b-b6c8-379d57231c82"
        },
        "item": {
          "id": "c3b75049-2090-47bc-b478-a60dc21768a7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7bc7db6f-d3f2-4799-9ba5-c89c6e37afae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59adda43-b7fc-4e05-a4ac-289e295959c6",
        "cursor": {
          "ref": "b11470a7-2955-4bdc-b116-05d78be2ba41",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9584b673-afd5-4877-96e2-9511f0c68d72"
        },
        "item": {
          "id": "59adda43-b7fc-4e05-a4ac-289e295959c6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "282a64d5-f33a-4023-9a9c-78b37397e1c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e17e6d3-2873-4388-93a0-35d4eecb14ca",
        "cursor": {
          "ref": "82961dcb-67ba-44d9-a9b2-f881a5f30359",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "50b70493-a14f-4aa9-9a0f-4fa179af864c"
        },
        "item": {
          "id": "7e17e6d3-2873-4388-93a0-35d4eecb14ca",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1fbef4fe-ed22-4bcb-bd36-e78e29d94c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e7e079-f0a9-4832-b82f-2ec5830cbfac",
        "cursor": {
          "ref": "3378bfd8-8b44-4f23-b0b1-3376b0d50e3c",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3b92deda-785f-4d16-b8cf-fcbdf1b80a01"
        },
        "item": {
          "id": "c3e7e079-f0a9-4832-b82f-2ec5830cbfac",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4f0460fd-817f-4700-8f05-c244088c6dc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da05e3c-6b16-4bd7-9a2c-ad7669a8aafe",
        "cursor": {
          "ref": "1beb79dc-813a-457d-8b61-f01d2b6e2f8c",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "583cdff2-dca7-46b0-b02b-6ba13a88fce7"
        },
        "item": {
          "id": "1da05e3c-6b16-4bd7-9a2c-ad7669a8aafe",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ec5f5585-456b-43d1-8b11-d33badcd8c49",
          "status": "Created",
          "code": 201,
          "responseTime": 719,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "06e1db61-e16d-4c21-ba01-6d8c99f944e3",
        "cursor": {
          "ref": "f40bc211-796c-4827-96a1-186c49ecd734",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3e3b5da7-2b90-4fda-a391-eefd2a62aecc"
        },
        "item": {
          "id": "06e1db61-e16d-4c21-ba01-6d8c99f944e3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "16e7b57d-013a-4e50-a8b6-73490dad3f91",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4c25b198-72be-4fa0-9074-1e74ff1563ab",
        "cursor": {
          "ref": "006ec65f-c09d-422b-b4ee-3e7865c576f3",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "07398f91-64b2-4c3e-a94b-9581abe1063d"
        },
        "item": {
          "id": "4c25b198-72be-4fa0-9074-1e74ff1563ab",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6f40ac4a-1597-446c-adc4-f2914f616b0d",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "19ee4072-7e62-4dcd-8e19-4303fcb3c53f",
        "cursor": {
          "ref": "5000062a-eb9e-484b-97d7-67fb47e7af75",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1aaf5137-b5a5-45fb-83ff-5a5457da0070"
        },
        "item": {
          "id": "19ee4072-7e62-4dcd-8e19-4303fcb3c53f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "71ff63d6-4f0a-41db-879e-c6e51a03d5c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c8b329-68f8-447e-b759-887e34b60c47",
        "cursor": {
          "ref": "b4815967-6085-4c85-9823-a3d3b845927e",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "40bc17e8-683e-47b5-934b-063e39787ea4"
        },
        "item": {
          "id": "76c8b329-68f8-447e-b759-887e34b60c47",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "101cefee-55bc-4af2-aaa0-849462400808",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1bf43aaa-9d3b-4bc1-8899-59ad635a2d84",
        "cursor": {
          "ref": "dff664b5-5be9-4337-aefc-91804fd3f56b",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "466b0f27-1d40-4a75-a7c6-2c9757fea243"
        },
        "item": {
          "id": "1bf43aaa-9d3b-4bc1-8899-59ad635a2d84",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d6062dba-5e75-48b5-8748-9e505d08ecc2",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "042f1903-e2f9-4e59-98f1-93f44f009c28",
        "cursor": {
          "ref": "416a43d9-0d18-4e06-875e-d73b1752ad25",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d2126a8e-1261-49be-8c5c-556f234ec83b"
        },
        "item": {
          "id": "042f1903-e2f9-4e59-98f1-93f44f009c28",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7493a0fe-e6f5-4467-93da-8c5f66028c9b",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "16e8093b-923f-4bdd-b764-c8d32f0ef017",
        "cursor": {
          "ref": "3b7da298-e726-48ec-aa5c-d415bd38e7e4",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c2481c75-8d77-4213-bd5d-baf7fdad6f35"
        },
        "item": {
          "id": "16e8093b-923f-4bdd-b764-c8d32f0ef017",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8417f862-4c30-47df-9705-2337d190f4bd",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "33dcef43-9c22-4c7a-a108-5370359a7d7e",
        "cursor": {
          "ref": "990c5da3-0d20-4df4-8960-98a1a583621b",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a43a6a79-6ace-47f7-9050-be6423b31b72"
        },
        "item": {
          "id": "33dcef43-9c22-4c7a-a108-5370359a7d7e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2e6d4d38-c2f5-4331-8d9e-1ad5f23a6714",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "45fbb942-2556-47ae-8733-390aafd226e1",
        "cursor": {
          "ref": "8d2f3271-c7ee-44b5-a88e-1023694a9182",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b074ddf3-4b90-40ed-922c-535babf676bd"
        },
        "item": {
          "id": "45fbb942-2556-47ae-8733-390aafd226e1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "776ca47c-2fab-4f62-94ee-cec225875aa3",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "69f5e57d-1e58-4ef6-a16b-5419f935384d",
        "cursor": {
          "ref": "5422de09-4868-4db5-aaf0-37debfd6c273",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "170228b0-98fd-4c73-9bd9-0aa45f51d88c"
        },
        "item": {
          "id": "69f5e57d-1e58-4ef6-a16b-5419f935384d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1f2f1bec-5136-40c2-a185-16433822963e",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c8a63ff8-3168-4c77-b136-682db7716f00",
        "cursor": {
          "ref": "e3a32a80-8e53-448f-ad54-5755f03b2826",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6108c1ca-936a-44e2-8816-9fafea223cc2"
        },
        "item": {
          "id": "c8a63ff8-3168-4c77-b136-682db7716f00",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "909b0693-f1ad-40f7-a5fc-729a35450959",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "fdb9cb2d-d7b4-49fe-82b3-a1ad37ac7c6b",
        "cursor": {
          "ref": "4f6d3b38-c2c5-4eb9-a51b-9ce7959729bb",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "73997d0c-ef4e-43e9-81b6-3d5bdb6d4597"
        },
        "item": {
          "id": "fdb9cb2d-d7b4-49fe-82b3-a1ad37ac7c6b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a3b4dd25-9e59-45e4-9746-dc0d8e593df4",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "51acb8ce-b296-41dd-b887-9a6189f19715",
        "cursor": {
          "ref": "af1297ea-dc2c-4d37-a911-e5ea8206b9ab",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "76209ff3-02dc-4e6c-b346-abfee17e36ab"
        },
        "item": {
          "id": "51acb8ce-b296-41dd-b887-9a6189f19715",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "48bebc26-215d-4add-966c-b344db13a643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe3d5cb-99f3-4538-8aad-92870e2c38ec",
        "cursor": {
          "ref": "b5be9572-a467-46dc-9222-322ac445d9e4",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c7a778fd-50be-4cf5-a3d9-bd7e9cd7e697"
        },
        "item": {
          "id": "9fe3d5cb-99f3-4538-8aad-92870e2c38ec",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "01aa1a4b-a917-498f-89b0-23db7a3efa88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8efcddc3-829e-464f-abbc-cddab2dcc054",
        "cursor": {
          "ref": "fabd4952-45a9-42df-af63-41d8ca46f136",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c86d5319-81a2-4a87-a72c-43ff5ba7cb77"
        },
        "item": {
          "id": "8efcddc3-829e-464f-abbc-cddab2dcc054",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c4150bfc-1da0-46cb-8f7c-87e43dce50bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c234f1ca-2324-46ef-a021-34861dcfd905",
        "cursor": {
          "ref": "90a46df6-99fe-4690-b7ec-f40d66cf2d67",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3c46d9fe-c4ad-4e2b-aa85-6d8608bdf66d"
        },
        "item": {
          "id": "c234f1ca-2324-46ef-a021-34861dcfd905",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b8f9a7d0-8b1e-463e-b111-abc81db675b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b6225e-8b29-4fad-a3cb-5b4327fd6029",
        "cursor": {
          "ref": "5941bf5a-a66a-422f-9d45-82502e8439e3",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "684fad58-cf3f-4d7c-8c70-383be4880855"
        },
        "item": {
          "id": "c1b6225e-8b29-4fad-a3cb-5b4327fd6029",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d75097cf-f3dd-40cd-8078-4996691f3391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd856769-0e10-4951-ac3e-d8b6e52dc37b",
        "cursor": {
          "ref": "bea68265-4022-48a4-9cbc-59e2053cce2f",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4c9862b4-9012-469d-bcce-6622114f07d3"
        },
        "item": {
          "id": "bd856769-0e10-4951-ac3e-d8b6e52dc37b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "666f6a38-e0e5-4bdd-8289-b40dc22d0031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8341850-a8e5-47ec-b006-a9971020f08c",
        "cursor": {
          "ref": "6c734dab-a702-464e-b638-d60d11f08266",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "93bb89c5-8d1b-484b-957e-7e2dbd7775fa"
        },
        "item": {
          "id": "c8341850-a8e5-47ec-b006-a9971020f08c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "16750e0c-a477-41f5-9a0a-e052ccd71e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a8b8a5-39d0-4016-bd5c-039eeda0e146",
        "cursor": {
          "ref": "e580482e-b4fd-4153-a258-eee62212b1c3",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "49e3d89a-5270-4ca6-baa9-ced85968196a"
        },
        "item": {
          "id": "36a8b8a5-39d0-4016-bd5c-039eeda0e146",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "821d226d-72a3-4288-ae9d-b581619b1e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e31d612-254d-48e9-9822-e304011a1f08",
        "cursor": {
          "ref": "4aae6739-b6cb-4f43-a976-661757bfc65a",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "32286a81-dd09-4a61-b20b-7dd8d7e52e6c"
        },
        "item": {
          "id": "5e31d612-254d-48e9-9822-e304011a1f08",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3bcb5c31-4357-4e3a-8987-196bfbd23cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f19c8f-eeb7-40ec-99bd-ba64bc9f5bdc",
        "cursor": {
          "ref": "e26cc5e4-ce70-4d73-8662-0b534664938d",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e41d383b-3346-4aed-8f22-5282d1d7a453"
        },
        "item": {
          "id": "b9f19c8f-eeb7-40ec-99bd-ba64bc9f5bdc",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6b837802-5134-47d3-9ac6-ddf8d96bad4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce9dc74-e8af-4708-acdf-fdeb29793977",
        "cursor": {
          "ref": "8a8af39d-c58e-4ed7-b99f-f1eb97cbda0e",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b8890c08-2fc9-49cc-b3ad-4f1757771195"
        },
        "item": {
          "id": "6ce9dc74-e8af-4708-acdf-fdeb29793977",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3cc5eec2-e1d5-45ac-9589-7a09575a26a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0a6387-0c6b-46ae-a8e7-c63c289bf9f7",
        "cursor": {
          "ref": "f77f08ec-b34a-4cc5-812c-d7dc70f83cc5",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b2468567-c999-4981-9161-8632e4d46d89"
        },
        "item": {
          "id": "ed0a6387-0c6b-46ae-a8e7-c63c289bf9f7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "eaf50613-5fd2-48a9-80b1-7c7bec3f3475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e42bf47-ee50-4c16-9180-4fbeab057b7b",
        "cursor": {
          "ref": "b2cf96f7-f946-432a-bd11-9e53958ff06b",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f83f67cd-b1ed-478e-b7ae-ae9907dd70d8"
        },
        "item": {
          "id": "2e42bf47-ee50-4c16-9180-4fbeab057b7b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4450aec9-9344-49d1-bb66-7919e8655501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09cd9ff8-5c88-4bc9-9869-935227854802",
        "cursor": {
          "ref": "4045088f-8ab2-4ad9-8815-e19d41138a6a",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ca6af41f-419e-49e1-9b7f-200ee3189950"
        },
        "item": {
          "id": "09cd9ff8-5c88-4bc9-9869-935227854802",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "78713ca8-dcf5-4036-86e2-7befdc52e096",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6b7917bd-2aed-4b24-9494-6fd9ab39c98d",
        "cursor": {
          "ref": "5f0cdfe8-30d0-485e-bd00-29f8ed3c2653",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c4f465d2-5351-4183-8b08-0e5ac6d76322"
        },
        "item": {
          "id": "6b7917bd-2aed-4b24-9494-6fd9ab39c98d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "40cb007d-980d-4711-a1e5-de3970e490ac",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "ba1f3453-4619-437f-b87f-bfca9c143179",
        "cursor": {
          "ref": "8aad1275-da01-4d68-8a46-373a74d8b96a",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2c100cb7-46fa-49b4-add0-d13b8c804277"
        },
        "item": {
          "id": "ba1f3453-4619-437f-b87f-bfca9c143179",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f58b366c-86cf-4710-89a2-0c76b8ce47e8",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2b1af405-8a32-447e-b861-201d5144b449",
        "cursor": {
          "ref": "3b2ea0db-9f38-419b-9cfb-55a0c550148d",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3c970c49-eb6b-4c10-9468-4d3a6da30a84"
        },
        "item": {
          "id": "2b1af405-8a32-447e-b861-201d5144b449",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "85a76351-1fa8-4809-852c-11410b32fb95",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "2bafc94d-b2e7-4109-be27-cad35d5c6e78",
        "cursor": {
          "ref": "fba3e31a-923d-428f-83d3-70bbedd9243b",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b2a78bcd-f210-4ff1-904f-826d708ea789"
        },
        "item": {
          "id": "2bafc94d-b2e7-4109-be27-cad35d5c6e78",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "73036d66-2589-4fbe-8fa5-fc9d5d3de22b",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "faa403d2-f2c3-4fb5-b6e4-3f49c820fb74",
        "cursor": {
          "ref": "d1caf0b7-6a23-4c47-b02a-f00f7284e5b9",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0a49facd-6cbb-4a44-8e9d-74b9ef4a27eb"
        },
        "item": {
          "id": "faa403d2-f2c3-4fb5-b6e4-3f49c820fb74",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b4817580-e76a-4c5a-98d4-ac3213e69b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca77498-7aa7-4aa4-81bf-dc7a4bc7c934",
        "cursor": {
          "ref": "06da0b55-3a9e-4feb-ae87-0d7f12ae1b01",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9e96c9c3-a248-42ae-8dc0-d30bff387395"
        },
        "item": {
          "id": "6ca77498-7aa7-4aa4-81bf-dc7a4bc7c934",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d56d1bb5-1858-4293-be06-0aedc84a910b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141f4849-1c63-4fa3-87ea-dcab7cb9ffa0",
        "cursor": {
          "ref": "6bb07931-6c17-48a0-9753-5589537858ae",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "de698688-3baa-4bbb-a42e-73fab4f75ece"
        },
        "item": {
          "id": "141f4849-1c63-4fa3-87ea-dcab7cb9ffa0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "abb61a07-6f23-4ed0-a883-830f22b4dfe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dfade5c-1027-494b-9075-a06051fae6b8",
        "cursor": {
          "ref": "e9a4a88c-4dd0-4886-ba9d-f6178213b4e4",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "79526d0a-4f17-4337-b2d5-8b854756f03f"
        },
        "item": {
          "id": "2dfade5c-1027-494b-9075-a06051fae6b8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2a17d34b-9503-4fa2-aa14-35e776f8e48e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9174f207-c2ce-4cfa-b4ab-3cfbe75a7a74",
        "cursor": {
          "ref": "9db8ab08-f0a6-49f4-818c-6fbadcc826f1",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "26843ef8-f00d-40d8-aa96-3afdc8133095"
        },
        "item": {
          "id": "9174f207-c2ce-4cfa-b4ab-3cfbe75a7a74",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ed23287a-2650-4dc4-9b91-da6226792a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a5f89d-bb53-4f05-9d9b-2f8756d14218",
        "cursor": {
          "ref": "bc74e6fc-5fd8-4ce1-b154-081b5d8daf7c",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "be2434f6-d2b7-481d-bc32-460f19a23353"
        },
        "item": {
          "id": "c2a5f89d-bb53-4f05-9d9b-2f8756d14218",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "95132316-b500-42d1-a22d-464441847128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8150de5c-6b67-4492-bc2c-ab09a36d3752",
        "cursor": {
          "ref": "a0b650cf-9f68-48fe-905a-e202830e1e00",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6c83e253-0cfa-4ad0-ad55-cf382df2f006"
        },
        "item": {
          "id": "8150de5c-6b67-4492-bc2c-ab09a36d3752",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "567050ae-1b55-4fc0-b340-f0db6b03d104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcdbb0fb-e91c-4ecf-99f0-f84616e2a386",
        "cursor": {
          "ref": "3e77e292-bfd9-4504-b541-c1fb2873c11b",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "76e249f4-98fd-4d0a-b709-0f62b5ccc8fd"
        },
        "item": {
          "id": "bcdbb0fb-e91c-4ecf-99f0-f84616e2a386",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "088db257-2407-483a-a8f3-2ce4745cbe11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c5efc5-4f7e-460b-a544-af0e4dc92dc7",
        "cursor": {
          "ref": "d91d329f-70de-4919-8a86-bd85d074e312",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ee77bc25-3dfc-4654-9297-4facecfa1210"
        },
        "item": {
          "id": "d0c5efc5-4f7e-460b-a544-af0e4dc92dc7",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c01e0bbc-421f-4645-96b0-2b3ef89fbf65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87dbe4b3-c979-46ee-bab8-1babb0ba7083",
        "cursor": {
          "ref": "37bdf123-5272-42a6-912d-793b27b0e25d",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "415f8284-e690-4196-a31c-358ebd9c08ce"
        },
        "item": {
          "id": "87dbe4b3-c979-46ee-bab8-1babb0ba7083",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f187c3a5-3895-43ee-97f3-346cc730b14d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7e3799-6f18-460a-88a5-483101298583",
        "cursor": {
          "ref": "b7c88551-9414-49d8-8a1e-de6c56d41479",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0797a31f-0a67-498c-947f-2d2229b8085a"
        },
        "item": {
          "id": "5e7e3799-6f18-460a-88a5-483101298583",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9e1c02f5-709c-47a7-a3d3-4163daeb3bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140ae23a-f9e5-41e6-a4bd-005659c4cca1",
        "cursor": {
          "ref": "e38fae45-95a6-4a57-a9bb-af1c93098413",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "73ba68b9-280d-4889-b3f7-07ce53270d71"
        },
        "item": {
          "id": "140ae23a-f9e5-41e6-a4bd-005659c4cca1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5a39adb4-dd7a-4dcd-82cf-024221376a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "370f51a6-0d6a-40a4-a88b-830070212997",
        "cursor": {
          "ref": "0fc44d15-f7b7-4ce9-a135-dee839795a7b",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f4d940e7-808b-4d96-90ba-9620eeda9f77"
        },
        "item": {
          "id": "370f51a6-0d6a-40a4-a88b-830070212997",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "69a437af-ff4c-4f70-b86e-507bcf6c6280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d71ea6b-154a-4507-88ab-48b0cef569d3",
        "cursor": {
          "ref": "e7296d0a-52e4-4aee-9fca-cd23e9a50c7f",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9165298e-3508-4c19-b4b8-bf35f1c58d17"
        },
        "item": {
          "id": "0d71ea6b-154a-4507-88ab-48b0cef569d3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ef56ec4d-ca10-4a3f-8212-db0766dbf8b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256acf8b-8537-4f55-8da9-c970b1b4380e",
        "cursor": {
          "ref": "dfc046ce-fce3-416d-9a4a-81d009a1d1bb",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b8bc3645-fb8c-4c31-a8a1-a94ae079c810"
        },
        "item": {
          "id": "256acf8b-8537-4f55-8da9-c970b1b4380e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "537c8e00-a5bd-4418-bfd8-585ebc3f2271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f369bbe-92df-4997-a64b-a6986253b5b6",
        "cursor": {
          "ref": "15714cb4-df28-4bea-8ba4-dbf5f99c655b",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2db88f88-7384-495b-a76e-cbc7f01f50f4"
        },
        "item": {
          "id": "8f369bbe-92df-4997-a64b-a6986253b5b6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c99e7ba8-948e-45bd-8934-e41527b114f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e52711-3abd-4f15-b9e7-dd8a9f334afb",
        "cursor": {
          "ref": "ea9283d3-75ef-491a-b49b-fdbaf4e2d049",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "67f498d6-6914-46fe-a61e-3c5c480cbcdc"
        },
        "item": {
          "id": "25e52711-3abd-4f15-b9e7-dd8a9f334afb",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "09414a7e-71ea-4cd4-b2b8-1157e0bd22d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f962852d-a11d-4327-95a2-796b378af7b6",
        "cursor": {
          "ref": "06d499d4-c4b4-4c65-a387-6967c3f11703",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fa5dd3e2-3dfe-40cc-b6e7-d6ea68945fdf"
        },
        "item": {
          "id": "f962852d-a11d-4327-95a2-796b378af7b6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7b282de1-e551-4aa5-9794-6e67a12112e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "038446ce-51f0-4835-8d5e-1b336b3bce11",
        "cursor": {
          "ref": "a49bc333-45bb-49cf-a455-3d3076ce3b38",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "eec07707-b807-4eb2-bce1-4e537e82121b"
        },
        "item": {
          "id": "038446ce-51f0-4835-8d5e-1b336b3bce11",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ea75416f-8ae9-4d66-b03c-3c76890ea370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe2a03f-5b4a-4007-8726-d0809dd62854",
        "cursor": {
          "ref": "1015e711-b7bb-4e7f-9717-848b3c05357d",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "cd316314-492b-4515-b532-d093436c1a9d"
        },
        "item": {
          "id": "ebe2a03f-5b4a-4007-8726-d0809dd62854",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "fac10d46-8c3d-40ba-86eb-97b3e7e0bc70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa1db77f-0cdf-4b39-bbdc-57f5ba9c87f0",
        "cursor": {
          "ref": "b9babf27-af06-4385-b3bd-228a1b09adec",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3bb528ee-3f84-491f-ae73-89965e554d32"
        },
        "item": {
          "id": "aa1db77f-0cdf-4b39-bbdc-57f5ba9c87f0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8b9e015e-d62b-4c98-9c6d-988842b6e0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2caa3ac-5ac8-473a-bdc5-ab399d3ab961",
        "cursor": {
          "ref": "67d0173e-a60c-4596-9b62-387e32459ca5",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3392377c-12b5-49bc-95f9-d0d5189dd25f"
        },
        "item": {
          "id": "c2caa3ac-5ac8-473a-bdc5-ab399d3ab961",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cc3220f7-9083-418c-bb6a-ecc9aa0edfb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ea8dae-399a-4a45-9d76-af7ddc3b0cda",
        "cursor": {
          "ref": "9449a50c-07ce-4d65-9e39-a9c89b8be8d2",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4741babd-2b21-4443-8840-33245c1ccb95"
        },
        "item": {
          "id": "33ea8dae-399a-4a45-9d76-af7ddc3b0cda",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2465f232-9bb2-4d41-9671-c8ca0cd9f909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ea09c9-133f-4e67-9e25-b5014f71a856",
        "cursor": {
          "ref": "3350345a-b63b-40b0-b009-23701a217b03",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c1742701-cb0f-45fa-a5f3-9771189b4f23"
        },
        "item": {
          "id": "d8ea09c9-133f-4e67-9e25-b5014f71a856",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "bea86577-877c-49c8-bc05-7a731a729884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e8782e-6cf7-4929-bc77-5a92e8909fd2",
        "cursor": {
          "ref": "145323b6-0cd3-4cc1-874e-c7d9fca7e9c9",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5a09f163-54f8-4376-96e0-81b9a7945394"
        },
        "item": {
          "id": "56e8782e-6cf7-4929-bc77-5a92e8909fd2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "93ad5776-5ca6-4013-adb6-6a01ca152934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05f2f39-4ce1-49c5-915d-0f85db0dc311",
        "cursor": {
          "ref": "8131d5e3-2bf8-4e9d-839c-23e1caea35fe",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ff570fb8-346f-42a7-ab90-0eada9aec26c"
        },
        "item": {
          "id": "c05f2f39-4ce1-49c5-915d-0f85db0dc311",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "241b7cf8-0261-4666-b1b5-96126b527f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0cdaa93-6cde-4053-b221-1261b0f6a27d",
        "cursor": {
          "ref": "bc8a8ab5-9f36-4f96-9691-ff74ef1d8fa0",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "67e0259f-d46e-4719-bf4f-0b80feeb3e3d"
        },
        "item": {
          "id": "e0cdaa93-6cde-4053-b221-1261b0f6a27d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "36618f82-d4cc-4d40-b80a-b40ac4a01870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4628bc76-62d8-4aaa-9803-6e70d323b65b",
        "cursor": {
          "ref": "841c9768-6175-4dc3-b5b4-2078e88a953a",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "807c1613-34c6-417f-8b75-5be8955ec73c"
        },
        "item": {
          "id": "4628bc76-62d8-4aaa-9803-6e70d323b65b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "717b23a2-2464-4432-bef9-fea71eb3b63a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d322d20a-4023-4088-a864-80f9f3eb9b7c",
        "cursor": {
          "ref": "c0a089d9-be0c-4cf1-8cd4-75feeecc0829",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b4212d88-910d-41b0-946c-94f7a88438a1"
        },
        "item": {
          "id": "d322d20a-4023-4088-a864-80f9f3eb9b7c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f8d0c6ed-6c71-4386-a777-73d67049c9df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7133ca33-6a66-4abe-9d90-d394dc28e677",
        "cursor": {
          "ref": "160b8055-a88b-4dfe-8a91-7ccd8e6a6bad",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "15665479-2082-4c63-aa1f-c7a5117fd5c4"
        },
        "item": {
          "id": "7133ca33-6a66-4abe-9d90-d394dc28e677",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5ea56143-e20a-480e-926b-cf41c18d6cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24428b3f-0bc0-496b-b289-5ebed3a21a57",
        "cursor": {
          "ref": "147b0843-ba9f-470f-b265-7f81965f8c83",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d1ddeaeb-6d1f-4373-a115-74b7b2425170"
        },
        "item": {
          "id": "24428b3f-0bc0-496b-b289-5ebed3a21a57",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "cdff4a44-d711-4927-b8a1-48fcddddc5d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506a7145-725e-4161-bf1b-4f4c307f52e2",
        "cursor": {
          "ref": "952659b7-a519-4595-9b9d-bba51d98460a",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "821b635a-8806-47c3-af96-012900f59907"
        },
        "item": {
          "id": "506a7145-725e-4161-bf1b-4f4c307f52e2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "425f183d-89fb-49d5-ba54-6616c8fdc19f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ac3a1f-bed4-4382-ab9b-c927d058951b",
        "cursor": {
          "ref": "4c27f4c7-ffd4-4cf8-a5e1-6a3bf0a85e07",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "974d45d4-99c7-4c07-9677-8cc69365076d"
        },
        "item": {
          "id": "83ac3a1f-bed4-4382-ab9b-c927d058951b",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "df3f47f6-b042-4fbf-a2ad-de7555e2409a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "64de32ae-2264-4ffa-810c-c2634c47eaf0",
        "cursor": {
          "ref": "1b74db15-ea04-4603-80b1-d2ea4a20bd46",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "830f107e-84ab-4199-936b-bf9c1978c1fe"
        },
        "item": {
          "id": "64de32ae-2264-4ffa-810c-c2634c47eaf0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "daf1611e-c1c9-4516-9102-df5cb505989b",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "52538d1b-d74d-468d-930e-997f3f976909",
        "cursor": {
          "ref": "5d149806-78bc-4631-9fb0-c0014809a91b",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "42e57f0a-22d7-48ab-9405-2e1f247043e8"
        },
        "item": {
          "id": "52538d1b-d74d-468d-930e-997f3f976909",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ceca7e96-c3f6-45bc-8492-32b464885498",
          "status": "Created",
          "code": 201,
          "responseTime": 387,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ba4ebd-de29-403e-9d7d-35d3ef1447dd",
        "cursor": {
          "ref": "3ab099d0-09f6-4320-b2bd-5e8c97d7efc2",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5bb8baa9-8ebf-442c-91da-1d5383172ca6"
        },
        "item": {
          "id": "b0ba4ebd-de29-403e-9d7d-35d3ef1447dd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6787acc8-9794-485f-a347-ba040978fb5f",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "33628a5f-8c4d-4036-99bc-4cce7a740ace",
        "cursor": {
          "ref": "1e966771-57ef-4900-9c0f-c9fc21b6ca9b",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "40c78bb4-b62e-4b17-b80c-ab570f35592c"
        },
        "item": {
          "id": "33628a5f-8c4d-4036-99bc-4cce7a740ace",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "72513e0c-d101-47de-bd89-60ffb324bf16",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e39736-4d18-476c-b56b-63b3b940070c",
        "cursor": {
          "ref": "f0130c44-b69a-46eb-8f95-0ad5db9cd14f",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3acc6e1f-52da-44c1-afbd-a640ba0fd10e"
        },
        "item": {
          "id": "35e39736-4d18-476c-b56b-63b3b940070c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7db3e4cc-4810-4005-8659-890e48a785d7",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-15T00:36:38.088Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-15T00:36:38.088Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "259f72d8-415d-4dad-bafb-01addfca146f",
        "cursor": {
          "ref": "ac7bee6c-48ef-4865-ab83-c1c2fb719aaa",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c540cd5d-8c86-4f53-9535-2cbc49106c4b"
        },
        "item": {
          "id": "259f72d8-415d-4dad-bafb-01addfca146f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8415c45c-3837-4ea5-b6cc-764cd779b18a",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14f5296-9df6-4081-8579-3f669688b607",
        "cursor": {
          "ref": "3e1bc456-474b-4b69-be97-a35c0c369917",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a4133d09-9fcc-46a9-971e-88f08e1a5bfc"
        },
        "item": {
          "id": "c14f5296-9df6-4081-8579-3f669688b607",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a87ea6e9-b40c-4616-b533-b62d586c7872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c7aecb6-5d9e-4291-bb48-41455af328e6",
        "cursor": {
          "ref": "05c0f7d5-2f40-45c2-b12a-25707a5db2b2",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "59ccb664-f3b7-44fd-a0f6-e35d055cf0f1"
        },
        "item": {
          "id": "1c7aecb6-5d9e-4291-bb48-41455af328e6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f22c1450-0350-436d-83b5-a00f8ba08c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd78600-db65-4cb2-b5ef-1df7362be6b7",
        "cursor": {
          "ref": "24fbda80-9427-4d75-b2a4-dc4b9ce1ccfb",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "df1007d2-0c76-4b6d-a505-d495b3f5e882"
        },
        "item": {
          "id": "9cd78600-db65-4cb2-b5ef-1df7362be6b7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b73317ad-2607-4f9e-8429-688f0e3e99e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c7cf8a-c23b-4044-a33e-675488f2eda5",
        "cursor": {
          "ref": "0ff6e11e-eeab-444c-9f96-a99a28f4159a",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a6f713cb-d644-42c5-bed5-c6c11fe85192"
        },
        "item": {
          "id": "a8c7cf8a-c23b-4044-a33e-675488f2eda5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b72612d2-f006-4645-9da1-7117ae25f185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c8171d1-e7b5-4f0c-b14b-36ec23a72156",
        "cursor": {
          "ref": "b2ab40c9-0097-4ea2-9db0-bfaa3b4b9045",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "809e6e5d-c9e3-42f1-b53e-61d44b66b047"
        },
        "item": {
          "id": "6c8171d1-e7b5-4f0c-b14b-36ec23a72156",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "07df0b98-aabd-4bef-9e1e-e9172b9b9176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89404b14-0387-4c30-b977-a7a45d3b117e",
        "cursor": {
          "ref": "6f9a6b7d-32ff-4bde-a1ac-2ace8f304177",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fca648cd-e7db-42af-99cf-c0ab49288fe4"
        },
        "item": {
          "id": "89404b14-0387-4c30-b977-a7a45d3b117e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9c0ecbf2-d8cb-4152-8549-e664a99b48d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee1d00d0-0c6a-4e78-a8e3-4dcb1137715c",
        "cursor": {
          "ref": "d65ae0f7-37e4-452a-a8ad-0018ef5524a7",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "81abe836-3175-44e4-9ccc-9ce2f6b61f0a"
        },
        "item": {
          "id": "ee1d00d0-0c6a-4e78-a8e3-4dcb1137715c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "62a3321e-a56a-42ce-b271-5386acc345dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c349caaa-396f-433a-b2da-e5a1c811551c",
        "cursor": {
          "ref": "f5acec8f-67c0-4713-b0d5-446c9638ac70",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7f3db0cd-afd6-40a0-89ee-9dffbeb736ff"
        },
        "item": {
          "id": "c349caaa-396f-433a-b2da-e5a1c811551c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "86b12426-f0fa-4ea9-954b-a98e3b74e08e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cada1680-23c0-4e28-8d40-9e58e1acb4b0",
        "cursor": {
          "ref": "127c14cf-defb-4175-b1a1-db0c56e5e82b",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "46f6cb06-f2e4-4db6-b690-a2f513840849"
        },
        "item": {
          "id": "cada1680-23c0-4e28-8d40-9e58e1acb4b0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "663990fb-6664-4f51-b8be-fb284e2aeb89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca78e84-c522-4010-86ed-98064de42627",
        "cursor": {
          "ref": "158f08a7-5b44-4e99-9fdb-7d8407b6d879",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c6f45795-9a03-4e9e-9e9f-9bd8a9c585f6"
        },
        "item": {
          "id": "fca78e84-c522-4010-86ed-98064de42627",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3af12724-3596-4104-afc4-99c4abefca2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff7bbd9-3111-4c63-9bb7-0f7859b1583d",
        "cursor": {
          "ref": "a1c1fc20-4d04-4aef-9229-8be387da8cf0",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a74f86f4-6b26-4a73-b598-4d3ddeca07a5"
        },
        "item": {
          "id": "aff7bbd9-3111-4c63-9bb7-0f7859b1583d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ba2e87e0-2f6a-4ebf-90dc-6084dc17d02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb07ef73-ff91-4d13-94aa-5d1728a33bfe",
        "cursor": {
          "ref": "4572bffb-7b65-40fc-a0d1-025b2714195d",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ccf60a9b-d896-4f8a-9e3f-5b5791adc90f"
        },
        "item": {
          "id": "eb07ef73-ff91-4d13-94aa-5d1728a33bfe",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "58adceb9-cda0-4ca4-adb8-1dda94dc21c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189d1dc4-5cc6-4d0a-9608-0c36d6300e0a",
        "cursor": {
          "ref": "2d916612-f121-4893-bbe6-88e727718f9c",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "15145541-4174-46b1-a270-fef8fc93783f"
        },
        "item": {
          "id": "189d1dc4-5cc6-4d0a-9608-0c36d6300e0a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "08e81d5c-fcf6-493d-abb6-33a3d0f66049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4823bd-4e0e-48b4-93f5-ee9888f0f6c2",
        "cursor": {
          "ref": "964da1fe-ee36-46b9-8de0-e81f030dbaa6",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "269c72b5-e96c-4382-b91c-9d45c468f5d3"
        },
        "item": {
          "id": "9c4823bd-4e0e-48b4-93f5-ee9888f0f6c2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e64461ff-b839-4591-a0d6-5f007e239679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd994f3-e625-4212-a16b-ea74234e4d04",
        "cursor": {
          "ref": "12c42c58-9e4f-4430-b8cf-74352ff6e765",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "80e54a54-77d8-446d-b201-d6d362722dcd"
        },
        "item": {
          "id": "3bd994f3-e625-4212-a16b-ea74234e4d04",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fa1b0489-cd18-42d8-9e05-19ceaf70af5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377d1cef-929c-4e94-bc10-bc1c7af682e4",
        "cursor": {
          "ref": "22d3e95e-e2ef-4e90-b104-98a4658827b4",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a7991e99-5c1e-4812-b5a4-62136222a0f3"
        },
        "item": {
          "id": "377d1cef-929c-4e94-bc10-bc1c7af682e4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "93bf4de6-192c-4beb-b48f-6de955ca4436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e905fb-1686-44d6-b288-27f6dac4b314",
        "cursor": {
          "ref": "09f17460-bc83-4711-a0b5-a090312f4f74",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "497ef83c-140e-4f37-a67d-d1fd87ceef38"
        },
        "item": {
          "id": "28e905fb-1686-44d6-b288-27f6dac4b314",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ef1aa234-316b-4d4f-a28b-975574d0eecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa762b90-86e7-4923-8fc3-3a148083f398",
        "cursor": {
          "ref": "1a2a2c49-47cf-4687-8ae6-ded0be77e83c",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "11027b3a-614f-4426-b2f1-6150fa79cd93"
        },
        "item": {
          "id": "fa762b90-86e7-4923-8fc3-3a148083f398",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "dc50f9c6-7942-4797-83c5-bc816f4d8239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aacf204-5e85-419a-9b04-94a37908649a",
        "cursor": {
          "ref": "284fc919-b915-402a-a0c8-8a493b5330e3",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8727c9f4-4298-4f0e-bffb-0f84068ca7a2"
        },
        "item": {
          "id": "5aacf204-5e85-419a-9b04-94a37908649a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d1d77faa-77f9-41b9-8607-9618323789b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e74ad03-0fa6-4922-9d2f-389dfbf0c7a2",
        "cursor": {
          "ref": "1a89bf0a-5e37-44d4-ba76-8da7f4128b49",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "5119502b-8db8-4cf2-857e-764e39183679"
        },
        "item": {
          "id": "7e74ad03-0fa6-4922-9d2f-389dfbf0c7a2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8f0e9a06-d60c-42e7-9bcc-9fa7ea816bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fa0d86-eab3-4d1a-8abd-81f8cf95227e",
        "cursor": {
          "ref": "b102beda-fb8c-4258-95cc-c947de84b931",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "39cfa250-45ae-4c21-9622-d6dd40009220"
        },
        "item": {
          "id": "80fa0d86-eab3-4d1a-8abd-81f8cf95227e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f000dbdd-8cb9-48c9-9644-1be6cd6dbf93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45fed97-27da-4729-933e-a30c47567d4c",
        "cursor": {
          "ref": "f7a5c836-f794-43fd-b908-36586bdbb23b",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "db9efc35-08df-41ec-90f2-644e04923ad2"
        },
        "item": {
          "id": "f45fed97-27da-4729-933e-a30c47567d4c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "98946721-32af-41a0-977b-c1ddee262817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e639859d-9e70-44d5-9c2f-2ebbcb54bde9",
        "cursor": {
          "ref": "56ec9ad6-01d4-453e-86d0-84518e419795",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "36ced61d-e52c-4690-b47c-197e9691278d"
        },
        "item": {
          "id": "e639859d-9e70-44d5-9c2f-2ebbcb54bde9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "771e3a29-7291-4aba-8ae9-8be305ee89d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7b10e0-234b-4790-901e-220db61dfc76",
        "cursor": {
          "ref": "24fdb573-9a4d-4703-9f34-7be2909de736",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "cd2c5624-acac-402c-a364-c75c5c82cfaa"
        },
        "item": {
          "id": "ca7b10e0-234b-4790-901e-220db61dfc76",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "af00fd50-4257-427b-a4da-d20608fdfba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e3866f-2459-48de-a389-26009176affd",
        "cursor": {
          "ref": "cd3ef2ce-bdf1-4949-b284-27524ddfce25",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "57fad903-7608-4492-96e9-b6b4a4142112"
        },
        "item": {
          "id": "82e3866f-2459-48de-a389-26009176affd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "31f0d4ca-b5ce-40fc-bdbd-61434b0791ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc317cc2-9e46-4709-a992-93f9574da310",
        "cursor": {
          "ref": "a2a8d05d-3835-409b-acc5-9dfd5604b78b",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0ec5422f-1dd4-4f8c-b7ca-cb542cc409c8"
        },
        "item": {
          "id": "fc317cc2-9e46-4709-a992-93f9574da310",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "06d772b6-fbad-42d3-bdf6-35badf231afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72758bae-4976-43d5-b755-bda1b4430a51",
        "cursor": {
          "ref": "417a691c-8850-4f0f-b6a7-fd0e9eef1699",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9f9876a3-2f59-4000-bd9e-36855e9d9175"
        },
        "item": {
          "id": "72758bae-4976-43d5-b755-bda1b4430a51",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b03ab956-7f28-4388-b09e-b478f2b861ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803bf47e-e7dc-40e5-8f88-57eb924f698e",
        "cursor": {
          "ref": "4125ce34-c79e-4764-b667-d689b47cb9a8",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fe0ee8c7-ad8d-43a7-9af3-e2ea3baa1d67"
        },
        "item": {
          "id": "803bf47e-e7dc-40e5-8f88-57eb924f698e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "81862f6f-c70d-4d8e-9fa5-e4398a6a3339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef87aa50-0835-4566-82b7-53d014c415a3",
        "cursor": {
          "ref": "a3383579-97a9-43ef-8a8d-044a09714676",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7f4b08ee-5731-44ad-a401-d5b59ad15a41"
        },
        "item": {
          "id": "ef87aa50-0835-4566-82b7-53d014c415a3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f2792c75-775a-4520-8002-4c3a8d6fdaec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ce5af3-91e5-461d-ae27-08cbbfbcfa16",
        "cursor": {
          "ref": "ba078017-0aaa-457f-8c4e-a72aaaeb1188",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "69086273-db24-410a-ab5f-e49a0ce237ce"
        },
        "item": {
          "id": "28ce5af3-91e5-461d-ae27-08cbbfbcfa16",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7866b8fe-b048-43b2-95f6-d73023284851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461b7168-7263-43c4-835b-8ad4ce61c1f9",
        "cursor": {
          "ref": "a878e32d-2289-435e-89c1-432d77e46c76",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1efb9d48-1663-4c50-bd0a-72575181fc97"
        },
        "item": {
          "id": "461b7168-7263-43c4-835b-8ad4ce61c1f9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "56f70516-a576-462c-a05f-ce4a7c63babb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab5989f-b215-440b-ad33-27d40667af2b",
        "cursor": {
          "ref": "05a36af2-391a-462c-b134-f9c6d80e55a1",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "56bcaacd-3817-4451-9648-4213048da984"
        },
        "item": {
          "id": "dab5989f-b215-440b-ad33-27d40667af2b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a9667029-d864-4eee-80e8-4ede46b12da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac68def-2c46-4e35-a284-5d22460373e0",
        "cursor": {
          "ref": "1c0643d5-8e51-448d-99a5-508fbdf849bb",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4b258427-b51d-44e0-8e8c-ef16f5845e64"
        },
        "item": {
          "id": "7ac68def-2c46-4e35-a284-5d22460373e0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b63d3585-3849-4911-86cf-866af005cc36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca264e1-fc56-4dbb-a320-fc42493b75c3",
        "cursor": {
          "ref": "7bcf00fd-8ca3-4fe6-a6e5-126b16f9ae04",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "891e6e11-c735-4b7c-977b-377933695b53"
        },
        "item": {
          "id": "5ca264e1-fc56-4dbb-a320-fc42493b75c3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4b4e7f5c-e8b6-4a75-b0ce-cae708a96ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c46ad12-0542-45e2-a2c7-1d06fa577a9d",
        "cursor": {
          "ref": "0e47b85f-25a3-4797-b812-2b38b1e51d5b",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2b25a119-8cef-4eea-82d3-982584121ea8"
        },
        "item": {
          "id": "5c46ad12-0542-45e2-a2c7-1d06fa577a9d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b366547a-3e7d-48b5-bfc7-827fee341769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c81d787-ff10-4d94-8656-c6878881afd4",
        "cursor": {
          "ref": "a5bb9aea-bf21-4160-854c-79b9084a304b",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f2a555e3-e5b1-4d96-9bab-577b5ea41302"
        },
        "item": {
          "id": "9c81d787-ff10-4d94-8656-c6878881afd4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "734aa1d1-d253-4a15-8647-904eb4b38a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e520f0-9267-4e85-b2d9-880ee471359c",
        "cursor": {
          "ref": "f094d733-77a7-46c2-b63f-639e0e337340",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "58c16775-eb4e-4569-9663-d8a7c441c1d9"
        },
        "item": {
          "id": "20e520f0-9267-4e85-b2d9-880ee471359c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7bee9fa2-280c-4501-a1a4-e81eab76a351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb28fae-56c1-4f78-821e-b8509e964408",
        "cursor": {
          "ref": "2641536c-bb8c-4d7d-a719-ab705fe1d337",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1c993f0a-9f02-401e-9efe-b82611d90454"
        },
        "item": {
          "id": "6fb28fae-56c1-4f78-821e-b8509e964408",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "31ab35d7-5974-4406-aeb8-77f04f561c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f050387b-6840-4e95-9458-ca351c0b03db",
        "cursor": {
          "ref": "b3787c21-3d39-47d0-8bdb-57d0bec49889",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "60d509de-24dd-4b10-b8f4-23dfe64eb0c2"
        },
        "item": {
          "id": "f050387b-6840-4e95-9458-ca351c0b03db",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9a67ab26-c25e-4c8b-a4d5-0df758c5c620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7810e81c-81f1-45ce-9f2b-a7a946c1c793",
        "cursor": {
          "ref": "4407d61d-a0ef-4b72-bcfe-2344144594a7",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ed714504-5ae0-4e05-b3b1-f1d393f644fb"
        },
        "item": {
          "id": "7810e81c-81f1-45ce-9f2b-a7a946c1c793",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "efff843b-0b7c-4798-a4ee-051b3105a457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5afd82cf-de23-4678-9e6b-7aed75f0ec4f",
        "cursor": {
          "ref": "bc181ba6-9bae-4a7c-889f-785f88f15999",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "357e7b26-8c3d-4209-8156-271d4c160ca5"
        },
        "item": {
          "id": "5afd82cf-de23-4678-9e6b-7aed75f0ec4f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e23fa537-694c-4c70-bb11-dee40cd69ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc16513-c5a3-46a3-9d25-2f8bacaef1ba",
        "cursor": {
          "ref": "0629aefa-c8d7-45da-b3f7-3c67a0564f81",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9d2f681e-9056-42d4-bc48-3a9cc987aea8"
        },
        "item": {
          "id": "2cc16513-c5a3-46a3-9d25-2f8bacaef1ba",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b0c1897a-b05c-4d96-afc1-360cffd6125c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01552389-a3f0-43d4-8e10-2b43ab702641",
        "cursor": {
          "ref": "c711f7b4-a50f-461e-857f-d3a5cd178876",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a6590c0c-f9e3-4b3b-88fe-6d03e959b9b8"
        },
        "item": {
          "id": "01552389-a3f0-43d4-8e10-2b43ab702641",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "19d44523-85ef-4acf-94f7-71d039060ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21468049-0ede-4cf0-b5fa-e75fca54e7fb",
        "cursor": {
          "ref": "b81afc69-771f-4e83-b514-6e679a09544e",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f1562985-fcfe-4d7f-bf15-71c0ce1d1e84"
        },
        "item": {
          "id": "21468049-0ede-4cf0-b5fa-e75fca54e7fb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8cd65bff-b22d-4276-b679-220d1925b6a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0ada0b-127d-4e3e-9d07-3b2df47673a8",
        "cursor": {
          "ref": "bf2762c2-a68d-4174-8b26-52034a70e657",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "700f85f7-34f5-4faf-9b58-a650f2d7be91"
        },
        "item": {
          "id": "bc0ada0b-127d-4e3e-9d07-3b2df47673a8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "66a58398-d87e-4496-9524-dc1cf7dfffef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e983b76b-56b9-4d12-9c13-e01de446722d",
        "cursor": {
          "ref": "71fad470-d784-4d7e-90c7-95fb289eb228",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7aa3f824-eb03-48ca-a5fe-c2d162e545e4"
        },
        "item": {
          "id": "e983b76b-56b9-4d12-9c13-e01de446722d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fcb8c4a5-d66f-4cc9-aa40-721b03916f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b411e34-fdc3-455a-8e5e-469bf39c5137",
        "cursor": {
          "ref": "9fdf9fb5-23d6-4fad-84bb-434de8d731f7",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7a7b8dc8-2d5b-4fb2-867a-e1f4b3eafc81"
        },
        "item": {
          "id": "8b411e34-fdc3-455a-8e5e-469bf39c5137",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "189c139c-e688-41d5-be0f-b21c27182ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff6ead7-ae12-4208-807b-8406139680b5",
        "cursor": {
          "ref": "ab9acbf3-8490-4587-965e-14d938cd4cec",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5b58c84f-1482-411e-9180-75f47d7d859c"
        },
        "item": {
          "id": "8ff6ead7-ae12-4208-807b-8406139680b5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "25f78b92-a5a8-4aca-966b-c9f0fe716d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fbafe0-db01-440a-b00b-3783ba99e2c1",
        "cursor": {
          "ref": "2e6e44ef-9a9c-4623-adab-a6c8c9999f47",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9b7c90b0-93fe-4e80-89e2-55eeef831e62"
        },
        "item": {
          "id": "85fbafe0-db01-440a-b00b-3783ba99e2c1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7b4be35f-afe7-4daa-9f89-30f82ae48803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155f7723-81a5-44b2-a510-51f6bfec4875",
        "cursor": {
          "ref": "e791eebf-aef1-4570-a837-b9917c39cd2f",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "17ee0812-e031-4889-9023-56525352d32a"
        },
        "item": {
          "id": "155f7723-81a5-44b2-a510-51f6bfec4875",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d80920a4-a5e3-4dfc-9437-ba363b9c23aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6def9ff8-c74b-46b0-83e4-1788f29a4e0f",
        "cursor": {
          "ref": "01ec46ae-867c-4bdd-97a4-1fc1f278c98b",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1e0bf565-53e2-49be-8168-132829285ce4"
        },
        "item": {
          "id": "6def9ff8-c74b-46b0-83e4-1788f29a4e0f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "27b29c19-827f-405f-bac9-d2deb8c410fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e268d5a3-f9bc-4bd7-b793-ff7c1fee8eae",
        "cursor": {
          "ref": "96712d9d-e0c8-4807-837f-954805ecd2d7",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8b9a4fb0-d214-4964-84b4-534f8ede482c"
        },
        "item": {
          "id": "e268d5a3-f9bc-4bd7-b793-ff7c1fee8eae",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "988f5a48-810d-4c2c-9be5-a6851ea12e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6deeb2b2-92b6-40b1-ba76-aec732891583",
        "cursor": {
          "ref": "f9487243-e9b3-4b82-95fe-5e5641129590",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bf7eacb4-a2db-461c-a17e-60f4222ee0e8"
        },
        "item": {
          "id": "6deeb2b2-92b6-40b1-ba76-aec732891583",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ebf14d5e-68b8-4958-adf3-e45637837edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955aa27c-3756-43b3-9966-888175e5d65d",
        "cursor": {
          "ref": "1f4ba936-d980-40a4-b8c2-e84a6c51a344",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d4a244cb-51a2-4134-ba40-9120a2024b1d"
        },
        "item": {
          "id": "955aa27c-3756-43b3-9966-888175e5d65d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e749e0b9-4117-476a-8a99-27dfaab1acfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71edcb55-1529-4dcf-a6c0-5f5636d898c2",
        "cursor": {
          "ref": "acf43789-48ca-459a-a277-4917611c4348",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d2018bf4-283c-490c-a8a0-cd8309341f3d"
        },
        "item": {
          "id": "71edcb55-1529-4dcf-a6c0-5f5636d898c2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "53a8cbb8-293e-4e4d-be6f-92f77f7112e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914c2d8e-b431-4790-b002-25bc601a2ac4",
        "cursor": {
          "ref": "8fdb76e8-4aa2-4d74-bc13-86f6b7099bea",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4e9edd6c-2d1a-421e-9147-f4b2ad64888d"
        },
        "item": {
          "id": "914c2d8e-b431-4790-b002-25bc601a2ac4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "dafe847a-d3dd-48ab-819e-e6af747c857f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9db100b-e91c-4f5e-9751-ed81fd399e0e",
        "cursor": {
          "ref": "896ebdf8-1e1e-420a-9a42-6ef28399e6c7",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0b7ef722-01c2-4071-90dd-c81bd23f2d23"
        },
        "item": {
          "id": "e9db100b-e91c-4f5e-9751-ed81fd399e0e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e3f114a9-7c0c-4203-875f-9903ec731217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed85025-e36c-45ec-b412-e06b6fd841aa",
        "cursor": {
          "ref": "ebb6cac1-e30f-4fdb-bc2e-f56c528490fc",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c50cac4b-910a-4268-bfde-bd7abb50f9b0"
        },
        "item": {
          "id": "eed85025-e36c-45ec-b412-e06b6fd841aa",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "754adaf7-f236-480f-b595-860d288a5b52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d934bd3c-7341-41c6-bcdf-43373f7b1842",
        "cursor": {
          "ref": "739bd1e8-536a-4e6c-9a25-c94767a3c944",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a40098cf-76a9-4a19-8715-63b6caa7f863"
        },
        "item": {
          "id": "d934bd3c-7341-41c6-bcdf-43373f7b1842",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "dfcdafa1-cc7c-451f-969e-7c302fb0274c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a229ae6-a00b-4143-8889-09175ff38db6",
        "cursor": {
          "ref": "b7ea477b-e52b-4b48-9cdc-6867ddcf4fba",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "84822ce9-846a-4c27-94c9-7ea43c8e923c"
        },
        "item": {
          "id": "3a229ae6-a00b-4143-8889-09175ff38db6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "20e6b0ff-511a-486d-84a0-d1ff0b9f75ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26986f8e-9353-453b-b5bb-44a3d29c7210",
        "cursor": {
          "ref": "225418ed-5684-4146-83c9-c60528786f75",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "db4b3403-2e36-4269-a5ce-b87cc782562a"
        },
        "item": {
          "id": "26986f8e-9353-453b-b5bb-44a3d29c7210",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "97a6ffb3-c0d2-457e-84ec-6778a0a20284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c897eab-bfca-49ab-894d-43301b58e53e",
        "cursor": {
          "ref": "569b3c17-e869-42fd-a557-a5dd31698e7f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f68f0341-eb08-4efd-8c00-e5219873b1c4"
        },
        "item": {
          "id": "5c897eab-bfca-49ab-894d-43301b58e53e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bfb5acab-808a-4c49-8d71-251379544b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ff51e9-8826-4efd-9626-7016038d9236",
        "cursor": {
          "ref": "b3503c75-d82c-46d4-a334-e1ba6bc5eb6f",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "70dec5e9-01ac-48f2-803e-d3e4acb1bdfb"
        },
        "item": {
          "id": "f8ff51e9-8826-4efd-9626-7016038d9236",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c755f96f-30de-4ddb-b380-52d762ae41b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8488d705-160c-4832-a3c0-5ec97d40ab18",
        "cursor": {
          "ref": "5b805c99-5669-4843-8c86-b9bb62b52dc8",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4bc6d221-892b-4a81-805f-acd1202f191b"
        },
        "item": {
          "id": "8488d705-160c-4832-a3c0-5ec97d40ab18",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c6d88d93-9feb-48cd-a086-324bcf57bdc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349ac33f-7d17-45cd-b8ea-6b1ccf5b2cd4",
        "cursor": {
          "ref": "4dbcfc2c-7846-4bbb-945d-dc3192bbf209",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "923b7c38-cba0-4e2c-af97-b2a3bfd56b57"
        },
        "item": {
          "id": "349ac33f-7d17-45cd-b8ea-6b1ccf5b2cd4",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c94cc52f-d066-41bc-813b-08f95d6258b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea54ea30-4931-493c-8ef2-b76702a78596",
        "cursor": {
          "ref": "54ab2cde-e502-433d-893c-33004f0c68cf",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4e001905-da8f-4dd3-962d-d9514510ad4e"
        },
        "item": {
          "id": "ea54ea30-4931-493c-8ef2-b76702a78596",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "912350b8-4736-4a4e-9230-4ef92faea680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3547cf6e-214b-4e55-b937-cc8e76804bcb",
        "cursor": {
          "ref": "82be427e-ad91-468d-814e-0db767c85266",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b597e230-4139-4dce-99c7-339368203f9d"
        },
        "item": {
          "id": "3547cf6e-214b-4e55-b937-cc8e76804bcb",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b1bcacf6-fbb3-4e5e-b3e8-e3ac8830625d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be76108d-7c71-40b1-a8d6-451ff29ee767",
        "cursor": {
          "ref": "5445723c-1562-48d8-902e-448b0528379f",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "520ab2cd-fb1e-46a6-ba68-1feead64aa97"
        },
        "item": {
          "id": "be76108d-7c71-40b1-a8d6-451ff29ee767",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "3e2f715f-b06c-401a-b583-0d5ec2b5c12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc3524b-27ff-412f-aa9a-4028d0049279",
        "cursor": {
          "ref": "d20522c3-a031-414b-bfe8-6dfce73b04a7",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4a3963a2-47b0-4526-a55b-1449f3ce5fb3"
        },
        "item": {
          "id": "cdc3524b-27ff-412f-aa9a-4028d0049279",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "da3aef33-3fd8-470b-bc3d-af224505c950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92874f93-8a19-423c-9ca6-1f8373045257",
        "cursor": {
          "ref": "d92ff065-aae9-4d8c-8d27-89cfa27b2018",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "84c13149-80c9-4b49-9ae2-5476a1b14743"
        },
        "item": {
          "id": "92874f93-8a19-423c-9ca6-1f8373045257",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5e1fecb8-9bb7-4119-a070-4881da545aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74c11a6-612c-47db-a9f8-27c1ee60c6c0",
        "cursor": {
          "ref": "e3486d78-aebf-4300-80bc-1953a6d6ecbc",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9eb52e67-7b5f-4312-89a5-9d2602bed947"
        },
        "item": {
          "id": "d74c11a6-612c-47db-a9f8-27c1ee60c6c0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "50d56905-55ea-4c6a-a522-e03f73f7211b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20549ccb-0d26-423f-9019-82fddb9a54d7",
        "cursor": {
          "ref": "519b6ef3-5a4e-4db7-a813-10d5d2516c57",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f91aec86-9953-4632-97e6-e45dc5b712fa"
        },
        "item": {
          "id": "20549ccb-0d26-423f-9019-82fddb9a54d7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "09ce8099-d844-425e-b871-6617a7008ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5f0f25-2d4c-4a4e-b7df-30fa43e93b1d",
        "cursor": {
          "ref": "53712aca-ba18-4f91-9812-379caee80e96",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "40571567-1b39-47a3-b696-229d5c728c43"
        },
        "item": {
          "id": "fc5f0f25-2d4c-4a4e-b7df-30fa43e93b1d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "83ecb4e1-7c71-4761-b59b-8b45432b8e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7e5ec4-e378-461c-aae3-383d2940f282",
        "cursor": {
          "ref": "01687eca-d4c6-4c1c-929c-0748badc49f3",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1623003e-36a3-4a53-9861-2fcf3233eb69"
        },
        "item": {
          "id": "1a7e5ec4-e378-461c-aae3-383d2940f282",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fd96ed6c-7dee-4ab8-8311-37137bab9a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbaaa455-5aaf-4ca9-aa07-547d6794b571",
        "cursor": {
          "ref": "5bfba7e3-261e-4e18-a587-de9ca0a79396",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "23042b44-3632-4867-ab71-ac5f067b42cd"
        },
        "item": {
          "id": "dbaaa455-5aaf-4ca9-aa07-547d6794b571",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a01590d0-b279-4904-bd27-c568e71f282b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e0f093-810f-480c-9977-9099dbebf681",
        "cursor": {
          "ref": "b9fdbdc4-0f61-4ee6-929a-b61325665812",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9a836860-fa3f-4e9c-83a2-0b96fb67a988"
        },
        "item": {
          "id": "57e0f093-810f-480c-9977-9099dbebf681",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "21d581d8-61df-4de1-8b5f-d30c0d80925f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5fb861c-44ee-4f77-9a85-5382be830bb9",
        "cursor": {
          "ref": "a2121344-a747-46f5-b188-6fddcb2cab0f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "97b3380b-b27b-48d1-86bd-cb03d59f0680"
        },
        "item": {
          "id": "f5fb861c-44ee-4f77-9a85-5382be830bb9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d4fd0bc1-1aec-4507-9ba3-05bea0e4e064",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "08a63b2f-f7a3-42f1-ad38-6932c370d8c1",
        "cursor": {
          "ref": "ae71d2d4-0eda-4176-a346-97c68abeb353",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c039cf09-9949-4960-a3f9-505c6f7d2761"
        },
        "item": {
          "id": "08a63b2f-f7a3-42f1-ad38-6932c370d8c1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "40f0501a-4db0-4da4-90f6-d7aeddb4895b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835f8fbb-dda4-4274-93a7-e378386b8784",
        "cursor": {
          "ref": "fe67be22-6f58-4458-b919-ac3ecbcb068f",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "64095db4-8434-48ad-8b7e-98f517df2ef0"
        },
        "item": {
          "id": "835f8fbb-dda4-4274-93a7-e378386b8784",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9f7e7ec4-b577-4baa-97b6-bf9c700a1e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "564335b1-a7bd-4199-b725-3373d3750821",
        "cursor": {
          "ref": "7851aaba-1f10-4bf4-90ad-39c6bfbd9a6d",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "04c78b9e-c356-4d50-a5dc-2feae4aaeb12"
        },
        "item": {
          "id": "564335b1-a7bd-4199-b725-3373d3750821",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bf8e6f54-66eb-48df-a151-07bc8fc12791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71fdc22c-cced-4c34-ad3b-527b8e253751",
        "cursor": {
          "ref": "e98a6f9c-7644-4919-a203-ce3af9286114",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "63651746-0434-4ad4-861c-89bb6fa3b357"
        },
        "item": {
          "id": "71fdc22c-cced-4c34-ad3b-527b8e253751",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f4ad817e-e296-42ea-83e0-5804135f5007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4fb0fbf-6f55-4362-a7b6-a823ec505377",
        "cursor": {
          "ref": "664b24bb-023f-4406-afc7-c4118a1c7cb1",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "40a8090a-3937-4495-878f-1d32a66de2b7"
        },
        "item": {
          "id": "d4fb0fbf-6f55-4362-a7b6-a823ec505377",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "11dde2ce-e023-4dab-939e-7b490067e945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb2b2fa-a483-44d4-8d57-f44e987a6b02",
        "cursor": {
          "ref": "c37d81e4-0ebe-4906-8078-b1a57935003e",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2160004b-a372-40e1-84b3-e376d1809e59"
        },
        "item": {
          "id": "6bb2b2fa-a483-44d4-8d57-f44e987a6b02",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c330fb97-3942-4d07-baa9-453129fea085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e9225d-2a81-4266-aaca-13681dcd38fb",
        "cursor": {
          "ref": "72082e30-1d14-49ea-9c78-8d820281ad12",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f4b4f08a-c7e5-4f2a-8062-98feb7bd492d"
        },
        "item": {
          "id": "82e9225d-2a81-4266-aaca-13681dcd38fb",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ca59e220-2be0-485a-b09e-1483c94b3e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236eb9a4-3e7b-4ae9-8702-13b069d0f9b9",
        "cursor": {
          "ref": "00396778-ba21-44b2-9927-59307ddc745d",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "41794f4d-ce6a-41b7-a1a6-0e8d1fe65aa9"
        },
        "item": {
          "id": "236eb9a4-3e7b-4ae9-8702-13b069d0f9b9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "4378a44c-56e3-48ca-8842-94328abf9824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c3b577-6310-45d7-a54f-1021553b6015",
        "cursor": {
          "ref": "9a89a0e6-1268-4e87-a5ae-92c466a85b37",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d045ed7c-836b-4b21-8296-de68cae2d6ce"
        },
        "item": {
          "id": "e1c3b577-6310-45d7-a54f-1021553b6015",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ef3b3b2a-d3f6-44a2-9325-f63c33bc07b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528009aa-14fe-46cb-8d2c-cb9a350ac44a",
        "cursor": {
          "ref": "84b66f68-32ab-4a9f-930b-b280f44b5c6c",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "73559e2c-52db-4827-a248-e5693a6f00e5"
        },
        "item": {
          "id": "528009aa-14fe-46cb-8d2c-cb9a350ac44a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6e188970-8182-4eb7-a12d-a8683de84597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73830aaa-a28d-4682-9299-17fdecf27925",
        "cursor": {
          "ref": "4b536354-e556-4a7c-ad9a-2e0779f44780",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "585e62da-09ef-42e0-b292-b49817934a26"
        },
        "item": {
          "id": "73830aaa-a28d-4682-9299-17fdecf27925",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3ae56eef-6b67-4bd0-bb3f-4668d98c8c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1710a166-dbc6-47e2-8f88-be6b95fe7f60",
        "cursor": {
          "ref": "2a7b1920-b7d8-4f09-bd09-5b84ca5816d2",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1e6abe99-f8cb-458f-a281-ddfc2f838ff2"
        },
        "item": {
          "id": "1710a166-dbc6-47e2-8f88-be6b95fe7f60",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8c56ec7b-b559-484a-830e-f6cd65332898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf7aaf7-132b-4b58-b804-bf8d501e85ab",
        "cursor": {
          "ref": "caeb707c-cdfc-4237-a848-ce4fe9aab4dd",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "32368c99-700f-4c7f-af4f-6b8768aa5a2d"
        },
        "item": {
          "id": "ccf7aaf7-132b-4b58-b804-bf8d501e85ab",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "500cc513-405b-4380-987c-d9f0c95899e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4548070-8e09-4fac-8aaf-11bb4f462f22",
        "cursor": {
          "ref": "8794a1f2-fb39-449b-88f8-510874bc488e",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "61cb8187-5e3b-4fb5-a152-65ca5293b36c"
        },
        "item": {
          "id": "e4548070-8e09-4fac-8aaf-11bb4f462f22",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b3e8edc0-873a-4715-bc1e-e539b379f699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b85363-b63b-4427-b92e-32c9104e912a",
        "cursor": {
          "ref": "c5892227-711b-491c-a7d4-967c44857193",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "24601282-0bda-483f-a2f2-1013b01383a5"
        },
        "item": {
          "id": "a6b85363-b63b-4427-b92e-32c9104e912a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1bb93cd0-23a2-4e48-8644-c58ed1a5c45d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42f9367-aeb9-4bd9-b6ef-cb317587421e",
        "cursor": {
          "ref": "26d4fba5-5e88-40a3-a2ef-d002040c9fef",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "75848be0-d4a5-427a-9a94-fda0abe4d892"
        },
        "item": {
          "id": "b42f9367-aeb9-4bd9-b6ef-cb317587421e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8c5da9d1-e5ca-4386-a035-e07a495744ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91400071-b36f-4f4f-b2de-3c34f09fe2cd",
        "cursor": {
          "ref": "7d9d38d3-88fc-4266-8959-0bb3e1726529",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bb7220dd-4261-4735-8eee-709a43f39397"
        },
        "item": {
          "id": "91400071-b36f-4f4f-b2de-3c34f09fe2cd",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "758858c6-e1cc-4358-84f6-479ca88c339a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80747a87-2d08-4a58-b993-7de7036c3689",
        "cursor": {
          "ref": "52322d0f-fb68-4bc4-83df-1a29259ef792",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "002760e8-5db6-44fd-9cb4-99bb0764dd7b"
        },
        "item": {
          "id": "80747a87-2d08-4a58-b993-7de7036c3689",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "137c708e-947c-47fc-93c1-4330a19becd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12fa757b-23c9-4a16-8ba7-d6288ab6f82a",
        "cursor": {
          "ref": "8c0bf3d0-7213-4e6c-9f46-2c14a6bb54a6",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0c87c3ea-e62c-4132-92a7-cf3956e73b56"
        },
        "item": {
          "id": "12fa757b-23c9-4a16-8ba7-d6288ab6f82a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "27e28623-7b98-4b5c-92e1-010785f10a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941586c5-66c6-4acd-ad9c-ab0cf8c2dd4e",
        "cursor": {
          "ref": "320180c2-6e65-42c1-94c8-f7047fd21a1e",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b7d7b5db-15f9-4006-a1f1-f38366ed9f3d"
        },
        "item": {
          "id": "941586c5-66c6-4acd-ad9c-ab0cf8c2dd4e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "af9f6340-fb73-491d-b243-05ee493c9337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958d7b5f-1292-4325-9a9f-bcf8fae03ba6",
        "cursor": {
          "ref": "fdf4228e-d95d-4591-a0ae-af4af7602657",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "67d73978-b61c-45a0-833f-b2d5d7cbeb90"
        },
        "item": {
          "id": "958d7b5f-1292-4325-9a9f-bcf8fae03ba6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "713eec38-bd5f-489a-bb59-16f53e13c833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee875362-94d5-46db-b85d-d7f5a51a71e1",
        "cursor": {
          "ref": "d14eb261-a457-428a-95de-f04ed0e8b2cd",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6ee9138b-181f-420a-8d0a-209c92de7bba"
        },
        "item": {
          "id": "ee875362-94d5-46db-b85d-d7f5a51a71e1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "66aca49f-c354-403a-8907-03404ac0c7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba244b5d-6864-437e-8a14-2aedac36768b",
        "cursor": {
          "ref": "8ed56bd8-7f2c-4038-8c9a-6a6317adcd76",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "31f60acd-c729-4352-b478-8db3eb7372f7"
        },
        "item": {
          "id": "ba244b5d-6864-437e-8a14-2aedac36768b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bd67e730-31d4-4511-a298-db7a6dfd9c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a3e318-0bbd-40ed-9406-2a4dfe86515d",
        "cursor": {
          "ref": "a07dfcaf-ded1-46af-8eae-88e428a57e52",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9bf1631b-efb5-4f1c-a23e-0a4236c80a9f"
        },
        "item": {
          "id": "63a3e318-0bbd-40ed-9406-2a4dfe86515d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9aceccc0-98ab-4c7d-b490-be9a3ee3ab64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca62136-6d6e-403d-90bd-939128b0f991",
        "cursor": {
          "ref": "507ef2ed-33a5-4bc3-8938-076f7aa30036",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c47f7f2e-6875-4035-9e39-58aac6a4b890"
        },
        "item": {
          "id": "aca62136-6d6e-403d-90bd-939128b0f991",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4adf084e-d037-4dc6-a4f7-eca2b97dc22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24c9a2b-0243-4ebe-8d2b-6bb6ff17dfb8",
        "cursor": {
          "ref": "56017ce9-2827-4e8f-838f-e03708be23ba",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "77e1cf23-54a7-45dd-a8ab-d39d1770f05f"
        },
        "item": {
          "id": "e24c9a2b-0243-4ebe-8d2b-6bb6ff17dfb8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "bcb03646-78d3-4576-a443-340968e9d06c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0cd8db-cc46-495f-ae46-da7640f4e970",
        "cursor": {
          "ref": "12bcdbf2-6f1a-4fc8-b67f-436da9db4822",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d0ecb2ee-ee53-4dbf-97a4-719d2053248f"
        },
        "item": {
          "id": "7d0cd8db-cc46-495f-ae46-da7640f4e970",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1d7a778f-5a73-4daf-a566-1a5c0100ea8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd4b4c2-df4d-47b1-b3c0-1dc26f0f498f",
        "cursor": {
          "ref": "d106886b-480e-422d-90ff-998ef1a61fbd",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9512afa9-6471-4cc2-b0dd-93b5ebbba2a1"
        },
        "item": {
          "id": "bcd4b4c2-df4d-47b1-b3c0-1dc26f0f498f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "bf531703-216b-4689-91b0-d9240baf07c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07164a07-ca42-479c-a4f0-9c218379ccba",
        "cursor": {
          "ref": "fa7f19cb-4936-476d-9183-f2b66404bf6b",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1d548964-ba60-4f33-9bf0-4d518a2a5ccd"
        },
        "item": {
          "id": "07164a07-ca42-479c-a4f0-9c218379ccba",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ffa1001e-9db9-4213-b6de-0ede86a2af1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07fb9926-ded0-4724-a008-54f27b123d25",
        "cursor": {
          "ref": "7eda52a3-15bc-48b4-8e59-e94c7a99a85b",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "00711387-dc49-44f3-888d-18ddbc402d8a"
        },
        "item": {
          "id": "07fb9926-ded0-4724-a008-54f27b123d25",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b4ac0d32-b2e9-460e-adcb-3d300931ee06",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "446d5e62-8520-4978-aeb2-ffa85cd698d6",
        "cursor": {
          "ref": "2eac2bb0-7780-4bf7-a7b6-c1f69c20ff01",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "60e843c0-9a5c-490f-a3ec-106ed84a8f39"
        },
        "item": {
          "id": "446d5e62-8520-4978-aeb2-ffa85cd698d6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3e57007c-7308-4e2b-80e5-f54d3c57e6f5",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "d1f15dea-3724-4dc1-9e28-e906ef04681e",
        "cursor": {
          "ref": "01a13650-f2c6-487e-88e1-99c58eb2395d",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7649453f-68d7-4e37-8d11-4cb768279449"
        },
        "item": {
          "id": "d1f15dea-3724-4dc1-9e28-e906ef04681e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b1e6f7e7-360d-4fd2-8f00-9bb0ec67fe4b",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "60b8011c-6fb8-46b2-80b4-f552263c6786",
        "cursor": {
          "ref": "a01a815b-0735-4c33-8f85-b598d5195246",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "99b844cf-e425-4d1b-adb0-0574a5bbd71d"
        },
        "item": {
          "id": "60b8011c-6fb8-46b2-80b4-f552263c6786",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6d537069-0d06-4e82-8ac4-97c713603f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4f2361-b01b-44d2-916b-269a7642b297",
        "cursor": {
          "ref": "b24d12ce-a8bf-4773-8060-8a6be8fd7a8b",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e2ab1291-1542-47a1-84aa-7e8b9300a520"
        },
        "item": {
          "id": "9d4f2361-b01b-44d2-916b-269a7642b297",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "56bdddfc-9c7f-4b37-a35d-8c63fb393953",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "bc5077a2-3049-4617-8d74-81633a4e86c8",
        "cursor": {
          "ref": "f9bea1b0-1db1-4005-8e9c-9184ab9206ad",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "51f22878-aa01-4c4b-a8fb-474c91e8c84c"
        },
        "item": {
          "id": "bc5077a2-3049-4617-8d74-81633a4e86c8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "30725ad8-46ff-497a-af06-fc54046f9b75",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "cbe52120-1156-4d4c-acbf-f3e2396604f4",
        "cursor": {
          "ref": "53e44cb7-75a7-4841-ab52-475ef68b9b64",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "40d54359-e03a-4993-b350-47866c6de255"
        },
        "item": {
          "id": "cbe52120-1156-4d4c-acbf-f3e2396604f4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ee4918e6-6ab1-4a94-a6d2-615eef731176",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "9e32ec43-4b09-4d60-a786-6cbaf159c815",
        "cursor": {
          "ref": "354bfb1f-f63f-46ae-93c9-6d54d1e99590",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b5917ae7-f586-4f13-bded-b9d196400e4b"
        },
        "item": {
          "id": "9e32ec43-4b09-4d60-a786-6cbaf159c815",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7c9825f4-f8ed-4a46-b7c8-9542d61f44e5",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "246143bf-fa51-4b62-9a8d-f1b4c72f490a",
        "cursor": {
          "ref": "3baacc6d-a10c-46bd-88ed-6ba441ec4f9d",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1ee1cbaf-f835-454e-abe3-7dd2ce8ecc3e"
        },
        "item": {
          "id": "246143bf-fa51-4b62-9a8d-f1b4c72f490a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f5cfb6cb-555d-48a9-83fc-97cd9b43f802",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "e6c9ced1-6b3b-427b-9812-f50c9100dfc5",
        "cursor": {
          "ref": "a5d76a2d-ef4f-4b30-92ff-95b2e95970a2",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "027b61b3-afec-4438-855e-883ba609f78a"
        },
        "item": {
          "id": "e6c9ced1-6b3b-427b-9812-f50c9100dfc5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b671c0fb-dbf3-4d34-8623-5a27b21a21e6",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "8de901d3-b827-4a42-b1e4-0238762424d3",
        "cursor": {
          "ref": "ad26f2b3-250c-4cbd-922e-32c16ad76acb",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "14e6ef69-2ae8-459f-a30e-27c9048a2bb1"
        },
        "item": {
          "id": "8de901d3-b827-4a42-b1e4-0238762424d3",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "28e7a48d-4d39-4684-86ad-ec1c6cf416bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f573bbf0-c522-4244-9bb1-0c49cec28a25",
        "cursor": {
          "ref": "8094d6e9-79b3-456c-8afa-7c6dc22558f7",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e6f6ba6d-d18f-47d8-9a04-169d37eb200f"
        },
        "item": {
          "id": "f573bbf0-c522-4244-9bb1-0c49cec28a25",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5e8b7bd4-be63-4012-a09a-3a9e249d444c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9020a869-d377-4265-a99d-21917249016d",
        "cursor": {
          "ref": "683ab0bc-fb12-4567-be77-d74ee9d1a3ad",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "aebe46e8-4e21-43a4-afc6-c0ee713f861a"
        },
        "item": {
          "id": "9020a869-d377-4265-a99d-21917249016d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "04810730-d530-41fa-be89-d2614ac224c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751d0dd7-3d43-453f-bbf7-e2f5b9fc37ac",
        "cursor": {
          "ref": "445785b6-bfbb-4092-8955-0cab8bc601fc",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bac8fe41-07d0-4cbe-a304-0974b5863b5a"
        },
        "item": {
          "id": "751d0dd7-3d43-453f-bbf7-e2f5b9fc37ac",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "af7f2111-0df4-42c7-923a-e32bce911115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c150de-1dae-4b19-b4d0-cbdbbc3199bb",
        "cursor": {
          "ref": "08e9dcbc-8375-4d6a-879b-1272e4596375",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1bd8d156-d695-41ea-87d8-b0211c1f5748"
        },
        "item": {
          "id": "86c150de-1dae-4b19-b4d0-cbdbbc3199bb",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "606a7b13-15a2-41b0-bd7e-b8938f5e415d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414231f7-0667-4610-af6d-492edaa0fdd0",
        "cursor": {
          "ref": "fdbdfe27-4964-4903-b31d-cc4b994ef4fa",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e86c967e-e986-4ad6-9297-dbfba673cd32"
        },
        "item": {
          "id": "414231f7-0667-4610-af6d-492edaa0fdd0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3bcfda63-2ad3-4d88-9677-ab60281e202e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82246848-79c8-40a7-ba11-3a327d7a78ce",
        "cursor": {
          "ref": "1878398b-a8de-44f1-b421-ffdc8d7fb52b",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4b305e7e-0f0d-4639-a72a-129013fca4cd"
        },
        "item": {
          "id": "82246848-79c8-40a7-ba11-3a327d7a78ce",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7e3a4fdb-ec00-4e06-888a-1832bab514ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609813c6-d048-4711-b78f-3a07d37834e0",
        "cursor": {
          "ref": "e82a97de-0e52-4325-9146-5dfa1dac4df9",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "48d157ff-22b3-4fc0-a9b2-cfd8d5ed28e5"
        },
        "item": {
          "id": "609813c6-d048-4711-b78f-3a07d37834e0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "307b49d8-6e15-4511-b887-dd0fe187066d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d284e8-1cff-47a2-b8f0-9245eb7a76eb",
        "cursor": {
          "ref": "8b34b3a3-63bd-4f5e-85a4-880cc3cd17a8",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "02e86576-b143-42e1-bd54-df4a698bcbb2"
        },
        "item": {
          "id": "02d284e8-1cff-47a2-b8f0-9245eb7a76eb",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7b766d54-bde3-4b33-8461-dd49b78565f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0395d31f-62aa-4841-9197-48a7a04ee597",
        "cursor": {
          "ref": "9c97b561-e2f5-4e0e-a5b8-1aeda27bdf10",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "aeb70c57-ad9c-45f4-95db-c478e5a59990"
        },
        "item": {
          "id": "0395d31f-62aa-4841-9197-48a7a04ee597",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "fed0dc18-d44a-4b4a-bcde-c291124d44bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4613859a-942c-4408-b617-97aaa70b8e77",
        "cursor": {
          "ref": "9db21d00-5ed2-4f36-8589-295915690002",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3ed01e1f-df89-421d-950f-8e8dcb9197ec"
        },
        "item": {
          "id": "4613859a-942c-4408-b617-97aaa70b8e77",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cf1da933-9660-47a2-862e-0d736c5a83f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806dd2fa-17ed-4bd9-b5d6-ecff1787687f",
        "cursor": {
          "ref": "e1321e19-e23b-408e-b302-12335a4d6819",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d90325dd-991c-43c6-8814-f6fcf4a1155d"
        },
        "item": {
          "id": "806dd2fa-17ed-4bd9-b5d6-ecff1787687f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "662e2e06-2b0c-4ffc-b1f1-88c9e0c95715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c602c2e3-3370-44ad-8f24-915e236c9ffa",
        "cursor": {
          "ref": "18c9d8f7-6d89-42de-835e-7ad440d1cf5e",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f0d33a47-470a-4e3d-a3cd-970d03702c26"
        },
        "item": {
          "id": "c602c2e3-3370-44ad-8f24-915e236c9ffa",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "70b3d684-e7c6-4902-a9c2-49118210400c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294f6cfe-554e-4375-b7bd-90b740f9cecd",
        "cursor": {
          "ref": "6b1250a8-465d-4e53-90fb-f9ffa764c67b",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5861f804-5c91-4d08-bc09-05dd5251a120"
        },
        "item": {
          "id": "294f6cfe-554e-4375-b7bd-90b740f9cecd",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "50a0ac0b-f57a-4f2e-9495-721066e138d1",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "2fe0ef3b-db94-4e6c-882f-52cd756ee878",
        "cursor": {
          "ref": "6b6beadd-6741-4868-8f4c-a4e331c197e8",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7fa95656-02da-4ca5-8654-d1ffd418c534"
        },
        "item": {
          "id": "2fe0ef3b-db94-4e6c-882f-52cd756ee878",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b428fdca-21af-4905-ab1d-03c9304c9b05",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "68ef8159-ece6-42ae-910f-7399603c6505",
        "cursor": {
          "ref": "5e53a0d8-d76f-4a80-992c-6365feb8bb41",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "fec01676-c4fd-488c-9dc2-4df69a16b3a7"
        },
        "item": {
          "id": "68ef8159-ece6-42ae-910f-7399603c6505",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "abc10465-082f-4400-ab3c-1aed89555fbe",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "e9e43015-d176-46b1-b09d-db75569e3453",
        "cursor": {
          "ref": "53e4bfdf-4b31-4ae0-93e9-fc6b79729501",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0be00ef2-ec0b-4dfe-b6f2-2e4f8d93f2af"
        },
        "item": {
          "id": "e9e43015-d176-46b1-b09d-db75569e3453",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "fe23d678-72a1-42bb-88a3-ba18e4baf555",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "722e8bbe-c0d3-43af-8ccf-612b0ea39e1d",
        "cursor": {
          "ref": "1b737ed2-fe1a-487a-8069-2f048f30ff11",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d29489d0-96d1-4d86-8963-fb24fc52d603"
        },
        "item": {
          "id": "722e8bbe-c0d3-43af-8ccf-612b0ea39e1d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d74c70ef-5256-4040-be32-ad3856ffb5b9",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b3a3dc23-5434-4748-9ce4-a05e8de6a4ed",
        "cursor": {
          "ref": "a276c679-b6dd-4dfe-a4b5-a60ec5d0d9cc",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "603aaa9c-b0f1-43a1-aeb5-c0f5d8f5b2d9"
        },
        "item": {
          "id": "b3a3dc23-5434-4748-9ce4-a05e8de6a4ed",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b8a71346-85c5-46fb-b470-682a476fd863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf6b947-2821-4575-84c2-9c87c72d6843",
        "cursor": {
          "ref": "230b6ba2-2235-4315-b0b9-198cea78c5eb",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2bc92ce0-e8bc-43c7-9cab-9c2823f2821e"
        },
        "item": {
          "id": "fcf6b947-2821-4575-84c2-9c87c72d6843",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1cd01756-db8e-420e-8a34-51753b5fafed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a6eb2f-92f1-43de-aaf7-1938efe4afbd",
        "cursor": {
          "ref": "ae82f3dd-539e-41be-bb4b-8444567b9418",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "63954b77-0e80-4c5e-ab67-7b5fc23dd3e4"
        },
        "item": {
          "id": "49a6eb2f-92f1-43de-aaf7-1938efe4afbd",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5aef8128-a0d6-4ad0-a110-81a5d0077c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "866089df-9787-4f64-bb8d-e1421e27d0d9",
        "cursor": {
          "ref": "39d8db69-55ff-4f3f-ae1a-de371a54d2a1",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4f1de0f1-892f-499f-860f-6d7aca7060bc"
        },
        "item": {
          "id": "866089df-9787-4f64-bb8d-e1421e27d0d9",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "dc481ee0-4357-4b56-9ee2-ac950dd23d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f13f18-6681-41a8-aa35-674862b61307",
        "cursor": {
          "ref": "23c765cd-a0d7-46b9-b904-09d13752275c",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a80ed48d-e18a-4604-bd8d-357b2738d531"
        },
        "item": {
          "id": "39f13f18-6681-41a8-aa35-674862b61307",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "76fca553-06a4-4815-892f-4bfba33f713d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2f8d9c-9d18-411f-9154-b03afc0227ec",
        "cursor": {
          "ref": "de5c9290-66c0-4a4e-a5a9-7d3ac537f921",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "77b4e309-6f17-4f6e-b306-92e23436e3cc"
        },
        "item": {
          "id": "bc2f8d9c-9d18-411f-9154-b03afc0227ec",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "307b6396-e4c9-4f1a-99f3-a724ba7922a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7be640-98e3-43c7-ba92-2228e144cca5",
        "cursor": {
          "ref": "759ea3eb-6d3c-41d0-9c5e-076ca4e29ce3",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6c1953b3-0662-49ab-a316-4d5bc2f9cbb0"
        },
        "item": {
          "id": "6f7be640-98e3-43c7-ba92-2228e144cca5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "cd9cdf0b-f078-405b-be98-ed20d203e310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab41ace-3d78-440a-b02c-fb2c51a82e44",
        "cursor": {
          "ref": "8c59a375-932e-4c1c-b527-458f845e59e8",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "bacee2ca-e616-4370-bc58-b5879d76e8a5"
        },
        "item": {
          "id": "8ab41ace-3d78-440a-b02c-fb2c51a82e44",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0ef79d7d-6382-4d9f-b9d9-0afaf9e96909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "338b1818-abff-46bf-b451-98d9a1f9025c",
        "cursor": {
          "ref": "91974a2f-d0e6-436f-90f2-633bed1009b8",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "31ddff56-eb51-4ead-a445-625aaf8082b0"
        },
        "item": {
          "id": "338b1818-abff-46bf-b451-98d9a1f9025c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "663ca222-b1f4-4274-873a-674878c8bbc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7734774-98e8-414e-b2cc-d47095fd7429",
        "cursor": {
          "ref": "ed1e7c01-19c4-482e-b9ff-4eadd9843f5f",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "38b953f3-2202-4e6b-b3d0-0e129549aebb"
        },
        "item": {
          "id": "e7734774-98e8-414e-b2cc-d47095fd7429",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d08f1313-d343-44c0-8621-b1b5490821bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38edbec-3a90-40d7-9164-0c853a670c4b",
        "cursor": {
          "ref": "0d1f9002-079f-4568-88c6-8eb619037f30",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "85bc1c33-5ab6-4b16-a12c-81628a974483"
        },
        "item": {
          "id": "b38edbec-3a90-40d7-9164-0c853a670c4b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ada47425-3f9b-4099-b5e1-d489b351e23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5abd665-f710-45fc-9f9f-ff22892233d2",
        "cursor": {
          "ref": "468884d4-85c0-4fad-b27b-b48ab0cd8360",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "d225d844-2ae3-4b8b-aed7-a17e66f91525"
        },
        "item": {
          "id": "c5abd665-f710-45fc-9f9f-ff22892233d2",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a5130c9c-ba9b-41f5-b968-ea3978b983cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738146b3-8590-44cb-9882-0e1241ff7ccb",
        "cursor": {
          "ref": "44919175-eeac-451d-b6a5-a876fd0979e5",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "84b28d18-6d17-4471-8a72-f4bc3be4d675"
        },
        "item": {
          "id": "738146b3-8590-44cb-9882-0e1241ff7ccb",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d2d3af9e-eb3d-4de5-82db-15a66748e3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ecf6e3-73b0-4d26-acd4-fa4d0a04145a",
        "cursor": {
          "ref": "881913cc-8ae8-47c4-8d05-4ceabe01ba99",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "9626d07b-ab70-400f-ba07-34d979eeb692"
        },
        "item": {
          "id": "f5ecf6e3-73b0-4d26-acd4-fa4d0a04145a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a3ec8f48-9136-4c85-9a92-026519f1e7c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06a96a3-fb2c-40b3-8ed0-2ffa9ec05fe0",
        "cursor": {
          "ref": "6724c792-bc9a-474e-9c72-94e8a790a5ee",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "1513aeda-b86c-49bf-ab14-10577d4de0db"
        },
        "item": {
          "id": "e06a96a3-fb2c-40b3-8ed0-2ffa9ec05fe0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0f7a25e2-d7ec-4384-a098-54c5e3ecbcb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "347485fb-430c-4e1e-901d-0646452e0122",
        "cursor": {
          "ref": "61e99fd4-20eb-4a39-b980-5b065173b5a4",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "e27f77a8-60be-47dc-84df-60eece00b027"
        },
        "item": {
          "id": "347485fb-430c-4e1e-901d-0646452e0122",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "428ada2b-3a9d-47cc-b1c4-71d8fd01f73d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33ac536-ecba-4e76-bc90-cfeec93457f7",
        "cursor": {
          "ref": "db24beef-f590-4919-a8cb-c7a971e547b4",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "69e1eea5-b2e5-484b-b6d5-28db89f284e5"
        },
        "item": {
          "id": "a33ac536-ecba-4e76-bc90-cfeec93457f7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "635818b4-20be-402c-ab45-760e38ee9a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1ad72a-70ad-49b7-b8ce-a9e9ac204a5c",
        "cursor": {
          "ref": "4f945cd9-ebbd-4c52-af6b-cecca5fe0f74",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "b1d52b00-87ca-4b35-903e-5b936c0b198e"
        },
        "item": {
          "id": "2b1ad72a-70ad-49b7-b8ce-a9e9ac204a5c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5849957c-eb29-4777-9490-dabaa4b94a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104635d8-f815-411d-bb89-4c0b31cd625d",
        "cursor": {
          "ref": "065cc096-3995-4089-b05b-e0284b46f925",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "2fe354c9-82a4-48ca-9d06-feee5b524aaf"
        },
        "item": {
          "id": "104635d8-f815-411d-bb89-4c0b31cd625d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b4b13b5d-7fca-4d99-9678-d0f989e0675e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7a2ea7-0a81-4fb7-93db-3dd4ab999d76",
        "cursor": {
          "ref": "7611a289-0c4d-4a6e-8c8c-14fd85756ab0",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "7822fd72-b374-4e93-b456-1fb55c8c54c0"
        },
        "item": {
          "id": "7b7a2ea7-0a81-4fb7-93db-3dd4ab999d76",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ea09b9ea-bf38-436a-b13c-d74ac97252af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea4c64bf-3c1f-463d-a058-748749023847",
        "cursor": {
          "ref": "2fd38c57-26a8-4a1b-9046-f02f619c8d10",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "f9f62d21-67e8-4a41-8056-2f447ba56b60"
        },
        "item": {
          "id": "ea4c64bf-3c1f-463d-a058-748749023847",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3dab665c-85cc-4298-9ebc-ff7bb1f267e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca478809-42dd-4eb1-9225-7936c485e24d",
        "cursor": {
          "ref": "1f302470-d01c-4ad7-9b14-587eb77275b9",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "0da63367-8aee-4e69-bc99-e885109b49d2"
        },
        "item": {
          "id": "ca478809-42dd-4eb1-9225-7936c485e24d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "45f4a55e-86f2-4870-9836-7ed15c3b840b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79a7b85-cbd6-4288-9202-d99009b89300",
        "cursor": {
          "ref": "4402115b-bf1f-4ec4-9574-8da8daf22e86",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "0e9f9fe1-d195-4fa5-a368-2f430623f41c"
        },
        "item": {
          "id": "f79a7b85-cbd6-4288-9202-d99009b89300",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d5654521-5033-4978-a5ee-d838b9e593cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef0712e-7577-41ed-b5ff-ddd586614755",
        "cursor": {
          "ref": "82fdd21f-210f-4d0d-a51d-4dd4dd7cb868",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "aaefd951-6d05-4e87-acd8-39b171e8e6ee"
        },
        "item": {
          "id": "bef0712e-7577-41ed-b5ff-ddd586614755",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "eecc9c00-7969-46cb-892e-a64aec543b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9da2f9-18cf-4249-a95a-9e5d26ea0871",
        "cursor": {
          "ref": "9624a7ea-b0d1-47ff-9377-b1b3ee9ec832",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "bdcef81f-e7c2-49c3-889b-114ab8abb3a8"
        },
        "item": {
          "id": "bf9da2f9-18cf-4249-a95a-9e5d26ea0871",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8ca2e46b-46fc-40e4-ae8f-9dd88ab357ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "701fd7d5-c199-44cf-b935-26b6c7e0fdab",
        "cursor": {
          "ref": "507309a1-67ad-43e3-bf61-a5a253ca2553",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a98149e4-e157-419c-881f-6f0f319b51af"
        },
        "item": {
          "id": "701fd7d5-c199-44cf-b935-26b6c7e0fdab",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "003af428-7f9a-40c3-912b-67553ec8f204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7052fe2d-d92f-406c-aaa0-cf050d05f1c1",
        "cursor": {
          "ref": "12914ed1-27bf-4437-9c53-14cbff34e3e3",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "52ea2b65-68c4-4457-ba04-5dc2d248d68c"
        },
        "item": {
          "id": "7052fe2d-d92f-406c-aaa0-cf050d05f1c1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c130bd71-3946-4023-8c11-73a993d7aed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcda501-5c9c-4b4e-a253-a14313e570c2",
        "cursor": {
          "ref": "1d23def0-5d14-407b-a13f-07cb83d3dcbe",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "89a41048-a9a3-4ce6-b481-85b265f31d70"
        },
        "item": {
          "id": "7dcda501-5c9c-4b4e-a253-a14313e570c2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9abc0ed3-7824-4111-a011-b9abfc00b214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0215dce-b319-401b-937f-4002b22965a4",
        "cursor": {
          "ref": "5f1c1c03-447d-4058-b990-6a98d70f8e3d",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "9de0b4d3-0fec-4acb-9e4b-0b834f13c1d7"
        },
        "item": {
          "id": "c0215dce-b319-401b-937f-4002b22965a4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7be42c03-fad5-47fc-b8a5-545bed050996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4556373e-71f9-4f8b-b05a-601b71dac58f",
        "cursor": {
          "ref": "44869012-730f-4b9c-85c8-82f6ef69717f",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "c070d7b2-f104-4325-8d87-0002f43f8469"
        },
        "item": {
          "id": "4556373e-71f9-4f8b-b05a-601b71dac58f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "335188be-aa57-480a-b9cd-ab05ef7daea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534eb843-46e6-4e82-88f7-162809d5dc4d",
        "cursor": {
          "ref": "aa2152a2-a1b3-48da-b154-ce00215510c4",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2760ad88-b803-47f2-a35a-0fb4c5eec110"
        },
        "item": {
          "id": "534eb843-46e6-4e82-88f7-162809d5dc4d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0bad007a-b6f9-4dc3-b28b-c3e414b70153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac9274cc-e96e-4d8e-b0e9-be20e9df5aae",
        "cursor": {
          "ref": "c065c1d6-680b-439b-9848-7a496babbaac",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "144029f2-4b1b-4e40-b432-89b58602873f"
        },
        "item": {
          "id": "ac9274cc-e96e-4d8e-b0e9-be20e9df5aae",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f3303642-01fd-496b-a6b6-75923a75eed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c09279-5925-416f-bd62-827ff02ead0f",
        "cursor": {
          "ref": "78ff4bcb-4e83-4ee2-9be2-9e0bcaf0aa98",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "2553ece4-7cbe-4b60-a400-aa763a5a5986"
        },
        "item": {
          "id": "b8c09279-5925-416f-bd62-827ff02ead0f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "69969e41-0ee9-42e0-9d8d-f927516b3541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1e5ea8-b623-45ef-8625-82e756ae91e3",
        "cursor": {
          "ref": "73b49113-ea7a-4256-a38f-3dcfddc4a6b2",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "dc3624ac-6cf0-44c5-ae1a-519faaf8247e"
        },
        "item": {
          "id": "be1e5ea8-b623-45ef-8625-82e756ae91e3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e1cea8d0-f1e5-4039-8c03-331f4d2096a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df6e93c-3b54-4415-933d-8fac91e2935e",
        "cursor": {
          "ref": "a88ee846-c3a4-4997-9d07-17cccdd05d75",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "2c4ef0ea-7f26-4e8d-81cd-276de9af8cb2"
        },
        "item": {
          "id": "5df6e93c-3b54-4415-933d-8fac91e2935e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "bc579a44-216d-4343-a690-e81bde185615",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f543a9f8-6de6-42b2-870e-0abf277272ae",
        "cursor": {
          "ref": "8f9c4286-a6b9-44f1-99d8-926e47d83901",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "63b5fa84-2b7e-4900-b3ee-9e16481aac59"
        },
        "item": {
          "id": "f543a9f8-6de6-42b2-870e-0abf277272ae",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "18e54823-3a2b-442d-b4be-d75d1fceecf6",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "258ddcde-53dd-45db-b087-5b9ec7060240",
        "cursor": {
          "ref": "d8915b28-b9ae-49ff-b6a5-4550e299c607",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "7a4532ab-230b-458e-8e41-2ffd5ee9e859"
        },
        "item": {
          "id": "258ddcde-53dd-45db-b087-5b9ec7060240",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cb910ccc-d2d7-4dc2-8646-b4d789619680",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9662a900-8e7e-4443-bd5f-10c502c54555",
        "cursor": {
          "ref": "f77e25a0-024a-4f01-9d81-fc78b5ff72df",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "9ad83018-9164-4a4d-b8cc-cea0eb538ecc"
        },
        "item": {
          "id": "9662a900-8e7e-4443-bd5f-10c502c54555",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "401d6f12-67b4-4420-a4e2-c350cf594c73",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f05a868-b445-4676-a123-37a8394c41ab",
        "cursor": {
          "ref": "dde43853-6240-46d8-8607-9aa0e1a9087c",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e2ed46f4-b4d8-4596-8fc7-34e4b4a477e4"
        },
        "item": {
          "id": "1f05a868-b445-4676-a123-37a8394c41ab",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f35e6cb2-9709-4101-b79e-a99e4f071c75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f05a868-b445-4676-a123-37a8394c41ab",
        "cursor": {
          "ref": "dde43853-6240-46d8-8607-9aa0e1a9087c",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e2ed46f4-b4d8-4596-8fc7-34e4b4a477e4"
        },
        "item": {
          "id": "1f05a868-b445-4676-a123-37a8394c41ab",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f35e6cb2-9709-4101-b79e-a99e4f071c75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf10e79-092b-4205-88ca-5150390321a1",
        "cursor": {
          "ref": "144f2a8c-a083-4fe0-bd0b-d183a7b045f8",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "a68c21d2-9fc3-4bbb-8d56-0a27a3f5af64"
        },
        "item": {
          "id": "bbf10e79-092b-4205-88ca-5150390321a1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "fcce9e9b-ecae-4922-9cf5-1c06368e69b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ecf64b-12da-4304-a98c-42db06fbc276",
        "cursor": {
          "ref": "b7221a12-0f5d-42fd-bc18-88c3f2da9db8",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "1045c6a0-e472-4918-b55b-9634495e6a4a"
        },
        "item": {
          "id": "88ecf64b-12da-4304-a98c-42db06fbc276",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f4794868-c2cb-4052-9617-70c415eab3ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}