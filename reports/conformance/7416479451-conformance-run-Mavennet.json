{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "24c008d7-9da3-462e-8d04-f56e519a226f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3a3a767f-05e3-448a-af3f-afc9407a3a1f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "346ea39b-3d1f-4fba-bd83-83930459149d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "edacd371-6983-4fb3-9982-81ce1386a45a"
                }
              }
            ]
          },
          {
            "id": "73eb2b29-c11b-4d01-b8d0-923058bed8d5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ae22696a-bf06-467b-b09f-95e9868d1588",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6f855599-b5f9-4816-8c73-22f921bcbb56"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fe978517-0b1d-4584-a62d-4016205f5f1a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e4778c0c-22c8-4fe9-bfbc-268f2d7a7293",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1304fbe4-799a-46e5-bad9-8fe68a660108",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "071deb49-ce52-4cd0-a852-114e877d51d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c8a593be-b42a-4c58-9c06-0a532df75112"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dc01c1f6-ef27-4bd4-8cd7-ebf16009c884",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ed79eb6-9ff6-4084-8389-2548291a1794"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "00a891a8-ad13-41d8-9fab-74bec2c8a454",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a03bf61a-2a7a-459d-96db-2ca7decb80cf"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b337faa7-2d98-424b-a1aa-3e3e373ccd9d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0fcfd53d-9d75-401b-8c2c-d7ae4e8ec7c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66564b2d-62a0-47b8-9f46-d33304a9e821",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9fee7266-a344-4313-aa88-771cc48b43ee"
            }
          }
        ]
      },
      {
        "id": "9e1dc33b-bebe-4417-ab70-3f306b6e966a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a4938e9c-7e34-4a14-8ba9-ca8005e73965",
            "name": "Negative Testing",
            "item": [
              {
                "id": "22cbd900-49d5-446a-a464-ed2074cc9a05",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "af060e90-1281-425d-9614-c805789b174c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2eeb7a-8004-48cd-9a91-ce86ab9f4704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3287e9d3-0261-4a7a-95d8-6dc3e4a75f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a67f695-1fc6-4359-9d88-54ad29486d04",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0e8f22-e6d9-42e6-ad5f-5d43e7ee56b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95864eab-dedc-4caa-9680-a327d3616c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960e9cb2-da59-43f2-913f-95901b3dc619",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769ede56-adb5-47bf-a098-80320467262d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fddf8d5d-f254-4ca3-b1ea-e90afd3d1cb5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "24a62693-dfcb-4b7e-bdd9-919bbe1c1a63",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a49c075f-6ff5-40db-9607-c5948e052f35",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "304c73eb-b58a-4158-bcd9-647a4781623c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4649567e-eb52-49ad-9d0c-0938da7543f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ca9630-3405-4ae3-ba65-757c5acb1023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f19b34b-be33-4288-9ec2-a06c53f31b8f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e95fc4e1-b4c2-4476-bbff-21073161c420",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a56ba598-f425-46a5-9b7a-ceffd37813e2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25a6db8d-5569-4bbd-a6c7-07a926af3946",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e5f0d3dc-1058-4d5b-8402-cb60b195e268"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "18cd3bb8-42b4-4210-a251-71162fd2a434",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b3ca55a1-34ce-4e5d-937a-8dc8adec44a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad6a14cc-60b0-473f-8198-1991a4d2509f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7cad4bf0-511f-4ca9-bd17-840610c4a1d5"
            }
          }
        ]
      },
      {
        "id": "892d671a-aaf5-4449-b140-5a3d4cbee54c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5dc87ab5-1e33-4d92-814a-e92596dceb7a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c0c53539-4f11-45b5-8379-2dd3fccf2d0d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1286cbc9-b42f-480e-bf4a-38396c26b27d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270493d7-cfa9-4ea8-9bb6-b585a2556b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6bda1a2-bd52-411f-b2c1-37ab084205d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa8101b1-7ec9-49aa-83f7-f0cb0efb8966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5dd278e-a7eb-49a8-85e8-063c6fb5feae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1944f4f-9832-43f6-a7b6-75882f79f9f1",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10014a67-64ba-43b5-ad09-e9c3feb1942c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d7c0da5-4840-4af0-882f-df7ee066f344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073cb3fc-b29b-4f28-9f7e-42c09e9ea76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f457c163-1a9d-4e5b-bc87-4d454f3ef160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71d35a3-cf57-4619-8e30-7f8a967af134",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "accf52ee-5f46-4bb2-a01c-59dfb09eb9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6615b5d1-297e-402f-917c-7373ed5dbbc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68abdbf-6792-415f-9c4e-35fb87ef9ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a940ca69-850a-4765-ae29-6ef416f8b256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44bf7f7-7aa4-4065-96da-13ab96e9853a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e703d8a7-3174-4024-9d8c-b40086374104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06c752d4-f391-4b25-9d4d-085ba2b6a1fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b7716f-c064-4ba5-b268-3c92f2c1b6fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "003525c3-7580-4386-acb6-f47dd0bfd181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6d897e-c0f2-47ff-a4c4-0ca0c82610ae",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd2981b-7d9f-42cf-b386-176b06245ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaedfbc5-a67e-4c9f-8d81-d13fe5cfb26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ebce65-839c-4bb3-8374-194f822d22bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df136326-5ff5-4ecd-a6a4-bde58d01add8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455feee4-4826-41c1-8b40-2e8f98f1efdb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd815dd-fa05-4190-bb0d-e124d6751fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91245075-c7d6-42d1-84fd-a4ac2e79beea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adeb3e01-b828-4070-a6a7-6f8df02be91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17a7c0f6-70f8-4f8c-8f86-a691250488da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a98dece-0c29-4b28-856a-b0e911a07ea0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fb081e-e63b-4739-bc84-7b6e402054b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad8a4d6d-c9db-46af-82ca-b5faf1520b5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1f7fe8-c5ec-43c6-aab0-d105645d10e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6621b019-48d0-46c0-a4a8-48fff1159f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96382860-dc4f-44a4-a631-f4bdb1c0501b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6b01a7-544c-47b1-850a-cd27b1706522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ea8272f-e36c-4d00-970e-6c4d9d8a3f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b237c0ca-9cf1-4daa-8775-2cf263805cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98fefbc1-7806-4ff6-b9b2-d188109c4086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a311bfb7-fd1f-40e0-87cf-3aa4483c6a3a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad67155-50ee-424f-bdba-823ddf71e13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b750c5c4-718f-4a49-88a2-92482a242da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49029293-c71b-4419-86da-c0b045da1afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0be8b8bd-93d4-4645-827e-8cd9a93f1070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7a38e2-4d05-49b8-a64e-2f9477984dcf",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca331c7b-bb33-4703-a78b-184638293c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f89adde-105a-4e3e-b183-a4e0f1d4883e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c17edb-4b94-4eb4-b929-669e84c1c99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "baeb762d-7d1b-4b01-b7bf-5a937fc06a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40060305-30fc-434e-8a2a-1c8b2626e5c5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56656de-be7e-473a-ab2b-3eb53c4b52c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2e63a61-8a52-4255-81d0-89dc0d002049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff3aebc-b4a3-4d28-a904-25e2df7b2f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47853b10-c57a-4d51-a01d-0475b725ea1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c764f9-968c-43db-81b3-0a262ec830bb",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e64d8b-2c6e-4e31-a423-17233450bcea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc5ec95c-4af7-4d2a-807e-d52072ff6a82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4457d4-3d6b-4d25-8cf5-d1d8e5f97f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6a89b81-edd7-4f4a-8a3e-0c99a80a6ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6c0eb7-b9e4-4add-a958-1f660c3f8b76",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "539bdf6a-e6cd-42ec-a1dc-f118a87dbc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add58813-863e-484d-be94-5b4489f16702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbf69ae-26a5-47d6-aaaf-6020b72593b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fed5f5d0-85cd-498d-9d9a-0d6b34360336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "403a383b-8cb2-4186-bff1-eedc79d25377",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7db3dac-a498-47c3-820d-15d074f8e2e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb579ed7-5438-4e07-9c77-aba951caf609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df634bdd-ecde-4f9f-b27f-b179d0afe91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b72b7092-069d-4e1b-9d8b-d5846996cbf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd3da8f-943d-4e94-85af-e0e8a0c601a2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14235e30-0439-4859-b1ca-535531b1af9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709ebc8d-afa3-4238-aa0c-287e0e24f1e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14eb7764-441e-493f-85ef-04ca8af07ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5224888-0d61-4e34-9221-688398e4ed68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5e3da3-767d-4aa4-a9a7-1ffd5283619e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f31001b-1312-4875-b022-7eaa4cf596cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8547378-e6ee-4591-8f1a-93b2c31f823d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dafc013-dcba-4279-b613-d83b909b1b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "020c1d47-5367-4c2d-87ae-5e5694d196f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b82d224c-a7c5-46d2-98fd-412224bf9cd8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a8314c-2944-4928-9fa3-044e99f4cb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a94a16b-e200-44e3-9a77-08e3b4288707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b3b953-2d57-4e2f-845c-77e3a92e63c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79681e43-854a-4d99-ab68-2799c3730855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6ec039-ac57-47c1-b39f-164165b05a16",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30444789-19cb-4bae-97cd-ea56b0108663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc37c92-8051-4a77-9e13-48412a48624f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885f74e3-010e-445a-b7bb-cc39c3b5810c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8eedc6fb-52b0-4d47-8260-a8890c2df872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f728c3a-9a15-4017-915f-c319cca1d467",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86f6bcf-a213-48db-8522-67f0d9dc7bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "408117d7-2f9b-4751-8fa1-c5bada714629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3a7434-b19c-4d07-bc9c-14cfae74ef44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a1c983d-7ecb-4f16-8d5e-c8805c46e91b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304a87fc-bf28-4b9c-9261-6976f7d59034",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46416c2c-7dbb-4fee-b22a-a2ffb703bc53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdfc9f3c-5da5-415d-8945-74d75db1667d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e12ba0-c657-46d2-9e2b-d9420a8e6bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8f84319-2657-474a-9b12-8b1c5d4195f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5958da17-e67b-4e8e-8f53-b70b47b58cb5",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17aec9a4-8c0b-41c6-8b76-e81c753ea456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a26e7bb6-b2b2-4897-9879-c046910dc0d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e796dd-5995-4231-b1c9-f469288d1653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "986948e3-7aab-424f-899f-37ee022bf70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c8a79c-4121-4a6d-b183-80f89fe1d77f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "533c659b-e3cb-4b08-88f5-1df1a3bd3d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89748c15-637c-4d9f-9c03-21981071371c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27074ff7-20b8-4801-b668-e5efe5d9c659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a1aa88d-5bec-4782-857b-f1eb96b2da18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14b69fa-3a13-4197-9e63-344bff151397",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba36ce7a-c999-4c3f-b900-192c5fc9945d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4da5b9c-8892-4735-b3db-2a618709ac9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348d1bb3-3c12-4196-95a6-0bb5ef9e55f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd9b7fde-779c-42ee-9697-3a57dfd1ce37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3694bcf0-75eb-414c-937b-7465a288ada8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "170c67f7-4f0a-4401-b6da-48555e1665cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c53e505-fcce-46d6-8673-1afef77cda70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49afba3-78d5-4cee-a3e0-8d4f43a26d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8293c9ed-349f-4f07-a99c-cac679866a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d72bed4e-187d-4efe-9636-c331a5a928db",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fd8eef-3570-4989-8886-0695db071343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551d2cfe-40a9-448e-bd19-fcc5c361a87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c80e7d-4197-4148-baf1-eb43ddffa6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "09770a2a-79d2-42e4-a151-30a7f758fdc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d5b06d-faaa-4ea3-8887-230f0543002c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85756f7f-4084-486a-830d-79e730134ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eed4e6c-ec95-4b3e-b288-8f0814802d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "008ca569-b451-43ea-a32b-c70b32081699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b090c05b-a34b-43c3-85ef-9c6c9180c1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9dcfa69-f663-445f-a381-7a1a901e27c8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39f4b8b-3064-4c68-9942-5010fd92014e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28defd7-f599-453d-9bc9-fdef7d0aa0ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba55dbd-e527-4c35-90fe-8fb96fe73a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "963bee38-1b48-412e-b64a-3376d30af7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8816288a-a121-4041-94cd-e4a8faba1e42",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f1cfc8-31c1-4365-bb4a-30b1ecd4b9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a00ea1-515a-44b8-bf1f-f2777a2298eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67d6f00-1e87-4a92-b04b-c2609da8ff54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3cefb4e-c6f3-4d6a-9937-7fbe08452488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2447c9c0-80e2-486d-9352-d5197c37062b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1de7606-5d57-4717-a7aa-ed421a8cecec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28e9858-bb70-4d4d-bd27-47c133b5669f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c284e7d5-d9f6-4353-87b3-587abd299f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c4a07f-2896-4bbb-866a-55577acdf640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aabfb666-3cf4-448c-b596-9e16737dbb9a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0847cf7c-2122-4b0e-8bfe-686cc974abaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab25455-7ccc-495f-ab99-990f97a3dc88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556db4e4-d827-42b9-a0b2-06af072c38ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b12d0367-607d-48e7-8aa0-ea5a63d3c643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66583f9-f822-4fc1-9dfb-ee41263d4bac",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0da66da-91a6-471b-b689-4dc7608dd17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cd4e323-6352-4352-aff1-33d2416da312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88227b6-7bb9-463c-b58b-2bdc920e0165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f56b5dd-1f03-4bc8-a06f-a32dc6969c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b8fd5d-af8c-448d-a7ca-e6b5744cae3f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e1ee70-a71e-4acb-a8d2-b62406605e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd108d69-2bef-416d-9696-ab7023fb0e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb55da32-ef93-4e31-8dc9-142e9a591e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5363fd3-aef6-44d5-bd1a-3459632b569e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7465b5-6dfa-4eca-ad62-d9025a4a7e06",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8dbf45-9a82-4f6c-88c0-a7c539b07e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce5cce6-8be6-404d-a30b-996081b357e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01224925-8c97-4311-9b2b-820da74a7bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb33cce3-ad75-4ba6-a05d-a3fd4dc0b898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db01b069-3b6b-4f92-8aca-5cf6cdabb8a8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c36f4a-d12e-4178-be87-2b85b3a8a9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf2c520-bbe7-4db1-97b3-9907e65a1dd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539a1a4f-00cc-4645-a09d-78e1c8bf8ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e09b427c-babd-4de3-bd2a-4cf389b5f7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b40accd-7ac2-4e08-9a0a-d8a963503df4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d764a476-c857-4e10-a315-7f620975cb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5c6ef8-a756-42bc-b094-bc90774e55e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bee25d1-7cc0-4b4f-b6d4-536ace70a1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "71b2697d-5aa4-4604-896d-3a949eca8f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd24d917-abfa-47ef-ae29-17335399a963",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeeca80f-3741-4ca9-a4d7-0e0200efbbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efda13fb-618c-44b1-83b8-3b29027eac52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02119fd-ebdd-4eaf-98e6-9bc3a6d61521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96f6eadc-e690-4534-a789-8f179bd79fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f26ff28-48ef-4f4a-9b93-8c0ca8a83196",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8cf764-9e5a-446b-adf6-1f99e4eedab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208798d7-dad2-4648-bda9-aad14c9cb8a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c2cc2f-11c4-4298-bce9-e384d6baec9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19e0aac0-1f2b-4c6e-be76-eb9544719af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a677b1-2484-4d62-8a00-4d0ce7b7013c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25010b8c-d040-4ce4-a6ca-a3e23eb694c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f244a9d0-bad5-45aa-8668-ea3fb00e68a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f3c4f9-79fc-4f26-9767-510cc4540adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "beaf132f-e511-422f-88c6-4bfebe1d9fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec1d8d8-429b-4805-9650-f6067ccf6cb4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e782f637-a634-44ae-895c-d755997905bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dccbc0d-330a-442f-afc0-ea26cc8b07dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981b3602-36d6-4c9b-8427-4f52b443d269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "73fab209-f6b0-478b-bb9b-67366d599495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ce5823-4824-4e19-9159-43053666f1a5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236c3bde-a08f-4587-9626-bb3b28a821e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46081a99-edfc-4d52-9e86-0e4d070b275b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd40e8f1-5769-4029-a758-17a1284c57c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed18d16f-e948-40c2-a644-c230f8379d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46a1731-234d-4bba-8377-631405434dfd",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7ffeb4-7553-417e-b6b1-421113dc074e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3072c5cd-22a6-42d7-94cc-46bcab60f517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a669609-7183-47fc-b4c8-8ebc0207b38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4b4669-915e-40e1-86ac-51f1a6207cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8720561d-7d52-4a3c-ad21-c5f7fac3c1b4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcff48b8-977b-479b-aae2-6340b2e63763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d9b6b3-8333-4b57-8e84-864aac916d76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794ac5af-f960-441e-84f6-9b84f6321fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e2106b2a-2cf4-40a8-9972-15016ec97c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f071cdf6-f79b-4f8a-8940-a772f561e54d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8344b8c6-a51b-4277-b242-a369e8e99553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac0e2502-63e1-40e0-94a5-99e73ec6429a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11cd86f-e848-4c9d-a6f7-923a3082f9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "188a042c-23d5-4360-845b-2985065e5219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2f9010-d411-41c0-bfd5-4ebbf0d34906",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15a8747-f363-49bf-b375-018fd59a7a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c57d7ccb-2f6c-4571-9f32-be95ec58d44c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7551c2ce-6bc3-4a12-b911-c292cf829a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "467dd937-2d0d-418e-9775-b27abece6fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95c6909-1a67-45f7-9489-6dc563026eca",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc860d6-c4a3-4911-adf8-b001585f959c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d3d90c-86df-4a7b-8a68-1f01b0a4c087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bff9372-f9dd-47d3-83ee-09613d4f92d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5514f3b-e72f-4c57-b31e-9980bb24c4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3b6596-e6d1-4505-928a-c82030ff3388",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3b2d81-b8fa-46c9-8a1d-0dc2d5ea149a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1cce9b6-2450-4c27-a7d4-8431faadab32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cffe96f-7d5c-4454-abe5-2f8fdf194cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c12538dd-01ad-4d88-a645-dd8bea197ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d7cacc-01fa-4e58-abb0-d31be3311c4f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a808ca5-7c82-403c-b2bd-980245bb466a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babf1970-243e-4e80-92e7-13c6010b8775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed3ba31-08ea-41b1-92e0-0df02036f59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a867ef-8741-4f09-90b0-cea8206945c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8bf80f-0c3a-46ff-9125-4deb21d48b91",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b572dccd-89ff-4fc2-b877-a0d3775eac43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d8ef5b-78d4-47dc-a52f-f2e7fad4d04b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca21084e-d6ba-4b26-a482-5da2c665df93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73a85e26-3033-4b59-9be1-a02d57d08266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9dac851-95c7-42cb-9e48-c1ae82abce7e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a358c4-81f9-41eb-9fed-10d552309300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8d81b7e-4097-4cad-a6bb-2f035f4ce004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac793dd-81f6-40ab-b980-ea7ac31522bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "16f19207-1e8f-447e-b914-47de0f3c2387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b9628a-523d-4f06-ab28-558988593466",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92df953-d77e-454b-9096-18f03f501e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f2b289-83e3-44ed-aeda-f98220ed4f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3007f6aa-d9b7-469d-8950-4b2bdce1bc87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ef66b0-9088-4471-9103-becc5f9b6fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64226403-c18e-4583-be34-ddf60514ca3b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4fa626-0e91-43be-b8a6-c8b31bf15bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f15876-0726-4dfa-b0b0-4a667a29a290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c054c4f8-d2c5-41dd-af00-9cdcdae15f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3fc9188-6d3b-4ca2-9e04-0fc1882bea57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c0db4e-c6a6-45f1-8632-26321c76c055",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a1c7f1-9473-42ab-b120-cbd09106fc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adc98ec7-779b-4fbd-a9c7-242d58a9bfa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e30a18d-0044-4ca2-a559-984f91d68e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "27355c72-6f64-4df3-b27b-e7ebd24723df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8605ffa4-92dc-4133-b6b8-50981dd6fd9f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1d58b6-0fab-4062-b1de-3789eadcd06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b93c4e28-86f6-4487-ac0f-bee9ed9b1cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4f73af-2193-41af-b653-f9cde4210ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c39d48bf-1c9f-4c50-a857-1d5b494b19fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6daa085e-f028-4e47-b762-31cb1008664f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd07112-31d4-46be-9f90-251fe5918bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54908304-9ca3-4b61-a3ae-462a18577916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2c1a48-c3e3-4f6b-8afe-308d8cb5b509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "006ce957-a21f-421a-81b1-927e721ab93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9b64c3-8947-4efa-89c5-a381e50ce906",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d1a822-f0d0-411b-96dc-4759f4954755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe4d597-830f-4606-9b62-6f47a2e47f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae322219-dfa9-4b3b-9307-3f200ab070eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "916513ff-7c43-4784-a3f9-15e316f681f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daaf720d-b021-4a7d-96f9-6871ad7aa4f8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a570fa5-649c-42bc-9e8c-148a95cf68b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e96a1acb-a131-4dd8-8880-8b9155a4c1ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8925e517-8618-47a5-8c15-5f43148d494a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8256ad6a-1348-4b9f-886d-4bc7cdfa7697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4dbef8-44f4-407e-9ffe-9d96dd502c53",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d431654-2902-4f4a-a62a-5a526ac0f717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ac859a-a207-4032-9efc-d5b0ee78b7d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312cc99e-518e-4cc7-bd9f-59f92aac94c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4beb9eb1-637e-4da3-94a9-2d0b13dc3ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e02220-b073-4fde-a8b7-6607b3728162",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df513d1-7f81-40a1-acbc-47e40596a827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b41b78-b929-479c-9b26-1c73ceeb475a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60c86e6-6397-4e8b-9171-ec97ddb06239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "74881112-0342-4078-8515-130e48081722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e92bb1-188c-41d8-9293-007c18009428",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d66805c-61f5-4d97-9cd7-849992213865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ced938aa-fdf5-45dc-a5a7-879db2cc9a1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b1a3af-5118-4009-885e-d29506b1cf3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c15f8d01-c170-4dfb-a836-e1bb33db6058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f4e766-7de2-4084-b3d5-9b08ffd84676",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b70f2c-51a9-46a6-b614-fb6924aa6e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab4a73c-8026-4603-9367-3e985f78f9e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2295c1ce-4421-4f81-8a75-bba63327f04c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4797dc4-41b9-4e08-ae3c-ad7d0fd596ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e813d0-0c7c-4e5d-b318-f5bc7d2fa4f0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9230e514-8672-44dc-a6c5-f468bfb0505a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38c524d7-100f-4540-8ab4-aa80db64c31e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea778197-dae9-4048-aa75-353dccddcc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9a3b505-f08e-4712-89e9-c2c4e216749c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77688fa-3ad4-4b3e-8f68-9bd300f51842",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b17e99-0512-4939-bfc8-edb08e7ae14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2fb6116-2f8d-40ef-87e4-c4bfce31fd00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64293b6-7aed-4506-a94b-5d41f32ee059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d23d32f8-c110-45cf-8441-65e2e6634906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87738dc4-d6ef-4c16-a1cc-3760fa6e034f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935c8b4d-bd42-4e51-a108-7a8991cb9c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa9309d-057b-4c8d-a503-14d01ca631d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed60366-3983-43a4-82ee-4daaab8cc7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9905a331-bcbc-4525-b724-6e1972290ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ddf1fe-9f8c-4c41-b9ca-2ab55bed94ed",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ad1d12-49ba-4564-bb2e-ce6566ef256e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bbf3ff7-8c1d-4dab-82d8-efaaed0d53cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0830be51-c6fc-4694-8943-badd6b639590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6063306d-4590-485f-9b91-2ce79d0c4434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c756d6-caaa-4c01-b828-618feb5fea58",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ce91c8-fc0b-4bed-b3cf-945b3104edb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "112c0c6c-48b1-425c-bb91-27287d33311b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b3eb7e-f7d1-4c5b-9f27-d0f40d38a1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "430a39d6-7404-4b40-bd36-af641af54079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfcf0a7-4061-41a8-8c9c-57a3206a9c0a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53d8f18-e8a2-4405-ac21-a1d5df8da4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "418bedec-07f8-4bc6-9733-93a06f8a6ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a525741-937a-4b83-9fe4-4e942c4ff37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a30cf8e-496c-467a-98d7-fba8dc200ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6e170f-e43c-4c6a-8362-4d94a75237af",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3439a49-c2fb-4d2c-a309-4348e9c0bd3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc9cdc59-b790-4a56-9bac-0970edbc42dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc707f8a-9d3b-4b85-972d-4d6ffcb2b9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "46fdff8d-d6b5-4196-b94e-6f20fa2bdec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42350421-8a39-4ec0-8225-7effa3a04218",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd2c506-d8c3-4fdb-9af5-8cd678d93bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf7fbdaf-ccfe-468a-9303-c8f93cebfc39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df381aed-63c9-407d-bbba-25f11c7762d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec63d8fe-086c-476f-8a7d-7c580aeda77a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7bfe4ea-3482-48af-ace7-83b10238e1ff",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77bc231e-6ead-4a6f-b547-036b86e5954d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ed730c-d030-464d-b5fa-26108a35ed74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8593f16d-d55a-44d8-90ae-0d8ba1f4d1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9283bed1-1c5f-4461-a0e7-b68cb839bad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174b2333-5ebe-4a45-b199-068cc6a47d58",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a31971-e79e-41b1-a8dc-cd0585c93df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94387e25-9010-4fe9-a94b-5bb887460494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bebb053b-0508-4a05-b570-9d3bf4255fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c69f3d3a-9375-4085-8634-6f5ee2aeebe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d69267c-16da-4244-8ee1-75a8dba5525b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1c8afd-2d83-4dc9-8309-7e49f39937e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ef9fd4-214d-4e32-a64b-810a3404c97a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a00e37-7688-4a42-b5d0-c2788880029c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a65eca7-68b5-4b0d-bb9d-46f8efa21792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0644bf6-2d2a-4297-bf2b-c419ed291217",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecc51c8-8abd-4044-8c63-61246b119913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abeff738-b6b2-4192-8344-479fbab14d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e947de7-4b37-46b3-8bce-9bf4e8936751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "117d48a8-c264-413d-8ff2-7ba4daf13d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498f85e0-3d54-4c8d-b6ba-8519bfe6d46c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913476f6-0c9f-4308-a417-981df9b6dd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27beb83-7623-41ad-9427-1bcc14f07707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfba0075-2c92-4364-bdf6-e6b2b3605d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f7aae9-142b-4a66-8c6c-1068b65013f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86b3fcd-7da5-458f-9fa1-9d285f488279",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4712e1b6-8fea-4eab-aa62-248e42e50fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "489db1e6-9eb3-4c00-8b9e-9614857ad100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335207e7-1844-4833-be8f-be470b6d984d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9602d938-55df-4a97-a63d-0e8a868425ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac929e59-f122-46d2-b4cc-68e19dd7fe7e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec8570a-750c-463b-a158-811d83ae6efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1400d87a-32c9-48f8-88cd-edc395a1e768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b73a69-1a17-4129-a736-045e20dde106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b346fd1f-872b-4c6b-999e-48851b45e0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ad0df1-89ae-4ba1-a618-04f2136340ae",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146c0321-c035-41d7-8b2d-6f5ddd08ea87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9885bd4-9191-4e55-a862-88854d94513b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb9d42e-2683-48ae-92c3-2845751f7112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "865d9940-cf27-41d2-a9a5-4c597aa5036d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2aec23-3dc2-45b2-9fab-7ceaf28f966e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0185df9-40de-4b5b-95e0-f27c2725062a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dffbbd37-78ae-4988-b348-02176075dbe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd95a2b-a813-4c42-b055-fb874bf8b0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "765421c1-9312-4cbb-97b9-64ac4d78d3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05d30c9-ed3e-4ae9-bd23-a1e98521fe84",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de90a88a-37f8-4749-a2fd-5331dccec717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37372f8-1344-4d1a-9c06-ae204ac79277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae57c5df-381b-4663-a315-ad4cbdc6a68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d5fa6e9-00cc-44dd-83cf-735b700c05b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91524d4-8447-4d2c-ad5d-86180beeca03",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d2ac31-0ea1-47b1-8a24-ab578c39e2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ef774b-6cb8-4449-8af9-b86ce1f89c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498252c9-a2f3-4bc3-8dab-c677de14c0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6882a5b4-53f8-4cdb-b872-fa8563b0cf7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758835cf-0bf4-4b2d-a8fd-7ff69804d42f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e8e991-0b75-4675-858d-41b94a3fae5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d20b17e-de7e-424d-b175-3e6261639193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b1d926-233a-4c75-961a-62850bf0917a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7343ce8a-6ef5-4520-bd7e-d1e66b9bb911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caaa4c44-f7e9-4d0a-be72-3f76192948c5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94717289-903d-4167-87e8-e19c5691a65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1198e77e-a20f-449b-8d90-83f83d5a51bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de5a4c2-3728-43c0-8e2c-610c713d4f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "acb2bada-f855-4896-8f8a-cff5b7962468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c457b9f4-55da-4ec0-a4ae-132ef4e6e6fb",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ea1e32-a04d-4927-95bd-4c4e68a30f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283e8a9c-6802-4e1e-b8a2-099eb34d11a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866ff013-463d-4b51-b95a-34cfd6d7721f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1cc5393-af80-4aad-a3f8-60c007bdd258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59828f53-61f3-49bb-a96e-1304de32c9f0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0267212-4e07-40b1-9e1b-fd0bbde6aa60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d0f6e1f-aa07-4218-8c89-76cd15eb86ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b32f4cd-a146-4c39-9be8-7bcb73fb3970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c231f8f3-cd10-41ea-a22f-67fcc7b91bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855b6b5c-3351-4980-859f-c187ec2a7d77",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e072c94-8233-488c-aff2-922e585aaf25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e390a72-8d01-4c5f-a12a-80dd0fad4946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdec6059-418a-4ca0-b171-e102a3d655ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eea4434e-0d36-447d-bdf2-18db22348113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce989ad-c5ea-4fd5-b846-37089c5f1a79",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c369fa-d92c-4d10-9e4d-a61313c870f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "718abd05-b287-4a0d-9cb5-0a88920115e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438c1aa1-e7f2-4803-89b6-79fdf28decd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "86c6b010-9c15-4baa-b281-9fbb05252fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c586bf-ca9b-4529-a28d-6ea14bb56a5b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de399a5d-5abf-4143-9bec-c3bc0a1828fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a2c9cb5-e18d-4d2a-a9d3-a66f3dc6af60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b5099d-3c8d-4622-b232-c831ae036c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc3af3d-775c-4361-984e-773f622b4a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185d558f-afe2-424c-8888-5f8ebe6d83a4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32864cc9-60ee-43c4-805e-fb5b50477b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bccf7e4d-e524-488b-8565-4b436e841f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b9e82e-35a3-4d9b-a12d-b3816c5749d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "05643a5d-1b0d-4c15-965e-69bfbb2334ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82efd5c-4860-4c6b-9f10-e9c4bd1a26ed",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7775680-995a-4b18-a814-4612abe01700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8c020b-000c-4d17-afff-8d61666fbe0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b14b513-24c8-403b-a1c5-7556dd5de4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9188b988-484d-4f8d-b6b7-3dea7717bb23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91769de4-1d84-43ab-b12b-63acc4a17c45",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "923ab5db-502e-4830-98df-d640f18cf99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f53f5777-2f2b-4fb2-a2a9-92d0ba0abb59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56346462-fa4a-46cf-9121-1eb3ecca6fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1598e50-a001-4896-839a-77d1b663e48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8aa3636-2556-40c4-a368-6f220afe599b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71c4f1b-0488-4d27-9957-da5836aefd5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd0a16f-97a3-4fd4-b3bf-98cfa7d78e93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46dde403-b37a-4c65-9ebc-e806f554dfeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8da6d34-ce4c-4900-8b85-5073192246df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9655b24-4cd2-434b-bab1-52f58b5e53d6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ec5c7f-8d85-46f3-b0cf-fc07e7dc6a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0afc3a3d-5837-4518-ab8c-c4a200d5414c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb5bcad-6534-499a-b994-87b05e6a22d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "817088c5-6886-45e6-aa19-051395dcdeee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3181dab5-2826-4b8b-a5a8-38a4fb4f0d78",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42997bcb-740b-4df4-808d-1c04d40cc9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f3db1fde-cfb2-45a6-9d96-43fd837aede3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deff9423-da0a-47f2-ba39-6425e3511d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "09309a98-42a3-4058-ae12-433ede773793"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a9368781-357e-4397-a2bc-782aa361a099",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8fe23370-eafe-4f17-a94b-f862e7d4e6c2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7406fdca-7173-4bbb-8505-c3fa6b61d2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fdf727b7-8713-433e-9abe-fe23a11dbd10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf5aba5-516f-49f9-9125-6181f1d29066",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e907c79-279a-464b-9856-051e867f231f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96e08040-f6ed-4dd5-9d5c-75acfdf2af48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd8a4b22-fcee-4e46-a41d-194a559d52ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "362affd6-4cdb-49d2-bdde-7db0df35a886",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee2f085e-a12d-4f13-9b50-bc7bccb00b47"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "00a8e93b-f6d9-41b0-aad9-f0f39cd3dee1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "339d46cd-2462-4ad8-979b-9f890c1c67c7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b3d392df-b1b4-4944-be3a-9e27f7eadb8f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7e58911e-2340-4c56-a68f-29fb093c1cf6"
                }
              }
            ]
          },
          {
            "id": "441575a6-4b1b-4860-a282-5137d318a309",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c20ce01e-07fd-4b0d-8220-38c541cf171d",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "0584fcd7-3a6e-42fd-8a4a-34acbf0d41f2",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0f0b86-67c2-4964-995f-081199228110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "32a64203-db8b-48ab-be10-c95632499ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdce5ef-a8af-43cc-b559-273d7b9dcdb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "782937f6-1ddc-4974-9ad6-538ecfad8822"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c3f63156-2627-47dc-bbfd-9dff4db36f94",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a49e7cf1-808a-4113-a895-dff2cd2d5e59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "506e1795-df95-4643-9aaa-af752bc8de63"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9e0e78d-e7e6-464f-92d0-96ee9a48222d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e1fd6528-716c-40e8-ae90-73769cd88f55"
                    }
                  }
                ]
              },
              {
                "id": "e0268a48-fdce-41d1-8503-acc8705526d0",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c651b746-369d-42c8-86d6-b3b8351f4928",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "758fd4e0-6a45-4842-8541-0dcb2196c26f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c97c163a-f89d-4125-9faa-27fb06ed7b2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "274fdf31-f2fe-4c17-a955-9f8f367e98bb"
                    }
                  }
                ]
              },
              {
                "id": "e1883662-2088-4105-8e7d-da7af7c17b1d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2704ffa7-15be-4917-92f2-d5f0cd127689",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc42f36f-eb90-46fd-a2b9-284614f7a073"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "331d8b95-f721-4fe4-b148-bf0f655b9b25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1af0b99f-3538-48f0-943b-18be06cce65a"
                    }
                  }
                ]
              },
              {
                "id": "90422077-5a35-4ad6-b97a-16b62972c9f5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cdfdc92b-35b9-4b96-bf61-d4b58f323750",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1f29747-06d9-42ef-b3bf-36f059fb317b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d1fa3a1-883e-40e5-becf-a77257370a18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9afe1b8e-a7f1-4be5-ba34-ae09df4a2dec"
                    }
                  }
                ]
              },
              {
                "id": "5e4764c3-616a-4282-8d1e-940a582da215",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfcc5a60-d46a-4a78-b649-77905f03cc82",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0843caa8-041d-45d6-9069-28caf8dc20f7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ff41062-49b0-4c00-b93a-27b4a960bef2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0dd2217b-e160-4de4-a9eb-94ed9aa5b339"
                    }
                  }
                ]
              },
              {
                "id": "97ef5dc8-c980-4109-9d80-a2a4554869b1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5dcf844-f769-4404-96cd-c840222b162e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e2fb6358-b6c3-447b-8545-7d2eaf844f75"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "073e4eb7-251c-4d58-8268-8e04b0c0f0ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fe074245-0819-4913-8357-dfbca86e9b52"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "88487145-e17a-4063-9147-c4fe07e23c5b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4fd59d6-5d31-4e69-8967-a18cd861d00a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dd6c6625-d9e1-42e6-a6c5-23556b488cf1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e310259-6054-4af2-bca3-be46345dbea6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "679d3ec4-f3d5-4b82-9f2a-10fe002ed512",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3f5f7739-752f-4f9b-b004-17bb2261ebb2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77aa1587-1cf2-4c24-a02b-912c8d7e7da0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "59fd53e1-de22-4d7f-a038-7cc34eedb01e"
            }
          }
        ]
      },
      {
        "id": "ee484fc5-0da4-49a0-8266-00bd6eefe155",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "86c4b1fb-ce2b-4b78-a704-d371e74a05d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dbd5705b-c5b0-4e54-bf09-8fe172ee537a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "432e485a-5ec8-4c7b-b390-5867b87b0de5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ece80b-d88b-4c42-8ac6-2de1533dbe78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae421d47-266c-4dd1-852d-608fdd193c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150ac53c-d571-4766-85f1-3dbfb6a42775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5878eea-fa73-4a46-81be-42cbbf730121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75048c79-9daa-43ba-beb6-2916f20681a1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73688de2-ebf1-452e-9ac9-3eecb39e48c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffddf9bf-fa5b-428e-b684-559c5e876f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39deb364-da5a-4b9f-99c0-c8a3c33b7772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb15fdac-eba8-4717-9acf-f5280ca181d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a111cce2-7790-4bd6-9e18-72588de3cfb1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ec24b3-5598-41d5-85eb-c96407f3a586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c703764-dd55-4ab8-903f-93e988979044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3822a983-85d3-437b-be85-6aa320702911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94f50c1a-5c86-441c-91c8-9ee3639dd0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6687f432-2fb1-42b0-804b-7466176d6d94",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b04c78-1e57-43db-a60a-5f291fd56dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "290b457d-0eda-470a-aeb0-ac015df08005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea119d8-5609-4304-8b15-30ca93401210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a743036-6533-4795-abb7-aa6dd95c1265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b172ccb3-8ddd-4609-ad8b-e454713f55e6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8546acce-bb9b-466c-baf5-30a9c3177afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0fa8ce2-6442-4242-8a4a-0716a94860d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2b6895-7667-488d-9f67-949ddc983a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "baecc4c2-a13e-4243-b486-01e0043f84d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb50a795-6e09-42a7-acd2-de6c8a2832fe",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a86e4d0-fd37-47f6-85fa-4257eb20c3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5575456e-a3a0-4833-be05-6ff24243f4f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ea5341-28f0-4372-9c05-e819e382cedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed65e7f-2f38-47cf-a42e-f956bbd9f9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45970603-d95f-4a73-a249-b29d41d6eafd",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95421858-50c7-4ef6-9568-5a86fb961531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b292601-06f9-47a1-9e37-b66a205017a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1ac97c-b409-4d29-8411-fd46077b3844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "94b081f9-6363-4a23-ac48-2edfd53a202a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac36bbe6-f911-481a-81db-fcd83bbc0558",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7746e628-d691-4870-9877-55c8a9a700ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c522cd38-c71e-454d-8d00-19ba3edda6ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ddddb0-50ac-45a0-8dbf-5f0fb077fe0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaa14d5b-7829-430b-a946-b979d4fb6142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b145b054-f70c-4d49-90f8-05d3adf6491a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329e584b-5d50-4a53-b2d9-cba492a58d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55adeba2-87c8-484e-bd23-f5c1865ddc45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0deffc8e-70c9-480b-ab3b-d6628cd92dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4ce3535-530b-4aeb-9425-c472cb21c850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3058aa7-ffb2-4fdc-95d1-27c21d14a4c7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b889adc9-7bf4-4524-bb8d-a9ebcbb1feaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e461a22f-2668-4780-99c0-f236b7855d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa407278-8d5e-4854-a228-ba13aa1c765a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5606405-09b9-4207-9d22-1a35db1ca89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7ad857-9c16-4a84-8837-af931dfb6387",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07134880-a449-494d-b571-d47b40cde1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42df516c-c005-4216-b23b-b04cd28ffdf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba39287-5eb8-4083-9635-e6f3ed024292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e825d690-eb4f-468d-83b3-aa08461308bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3247f2b-0f78-484a-9563-a4869566b388",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "940457c5-cb6a-4ec4-b6bc-228440650721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c2764c-e023-4958-a1be-97c7c5552db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e7192e-607d-4515-a804-77e8ee5c1729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9272f54b-fe03-48f4-a1da-c12f6a8d4d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e55ac1d-7901-4937-91ff-160369a0331d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae61e4f2-4289-46b7-a71b-5c767c10b986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c413df4c-b6a5-4518-b74c-a27816f76f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154135b0-ecc2-4186-95cc-82e30c9024eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba618fce-cb47-4be8-9c42-2148898ae0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4827842b-8ce4-4af5-b778-8989b7db2b01",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2769c90a-7389-4c3c-990a-79c669739aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6815a35e-b88a-4ecb-99d8-d7f0944840e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f081c1-c943-47e7-95b1-7297ed1392be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "89895c47-349e-4b8c-aa94-1f7001a8070c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daaca947-9259-4677-9e86-33f6aa8e42a0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "916052d9-c774-4c21-ba60-971556925828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1181011c-125d-48cc-8048-ecb00893694b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e2fd3d-8e7d-4c4e-9721-2201b905957f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bdae6b9-48d5-467f-bd1c-cde0e0d922b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035e16b8-500c-4753-8f61-487b4a7d7a86",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6790576f-deda-4ffc-9b19-481cce6b3be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc9daed6-792b-4e9d-bf85-cb0e52ec3952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4734ab95-3c3f-4730-83ba-3f778f285021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f945c53b-bbaa-4791-9e8e-eae763f2f53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca7b631-7d96-42ea-ae13-d6990fae8283",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef4ddf9-9724-41f6-8f89-dffc57d58443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "465f489e-b8ea-48cd-9ff0-6b0f73e29fd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3205f1-8012-41b5-8762-edcdde0ff584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1393e320-f7c3-44f5-b53c-8443b9da7625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b001666e-4e21-4bcd-8eb9-e9a91ba5f1a8",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d086cd8c-1cd2-409a-8e43-e169fb70e77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955264ce-25b6-446b-a5d6-24da74aa4c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96bec245-8945-4a5f-83e7-0b6ab49df96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dde9631-e387-4ad0-8eb9-c95595d7c89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b655e38-e391-448e-878f-e3682f1497ee",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e3106b-7917-4e5c-a878-c4b374424ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9406261-2f79-46f2-9e5f-07bcb28bea99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1838a5f0-3991-4283-9836-7d471df326f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01b1eacb-3d22-4451-9667-605b4f08f5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823d118a-7271-4985-9898-451ab28e901c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34431014-3c5b-41e9-92a9-5daf8d884855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc246828-f560-465f-a817-74bd3d90cd92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fbfddbe-75c5-4ab8-bfde-c27d1703cb49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f82929f-7799-433b-9369-8eb5a879f356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a64335-9c2b-4b5f-ab75-eca918cd4799",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794e25e5-1e93-42f9-bb26-645ce246efba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c30706-2b32-457d-8afa-a919cca226af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e85ae1d-41c4-47fe-bd5c-522acc714231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee993a38-129a-4adf-a5a5-eced02a10ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a44a92d-90d1-4d16-b4be-b4901b9a412c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90dee452-1a78-4db5-88a3-7d65e7676ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f92eb8-9d4d-4eeb-843a-da350304d1c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4416110-5861-48fe-a337-863b24fc26cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a04ad44-d252-466f-b274-ac8bf572e651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db460cc-5bc9-4077-a536-4728f8dcf67d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab9b7b9-9797-4cbf-b223-3d09ed0dae6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b211d0a8-5b53-4536-ab50-7c2b09b6e958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f99804-48ec-4683-8aef-62cbafcd44f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d738e76-2d3c-4f69-b59a-581dea4482b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2959c878-6b0d-43af-82ed-ae5fa19a849b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c10c845-9277-40ed-869f-ff82a9e82423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0b4e9a-69e6-4e0f-9fd1-5d923a00f51f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a6ee58-e664-4deb-86f9-4dc6b0a29817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "322611dc-2001-4603-89e1-de9bdf082e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ecaa10-a282-418e-8278-b724e7fd04e5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf53d74c-2983-4fe4-8042-867fa1f2c4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e69b90-0b2b-48de-80d7-f40ba9250ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17cbee5-37dc-499a-897a-eacbb6c48480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6319a1ac-ae15-4ab3-b543-e65377a49189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88456f64-f9a1-429a-a841-0b3444e1f0fe",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2dbe48-6aa6-4315-a25d-e406e1cfeab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b62d97-5c8e-496b-a3b0-7471429971c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9432ed77-4175-4c30-94af-b180120ee252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cce0ca4-c9ea-4608-8bc2-f55f0d7307c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edd35dc-5323-4a25-b073-07b3c434c45e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7a7e95-9a6f-468a-bd4d-31fb048898e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec5dca66-7116-496f-946b-09e3d13c2ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14058e44-c505-4af3-8d64-b345503a769d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "061a7f9f-0c8f-424b-a022-6875f6dc7084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e303b9-e0ed-4e5c-bc71-beeb9beb35c9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff66fdc1-c47b-4d55-9dc9-0431e9298f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c8441f3-4d3c-47fb-9dbd-7395f8e06262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e5b64a-81e5-4bb0-a1bf-084fd0f172d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10bc91a5-b107-4adc-9e2c-5daae1f2cf5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01df8c28-726c-4c3a-8cfc-3dc0b4025737",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3d7e28-bec0-4358-a865-fd2ff6d0fe33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5eb8d33-8ca6-44cd-b496-73b791aee624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4722aaa6-b60b-4e44-bb2d-8a9d4e7ce11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a095849b-768b-4dc2-a4af-867437d0756a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a80c09-ff82-4d17-9519-08f330a04f63",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b34724-494e-45ec-850c-793fa25b952b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc0876d2-3b8d-420c-993a-a235a71ad391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71291ab-4b8e-4c3b-8549-cf48b0b4a9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91896018-ed14-42f6-a5df-7dc6c5f7b23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048ef4bf-0daa-4f2e-85ee-cf3a0979748e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280b1638-52c6-458a-a79c-0ac370b6fc75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef8b035-2353-4b27-b9a8-9e670260278e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c6a8cc-d853-443a-b697-384f29af0f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62c3273d-2357-4963-ae73-2b9d89da32db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a17635-78dd-4ca6-b2c8-744371a749fb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a115ffb9-e922-41a0-adc6-87ad341c6499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a698557-60a7-47f2-8a2e-11faea2c6f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d34a64-c912-4fbf-8e72-be79e2d8227d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5681a777-9eab-4262-85d0-683258f5b88a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fbcb7c7a-36b7-4c7e-8231-d5088cb1db1d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "23f04fa5-6257-4a5a-a151-040e5d2f4579",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77ace52-925e-454c-bfae-952da0a16798",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd650c0-27bd-4dcb-a04c-24cd39e53456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "786deb60-4007-4c94-a819-25e77f6f9bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4493dbda-222a-4314-8c41-fb9027da447c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36a35c63-2d1c-412d-8444-09435d9bdf8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0f64124-0651-43a6-aa45-c76d5393ae0d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ac0dbb2-94d0-4946-97e6-29edad25dda9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccd48695-eba3-4aa9-b48a-f5a48e3bef9f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a398ed8e-e623-43bd-bd11-f40197383e57",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "44ca23bd-6b34-4b70-9392-0341e53b2a02"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dbddd3e8-975b-4db9-b142-22c1f1576d69",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eb91d682-d472-47f7-a93b-e2b1179a41a8"
            }
          }
        ]
      },
      {
        "id": "61142a2f-e02a-4e77-9c54-99b3c4e83f50",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "f8764159-27b6-4463-8789-d99406cd37cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "955b553f-b2a3-400e-a4e8-f0345ca214a6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "31933c9e-a2ae-4283-9f3e-a39e340bc985",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c0a529-70a7-4e37-87ed-f880eb95c73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665f6045-80a4-446c-ad00-33730b5fadd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc8ee18-c945-4293-8aa2-c137199d297d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b46c1a3e-97ff-423a-a789-5f16a4d7f6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb0c46d-08fd-4152-a4e7-ccad1f9dd947",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13cc1df-6963-4e9d-81fa-318a4e35f8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f8705db-0ba7-4c84-9c7c-f7c9506f0605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de84e7f3-f838-4b0f-a7df-9aba6c08c67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "22aa9449-a0d7-4617-97ba-f13776eaf919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f07193-9fc6-442d-9f11-ea4063eadd94",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e85a2a-8dca-4291-83df-fc207de27f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63bdddf4-5384-4d57-b40d-1200347a4f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857f61b6-cc77-47d7-919e-cfc54d205578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8af7fd73-8235-4645-86d0-7d0aeef96944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca24c51-a4ef-40d2-bc55-917622d1b094",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99af5572-bab5-49fb-a10d-5cf071d8b706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b72972e2-8059-4c51-a70f-6d0a5d34f1e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2171f569-49a9-4880-b63b-65d7fafc0b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "baadea7f-13cc-4e19-be31-824d3b576e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43bc1c0-c79f-4401-bde2-6ac9bf03cb3a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac79371a-1278-4eff-b35a-c7644305e1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8afdbfc-8fc9-45ef-a260-ec10e98045c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85527ab-cb04-4bc6-ae51-bf607908f438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3defe043-6191-43db-b664-2dbc0e93c503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad84c49b-7353-475b-8419-e10391d7a014",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7a6ecf-7a1e-4489-9760-606848eee504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a98f22f5-f8ec-492d-b773-fe0b50361cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39510aa-fa24-4a6d-b19b-95b31c47d555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a809e5b-e9bb-4ec4-bf64-e840f162c993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1243e6-fa25-440b-8bef-8891c14fd818",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6805b3-d7c7-411b-bbe0-6ffa55625771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b12df1f1-1a2e-4541-843b-4625b687836b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a86b42-43f4-4fdd-9f73-3e5ef5370ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cde1d57a-2b93-44b8-a4ed-e402261eed91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005760f0-519d-4849-9063-2c6ac272ba9a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdaeebb-0325-49ed-ba0b-fa67f895ed03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ce2d6f-8270-4c13-a9b3-eac940d242f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1ad351-d1e1-414e-b533-619e7694bb11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb74b658-0a38-4e1b-85e0-e180477cd07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696cd2d9-c3a2-47e8-8e69-5ca80f8b3c3a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4986c288-f470-4ce1-9dfa-0ecf179fcf08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7bbba5-46e9-4c6d-9b6d-c6f0ee45edf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c03513-cbfb-42e2-a96f-5b78afd85faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "153b073c-9f6d-4a23-b804-096c9ff25c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618891fb-493f-4005-973a-a54c92220874",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8c51ba-cebd-4f6e-86c4-2f6587e760af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e4623b-d624-49c4-904e-86227820ad9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545e0c10-fc51-431e-9fe8-41c29b0505d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4823d323-5f9f-4665-a830-f6900db8e175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab162d2-8e05-4caf-a206-91d7c13a975b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335c1b6f-9f72-4511-8da8-22a009c85b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ec30c4-0c39-4449-a5a8-aed39b8cf772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85065ed-d097-45ae-9dfa-4780771e3049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "70c52cb3-0f58-43df-8bc2-68bd05735683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698e303d-b8f3-4631-a420-5929ed45ea50",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a530040-b880-439b-b93e-8fa28fa3724c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54847a6d-5613-43f7-8740-4fb13ba5ac9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb51815d-7935-4b97-982a-f3e69ad1549c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "25e2b0f2-3f9a-462e-aebc-6ff3b5f873fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca50253a-9c4c-41bb-befa-f378449aca8c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd799a0-c227-474d-82e2-7ed778f3b564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f8998c-de5e-4cd4-a920-d54f85ba8498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be742ba5-c736-471b-9518-7c1cebb5763b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc28b86-f981-4640-9e57-5cdd953c636c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d728ce24-fa3a-4098-b06e-8ffebc730e56",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "718e307f-1e85-411e-9de8-79a1cc480c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7caa38be-8b83-474f-ae1c-58cb56ed3041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b35378-9e99-4fa9-aa4d-d8c8d70b65bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9910477-04b5-44b8-aa3f-3901cd6804f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec427465-45c8-4baa-ba09-07e57e34a937",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ddf12a7-500b-4868-80fe-bde6747fb11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681e5c4e-b94f-4915-a893-7dc0abda31d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b70ba2-f0c6-4f29-aeb0-23562aa58d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "28f34410-2508-4cc5-bcd3-bc58ee5c4c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b096e301-8c4c-4d77-bd74-d0b53ae778b1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0d3c2a-e37b-4977-9d6f-c7eba45ffa1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61b01f3d-2bdb-4e1d-ae21-7abcecbf454c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8b0176-7fad-4cf5-ba0f-8d46fd1337df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3df0b3f2-c59a-4c45-8724-5061e010bc23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d269d4-3265-41ae-a0e8-5e06bd0f894f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f58017-fa36-4239-95d7-e7f0d7dacf4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b1307b6-d08e-457a-a29e-5b3d1f139c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a69d3e-223a-4e23-b12d-75a56a45a85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b3383fd-bee2-4a6d-8d80-05f704869023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ca349a-acb7-44f9-aa08-04168955d795",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70dbcd78-0556-4633-aff8-117137f6e31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb9a3c94-2e0c-46dd-9985-bc47c738abc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e68c2d-f79c-43e2-8fe8-218a999d5173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8d112d-57c6-4e9d-ba55-e241d7566dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52065d32-9353-4645-862e-028b0873587d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0097e3-21f6-47a4-a970-440cf22ea379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08958640-739a-42c4-93f3-3001f43ad217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56caef7-7fc9-40d3-bdcb-8e7fba4122ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b65165c-4cb4-4558-950d-ef7061664731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48aefb8a-9ac3-4fe9-bf0d-61c4885ddec4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa83f17-1f9f-4333-8541-d0cf6cfbfdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e5d0f4b-8122-446c-8dd6-385a43a4ab32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57597d22-5d37-4ca1-a815-9fd3964f8b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8004cad-7a19-4d51-8a6b-58c6ae0bf8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b2afd7-9ca7-4031-9ef0-0070ddd2c7a0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a20281-3d5e-430a-87f9-92c403b0021e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aece250-c541-4eb5-91a9-05569ba96d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4544a35-e8b3-4673-9122-0dc5abc1cdd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "159e7bf5-7d96-4ff2-aaba-4bab7ec94f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faccff9d-c9fa-4c05-9fc9-da28bece534f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46d7e43-3533-4960-ae94-0cb9221f25ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "448b0e9a-420c-43ac-931c-041249d12d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7cd32e0-8932-41dd-a574-1007cb6639a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9941a2d9-1cda-4d92-ae22-11e83c14eb82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ca8d65-e7ae-45fd-aaa1-5b1aa8a69a3e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d6b43d-20bc-45ef-ba25-29ea2908a9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4413ff2-7b3e-4959-9af0-a64fc04ce1cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3901629-957d-4e0b-a5ac-f50e88af5832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4191b431-8a69-4543-809f-d90baf2b16f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b85ef8-3acc-4f51-a5f3-d590b4a6cd94",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37d5df9-cd1a-4bbd-979e-a4a46dc35f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5052797b-efcc-4368-942b-da43c70e7b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c20b22c-c80b-4a67-9246-fc676ddd7fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d0f5f95-8238-402a-871b-0b8fe1b78da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48d36a0-d9fe-4980-9e97-5b2ce82b829f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95155c17-3fb9-4035-90ac-c91e5687b1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd67d9d-0b3b-461b-a749-a7d17ff9d77f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5419b007-1af6-47c2-a815-b2cad4b595da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5444f967-759c-4876-9393-2a580b3e6625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35d054e-0091-41f2-a625-e2451ae79f7f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3396fd-6683-41cc-8991-12dfbc268494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1965272-f4a3-4f9a-9e9f-dfadc8f637a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a64133c-057b-4aab-8ef7-5d9edd41303a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05ccf7ea-f17f-420e-a8f2-cd712c8fd933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edff4ea3-026a-45b4-9fec-a5b229d0ccf8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9a9e9e-32fb-44ef-8d56-972f25536713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0baf6408-1f6d-4486-b617-7ec73650d082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c2b953-07e6-48cb-bc58-2d1a8c03b47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5398fb8-9ca3-4f22-ba88-ecd80d82a7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bdbea5-441f-4719-b99a-8a874a4208a3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50966977-12a4-42a0-8427-f137d082dd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c4672ac-7830-4d82-9c17-094da68fd17f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d61d5a2-ec3d-41a3-8143-22b4a9910234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f703a621-0ef7-404c-ae10-e69b66b03d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d58df6-8b84-4be2-82ab-112827d22177",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28523a5-8d18-4ddc-a77e-b55179335dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae057d6-8069-4bc7-bfab-b75d891ae03c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6c162f-4f07-4ffe-832e-74e3376cce4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb5466a7-6eb9-4b5e-b5a2-0bde5abe0bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693d9f1b-7b87-4988-b6f9-6d18e13b00c9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78046354-ada8-48ba-9c5f-df72a0d8e89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75efdf4f-4be4-4824-b031-7bfa62c35186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7659ba35-03b0-4e42-a889-10655aae0c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35a7f96e-609e-44b9-811c-722f437e8163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7948f745-04e4-484f-b493-5ae57ed4e9dd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c29e8625-6277-4901-b1c8-588b76822588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce733c1f-23cf-433a-87a2-6faf163ee77e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "542a5560-0f23-465e-95a3-5ed46e97c28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be30ba70-761d-40b6-8496-91fa2fc2191a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b867c0ed-57c2-48eb-87f9-83dc9b0dbbdf",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c926fc1-f295-40a8-833c-6742f13f19af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe50a51-eaac-4cde-b99e-9345474015ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d5281e-b1d0-4bcc-b139-ac81bc666d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24c8f7ff-7fcf-425e-b985-a381ac96ed27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5d926e-9462-4cab-ae80-fe759c5949b0",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e8c658-2711-4a6e-a15e-1f6ef697a1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07b0c106-3219-45f2-8630-e23aeadf0d4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5a04f8-61de-468a-91da-39f22281f004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d3132c0-8d0e-4550-a8c8-35a8acfefc7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d22aabe-6066-4bd5-a07c-87eb36efb607",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e01583-763b-4194-9cad-865c04b2f0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f77075a-16ef-42bc-aef5-30af97060049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37afbd98-56f1-4d9a-9693-f2192448d7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ba0d532-b589-43d2-9562-3e2a12dc3376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7a8b6f-14e4-4f6d-bc19-87f9bb8ed1cc",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1449a2df-bfe4-4b39-87a5-57b5c90f875b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d079dc6e-8e62-4c9e-905e-09a5d268546f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b874080-d3bf-40b3-85f0-b9f2b6222936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b553dfe4-0b85-4776-aa2c-a7ab9acdc9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0a8f1f-a1ba-4111-8a67-6bae7253bbcc",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "350afaae-f64c-4b4e-b289-8e7c69370d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d646988-5d28-457a-a45a-963e1c09450d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7857bb1e-c86a-4a54-b697-3a1722b044cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b754622b-1864-4ebc-accc-5764383f74e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24169cef-49ab-4aa9-9c11-6cb6cce0661d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6980fd6d-ff01-40c6-be10-66b2333ca46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d961c9c8-b929-4e48-b7b7-6ee3560a7301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0c5775-2162-4fb3-a31b-ba6b77e97025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1edea3ba-3590-4292-ac5a-f18458568f6b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7a2ca067-1277-4502-9625-a97f4380a0a5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "df155d7e-5201-439c-a19a-7b72062bbd96",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e4f305-926b-4adc-a4d3-d05f3300c39c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0ebc258a-9cae-4823-b000-17382c8f2cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43645888-aabb-4773-ae94-c822ca94c50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "489577bd-179b-4458-976d-870e268cab8a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d816cbd3-28f9-4f6a-a1e6-c544b5a802ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffe23184-adc9-4a32-afa2-3023cd1ab168"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "21ee9bfd-80e7-4d62-8e75-96737d749d7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5fcd7a7-cc9e-4322-88c5-188e7876975c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22524c67-036f-44c3-b6c8-65192ccf3534",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "67a865c2-dd7c-4163-b708-99803751f7fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "25ca1c67-6413-4fc7-bb83-1eca83f5d899",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23ac4fa9-62be-4134-942a-7fc6ae2c3efa"
            }
          }
        ]
      },
      {
        "id": "3ce0061c-ffc2-4049-a82e-80a58c2aeddc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "463164a9-7914-497a-954f-f3d3ee449924",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d39b293c-7c7b-4c83-b092-e023345acac0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b6fbd312-9332-4be2-9d10-26ecb6cb7c17",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850ffa99-b427-416a-adb2-24ce5b7e0abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c868933f-2342-4488-aadb-0d9ab28b6634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4a8bee-4c21-4fae-86d3-36062206f337",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbc16ec-be83-4f3c-af26-bad2ffce883e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7783e63-f9b5-4503-b1b0-6237d0e9553f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7371b7ad-4828-4407-8735-aa3402d160dd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d653970a-916e-4e22-97d0-5d36ca30c652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1ed2d4-ef7d-461c-a24c-a97f850026e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea359aa-0f92-408d-8de6-d03fb3a25e8d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52a4dc0-0cd3-4a01-929c-068d8ad7c528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20db0795-9b60-4deb-bfb3-63bb67d2aee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a6555c-0dc2-4435-9aba-219b5b1321e4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe885fe-9a73-41bd-88d3-6029d23ee3ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94491b5b-c772-4e8f-9fce-0d3105ea65a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c17880-ec6a-43a6-86e5-d328dbf8953b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038fe63a-92ce-4f2e-9f79-60992bd0ba51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "906d8415-649f-4192-bbbb-d3e61841a77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b43dbd8-cb41-480e-b787-1a19ecc49f42",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f69f324-6882-43d2-8b8f-01001326faf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad66637-0a7f-4f96-afc9-9100d005b6db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b87f50-2ad4-4254-9b47-5b1b06a16eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a048f350-b814-411f-aa39-2e5f353c3ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7be5bf-2a62-4612-87ba-bfe5744067c1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf9457b-3303-4f01-9d4d-e3c88a20769c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd84dcd5-4202-47d6-a587-998b1186924a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30b72f8-8f01-4310-b453-fc36b811ad44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d074e77-97e6-4954-b7e0-1f63ba0c9a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c451c7-4321-49ce-9634-a2fa061df7ea",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20eac691-6a55-4118-a35e-9852fe1074be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "144d14fc-81de-43d0-acc2-744d1af213f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10bbb7f6-8228-4924-bf75-b970855844b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a471cc0-1ee4-4f84-a988-48c111fff22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31f82ca-1634-4d39-91cb-c70d3f979833",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5c37d2-9c69-44a1-9f59-5df2fa08f3b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a15a3ef-f48c-4e7b-a965-fb7d2214a51c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d56fdc2-15a9-4243-8f8d-2c4137633391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "021b134d-23cb-4d57-802b-0f0cc4677011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23081119-1bf7-48ce-bbf7-661680b45e7a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aadf37d0-a4de-4022-8f4e-13d6828a59b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10050f86-b18f-4380-8a00-1582bd4b5354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc2723f-aa81-48e6-87a4-e5eabc24165a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7c037b1-1c40-4439-af37-ea0ada81ae48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb7a4c4-32d8-4f91-9438-aa913ef373e1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4313bf28-7cb8-40b8-84db-cae32b4a5fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf2b1a5f-3658-4c07-8f1b-03612d3c9368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a99894-bd82-4b22-9cf7-6b10e9954ad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d5fa1b-e204-4b31-ab22-95de8ddf3f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03d13d9-1874-4031-8e65-668ce3dfc14b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c588378-df76-4a01-97cb-ac025929ffd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0cce22a-1f82-46ca-a673-4f8d9d16abe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4d0897-0008-481d-b4b2-c47ff4e6716b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7d9f9c-8f37-4dd4-961e-22eb09081a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e49b8e8-c07b-43b3-8066-03c3ec183d90",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f7ed13-9ad9-47f6-bf9e-d04ff8147a35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "143b2470-4cf5-4fe6-8b5a-a1181e1775b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a4a725-1ac1-4fef-9656-a30804c4f07e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ce1467-0507-4da0-929c-b30cbdc38e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7050d5-879d-4253-8897-7991ef13077e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be523684-11f8-490e-84c5-2352ba968988",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67e30433-cb0a-41ac-b24d-88b59940564e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e01bc1-f44b-4e8e-9cf6-68650416be63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c96413-e5ac-44c0-b869-f8a5ae12e705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163afe99-30e0-4db8-9ee7-9ce82cd1af2b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b2c3e8-46fb-4eab-9797-4cfb6642586a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62c15a08-cd0b-4a5c-b813-84e302a8575d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc89cddc-fe31-4bb1-8099-a2036b5c2b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dacdd82b-1e63-4ea2-94b5-f57659c9bac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b1fb70-29b3-4aa1-a07d-117439bd0a32",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48957ca-fe38-41d7-a38b-a7c75a28765c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f9f9294-7d02-41c2-92f8-4a03e414ccdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65318c25-b754-48a8-b3f4-ceae0221232e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c295b65d-6c3b-4932-8562-c45b777ade92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dda0a72-90cf-43a1-b6a9-b8077937d095",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "392c9332-a1e2-488e-b6a3-6a8321c1cca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1298016-3dc4-4922-aaaf-01ea46295274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecdc018-b0f2-4b7e-bfa7-2d4bc5e5bfe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a0ec27-6e63-4c0b-8ffd-d4b32e47394e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675fdd6f-901b-43ff-8a71-39a23026f56d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b03ebe-ffae-4750-9828-0702f3c64cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d37e661-b60c-4440-b906-f7103312ed1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbe2684-bcd8-4647-8e04-282950458ddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bc16652-6b8b-4638-99fe-2184cf90ea69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673a9684-e062-46cb-8211-a6a62913ee2f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7acd5fc-a7a5-4713-bc07-56443d309842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58033584-b3e6-4e10-99e0-4b1d41a70bb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6743196b-5b12-4e6c-984e-99cd292f7440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c3763c-4506-4bf1-b91c-1358b9c6f776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7230bad9-a109-475c-80da-ff71b99d1774",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e149bcf9-89d2-40d0-81ba-5014e4f92e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c0d19b9-f61f-4cff-8891-bbde6ad7aabd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0132c2-30c1-4c18-8ed2-e82d7dfe05e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d93b3d-54a2-4424-a924-cc2d2433ad1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f787638-faed-4dce-b53a-661222d61a03",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3576e5bd-a9bf-401c-9808-4e44e71f1fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0020922f-ce20-46e7-8a6e-f49d113b6019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef4777a-aca0-459f-a063-0a6d7b026422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930c93f0-3fec-4e36-ac78-1f43e06f2026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8107a062-6d03-481b-9955-b1bbd640d871",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d093ab3a-4328-4425-ab42-59a4ab3b22fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eeb0827-2f5c-486b-9119-1f68e34fd343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e34ccc0-9835-4e93-aa31-f9a917f6db10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1770b89-5623-4f7c-b9c4-f612aa3244f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5124c975-b6b5-4d07-a9a3-a1cb572aa069",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a420af0b-0c3b-4470-9ddc-3b95dfc45bbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91092b08-574e-421f-95ce-ed5324faa635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1cdf05-fd04-4b37-a1c3-20d5e15982f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b554051-61cd-47e5-b188-3e85d9268d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed90602-5cf2-40b4-9e87-6de7da5cbeb7",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe835bd-95d3-4d8b-bbbe-e23802e1f018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed41f3ec-819c-46ac-989b-8fe7c31f5395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8960ba6b-b657-4a6d-ba4d-8b4c366b3a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8074b72-c0eb-4367-b13e-b53d060ed251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484caaa9-6c3f-4d68-84c0-ac8ba9513bd7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98825e18-d0f2-4c87-bc4a-184b2927ac82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f15df39a-080e-4cc5-a135-4567b4716b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ebba75-e9fa-4820-9fce-8058f288b754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e82453f-02bf-45be-baa8-6910167f8cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b97168c-4403-486a-94c3-961876111b81",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc7f7c5-68ad-4f81-a091-22b8f61fce74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56d475c0-5d11-402d-9844-91e81117925d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b4e43f-b09d-49dc-9c61-e05b0cfdb8c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed6baad1-367b-4bbc-88e7-c22c254fb15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5229fcfb-5c68-4aa2-8be5-4fb1e54c6bc0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a5f1b0-2fa6-4b43-97d4-c73aed751470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3901034-65fc-403c-8fcb-b490241913f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a324d8f-a17d-47b1-81ca-40fe4f353eb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "699c1f21-7c51-4449-8a2c-8985146839c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff787dc-6cad-4af5-a1c4-f78ead20f8a3",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb518d4e-9b74-4030-afd0-c55c84ecfddc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "333fba31-0dbe-4041-a3e0-dbf213953a56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9490c23a-7bd1-45db-99b7-53f5f3646ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fdfdcd9-2260-4dff-8558-ece72345a108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52a6bd5-f576-46f4-8053-1bf02543dbce",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d149398-e00b-4614-a307-c26baf4802f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8402f4b5-4d5a-4ef6-96fa-f1b8e4624d59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd58b9a-7b7d-41a7-9d75-5a57ff045291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cec99133-1d8b-4469-a44e-37d967e74954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0266f294-e923-40c4-b358-7235b99c1123",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd84eaf-921d-4773-8173-097fa993643b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aad5c801-2e92-49a3-8be6-ac38638f59b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bc40b6-c517-45b2-9484-005b7337d07a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f02c41f-ef2c-4561-b087-bf832fb6250d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d247fa-da19-4487-af3a-6b915a5148f8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb22b8c-c595-4800-b2b6-52f1ce373ff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64a15008-9539-4099-b7c1-6f07f9453c49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "975a80ea-f297-4f80-813d-6b1d5fd4a7f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1caf8c-2e47-44b8-b19a-bf1e98a93e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2073de-e90e-4144-b32b-a59ebdbb70ff",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22da7cd9-1470-4b24-a9c0-2abd9151bcc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36c98970-f83f-4e91-bc10-7d9b530ddc07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ed3c0b-1561-436a-9434-ce7554a28319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01953a06-aa68-4b99-8753-1df327ee566f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16269b5-7fc5-40ce-aaaf-7167593c00e1",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8551dba7-b9ec-4ac3-bd89-a88330328434",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59ef42a5-3bca-4b4e-b3c1-09584f0d36a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "411bc695-826b-47f0-a684-84b30ae91c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac000f0-ed94-44ad-8ff4-7f5834a65790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89098600-4cb5-484f-babf-3c2c2237abbe",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24aef9cd-367c-4a56-a4d9-b27e1b718d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b2ce6f-97a4-463d-8a81-b132b37618cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c283f52b-2fd2-42c0-a31a-8271348f9d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cebd6adf-0772-42fa-8eb1-2954db6a3961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a950d64-aeb4-4c00-b838-179b66d29e0b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9338759c-2bd3-4761-9614-e74040548160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec3cdca-1555-428b-8909-3c7a9c4914d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9c5baf-67e4-477f-93f1-153fe90b9e71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d54a8a8-a7fe-4c07-9afb-92a574e35855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf4c761-9aaa-4724-b405-77866bc2c033",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edfbaeeb-099c-4829-88eb-2056922e517b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ea231f-59c3-4f85-818a-d6532c7825a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd3d23a-0cc5-4676-9313-1e9c486b756b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e59929d5-be9f-4139-b09c-92705817166d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2378f2-0662-43fd-820e-c3e9326baa23",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65dfed2-89de-4507-a2f1-a9603b481f91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b963f948-322c-4ac2-81a1-7717164094f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ea5b55-2f37-460d-869d-97f58bd5a62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72407758-647d-4a55-b9c4-3b02fa28d529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12dd625e-a8cb-46a3-9da2-f0bce167b500",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d857f6-391d-4ae3-8479-ab068f8bfa26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8053df6-58b7-4b48-87d2-0aba65ca1882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e2826e-abfc-4dcd-8f63-6fdd5c743e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbc77cf5-92f3-449d-9b6f-20682c618158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171e4f9f-7f86-4fb3-b623-379e48c7d6c6",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a975a41-b3a9-4c1d-aa12-dea94869ed8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be8b3f6a-2c18-43b7-bbb0-d62b14a5bbaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f393f7-b6d4-4799-bef2-e8213c15fb1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6b7f45f-b1fa-405c-8007-bca413fe0908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7dbd48c-0c10-4009-bd83-d03bba584ffc",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a8cb94-a350-4834-a5d1-595d59676bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "107fdd83-ab3c-430f-9612-d7d99c64b449"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a7643c-f123-4b63-9ec4-11258b192371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8588c00-9862-4c09-a1b2-be757b09dca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8d291e-003b-47b3-9171-ac0f9a2f342e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c453a459-3821-45c7-815a-80035f1307c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64256306-1bf2-4cf4-be1f-56644e75bd51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d65b512-9919-4189-9012-8a326ddb1f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "098ed368-f294-468f-9ee1-4bddcd19ffd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b23a81e-6334-4834-bcc1-8566fd069c08",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93be4143-e717-4bec-8850-7c528bfebea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8495821e-5687-4488-97d9-154b095a5f88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e66f21-9d3f-4b34-a2a1-16130334f3e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "100b911a-edc9-4b8c-ab7c-38a009cff0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c763b10e-9301-4362-9951-f21ea27882a9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b424976a-467b-4cb4-b1f6-4f75d7c63c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f55958-5b1a-4074-bf57-2cab7205ec88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a50876-2af0-4112-832c-53bb314cb08c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952299ef-9b5c-4fdb-849e-b7defbb03009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb28bed-f912-4a0e-8959-b80a0fd13aa5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35d5649-4b7d-4b32-95c3-31ed0e5c3aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94abe692-5540-416b-bb43-95ba10cf71b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36fc7741-8510-489d-be34-8f1022b849a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08c5c88-6270-4f73-a558-a6cdadb08b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07703b83-a8b4-4e7b-b6b3-0bf53c141b92",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e679a83-bad8-42ff-bd40-bd4d8b60e3e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fef9e9d-a150-4ad8-8822-b0e766bd3705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53faf369-42ed-416a-8bd6-4be637fe0660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d03752b4-1a33-4ea1-8d1d-e305ca66b04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99467fae-1e8d-48f0-953d-029c008842ca",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554cbb99-19de-40bb-80af-1f0e8e2772ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef4d266-5b1b-491d-ae49-ccd7b32aab2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ea6e1d-7029-450c-9a19-1eda06d0a112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e4fc890-9729-4fab-ab04-baf5d2698819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be0f0b9-035a-4444-9f6e-723c60337752",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc283e1b-38f5-4c2d-8f51-375892cf28dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d3e7c2b-5f30-44b3-b2fb-cb44b0ef6108"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "884e56a8-08cd-427f-ac84-1613480287fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "305a0af4-418a-4e79-8d55-2853eb38bc6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d37a12f-b7a9-451c-bf51-51627b0749db",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28f2874-8b2a-47bb-bbc7-4aee83fa401b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5753624b-fad0-4380-ae74-4abc8f0de6b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14f724b-57b1-474b-81a6-621cc9a0ce26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7aded0-d04d-40aa-a9e9-259e7a95ed66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b6e33e-698c-410b-b101-d5ddb48fb4da",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22ed008-3790-44b2-a93c-e2ed96e94e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8d7538a-76d7-467b-ba7f-425bba9db6b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9daa950d-f7b8-4184-814d-0c71cd863a55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0478159b-96ad-426d-bb05-3f197156a97a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6cd153-8933-437b-805e-1b7c0bad05e7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3617b51b-67c5-4eae-bf0a-53e260c731c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35cf3ba3-b315-4210-820b-4d927fe4ee43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10ec72c-c6ba-477c-a271-659e8811de71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7ea3bf-263f-477d-abf1-a3e1bed1c293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeba6646-cc15-47aa-a7c1-f94d3f25d3a8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae5b0d6-77f9-460c-8f60-842c3418e26e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c825a6bd-b486-46f6-a51b-a8f9d09bd3e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9e2b66-9524-4e51-84be-5af5a95ae4a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa2c0957-82c8-4024-923d-0d2cb89bc668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22fa266-9a4a-48da-b886-a6a6c5602560",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f349f4f0-4316-4e45-b4bd-fae8f42fb6d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f67806-5d19-407e-b44f-c240a2b0ee6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7de948-62ed-4ae9-95cc-975ea0f94c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd5f5d3c-bc4d-49c0-bb05-3dfc7b9239ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9351262c-6b99-4945-aa30-9b91e1d40bd4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d050d6-ba0f-454f-a6a3-34bff06fb474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e8868cb-2746-40e4-b3dc-c804ddd4f434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3eecaa-08f9-4bc4-9917-6f266615f49c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "567c108e-09e2-4e7f-900f-3edbc2b5c240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea20f8a4-cd8b-4607-bf54-9f074b36b07a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe898e0-9f66-4656-8f82-ca59f8fa3ae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e938ebab-88ca-4d45-9d77-1b0d0a1ce9d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ab8213-4a22-47b2-b89c-9f845ba9111f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d35435-e505-4c8a-b5f1-3e7b2c784bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f33f0c1-f509-49db-b14b-06a314ba9bed",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141c58a4-b964-415b-876d-d5e71fb0c4bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5d32062-af9d-4989-b3a6-26277c6577d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d626bc6b-47d0-468b-8f43-8a7ce7d164db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60bd7766-b50b-45e6-8d1f-f3592ab9ba9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a26e26-2467-4a0d-aa65-09855c0399bb",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9265c8e-d21e-4da0-b395-2ba3b3cfb242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dde7fd17-3093-4d3c-a42c-81c8c3bfe598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9110a13-7ae1-46da-87d8-94ac62accf2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656bc99d-f4e7-4bf5-a203-45c5ee5f6aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4223a2-5662-4fa1-af08-235becba7e3d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4db348-ea9f-48a7-95b8-da37b9a6bcbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11d206eb-cdc7-4626-a701-c7aa7651737b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16aa5335-8348-477f-aef1-90684cfc2497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69aa369c-56e5-4e0f-abda-44a39ba7699e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd58fba8-14ec-4d67-b262-883943432e6f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21da294f-788f-4ba6-91f7-519fc17e6606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e2b5e6-7e9a-4c20-8491-771f194a013b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5424b0e-4d76-43f6-bcfe-6156ef8d0b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b263ed2-1eee-4d14-925c-5c687c1999d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d9d3f2-9725-41da-b486-7e87a11b7cf7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dcddb0f-350b-4b6d-969d-519a5e3cb5b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116b1699-2b89-4ae4-8b42-fa24c1226ad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db6e94a-2b37-446e-9320-1bece6037219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7e4ce3-3fa6-4e91-97af-01434c122341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bdc8951-c131-4ed9-a7d0-5ef692ea7263",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8994f2df-4690-4105-b07d-d099a14b5f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0efff406-c900-4e3f-8bbf-046249ea3d0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf9aa79-c928-4bfb-8c57-36594ab785ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d4983f-dbcc-4590-9413-9442d99e4c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e27859e-4b4a-4613-9582-4713d2b270c4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d74f272-8bed-41dd-83e8-37a1d3a81e70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e19e2b1-6968-43e3-bc17-ea13a4802cb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f71ae8a-61d4-4d06-898a-271fc115846c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4530ef28-8b5e-4df6-877c-07d87e22c5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ae2c47-3a5b-4592-a833-5f320d3ed394",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b9be480-0398-49d7-9037-3d8567e4df29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aaeea2d-8dde-4320-8eec-5cb18eeea88f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6d9d09-b1ef-4638-a899-329c92b38486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e469cb4f-6216-413b-b4bc-af7d1b35d33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fa6b38-5529-4798-84c8-8648606f64d8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16f67eb-c6cc-477f-bd63-ea590a77d91f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96cbbae7-2b1b-4fe4-a32e-6375856d4d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6168405f-0846-44de-af8c-503dd85572ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56cec816-4406-4bb5-a96a-88d575eb436d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d4591b-8811-4324-a88b-43d9ace7a60a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea64c32b-26a1-4961-aba8-d0c324443763",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e31b027a-8561-4562-91f5-d5d8ee9ec599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eebfa8d-e203-4e08-b413-f19383886310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "629c3550-66ff-4529-97e0-35ad8601e28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2411facf-e3ce-4e49-8618-a4c8f74d7614",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7646508-6fc6-409e-9ab7-38ea415f9373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a0cb4e0-4ae7-4cbc-8267-f1f3775f516a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de316bb-50ea-49f8-85f7-c6fe721db205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79c0fb7-a4fc-4cd0-b8a8-0d5117843e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bca3486-f747-4086-b003-4f41b3f24822",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1badb862-2ab8-4178-afb4-7456f7064d9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bba5c58-a33d-4275-b900-e244df6a5d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b6d3db-924e-4d0a-9175-d678c295e4ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eee9cf2f-da3c-4751-9645-3b99e258d19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3f9d26-82bc-4686-a349-3ad602c418e1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438d4db3-f5fe-4103-b14f-17d996d67602",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ce0bf23-0f5f-4129-ad56-fc42680af28a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24872016-79d6-4c89-8de6-c427c6541a83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "240c0018-abbe-4414-831d-06712437c989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733cf300-06cf-4e96-a36a-216cbd42d2a2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8729df02-9741-49d5-a9b1-194219161762",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79cd291a-7c6c-42e6-a728-d436ccc6bcfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac90dcf2-640e-4a37-9130-cf1a824d6a8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c642ceae-dfa8-4619-a4d3-490ee01b7573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7ddc8e-bd4d-4db6-9737-70e1f6bf95b6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb3922b-ef8a-4e4c-871e-d413661814f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05166669-a004-4dfe-b388-b6a5f86b482e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee46c6c-eee7-4058-8ba1-2bdaba1bd0d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1df2899-ac50-4c41-9baf-8d1370dd7e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8775d42c-ec3b-4e42-90e0-60b564a3e1ed",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cec1fe-21f8-48e1-9556-3431dcbaa6c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8528923e-6b88-4da3-8a41-2bbd4f1944bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b58d61b8-9cad-436c-a82e-4ddefeea486e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68652489-ce70-4b9e-a26f-1cd6aea162fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d343a77-5381-4515-bcba-edec0b924471",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd9ef18-73b2-47ac-ba54-5e8eb2e35be4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80e344d8-98a1-4511-99d0-6aa051366479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "396366f6-b57b-490d-afb1-f661bc529966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6866b0c-c8ee-4d4e-8618-5a7437e48660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6fb815-5dcb-479a-bf31-84db9f070935",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc4a005-558a-4f5b-848d-afbdab3d2255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19fe824f-2aa8-466e-8cd9-52fe269c4180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "477eeeba-9fd8-4419-85fc-0bc07e8b9bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3bdf5ea-9e95-4e5b-b76b-09f96e422901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8252a340-f7b6-4c3c-b2c6-bd8c04e4c80b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14902bdc-35e8-43ef-af35-714b8d26e735",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78ec6131-86f8-4d82-a857-f396ffba5719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5194c4ef-d811-4789-b901-4be14d7aeeae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bef966d-337f-4642-aec3-192886cad6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce1ed32-9842-43e5-887c-65ff1af9ea59",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4ba65c-1971-4903-b235-5dd156dcc00d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a07214b4-1966-49c5-8688-72a551ecbd58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9252d83-95cc-4396-81a6-ce0b6a888f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b6bf95a-95fa-452c-b237-61ddd3e56542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037a55b1-dc66-4734-adfe-f2d3180c599f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877b32f4-0d1e-45b7-9d1c-8622b061ffea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "111b57cd-fa79-48bd-ba24-904099a8f820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47429e9c-97cc-4a2f-b57c-137aee225782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85fcab7-5c65-406b-93c6-a4e8b97ab0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f2e29d-2104-4be9-9304-108bcd646f9d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a10eb6-8116-4a49-bcff-f7cb67fca846",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "401bdb04-914d-4c6a-bd0e-cc04036e40bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad211268-a9ba-442f-ba56-5cf6da6fcd8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd8b83d5-9881-4dc7-88e8-f2b81c856523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75fbc537-b94b-44f8-9831-ad3e0acfe25a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a656a7-fac7-43c3-8dae-fb180d10c0aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa648054-a2a1-4e2a-814d-767230113ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de7af935-53a8-46fd-aa8c-5e8a8b3d179d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e061b25c-71cd-4f62-bdfb-78973f38d015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63539f7c-178a-467e-ae79-5d25572b832e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93093a0-6040-4986-9769-7e8dc144a52d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "692d87e8-052b-4c0a-9afd-75a7f03160c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7cbf2f-8f77-4caa-a45e-66e9c56307f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd76387e-ee1d-4321-8e81-4424eb2457df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9f38ef-24b3-4d20-bfda-91372152c054",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb571199-3a6f-4c6e-9876-4d423a4fb389",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98b6384b-1b8c-4513-8519-f8a08a7b36d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe95610a-c17e-4222-b848-9d85bdc828db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7e49da-ad44-47df-8bfa-e8a0b7199168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f243b45-f444-41e3-be68-77560b40fd81",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0caba2e8-3132-4314-81bc-c6412a0d2004",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b45a1d4-bc4f-4ef2-b970-d85df743a72b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ec17e6-6f76-4789-8610-86f65bccd1cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cf5664b-37f9-4122-b7d5-763e0baed940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03254906-b772-41a9-bd75-cfa12118d894",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0782105-e183-4a3e-8285-605427ca0450",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "309c46b9-c16f-44e3-b49a-64e07479e457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "326d2190-1c18-4b66-8cd8-c8ab6379f7a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92bb9aa9-a32a-4850-8987-4190b7049ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5351bf7-6614-4641-96a7-6ac2e7b90585",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc64b828-edbf-47d8-884f-bf0703f00588",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2311c4c-df47-4e14-b050-741c87b90664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81abf51f-2eb6-4199-bd10-59fa007075ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1bbb6b-e7bc-481c-a88a-d9d14a20ce1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9af3ccc-9df2-448c-972f-4c6d206231f4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280d92d2-c985-432c-a09c-ebaf641fcc88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e62e49d0-241c-46d1-831e-2d1a8399f62a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "934d81e6-6319-4b3c-a374-9c1c096009ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2790eaf7-f776-4e30-a98e-a98ecf51eaac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0692257c-c162-49d1-af60-024da68c313c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3390c628-5df5-47eb-98fc-7345142333d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c8d3cef-1522-47be-9aa1-246805ed76e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5f00da-f61b-43d9-b017-cbc3c1581d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e50b336-133b-46c9-9db5-ad856d35bedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40758011-a8c1-43f7-841d-9fa2763103f5",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10593113-f927-4fc5-bb44-1889b50d3e98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1886d27e-52f6-4895-a2e3-a3944696df62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d34383-77fe-4762-acef-4c722cc2d32c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d00603b-9f09-483c-aa81-2e1cdb3ab9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5396b47f-85ff-4870-b47e-2a8b4996f315",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c997a8ad-3053-4e3d-85e6-c8f4eab46f94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4691d8e-e2d4-4626-9778-a50f64198920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea30aaae-3779-42cf-9a55-dfddd5d78b97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "644cfe75-665a-4622-bd86-4c69c960a324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41652f5b-bc35-4921-8c70-142513ed1f4f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b9eab9-d61a-41cb-aa5a-0d45e9235453",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "675373a6-f231-44cc-bb66-a24c02791ee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "385882da-32b1-4eea-80af-4dbd87debeca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf6e6a6-db56-4590-a1c3-3f4da69122cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4a5b66-2a03-4770-964b-55c2b00f3cac",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d99e13-4917-4dd5-b241-973451c9bd6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "577427f0-ae12-4dbe-ba52-840a3ec8a7f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce2d4f4-729a-4d2c-ac45-c05b9af5629e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9995735b-3789-490b-8f94-2de94b4fe2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f00be2f-0302-4095-9d62-b693ba9e544a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86534559-9465-434d-bf59-ccbb046b0882",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f689b2d-ccbe-4407-88fc-a76270b08d65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a0a089-4bd8-41fe-b2eb-d64f1aa84579",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d83aade-073b-426f-9316-ebb5d0911709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8d109c-48c0-47d7-bff5-9fd21e93e413",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5fccad-8835-42f2-9f8d-8f829b28a9e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce6230dd-04f7-4032-aaf6-c68925f571e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3501605-2225-46d3-98c5-b189e730095b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb27a764-6620-496e-b601-2ff857b7fbca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfd0d43-fa3b-4622-a8f5-062ba305dd3c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b69669b-8750-42be-93a9-58914938baca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "785a4235-d1e1-448a-abe6-ee1b71ada7eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f98adf-fa2d-44ee-a59e-1177f18489c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "261f97da-f612-4e49-8ffe-830f479cf626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40dae37-9633-465a-9f2b-d89b8d8ca4f9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ccf08f1-b5b7-481b-a3b0-16882a1a3b65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fe0318e-b906-4523-9dfc-7993208dd964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5773d13-a684-40b6-98f2-70436be1c68e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65213711-a6ec-4b48-b88a-5f04b9f884d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4891a66f-6b2b-4b0b-a497-73f2423a830e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7974fa-07d6-44c1-8e71-9d174ee1a9ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e45f9b0-4222-4487-b977-748d31c51da4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "548e91ff-16d8-4276-86f0-4431812cb4ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9229bb35-b87d-4714-a1fc-00693bdca936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb29dd9-c6c4-4267-9be7-5fe94a13aa19",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c447b1d5-d1e7-4902-8048-6e2ca749386d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00f42f48-6cca-4f45-883b-bab45c55533a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a45eb7-4afd-441e-971c-87607655b1a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e27f620-e11f-4a63-970d-94c3294f6758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d8fb5e-6a3f-48ab-a885-bb87e5e2ca2a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21072cf6-b27f-4d5f-9449-4d251fdc7f0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9bd22fa-1e1d-4efa-8b81-be32a4cf3f40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1bc508f-2836-41e9-bfb4-2d11e7fe8328",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f548f4-8a7d-4d39-bad1-021e7ddc0f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0b667f-1c4a-499c-a047-9722c6b45073",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33e26c0-3c0a-4f70-a95a-c9eb3f428353",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac75159a-a2d3-4ab7-88ff-f58486d37ab7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e122e72-5993-4b67-afdf-fcd08f18fd90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cdb0878-38eb-4697-abc4-37a849e080fa"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "005fa77d-93c5-4405-b011-3f672902fc94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50d3c0ec-7d09-48f8-b9c4-fd16c58fa6b9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae5204b0-9ddc-48f8-928b-d0c2ad599432",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa956761-be2a-4e25-9037-47543c8d8157"
                    }
                  }
                ]
              },
              {
                "id": "0d083f7b-01ef-4170-abb3-d24b33f6d6ec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ed7fc0a5-251f-4286-b7af-c7aaa9a89b6f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc0d90e-2491-4f74-892d-5bca8fa78919",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9ecbc123-2886-420b-b638-b47a9ca3bc24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f24c81-d492-407b-bb58-6438214582b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4b45c9e-7bae-46d4-8f2c-96e359a07058"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89a10e4c-95f5-4961-8543-b70381fdaeb1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a2a0bb4-d52b-4fed-ba37-2aaa3409befd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "59d2451b-6d9a-417d-8d14-5497172739f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4949e596-6d16-4fd0-b76b-cc7c502281ac"
                    }
                  }
                ]
              },
              {
                "id": "d3a3b71f-c690-499f-bddc-1b0a34ab282d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1d749d3d-134b-4b2f-8585-80d53cb2baa5",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "118cf953-6502-420f-a16a-0d92a3eb1075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f8e796fd-344d-420b-9eaf-1fd0fac93f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c92e861-7328-4782-b5e8-a5b194b21b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3417d111-094f-4708-a643-33a8ba84042a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2a9539fc-87c2-4fac-aa02-8fcfc001d932",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b0fcc59c-6d4a-4d89-b14f-3ee5f3db0b06",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9671a102-d6df-4bec-b781-1ceac13187b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9cd9989a-1d56-41b4-9d0c-884b5752d80d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6cf67c5c-c9fc-43cf-a9fb-668a640c744b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9479c974-f3da-4428-859e-ff9328c1254f"
                    }
                  }
                ]
              },
              {
                "id": "c5b68221-af60-4be3-a593-5dce84a51d87",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ef4b4f8-f319-4fcc-8367-439b2ee3ca8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2ee920e5-3462-4b21-bb6a-3ce0fe7e6170"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ed53a1d-4b76-47cf-bd82-4895f7a75a37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "667f6aad-41bb-486d-a9aa-2b2123b6c9c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "88575374-2859-4298-83d0-80121cc8910f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0a8021d6-7892-449d-aad4-7d8000e7a773"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a1650cdb-317f-4129-a8bc-9863eaa304ff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "57462592-cf3e-4059-b8d7-5e3530124368"
            }
          }
        ]
      },
      {
        "id": "8d913ec4-16d2-47a6-a557-97398ea04341",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "685f0912-0a18-421a-b74d-f2ada47b4cc1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d511c27a-1635-4260-b6dc-e748da70a661",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "21f15863-9c80-4c69-9b5c-0f2554f95535",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfd29a4-7a19-4a82-80ea-ced9a92591ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8c072d9c-a4fb-47f6-9b0a-731855ab8c97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6216ca05-02af-4e6a-8046-4c34a59c842a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "866c70f8-0ff6-40c7-bef6-a675690e1db3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0cf489a-c3f5-41c5-be07-64b9c0557863",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45df76d0-8124-4873-83d1-3b6fce5da3fc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "727c2a7d-66a5-4e76-9a01-224ccfda51f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72d4d03f-c3d2-45eb-9e4a-0b7a377e82cc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c89d9e2-af02-431e-ab6c-fdd02309ed9d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "256675c5-6f98-40d2-a14d-4366792e7838"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c52be108-ea77-4b3a-b42a-9c0a3c3f8229",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "214762e1-e1ba-4ae1-ac71-39bdc05d1167"
            }
          }
        ]
      },
      {
        "id": "6b05e15c-c3d9-4f3d-ac9c-5052fce7be24",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b0a2a93d-aa38-4636-822e-95d74e7dc286",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a4d1d0c-aa5e-4737-a27e-ab038819020f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "08bf9e79-5317-46f6-96c9-bb3e05e0e209",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f96434-20d6-40b5-a6b1-fee0e08e7ca2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8526a745-a7f0-40f1-a08b-fb3f86621e4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b980ee-f5a6-4a26-b8f4-408ebd390012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db58c868-8671-4f34-b406-51a32c1e90b2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "983f3949-915b-48c7-b28a-376d8cae1b98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af2802d9-1b98-4d4a-82f2-e1837cf1cb5a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "95b9fbb5-6689-4059-a3e1-55509c8dd52e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac11cec0-8b34-4a9b-8556-fad8772d33f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99840b8d-24bd-41a7-b5cc-de1861a9ccfc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6557e2f2-c345-4205-b0f3-5c8746d92265"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "922c7788-9122-4065-a670-3c33083b2deb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "40517cc3-3ef5-49ce-90d8-ba6b162793a8"
            }
          }
        ]
      },
      {
        "id": "72b14cc5-9b67-47df-9306-8acb1bc9f6c8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "74459bb2-7b52-4ec7-bcdd-885b94c7f77c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec725aa9-8398-4268-8032-0844a63d6228",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36147017-41e3-4bdb-a7cb-01e5abceaf3f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10cebf1b-368b-43ab-93bd-c14f103a16c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86b78272-e507-4406-a19d-5965a60fc4e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09e471b-647f-4d14-9ac5-8b2fea04bac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f952dec-b0d4-460e-847a-bda8bde5b4f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b154547c-1876-4830-9b4f-c421d6945ed3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ee86e36-6227-4425-bb26-40b995068755"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6614e9c8-6e40-44f3-9c1e-4ac9ab446091",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06c757e4-3509-4c85-918d-4024c2cf401e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "915b58a1-8c92-4a8f-8653-401fdc371e32",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6f3fa4b1-8722-4a0a-9acf-7fdd913154ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12914b40-c5d2-487d-ac09-239249f44a09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8bc8430-62a8-4ff3-990d-f17ba133d904"
            }
          }
        ]
      },
      {
        "id": "328e6f13-90eb-420f-bc3f-658b98b82510",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7c9743a-1f08-4821-a5b7-6c34f056a048",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "336f9cf1-9872-4f34-b2f5-c718eef8a173",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f7825d4a-f0bd-4dbe-9e6b-ab7d72869911",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21111ace-4269-4459-9a70-47dbf0648be7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1f6c96f-bd47-428a-b8d0-d843fcd7a68e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 63.44912280701753,
      "responseMin": 9,
      "responseMax": 723,
      "responseSd": 78.0015859551023,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1704414963215,
      "completed": 1704414990477
    },
    "executions": [
      {
        "id": "3a3a767f-05e3-448a-af3f-afc9407a3a1f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b2e08604-cf95-4c69-8708-d2acfc8bb782",
          "httpRequestId": "27260b73-1312-4aae-a397-48a679e90bb1"
        },
        "item": {
          "id": "3a3a767f-05e3-448a-af3f-afc9407a3a1f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "66ad1251-b74a-444c-85de-c11a87acaa06",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "73eb2b29-c11b-4d01-b8d0-923058bed8d5",
        "cursor": {
          "ref": "b67451e7-e3e1-48e7-8fc2-9e7709109f22",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b9cc1503-3ff5-421c-aeae-f54822bf7f6a"
        },
        "item": {
          "id": "73eb2b29-c11b-4d01-b8d0-923058bed8d5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7a2631d2-1b14-4385-beb3-cd53141a62ff",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "1304fbe4-799a-46e5-bad9-8fe68a660108",
        "cursor": {
          "ref": "6611d5d0-8c3b-4dbc-8299-96d84aee0b18",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5dda2968-d708-4b50-b331-76e472fedf8f"
        },
        "item": {
          "id": "1304fbe4-799a-46e5-bad9-8fe68a660108",
          "name": "did_json"
        },
        "response": {
          "id": "5397e86c-60e3-4020-af8a-674ee7bbcf2a",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af060e90-1281-425d-9614-c805789b174c",
        "cursor": {
          "ref": "36fcbf78-01f5-42d9-ac0c-f99e0fb35c13",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6785ac3b-96cd-4572-a6a8-050fc7f2f3ce"
        },
        "item": {
          "id": "af060e90-1281-425d-9614-c805789b174c",
          "name": "did:invalid"
        },
        "response": {
          "id": "1ff9ec52-345b-4e9e-b2e5-9c5660f9c560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af060e90-1281-425d-9614-c805789b174c",
        "cursor": {
          "ref": "36fcbf78-01f5-42d9-ac0c-f99e0fb35c13",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6785ac3b-96cd-4572-a6a8-050fc7f2f3ce"
        },
        "item": {
          "id": "af060e90-1281-425d-9614-c805789b174c",
          "name": "did:invalid"
        },
        "response": {
          "id": "1ff9ec52-345b-4e9e-b2e5-9c5660f9c560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a67f695-1fc6-4359-9d88-54ad29486d04",
        "cursor": {
          "ref": "fabf628a-992a-4b24-8d03-30bff0224b31",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a5115c42-b6bc-41aa-8934-7c5b79eab0fb"
        },
        "item": {
          "id": "3a67f695-1fc6-4359-9d88-54ad29486d04",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e5a20a5c-f807-454b-9fc9-6088fc2ad945",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960e9cb2-da59-43f2-913f-95901b3dc619",
        "cursor": {
          "ref": "12d344a1-9132-4038-9fde-a0c73bd8a756",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "242a2c1d-402b-410d-a248-cd5fa2147b11"
        },
        "item": {
          "id": "960e9cb2-da59-43f2-913f-95901b3dc619",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cfa49b8f-b2c9-420d-983b-d8e9f7cf8d37",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49c075f-6ff5-40db-9607-c5948e052f35",
        "cursor": {
          "ref": "18a69397-624a-403d-9aee-31dca5d5f05f",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b720e817-a189-4ec8-b45d-e40cc7476479"
        },
        "item": {
          "id": "a49c075f-6ff5-40db-9607-c5948e052f35",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bfdb06de-3bd9-45ed-9bac-9f9c2065ea29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a56ba598-f425-46a5-9b7a-ceffd37813e2",
        "cursor": {
          "ref": "9dc6aa45-5f10-4694-b44a-1ac74d30763e",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6a67ea0d-b361-4d25-9f6b-20916aeba006"
        },
        "item": {
          "id": "a56ba598-f425-46a5-9b7a-ceffd37813e2",
          "name": "identifiers"
        },
        "response": {
          "id": "4cb72dda-00e2-4688-a0f2-af9ba670d79f",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1286cbc9-b42f-480e-bf4a-38396c26b27d",
        "cursor": {
          "ref": "d5d38829-ff66-4472-9fab-30b758220f43",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5f5191d2-ba98-44a0-a7b6-8711f2f70b3f"
        },
        "item": {
          "id": "1286cbc9-b42f-480e-bf4a-38396c26b27d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c90791a7-03c0-48db-99ea-4b643ac3c31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1944f4f-9832-43f6-a7b6-75882f79f9f1",
        "cursor": {
          "ref": "dcf78746-b740-4faf-ba80-133ac29ac26d",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c9a8fb21-150a-48a7-8a1d-937925654fe5"
        },
        "item": {
          "id": "f1944f4f-9832-43f6-a7b6-75882f79f9f1",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c1a94258-aa0d-4a0b-a69e-abb9fbd75614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71d35a3-cf57-4619-8e30-7f8a967af134",
        "cursor": {
          "ref": "b80da6c5-8bc2-418c-89a9-6e071e1c3afa",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3c30fb55-c754-4300-94ea-de51dcc28638"
        },
        "item": {
          "id": "a71d35a3-cf57-4619-8e30-7f8a967af134",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "83d79df3-be34-4f31-a53d-d19bac60c6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44bf7f7-7aa4-4065-96da-13ab96e9853a",
        "cursor": {
          "ref": "a976e2cc-bb49-4289-8089-216b5a13d3ea",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c08cdd36-24ba-44f0-ad84-262ae062b907"
        },
        "item": {
          "id": "c44bf7f7-7aa4-4065-96da-13ab96e9853a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "41631cc3-9105-4d74-8435-cd5118cdfc66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6d897e-c0f2-47ff-a4c4-0ca0c82610ae",
        "cursor": {
          "ref": "462f4837-de11-41f5-90a0-4e42d62a4ee7",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5ce54a96-9f46-4b6b-b2bd-7dfca1faa7a4"
        },
        "item": {
          "id": "0e6d897e-c0f2-47ff-a4c4-0ca0c82610ae",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9ef6a9f4-5feb-4761-b205-fd257c6eccab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455feee4-4826-41c1-8b40-2e8f98f1efdb",
        "cursor": {
          "ref": "abe5f8a1-760e-4435-a514-3134628d52af",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ae73f5c7-7296-4d31-a581-927cc67de253"
        },
        "item": {
          "id": "455feee4-4826-41c1-8b40-2e8f98f1efdb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "dca47300-2ffe-433f-9720-208f1171fe85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a98dece-0c29-4b28-856a-b0e911a07ea0",
        "cursor": {
          "ref": "7d83fab9-6f8c-49ea-bc68-99bf8569be37",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "da2f035b-8d4d-454a-baf2-daa4b1cdc218"
        },
        "item": {
          "id": "0a98dece-0c29-4b28-856a-b0e911a07ea0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "081029d0-b2f9-4248-a924-9e1884c11342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96382860-dc4f-44a4-a631-f4bdb1c0501b",
        "cursor": {
          "ref": "ea067160-84c5-4e15-b0e0-a9ce51c1ea7c",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "eb0ea484-fb4e-4e82-a8fe-091dea377901"
        },
        "item": {
          "id": "96382860-dc4f-44a4-a631-f4bdb1c0501b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b5494712-edc3-4eb3-a3a2-c7c5364aa539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a311bfb7-fd1f-40e0-87cf-3aa4483c6a3a",
        "cursor": {
          "ref": "b419d014-7877-4d2f-8bdc-24606f29b959",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5bdc8454-5c2e-4ab5-8560-dace29ee8314"
        },
        "item": {
          "id": "a311bfb7-fd1f-40e0-87cf-3aa4483c6a3a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5f1fb994-c809-4d5d-88d5-9d5ac76ac2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7a38e2-4d05-49b8-a64e-2f9477984dcf",
        "cursor": {
          "ref": "0c011b60-1eb5-455b-8591-540e6d08a758",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e3a330a2-5458-4231-adb9-a94222c01c07"
        },
        "item": {
          "id": "3d7a38e2-4d05-49b8-a64e-2f9477984dcf",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0cfb45d2-0ce0-4f89-966d-86bd14899cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40060305-30fc-434e-8a2a-1c8b2626e5c5",
        "cursor": {
          "ref": "9d01c2db-0f5e-4559-bad0-ea64b422ceb3",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2ca1abc7-26a6-40ab-90d0-2eb27a080ae0"
        },
        "item": {
          "id": "40060305-30fc-434e-8a2a-1c8b2626e5c5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a3be488e-848a-4a6f-955f-40e71920c884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c764f9-968c-43db-81b3-0a262ec830bb",
        "cursor": {
          "ref": "2d32d3f0-cae6-49f9-b622-7b14e5be3def",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "11449864-ff4f-4c44-a4bd-fef239b17e3d"
        },
        "item": {
          "id": "16c764f9-968c-43db-81b3-0a262ec830bb",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "082abf65-875c-4e3b-9c55-e6da737f1f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6c0eb7-b9e4-4add-a958-1f660c3f8b76",
        "cursor": {
          "ref": "65c10016-d435-425a-892e-f63eb878c1a9",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "70d6617d-ca5b-44ff-94ac-89d9499ffa1b"
        },
        "item": {
          "id": "0d6c0eb7-b9e4-4add-a958-1f660c3f8b76",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4aa5462f-6cb3-4811-883d-2fd40d1a864e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "403a383b-8cb2-4186-bff1-eedc79d25377",
        "cursor": {
          "ref": "8819bda8-b974-4fb4-8ad3-cd94fce07324",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "45900edc-fe6b-4b68-8c1a-b64d20a53747"
        },
        "item": {
          "id": "403a383b-8cb2-4186-bff1-eedc79d25377",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "13e86e80-0fd6-4d99-8cc0-c06c9551ff1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd3da8f-943d-4e94-85af-e0e8a0c601a2",
        "cursor": {
          "ref": "dfcc0a46-6f01-4f52-9f47-003b4d369bc1",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "43c3c43c-ee63-49df-80b0-f8d8bca7c5a9"
        },
        "item": {
          "id": "8fd3da8f-943d-4e94-85af-e0e8a0c601a2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7e941bf5-8058-4df6-bc02-0660ee86032e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5e3da3-767d-4aa4-a9a7-1ffd5283619e",
        "cursor": {
          "ref": "710738df-5654-4b0c-be40-1c47954d8b32",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1cf592fa-a629-444b-ac82-41e019d42729"
        },
        "item": {
          "id": "5e5e3da3-767d-4aa4-a9a7-1ffd5283619e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "61e385a2-b794-44cd-94b4-1e0932063ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b82d224c-a7c5-46d2-98fd-412224bf9cd8",
        "cursor": {
          "ref": "58b6a9eb-7e19-42c0-b9c1-b17bc5acbb06",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0309da02-ce69-4e50-b23b-8252237f189e"
        },
        "item": {
          "id": "b82d224c-a7c5-46d2-98fd-412224bf9cd8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "65e6f8ab-8d81-4b3f-893f-562beb1f9278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6ec039-ac57-47c1-b39f-164165b05a16",
        "cursor": {
          "ref": "5e7ee309-a827-4759-a4eb-9749a4499a78",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9a270d73-a622-4a2f-aba5-2d28ae32d1da"
        },
        "item": {
          "id": "eb6ec039-ac57-47c1-b39f-164165b05a16",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9a1d8b1e-7f67-4a6d-affe-b72388866248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f728c3a-9a15-4017-915f-c319cca1d467",
        "cursor": {
          "ref": "c2b828ff-e2f5-411b-b923-001e1d59847f",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e49e15bd-53c2-440c-92e7-1ac399cd2644"
        },
        "item": {
          "id": "2f728c3a-9a15-4017-915f-c319cca1d467",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a0743692-dbe3-4244-8a1d-a2e81f5016b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304a87fc-bf28-4b9c-9261-6976f7d59034",
        "cursor": {
          "ref": "59fe6f9c-27fe-4729-9659-4eaaed400ebb",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0e8722d3-0775-458d-a6f3-3ce635dab226"
        },
        "item": {
          "id": "304a87fc-bf28-4b9c-9261-6976f7d59034",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "340ebd27-7be8-4ab1-b719-6c43574d58da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5958da17-e67b-4e8e-8f53-b70b47b58cb5",
        "cursor": {
          "ref": "731f0918-8772-41ac-830f-02eb29b45d39",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "34d881f1-f1f9-44b0-a369-a095c6437bc8"
        },
        "item": {
          "id": "5958da17-e67b-4e8e-8f53-b70b47b58cb5",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9e19f5e7-35e8-47fe-9868-85a2015a1b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c8a79c-4121-4a6d-b183-80f89fe1d77f",
        "cursor": {
          "ref": "40cba312-4697-4b27-aa32-2d18c89a61c7",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "390e2ee4-22c1-4f90-bc2a-ee2945d51324"
        },
        "item": {
          "id": "a2c8a79c-4121-4a6d-b183-80f89fe1d77f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0edd39bc-6449-4197-ba9e-e753f40dd878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14b69fa-3a13-4197-9e63-344bff151397",
        "cursor": {
          "ref": "806a50d8-0b35-46e8-9f3f-789619cc68d5",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5cdf091b-3fb4-4de1-b0e4-7f14fb9d31a6"
        },
        "item": {
          "id": "a14b69fa-3a13-4197-9e63-344bff151397",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1d162457-a5c6-4d08-a75c-b01b6ac56a36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3694bcf0-75eb-414c-937b-7465a288ada8",
        "cursor": {
          "ref": "c853c430-e5b6-46aa-a43c-e1ae1192f44b",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "bd87123d-7964-48f9-b45e-d66683d92788"
        },
        "item": {
          "id": "3694bcf0-75eb-414c-937b-7465a288ada8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a24132b2-683a-4978-b4e8-d088deff30bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d72bed4e-187d-4efe-9636-c331a5a928db",
        "cursor": {
          "ref": "e109e3ea-0eb5-4d9d-980a-657dc468e419",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "627ca499-8b82-4eb2-8d82-65bfd5c43312"
        },
        "item": {
          "id": "d72bed4e-187d-4efe-9636-c331a5a928db",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fa20d951-3758-4f4e-8fe4-65b6a9b42e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d5b06d-faaa-4ea3-8887-230f0543002c",
        "cursor": {
          "ref": "4d377bb1-39f6-4579-a50c-4c44e741cc1b",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bf2725a9-2f76-49dc-95eb-d9103950d75f"
        },
        "item": {
          "id": "63d5b06d-faaa-4ea3-8887-230f0543002c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8a90eb94-4d22-445b-9531-1906b1717c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9dcfa69-f663-445f-a381-7a1a901e27c8",
        "cursor": {
          "ref": "9bfc91e5-6a21-439b-9cc7-d95a06605db1",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b2e115ca-947b-466b-bed6-319fa53618c5"
        },
        "item": {
          "id": "f9dcfa69-f663-445f-a381-7a1a901e27c8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d1daedb4-9c8a-4696-8b3f-8403449436f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8816288a-a121-4041-94cd-e4a8faba1e42",
        "cursor": {
          "ref": "0eb2e98e-aef1-4d74-83ae-1d4e7d420fd9",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ec7d23b6-0115-4e52-b9b1-c1171d427383"
        },
        "item": {
          "id": "8816288a-a121-4041-94cd-e4a8faba1e42",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c4be2cd5-7f88-472d-ab07-b5edd1ba8471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2447c9c0-80e2-486d-9352-d5197c37062b",
        "cursor": {
          "ref": "af6a3bac-57f9-432c-92ef-713f76674c4b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0e23312c-4966-4939-8e8f-cbce45982025"
        },
        "item": {
          "id": "2447c9c0-80e2-486d-9352-d5197c37062b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "5f14d777-5c6e-414e-be7b-ffb07b0895dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabfb666-3cf4-448c-b596-9e16737dbb9a",
        "cursor": {
          "ref": "bfc68a50-1ed9-4144-8fda-2eeef2fbd65d",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c6c48bae-0f78-4673-b948-236ef4c38837"
        },
        "item": {
          "id": "aabfb666-3cf4-448c-b596-9e16737dbb9a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9f984284-e80f-450a-a679-d2515d14917e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66583f9-f822-4fc1-9dfb-ee41263d4bac",
        "cursor": {
          "ref": "2010b3cb-7d94-4982-8a06-d15e89eb2c2c",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f7074109-f02e-41ff-9f3e-120160d29302"
        },
        "item": {
          "id": "a66583f9-f822-4fc1-9dfb-ee41263d4bac",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f9bbcbd6-7ea6-4f05-bb3f-39326c9439ed",
          "status": "Created",
          "code": 201,
          "responseTime": 723,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "25b8fd5d-af8c-448d-a7ca-e6b5744cae3f",
        "cursor": {
          "ref": "41644c55-ed45-4790-b3c8-1bd5780b54ba",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "bbe4b7a9-2302-435d-8c3a-3008f12faf53"
        },
        "item": {
          "id": "25b8fd5d-af8c-448d-a7ca-e6b5744cae3f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d6824957-f01a-478b-933b-762b6d6f6b9b",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "db7465b5-6dfa-4eca-ad62-d9025a4a7e06",
        "cursor": {
          "ref": "bce4b1da-6c35-45c7-a1d4-706768806994",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3e5eb50e-ee7a-4b15-a115-62cde9be0758"
        },
        "item": {
          "id": "db7465b5-6dfa-4eca-ad62-d9025a4a7e06",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "947b4387-f68c-4928-af8f-807b112a5434",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "db01b069-3b6b-4f92-8aca-5cf6cdabb8a8",
        "cursor": {
          "ref": "185e7545-5cc1-4da6-a6d2-cac8de4f97ca",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a26f4f71-fa55-4b76-974b-48d525b81043"
        },
        "item": {
          "id": "db01b069-3b6b-4f92-8aca-5cf6cdabb8a8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4f7b4fb0-dd57-4242-936f-fbcb7314e676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b40accd-7ac2-4e08-9a0a-d8a963503df4",
        "cursor": {
          "ref": "e57b22da-21ca-48b8-a2ff-03e32138d3a1",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7c888b3c-6a4d-4c21-8052-dc34e5fa958e"
        },
        "item": {
          "id": "9b40accd-7ac2-4e08-9a0a-d8a963503df4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d2ce2871-1db5-42b7-8e29-5de49b538628",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "bd24d917-abfa-47ef-ae29-17335399a963",
        "cursor": {
          "ref": "5d6c5217-f137-41c1-acd1-6a01c7203f57",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6040d95c-efb9-4478-96a6-a299144e6624"
        },
        "item": {
          "id": "bd24d917-abfa-47ef-ae29-17335399a963",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9a5872fe-b60c-4682-bcd9-a187217e9e77",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8f26ff28-48ef-4f4a-9b93-8c0ca8a83196",
        "cursor": {
          "ref": "108c9198-fcb1-48f8-b54e-f3808b54e1eb",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "04583214-b4e6-4f8f-964b-d8c11bce5618"
        },
        "item": {
          "id": "8f26ff28-48ef-4f4a-9b93-8c0ca8a83196",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b53e3b3e-55ab-4f4b-954e-b1fca0eba488",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "02a677b1-2484-4d62-8a00-4d0ce7b7013c",
        "cursor": {
          "ref": "3b19cc9f-9107-4569-b277-c14d7fd87bdd",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d55b5175-4cef-433b-bf3c-4b99c332795e"
        },
        "item": {
          "id": "02a677b1-2484-4d62-8a00-4d0ce7b7013c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b23faaeb-b802-4638-869d-5595407ebe5c",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6ec1d8d8-429b-4805-9650-f6067ccf6cb4",
        "cursor": {
          "ref": "04df5829-827b-4677-a187-e8f4f2c06514",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "28ebce15-d857-468d-bb88-40f2827847fa"
        },
        "item": {
          "id": "6ec1d8d8-429b-4805-9650-f6067ccf6cb4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3ce501f7-5cc6-4490-8608-0b65795b39b3",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a5ce5823-4824-4e19-9159-43053666f1a5",
        "cursor": {
          "ref": "a1381a18-7ea5-4cfc-b6b8-ed4d8a529806",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "cbe5dfc6-0794-4e59-b20e-87b5be1cace2"
        },
        "item": {
          "id": "a5ce5823-4824-4e19-9159-43053666f1a5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "94693565-859d-4001-9117-2750626ba3bc",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c46a1731-234d-4bba-8377-631405434dfd",
        "cursor": {
          "ref": "44819881-48f4-4bfa-a9b5-03cc8c6a41d8",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f80b2913-e6b1-49d2-85a9-4ac83309c0fe"
        },
        "item": {
          "id": "c46a1731-234d-4bba-8377-631405434dfd",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6d2304a3-2fe3-4fa8-8c87-66bbe0e824c3",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8720561d-7d52-4a3c-ad21-c5f7fac3c1b4",
        "cursor": {
          "ref": "77a73564-c3f2-4d9c-9fad-088075ce7fc9",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fc7ea909-886d-4aba-b1f2-c17c00c5f42f"
        },
        "item": {
          "id": "8720561d-7d52-4a3c-ad21-c5f7fac3c1b4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8e3fdd9b-6adf-4153-a581-a260a10e931b",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f071cdf6-f79b-4f8a-8940-a772f561e54d",
        "cursor": {
          "ref": "101c734e-992c-4425-8d2c-2eb9c1a48368",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b922106e-fb63-4a9e-a8b5-f8bae7814ce5"
        },
        "item": {
          "id": "f071cdf6-f79b-4f8a-8940-a772f561e54d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a81e6880-3de8-4623-be5e-ca90151721eb",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4e2f9010-d411-41c0-bfd5-4ebbf0d34906",
        "cursor": {
          "ref": "9cbdc926-e738-4632-b26a-a22b729cf9d4",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "96d064dc-5e89-4c54-babd-83aecfed0b59"
        },
        "item": {
          "id": "4e2f9010-d411-41c0-bfd5-4ebbf0d34906",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c90f595d-253c-4f07-baef-ba8c30c7e0f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95c6909-1a67-45f7-9489-6dc563026eca",
        "cursor": {
          "ref": "ea2bd06c-c780-4629-833e-36c2d5c6f312",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "23de6fca-ab86-40d7-8200-ed8c795117a7"
        },
        "item": {
          "id": "b95c6909-1a67-45f7-9489-6dc563026eca",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3bdcb814-a211-4886-a2a5-cba297304d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3b6596-e6d1-4505-928a-c82030ff3388",
        "cursor": {
          "ref": "b130ab9c-1ba0-45cc-915f-bfdda48b2a4f",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ad1fa999-c3c8-40d3-b852-18bf984edec5"
        },
        "item": {
          "id": "bf3b6596-e6d1-4505-928a-c82030ff3388",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e57be998-a500-4560-bbca-93a136fd4943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d7cacc-01fa-4e58-abb0-d31be3311c4f",
        "cursor": {
          "ref": "ce7d75c5-470e-4872-af36-03c3f4d14438",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "63e22831-bfab-48c9-bb27-a53266ec4020"
        },
        "item": {
          "id": "75d7cacc-01fa-4e58-abb0-d31be3311c4f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "809896e5-aef0-4144-9dff-428447cb8d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8bf80f-0c3a-46ff-9125-4deb21d48b91",
        "cursor": {
          "ref": "0241c020-ae67-4f01-9cc0-91b20fac2c62",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b76292f0-48cc-4206-8af2-e2b2606dc34c"
        },
        "item": {
          "id": "ad8bf80f-0c3a-46ff-9125-4deb21d48b91",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b6979d59-352d-4adb-b41c-38acaa9f15f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9dac851-95c7-42cb-9e48-c1ae82abce7e",
        "cursor": {
          "ref": "a78030a2-f95b-431d-bed3-32d39a86e22b",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8f238d17-a4a1-424e-af39-0c8c9ee41a80"
        },
        "item": {
          "id": "f9dac851-95c7-42cb-9e48-c1ae82abce7e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "91ed7600-736d-4abf-af77-5ebf090f9193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b9628a-523d-4f06-ab28-558988593466",
        "cursor": {
          "ref": "87f14ccb-adf3-47de-81b8-ab06a891ef80",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8a83ac52-302b-4789-bf26-042f149a65a8"
        },
        "item": {
          "id": "b6b9628a-523d-4f06-ab28-558988593466",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "028a3c60-265b-4b00-acab-8a98f2cc2716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64226403-c18e-4583-be34-ddf60514ca3b",
        "cursor": {
          "ref": "324291e2-a08e-4cf7-ae93-6c6ef8327622",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d8da735a-6f88-446d-8224-8eb709926138"
        },
        "item": {
          "id": "64226403-c18e-4583-be34-ddf60514ca3b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4faf60d9-a1cb-4c76-98b0-f08bc4148a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c0db4e-c6a6-45f1-8632-26321c76c055",
        "cursor": {
          "ref": "76726183-a80d-4155-96a5-d822c1c23cf3",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1c9f5117-1c7c-4d59-98d3-67eadc13a529"
        },
        "item": {
          "id": "59c0db4e-c6a6-45f1-8632-26321c76c055",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e3f68278-2613-4e15-9c22-eaa187253064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8605ffa4-92dc-4133-b6b8-50981dd6fd9f",
        "cursor": {
          "ref": "3706c171-1640-44c6-b69a-e16219adce61",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "afe49882-d456-4be9-892f-3acaeaa909b5"
        },
        "item": {
          "id": "8605ffa4-92dc-4133-b6b8-50981dd6fd9f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9dfa3e2a-b54d-46ab-8546-63410fe9720b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6daa085e-f028-4e47-b762-31cb1008664f",
        "cursor": {
          "ref": "e2e27b99-e3b3-47f4-9be6-e76a3639babd",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9bdb404f-a136-4a7d-9850-5a93554a5eef"
        },
        "item": {
          "id": "6daa085e-f028-4e47-b762-31cb1008664f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "dd7ba6b9-f1f2-49c2-a5aa-450742074ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9b64c3-8947-4efa-89c5-a381e50ce906",
        "cursor": {
          "ref": "ec5082d6-3e1d-4062-b049-c4a9ab7b4e54",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ae667b1c-b3c8-4080-9d54-5325dabd6870"
        },
        "item": {
          "id": "6b9b64c3-8947-4efa-89c5-a381e50ce906",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ef0feee0-1068-429a-8f69-007f57559268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daaf720d-b021-4a7d-96f9-6871ad7aa4f8",
        "cursor": {
          "ref": "d347b273-bc0f-4de0-abb0-2dffc169aec5",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "58841ff9-7a3f-4467-b8d0-79cc836f1646"
        },
        "item": {
          "id": "daaf720d-b021-4a7d-96f9-6871ad7aa4f8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8a7cb524-9226-472f-965e-0a038aca3504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f4dbef8-44f4-407e-9ffe-9d96dd502c53",
        "cursor": {
          "ref": "260b8f63-b375-4e82-96c4-4a1900fc81db",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7ef2283e-6ac3-4f6a-9d4f-e29f9445aba5"
        },
        "item": {
          "id": "2f4dbef8-44f4-407e-9ffe-9d96dd502c53",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4bd45492-0f73-4423-9c5f-6af3e7453ed4",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "23e02220-b073-4fde-a8b7-6607b3728162",
        "cursor": {
          "ref": "fb76e91c-fe04-487f-9871-2864d3e614ff",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6385b73e-88d7-4115-a89e-0f3a8deb309e"
        },
        "item": {
          "id": "23e02220-b073-4fde-a8b7-6607b3728162",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "65b08820-0295-433f-9e87-6f923a856c20",
          "status": "Created",
          "code": 201,
          "responseTime": 371,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "66e92bb1-188c-41d8-9293-007c18009428",
        "cursor": {
          "ref": "71a24f02-d42b-4000-b84c-76b023e7c9e9",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "368b8a24-46b5-40b0-8017-f1fd8ef1f432"
        },
        "item": {
          "id": "66e92bb1-188c-41d8-9293-007c18009428",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "414d1e61-3d4e-4e88-a2cd-55f645a180a4",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "80f4e766-7de2-4084-b3d5-9b08ffd84676",
        "cursor": {
          "ref": "9840470c-a91a-4869-ae89-f66c29388611",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "940b4463-b7c4-4b22-93e1-5274ab1e6d58"
        },
        "item": {
          "id": "80f4e766-7de2-4084-b3d5-9b08ffd84676",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ad1b7b0b-f6e1-4d4e-9a3c-bcf395f0ac0a",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "e7e813d0-0c7c-4e5d-b318-f5bc7d2fa4f0",
        "cursor": {
          "ref": "53d806ec-ed10-4f27-8887-3f47554a3d46",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8d0c3bc6-8926-4783-a866-1f4d6905ffb0"
        },
        "item": {
          "id": "e7e813d0-0c7c-4e5d-b318-f5bc7d2fa4f0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "caa538d5-6b9c-4634-98ea-a3cc9dbd516e",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a77688fa-3ad4-4b3e-8f68-9bd300f51842",
        "cursor": {
          "ref": "b5b07847-919c-4c28-bdfe-4e83b1a6ae6a",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6ddea628-0cf5-4b40-b9bc-a2c788dc6bb5"
        },
        "item": {
          "id": "a77688fa-3ad4-4b3e-8f68-9bd300f51842",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "21578400-2a6b-4d50-be17-b9ee3836688a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87738dc4-d6ef-4c16-a1cc-3760fa6e034f",
        "cursor": {
          "ref": "21cba3d2-6bd5-474f-9c6a-dd026d7fa615",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "77933620-3b2a-4152-b2f8-b9bffe61edd8"
        },
        "item": {
          "id": "87738dc4-d6ef-4c16-a1cc-3760fa6e034f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "98ad7243-9053-475d-9ca4-10f96dfb8126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ddf1fe-9f8c-4c41-b9ca-2ab55bed94ed",
        "cursor": {
          "ref": "e57d94be-2aae-4108-9d0e-2fe8b0ccd1db",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5b9bb082-2e7a-4eb1-8a35-7c901f6a13d1"
        },
        "item": {
          "id": "25ddf1fe-9f8c-4c41-b9ca-2ab55bed94ed",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3988f271-306f-478e-b2a5-8aa7abf5d7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c756d6-caaa-4c01-b828-618feb5fea58",
        "cursor": {
          "ref": "88f1a97c-fea3-4a9a-ad5b-71565d0d0195",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e3c5a64e-f0be-4a1b-844c-9294e146b391"
        },
        "item": {
          "id": "26c756d6-caaa-4c01-b828-618feb5fea58",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0ecccbbb-c1e2-414d-a128-0407bcb1f7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dfcf0a7-4061-41a8-8c9c-57a3206a9c0a",
        "cursor": {
          "ref": "5245aadd-ca5c-495d-b287-eae023a554f1",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "454c9e44-136f-4134-a90f-7df741a8bb21"
        },
        "item": {
          "id": "2dfcf0a7-4061-41a8-8c9c-57a3206a9c0a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e88085a7-be65-42e3-a962-6a6ee45be3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6e170f-e43c-4c6a-8362-4d94a75237af",
        "cursor": {
          "ref": "530de8c9-6179-4f70-809a-cc857e0b7fb0",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "dc0aa79c-ca24-4dcb-8eb2-9afe4c1c30e0"
        },
        "item": {
          "id": "2e6e170f-e43c-4c6a-8362-4d94a75237af",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "12031f8e-6b69-46d3-a25e-2b9f87604ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42350421-8a39-4ec0-8225-7effa3a04218",
        "cursor": {
          "ref": "3c6a25d0-bcec-4450-ad90-9809ae21a1c1",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c69f498d-07a6-409b-9835-1705407c82d3"
        },
        "item": {
          "id": "42350421-8a39-4ec0-8225-7effa3a04218",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c262d2a5-17a8-4e1a-b75a-9b6f33c2d1ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7bfe4ea-3482-48af-ace7-83b10238e1ff",
        "cursor": {
          "ref": "822a23d3-d537-41df-a449-13eca1f116b1",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4c2c033b-14dd-490f-b0e4-edbf79d2579c"
        },
        "item": {
          "id": "d7bfe4ea-3482-48af-ace7-83b10238e1ff",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7fc3c8ad-aabc-4d6f-b6be-0f6855bae356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174b2333-5ebe-4a45-b199-068cc6a47d58",
        "cursor": {
          "ref": "2331128b-18c4-46e5-b8d7-5c72a50a8a29",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "887d864a-0993-4581-a36f-673f64611e18"
        },
        "item": {
          "id": "174b2333-5ebe-4a45-b199-068cc6a47d58",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "cee4afea-2dce-4225-85e1-4d37105d1203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d69267c-16da-4244-8ee1-75a8dba5525b",
        "cursor": {
          "ref": "0f3e2a5c-c6b5-4872-8792-0f159cdea1c1",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "67fe6aec-4bce-4e22-8830-8ba0022fa4ed"
        },
        "item": {
          "id": "3d69267c-16da-4244-8ee1-75a8dba5525b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "17e2bf17-4210-4649-ad36-5250bcd9df85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0644bf6-2d2a-4297-bf2b-c419ed291217",
        "cursor": {
          "ref": "9e29bf16-55ad-47c5-989f-c4261e2478df",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "da59a404-2a5a-4b3e-af0e-c210db3ef651"
        },
        "item": {
          "id": "d0644bf6-2d2a-4297-bf2b-c419ed291217",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "700302ba-eba4-4de6-b6fa-c596b1b2546c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498f85e0-3d54-4c8d-b6ba-8519bfe6d46c",
        "cursor": {
          "ref": "5741d8d8-0a87-4948-9bca-890e58932c97",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d60c69df-05f1-4463-ba65-ac16290c0563"
        },
        "item": {
          "id": "498f85e0-3d54-4c8d-b6ba-8519bfe6d46c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7e117156-ec96-4cf7-8055-24b18daeee95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86b3fcd-7da5-458f-9fa1-9d285f488279",
        "cursor": {
          "ref": "50a56513-a2e3-4206-8643-df0b056a470a",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8e7c94fb-9673-4410-8ac6-e89d8722831f"
        },
        "item": {
          "id": "b86b3fcd-7da5-458f-9fa1-9d285f488279",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "739fb9ab-e055-4fc1-986e-ed5b04f9c756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac929e59-f122-46d2-b4cc-68e19dd7fe7e",
        "cursor": {
          "ref": "d97dfa4c-ba9a-4f15-9e41-4763f21df2eb",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "74c2a5be-9c17-462c-975c-7b84fe38051c"
        },
        "item": {
          "id": "ac929e59-f122-46d2-b4cc-68e19dd7fe7e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9b5ddf2c-5ab9-4fd4-b193-1676a9de2415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ad0df1-89ae-4ba1-a618-04f2136340ae",
        "cursor": {
          "ref": "39876945-2a49-4df4-a87c-0ba5af2ae9f5",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ef9eeb24-08a8-49da-aaf2-84036665149c"
        },
        "item": {
          "id": "43ad0df1-89ae-4ba1-a618-04f2136340ae",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "092f456a-beb1-495f-82c3-5205d442abff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d2aec23-3dc2-45b2-9fab-7ceaf28f966e",
        "cursor": {
          "ref": "ee2214df-c759-4970-9a30-c63916698cca",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "31fdd57d-3c9a-4cea-a03b-f4b630d346d6"
        },
        "item": {
          "id": "0d2aec23-3dc2-45b2-9fab-7ceaf28f966e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d1ed7ddb-4d84-4781-a72a-f31704f82543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05d30c9-ed3e-4ae9-bd23-a1e98521fe84",
        "cursor": {
          "ref": "ede89ca3-6beb-4f36-b487-ef5ce3641add",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "de2c7aee-949c-46fd-99f9-8a18a0d0cf1a"
        },
        "item": {
          "id": "e05d30c9-ed3e-4ae9-bd23-a1e98521fe84",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d7507d53-1312-402a-b6e7-484ec8dc1c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91524d4-8447-4d2c-ad5d-86180beeca03",
        "cursor": {
          "ref": "273ec20a-59ea-44a4-bea5-37edb8fbd649",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8e4ca55e-843c-40e3-babd-c9383bee4e09"
        },
        "item": {
          "id": "b91524d4-8447-4d2c-ad5d-86180beeca03",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0e3322c5-5914-4707-8b2a-6d4ed2f5f7f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758835cf-0bf4-4b2d-a8fd-7ff69804d42f",
        "cursor": {
          "ref": "279e39b0-6ff3-4149-ae38-0ccc2407d38b",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6aa6c7ac-94a2-46b1-9ae2-45b46b7247a7"
        },
        "item": {
          "id": "758835cf-0bf4-4b2d-a8fd-7ff69804d42f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "20b36354-c25f-4241-86e9-a5e4d3e91058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caaa4c44-f7e9-4d0a-be72-3f76192948c5",
        "cursor": {
          "ref": "08c65592-2ff3-443d-a71e-9d99b52194b0",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1c809bc9-7d18-4ddf-b279-7a8983ac60ab"
        },
        "item": {
          "id": "caaa4c44-f7e9-4d0a-be72-3f76192948c5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "90691221-6452-4df2-9514-fb84a55b0ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c457b9f4-55da-4ec0-a4ae-132ef4e6e6fb",
        "cursor": {
          "ref": "92f094fa-7194-49e6-8233-f4db0d35ecc9",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "293eef3c-cb56-4229-b934-e40511c3b6d4"
        },
        "item": {
          "id": "c457b9f4-55da-4ec0-a4ae-132ef4e6e6fb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5ff6ca6e-9e74-4021-b674-9a25daa63241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59828f53-61f3-49bb-a96e-1304de32c9f0",
        "cursor": {
          "ref": "57284d7c-8a03-4472-8f09-e8508f0dcb6f",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6eb6f239-86af-482e-a771-9dfd96367363"
        },
        "item": {
          "id": "59828f53-61f3-49bb-a96e-1304de32c9f0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ff2a79ec-162e-4264-bd07-13a54701edff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855b6b5c-3351-4980-859f-c187ec2a7d77",
        "cursor": {
          "ref": "bdf65deb-63d9-4650-8937-fe46ea3af526",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8e3df8c4-9fe3-4e3f-9ab8-f66affefeda6"
        },
        "item": {
          "id": "855b6b5c-3351-4980-859f-c187ec2a7d77",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "08724117-ed79-4256-a398-2585162bc727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce989ad-c5ea-4fd5-b846-37089c5f1a79",
        "cursor": {
          "ref": "c59845d8-fe30-43a1-aa5f-f8eb8a5fce3c",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c62536af-1df6-4a2c-9dd1-b2effed745a4"
        },
        "item": {
          "id": "4ce989ad-c5ea-4fd5-b846-37089c5f1a79",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f01d094a-46cb-4a2d-9879-4069c343216a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c586bf-ca9b-4529-a28d-6ea14bb56a5b",
        "cursor": {
          "ref": "5244fb36-7542-46aa-9e50-43fed34bd118",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ccdd3b87-fce3-4df9-ada8-aab326de513c"
        },
        "item": {
          "id": "d8c586bf-ca9b-4529-a28d-6ea14bb56a5b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "55375c09-7465-49e7-bb3b-93f3696209b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185d558f-afe2-424c-8888-5f8ebe6d83a4",
        "cursor": {
          "ref": "a79912a2-e87d-46b2-90fb-ae3e9c161689",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "098f770f-532e-4e40-8a87-e42397e2f08e"
        },
        "item": {
          "id": "185d558f-afe2-424c-8888-5f8ebe6d83a4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ab94387d-a6b8-43a9-9ba3-6547d342b527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82efd5c-4860-4c6b-9f10-e9c4bd1a26ed",
        "cursor": {
          "ref": "9e8d10a5-9157-4de4-9ffc-f5a101277dbe",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6ce20160-95ab-45a3-8b2a-aef6cf24a1a6"
        },
        "item": {
          "id": "c82efd5c-4860-4c6b-9f10-e9c4bd1a26ed",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "20561a22-33d1-4602-b344-c5c7700b4c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91769de4-1d84-43ab-b12b-63acc4a17c45",
        "cursor": {
          "ref": "5d623b37-d7ac-49e2-b7ed-cfd3427f360e",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1b2a84a3-a830-4dcd-b765-1f82e5b51c2f"
        },
        "item": {
          "id": "91769de4-1d84-43ab-b12b-63acc4a17c45",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3c87a2ef-a25a-4d97-8cfc-8eb6abe0c507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8aa3636-2556-40c4-a368-6f220afe599b",
        "cursor": {
          "ref": "2345a9d7-eb79-42a0-b31d-3a79acc4c5a0",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "313b14a8-d1a1-4258-9eb4-f1348735abfe"
        },
        "item": {
          "id": "b8aa3636-2556-40c4-a368-6f220afe599b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7c72bbb3-5050-46aa-8b6a-c8f8cd7293ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9655b24-4cd2-434b-bab1-52f58b5e53d6",
        "cursor": {
          "ref": "0abc2fb3-20bd-4bed-afc0-4489a89502c2",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c177e52f-d8dc-4242-ab4c-aa723a5b8ec5"
        },
        "item": {
          "id": "d9655b24-4cd2-434b-bab1-52f58b5e53d6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "30ef311c-142f-4449-bcf9-5844ecbd7fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3181dab5-2826-4b8b-a5a8-38a4fb4f0d78",
        "cursor": {
          "ref": "a8c3e2f4-cf8b-4be5-960c-95df8934fa07",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f4fe0b32-4c93-4e74-bd89-3174bdb3109b"
        },
        "item": {
          "id": "3181dab5-2826-4b8b-a5a8-38a4fb4f0d78",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b079a4e3-2848-4e90-bb88-1fdceaeaeab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe23370-eafe-4f17-a94b-f862e7d4e6c2",
        "cursor": {
          "ref": "0e9b7fe5-855c-4178-9816-55675bbc454f",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "99176cee-5530-4b60-9da9-6badcb2ad617"
        },
        "item": {
          "id": "8fe23370-eafe-4f17-a94b-f862e7d4e6c2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "22e6f370-51bc-4e27-be5a-b1ee9ff8cca5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0584fcd7-3a6e-42fd-8a4a-34acbf0d41f2",
        "cursor": {
          "ref": "6efc0dc7-815f-467d-85c4-2801eda3681b",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "11df7cf4-b756-4261-b913-08675f02b175"
        },
        "item": {
          "id": "0584fcd7-3a6e-42fd-8a4a-34acbf0d41f2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "50a8b5e4-ecd2-420f-88d4-e15b0cfaa132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c3f63156-2627-47dc-bbfd-9dff4db36f94",
        "cursor": {
          "ref": "7174ee14-05b1-4ba7-b984-e1e6937c7809",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a7b21541-4dad-4ca7-838e-d7a569ebc75e"
        },
        "item": {
          "id": "c3f63156-2627-47dc-bbfd-9dff4db36f94",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c472cb55-9597-492d-8bbf-a028f8cfbc34",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0268a48-fdce-41d1-8503-acc8705526d0",
        "cursor": {
          "ref": "41f13582-2d5d-489f-9543-af4d3f9f728a",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7e3bbfd8-0e13-4b22-af36-a7cb864e8029"
        },
        "item": {
          "id": "e0268a48-fdce-41d1-8503-acc8705526d0",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b82da236-2287-4f79-9366-f217480f98d1",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1883662-2088-4105-8e7d-da7af7c17b1d",
        "cursor": {
          "ref": "f80b1975-b7eb-41f5-bacd-1a57d7d13c60",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "dd08fe27-3432-4fe1-9214-663ed1a3cba1"
        },
        "item": {
          "id": "e1883662-2088-4105-8e7d-da7af7c17b1d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f2114e7c-b5f9-4a0c-9527-689cf5542e0d",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "90422077-5a35-4ad6-b97a-16b62972c9f5",
        "cursor": {
          "ref": "fff50552-65d2-4b96-b1bc-a31baf325af4",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7129d4b6-d547-4d50-afea-9d9bf78dae13"
        },
        "item": {
          "id": "90422077-5a35-4ad6-b97a-16b62972c9f5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "948f54f1-ea22-4f55-a6ef-dd7d002bab64",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4764c3-616a-4282-8d1e-940a582da215",
        "cursor": {
          "ref": "05489824-5ae4-495b-9835-d164b82f97a9",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ef3db589-b984-4f24-bf24-18d2500467be"
        },
        "item": {
          "id": "5e4764c3-616a-4282-8d1e-940a582da215",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "cc1881da-d403-455b-945f-71024f15128d",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-05T00:36:16.911Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-05T00:36:16.911Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "97ef5dc8-c980-4109-9d80-a2a4554869b1",
        "cursor": {
          "ref": "4ded7455-08c1-49c4-ab2f-5c9dd2e1c6de",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "12d7aa82-551e-4f88-99e6-07c709492204"
        },
        "item": {
          "id": "97ef5dc8-c980-4109-9d80-a2a4554869b1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "96bed9e5-d98c-4f60-8a7a-ef078d98910d",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "432e485a-5ec8-4c7b-b390-5867b87b0de5",
        "cursor": {
          "ref": "15c15af6-d641-452e-951a-c17de05dc607",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "92d0d90c-2274-4300-a0ec-05c933df7619"
        },
        "item": {
          "id": "432e485a-5ec8-4c7b-b390-5867b87b0de5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cf4c3c67-53e3-4d17-afc9-30d3d55dfeb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75048c79-9daa-43ba-beb6-2916f20681a1",
        "cursor": {
          "ref": "9f32e9a4-817a-4206-a4a3-f130e22dea5a",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "46646a31-45c1-495d-9e49-c4d02bb2dc96"
        },
        "item": {
          "id": "75048c79-9daa-43ba-beb6-2916f20681a1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e706b3e0-e649-418e-b117-8d5a9b5a5e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a111cce2-7790-4bd6-9e18-72588de3cfb1",
        "cursor": {
          "ref": "8bc64f47-93ed-4877-881b-6f7f80f6bef6",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0f53da89-30fb-41c1-a811-ac0d6bd41730"
        },
        "item": {
          "id": "a111cce2-7790-4bd6-9e18-72588de3cfb1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d4007935-cb11-449e-98d0-ddd08ddf27d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6687f432-2fb1-42b0-804b-7466176d6d94",
        "cursor": {
          "ref": "f8afc619-6aec-44de-8407-3fce667ddebe",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "cfba75c5-630d-471b-afb5-8ba78dc46d32"
        },
        "item": {
          "id": "6687f432-2fb1-42b0-804b-7466176d6d94",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "35670806-2cf0-45f8-97b6-881e283d870c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b172ccb3-8ddd-4609-ad8b-e454713f55e6",
        "cursor": {
          "ref": "6b8a14c3-4c50-4406-bc2f-6a93e1fedc83",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d59e194b-a3c3-4ca1-bc2f-aa1e5b7263bc"
        },
        "item": {
          "id": "b172ccb3-8ddd-4609-ad8b-e454713f55e6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "df0d707e-5b90-47a7-91d2-d1db45db5d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb50a795-6e09-42a7-acd2-de6c8a2832fe",
        "cursor": {
          "ref": "4386e44a-fdc9-47d8-a71f-5b4576f34c9d",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b5e5eb26-1473-4c4c-afe4-3bdb8464d620"
        },
        "item": {
          "id": "bb50a795-6e09-42a7-acd2-de6c8a2832fe",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7b97a2b6-96f4-42f6-84a4-74a9c068c7f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45970603-d95f-4a73-a249-b29d41d6eafd",
        "cursor": {
          "ref": "801f099f-2bdd-409a-98ca-d7c7f94becce",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a4e0b178-32c4-47c0-b29d-ea229ae1fe76"
        },
        "item": {
          "id": "45970603-d95f-4a73-a249-b29d41d6eafd",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4c7ec953-f882-4475-996e-7b75aaa681f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac36bbe6-f911-481a-81db-fcd83bbc0558",
        "cursor": {
          "ref": "d1442c81-14b8-4d0b-bb97-72238bcde9e2",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6805e7d5-4869-40b1-a4dd-b201a6b13050"
        },
        "item": {
          "id": "ac36bbe6-f911-481a-81db-fcd83bbc0558",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ce624f43-42f4-4aff-9fbe-59383e9649ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b145b054-f70c-4d49-90f8-05d3adf6491a",
        "cursor": {
          "ref": "546aeec0-8527-4734-9c26-645a175fb5d7",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "31736a42-ca3b-4eb1-b49f-1250cdf6d07b"
        },
        "item": {
          "id": "b145b054-f70c-4d49-90f8-05d3adf6491a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "50e4d476-e54f-41e2-985d-5d5d67dc8a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3058aa7-ffb2-4fdc-95d1-27c21d14a4c7",
        "cursor": {
          "ref": "00a1b4d6-a496-4328-838d-2cc322bd81f9",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a7c2133a-37b0-45a1-aac4-79ca4d6ddf2d"
        },
        "item": {
          "id": "f3058aa7-ffb2-4fdc-95d1-27c21d14a4c7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "69bfa52b-c71f-4787-a93d-49518c2e0a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7ad857-9c16-4a84-8837-af931dfb6387",
        "cursor": {
          "ref": "00a7fea3-13d9-438d-8220-8fa9fb36d407",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3239f164-da56-4321-9f47-47a7143ac1e1"
        },
        "item": {
          "id": "6d7ad857-9c16-4a84-8837-af931dfb6387",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dab32b19-e665-4608-bc47-d76d0693b652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3247f2b-0f78-484a-9563-a4869566b388",
        "cursor": {
          "ref": "2be39ab5-2bfc-44f6-a0b9-220e6bfc91c3",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "55c7ca36-db16-4166-aa13-7cd5b118e743"
        },
        "item": {
          "id": "b3247f2b-0f78-484a-9563-a4869566b388",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "95caa9b5-8279-4c8f-b908-a5a6b51c1d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e55ac1d-7901-4937-91ff-160369a0331d",
        "cursor": {
          "ref": "4cbb8071-8039-4493-9783-d1c9cbc35d4e",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "016afb72-9f46-41a7-9836-47e24785d46a"
        },
        "item": {
          "id": "4e55ac1d-7901-4937-91ff-160369a0331d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3f71f26e-e1ca-4982-a142-af8dca9828b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4827842b-8ce4-4af5-b778-8989b7db2b01",
        "cursor": {
          "ref": "a81a50c6-63cc-4e0c-8a43-9aae62f01804",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e4632c8c-d42d-4bc8-a458-6ec544d4b010"
        },
        "item": {
          "id": "4827842b-8ce4-4af5-b778-8989b7db2b01",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "430fda0b-ed96-414f-95c3-93612aa78325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daaca947-9259-4677-9e86-33f6aa8e42a0",
        "cursor": {
          "ref": "6ca96361-ba05-4e9f-91f9-e0d348975812",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c45665a5-6b3a-4fdb-a724-59d94dae1712"
        },
        "item": {
          "id": "daaca947-9259-4677-9e86-33f6aa8e42a0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ef5a5220-b87a-4924-80be-f02d64323e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035e16b8-500c-4753-8f61-487b4a7d7a86",
        "cursor": {
          "ref": "29eed88d-09e6-40b8-b141-476b600c4a2e",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b025f766-fe6c-4a5c-875f-e8a3edc15281"
        },
        "item": {
          "id": "035e16b8-500c-4753-8f61-487b4a7d7a86",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "512cfd02-f716-4907-8417-0fe96de9145f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca7b631-7d96-42ea-ae13-d6990fae8283",
        "cursor": {
          "ref": "1ff41424-6a80-45b6-80c8-26c51ab13b17",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9525525e-aa32-46ac-a083-56d67b835fd1"
        },
        "item": {
          "id": "6ca7b631-7d96-42ea-ae13-d6990fae8283",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "06af71a0-4899-4e17-a86d-e6a7c5d8eb14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b001666e-4e21-4bcd-8eb9-e9a91ba5f1a8",
        "cursor": {
          "ref": "df1a2302-f77b-46b2-9999-75db8f48ccaa",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d5f982b3-df9f-40f9-9817-82a0cb9821b4"
        },
        "item": {
          "id": "b001666e-4e21-4bcd-8eb9-e9a91ba5f1a8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "aa7e0780-74cd-406c-8e8a-85620d94d038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b655e38-e391-448e-878f-e3682f1497ee",
        "cursor": {
          "ref": "32a8e47f-9ff6-4305-bb8d-f4e113562987",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c42c27c4-f1f8-4b99-8ca4-1dc6141f2b43"
        },
        "item": {
          "id": "1b655e38-e391-448e-878f-e3682f1497ee",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "edb4a87a-f462-4029-aa47-a2351dbef440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823d118a-7271-4985-9898-451ab28e901c",
        "cursor": {
          "ref": "ce0e94d7-13b0-4369-8100-bb01a723cc45",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "11f93f57-8a79-4aef-87d3-7fce8a0c2d38"
        },
        "item": {
          "id": "823d118a-7271-4985-9898-451ab28e901c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f6171708-c456-47af-836f-015f431930a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a64335-9c2b-4b5f-ab75-eca918cd4799",
        "cursor": {
          "ref": "b5f8567b-6481-4dfb-9169-9ed2641576af",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ff01b946-ba66-4d2a-ba89-9e59f7d511f1"
        },
        "item": {
          "id": "06a64335-9c2b-4b5f-ab75-eca918cd4799",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "99658c49-9c59-412c-bdfa-ad62e22bcc99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a44a92d-90d1-4d16-b4be-b4901b9a412c",
        "cursor": {
          "ref": "638085e0-7910-4c0b-a604-68a5b18ffdbf",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "766353d4-c359-4fed-ab1b-18a74913a83d"
        },
        "item": {
          "id": "6a44a92d-90d1-4d16-b4be-b4901b9a412c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "73bdac2f-3d3c-4ccc-9cf8-c9dce20a3f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db460cc-5bc9-4077-a536-4728f8dcf67d",
        "cursor": {
          "ref": "d9f28422-ae04-4ce3-a653-90f6af1b6d6c",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "10645315-05cc-478e-b786-42f75266f8cf"
        },
        "item": {
          "id": "6db460cc-5bc9-4077-a536-4728f8dcf67d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "17d1772a-4606-4e27-a189-259a207aa796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2959c878-6b0d-43af-82ed-ae5fa19a849b",
        "cursor": {
          "ref": "6dbf3bfc-1c0b-47ca-842d-628e4f33e25f",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ae997eff-380e-4611-a2ca-cd9ce2733399"
        },
        "item": {
          "id": "2959c878-6b0d-43af-82ed-ae5fa19a849b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7aac2f6d-3694-4ed6-9a91-b71f8f42b27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ecaa10-a282-418e-8278-b724e7fd04e5",
        "cursor": {
          "ref": "9cc92957-63f8-4606-9977-0cc3a4a953f0",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "98052df1-2e8c-4535-952d-4d17148b2da2"
        },
        "item": {
          "id": "10ecaa10-a282-418e-8278-b724e7fd04e5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4d0d075d-bba1-4eda-956c-4db3fdea25d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88456f64-f9a1-429a-a841-0b3444e1f0fe",
        "cursor": {
          "ref": "603542e3-1b2b-481d-8123-700fadea5291",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "29735937-5572-4fc8-af86-d2ccf78f41d5"
        },
        "item": {
          "id": "88456f64-f9a1-429a-a841-0b3444e1f0fe",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "93090c40-13a4-4929-9ecc-5b69b587a554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edd35dc-5323-4a25-b073-07b3c434c45e",
        "cursor": {
          "ref": "504bd2d8-0268-4d21-bc3d-ad48741d9ffd",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "00253083-4c97-46d8-8f58-80ee261e8270"
        },
        "item": {
          "id": "5edd35dc-5323-4a25-b073-07b3c434c45e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1c552154-31cf-4296-b388-a60b42d65b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e303b9-e0ed-4e5c-bc71-beeb9beb35c9",
        "cursor": {
          "ref": "e79fbc43-f6d8-40e8-ae90-50d5a98561f3",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7c121f87-0b7e-4937-90d2-c52ab6cad85b"
        },
        "item": {
          "id": "30e303b9-e0ed-4e5c-bc71-beeb9beb35c9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "61a4001b-ef66-4aa0-8bb8-11684b8d86ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01df8c28-726c-4c3a-8cfc-3dc0b4025737",
        "cursor": {
          "ref": "c90092bd-75a0-406d-9572-b11c02f9849d",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "dcb65c3d-ef2c-4291-a212-ac277fa7c7d7"
        },
        "item": {
          "id": "01df8c28-726c-4c3a-8cfc-3dc0b4025737",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5e74feea-d7ea-4ab7-93d1-bc32db078621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a80c09-ff82-4d17-9519-08f330a04f63",
        "cursor": {
          "ref": "3c5494e5-4d10-4b0c-8467-70a55ae3b37b",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5fbb6bc3-be9e-4a0f-b44b-33ae5e6c6366"
        },
        "item": {
          "id": "00a80c09-ff82-4d17-9519-08f330a04f63",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3569c8a3-b4cd-4c50-aa47-2cda52e23657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048ef4bf-0daa-4f2e-85ee-cf3a0979748e",
        "cursor": {
          "ref": "908161fe-fb24-410a-8e52-d38b53389688",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9245580e-0976-4327-933d-386cfe5647e1"
        },
        "item": {
          "id": "048ef4bf-0daa-4f2e-85ee-cf3a0979748e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0a8a5d78-9843-4d1a-8e50-f0b0dfe3bef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a17635-78dd-4ca6-b2c8-744371a749fb",
        "cursor": {
          "ref": "2830f9a8-9e5a-4adf-9e41-271c1a9ac7ec",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e8bcc4ac-4e91-4564-9ae9-ca2e8e1880ef"
        },
        "item": {
          "id": "d4a17635-78dd-4ca6-b2c8-744371a749fb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "adf3298c-06a4-44c0-b869-75a109b8ee12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f04fa5-6257-4a5a-a151-040e5d2f4579",
        "cursor": {
          "ref": "1a59454c-6a78-4da2-aaec-ba5b923ce6a8",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0d1ed721-844d-4f5c-8989-ee1fa94ff825"
        },
        "item": {
          "id": "23f04fa5-6257-4a5a-a151-040e5d2f4579",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "82910a5b-a648-47be-96e8-c264a8fe0ed6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31933c9e-a2ae-4283-9f3e-a39e340bc985",
        "cursor": {
          "ref": "008215aa-1eb0-427e-a95f-958791461a20",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "992ea6e8-029e-463b-815a-268919bd788d"
        },
        "item": {
          "id": "31933c9e-a2ae-4283-9f3e-a39e340bc985",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cff91567-a148-4ace-80f6-9204c7db52e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb0c46d-08fd-4152-a4e7-ccad1f9dd947",
        "cursor": {
          "ref": "819ce6b4-3fd2-45ca-99de-ddef2872953f",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9933c4f9-b147-470d-8cf4-bb0b2e400d70"
        },
        "item": {
          "id": "dbb0c46d-08fd-4152-a4e7-ccad1f9dd947",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "66b4c8e0-190d-4a2f-a906-a647bd4dd1a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f07193-9fc6-442d-9f11-ea4063eadd94",
        "cursor": {
          "ref": "9225e47f-2794-4189-af28-8edb7cf8d43b",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2941b9b6-baf7-4e5e-806c-8c2858fdca47"
        },
        "item": {
          "id": "40f07193-9fc6-442d-9f11-ea4063eadd94",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "60c97d24-8295-436a-99e1-f0403196f7e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca24c51-a4ef-40d2-bc55-917622d1b094",
        "cursor": {
          "ref": "9633e0f5-3aef-41f6-a54f-2c2c25d887a5",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7999fd46-1711-4589-8558-8b9fd9e4a7cc"
        },
        "item": {
          "id": "0ca24c51-a4ef-40d2-bc55-917622d1b094",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0d6fa054-634d-4a5e-aee3-13101f277a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43bc1c0-c79f-4401-bde2-6ac9bf03cb3a",
        "cursor": {
          "ref": "ce19418b-9340-480a-9505-c15e1dd80d15",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0439457e-4988-47a6-b339-10386635f29e"
        },
        "item": {
          "id": "b43bc1c0-c79f-4401-bde2-6ac9bf03cb3a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d3fbed52-518a-490f-be7f-afdfec2858ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad84c49b-7353-475b-8419-e10391d7a014",
        "cursor": {
          "ref": "0be45ace-5a68-49c6-ab01-b0c77fb6466f",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c8465a39-c2d9-40d6-ac1d-219a116ebbd3"
        },
        "item": {
          "id": "ad84c49b-7353-475b-8419-e10391d7a014",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "13b9b156-d79f-4a5c-a73f-e8762a513add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c1243e6-fa25-440b-8bef-8891c14fd818",
        "cursor": {
          "ref": "e7fef58b-2909-4ad5-8255-d8975b28fb58",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "028ec526-7814-474a-bee9-b1d8dadfad60"
        },
        "item": {
          "id": "6c1243e6-fa25-440b-8bef-8891c14fd818",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3d36b3b8-5ed4-4e82-9016-5799aacff5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005760f0-519d-4849-9063-2c6ac272ba9a",
        "cursor": {
          "ref": "ef43b50f-c780-4e34-80ae-975ddb889045",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e1d24b3a-028f-4b22-afb1-04ff0b788440"
        },
        "item": {
          "id": "005760f0-519d-4849-9063-2c6ac272ba9a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0e3a864b-cfba-49b1-ba0d-f85011d5b1f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696cd2d9-c3a2-47e8-8e69-5ca80f8b3c3a",
        "cursor": {
          "ref": "24556cee-f68e-4218-8eaf-4e7fff26cb86",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "64026457-0b99-464e-801f-f747281b141a"
        },
        "item": {
          "id": "696cd2d9-c3a2-47e8-8e69-5ca80f8b3c3a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ac9e8b74-e810-462e-8552-dc6a71db48f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618891fb-493f-4005-973a-a54c92220874",
        "cursor": {
          "ref": "ca7720b2-0e04-45b3-a1e3-61a42d79627e",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4b3aca0d-5fdb-4047-be9f-72b2dc420101"
        },
        "item": {
          "id": "618891fb-493f-4005-973a-a54c92220874",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a4db3ec2-6535-4c8f-9b56-3754d7cdce50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab162d2-8e05-4caf-a206-91d7c13a975b",
        "cursor": {
          "ref": "d23c1ee8-2e31-47e8-819d-f41f2fec9f7f",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6d2dc4ed-cc19-40e2-a585-57f2a9604c9e"
        },
        "item": {
          "id": "6ab162d2-8e05-4caf-a206-91d7c13a975b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e018f2fc-606c-4dd2-a3d1-e6c794ce95fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698e303d-b8f3-4631-a420-5929ed45ea50",
        "cursor": {
          "ref": "a7089eb9-ee89-4536-adbf-19e14f89b08a",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ee50974b-ed3d-409e-be03-c373412cd6e8"
        },
        "item": {
          "id": "698e303d-b8f3-4631-a420-5929ed45ea50",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "45857d38-c59a-439e-8d46-81b57ae20223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca50253a-9c4c-41bb-befa-f378449aca8c",
        "cursor": {
          "ref": "c4d631d1-edca-4cf1-9302-f36811acac12",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fa6988eb-ed92-4934-bb5f-24a01c8ecb05"
        },
        "item": {
          "id": "ca50253a-9c4c-41bb-befa-f378449aca8c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5d3f345a-b62d-4615-a8f5-f5c2fad65d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d728ce24-fa3a-4098-b06e-8ffebc730e56",
        "cursor": {
          "ref": "f622a444-6ee8-4320-b250-b31e7f63c955",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "56957f71-8df1-4509-badd-5e42d77315fd"
        },
        "item": {
          "id": "d728ce24-fa3a-4098-b06e-8ffebc730e56",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7f1c2b91-b82b-484e-98d8-d19b38e8109c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec427465-45c8-4baa-ba09-07e57e34a937",
        "cursor": {
          "ref": "f25e33ee-baa9-4723-a7b6-52589f201d7b",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "17d1807f-19a1-4482-b218-c6589249a0fc"
        },
        "item": {
          "id": "ec427465-45c8-4baa-ba09-07e57e34a937",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1a680523-7cbc-43c9-b109-cf2cfcf093be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b096e301-8c4c-4d77-bd74-d0b53ae778b1",
        "cursor": {
          "ref": "19bfce6c-a7d6-4d66-a57f-74a9062abe02",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "acba7014-713f-4a0d-ae1e-ba8b036b8337"
        },
        "item": {
          "id": "b096e301-8c4c-4d77-bd74-d0b53ae778b1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5c4844ff-cb6a-49d7-a365-10af0a945018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d269d4-3265-41ae-a0e8-5e06bd0f894f",
        "cursor": {
          "ref": "2ae1f83b-57ad-4bb3-b3e2-f15e0af9a637",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "cce02c12-c520-475e-84c7-e3f56f8050ad"
        },
        "item": {
          "id": "97d269d4-3265-41ae-a0e8-5e06bd0f894f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6ab5a3b5-15ae-4e45-bdc9-8baa0e7ce5cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ca349a-acb7-44f9-aa08-04168955d795",
        "cursor": {
          "ref": "0f803f43-c040-4ca2-86e4-fd3162481784",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b591e7f5-2177-4cdd-9d0c-796815bfa89a"
        },
        "item": {
          "id": "76ca349a-acb7-44f9-aa08-04168955d795",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "35eafa72-d7bb-4b55-951c-37d1898b6136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52065d32-9353-4645-862e-028b0873587d",
        "cursor": {
          "ref": "a329f257-d728-455c-964c-572778fa20d7",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "333a50a9-8a0c-49df-98a1-800d0212f364"
        },
        "item": {
          "id": "52065d32-9353-4645-862e-028b0873587d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "330431df-e626-43fe-a277-9c0feab506bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48aefb8a-9ac3-4fe9-bf0d-61c4885ddec4",
        "cursor": {
          "ref": "9aa5cfdf-0c89-4d52-b27a-cb24296fe1b0",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7bd2cb26-3e97-4509-828d-5c249fe2842b"
        },
        "item": {
          "id": "48aefb8a-9ac3-4fe9-bf0d-61c4885ddec4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9372246c-6b3c-4f4e-aa0b-0115f1120fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b2afd7-9ca7-4031-9ef0-0070ddd2c7a0",
        "cursor": {
          "ref": "1f9a3bdc-e172-403e-9942-5a19e0112d72",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "610047a0-d2a3-4e69-ae31-deeb29eb3fb0"
        },
        "item": {
          "id": "d9b2afd7-9ca7-4031-9ef0-0070ddd2c7a0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ce5ae7d1-f4f2-4c7d-b694-fa531db5f647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faccff9d-c9fa-4c05-9fc9-da28bece534f",
        "cursor": {
          "ref": "3b11f28f-f565-41e2-80ae-267d5a1c2883",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a2e13c92-ad4f-4114-9c30-e4440d239efc"
        },
        "item": {
          "id": "faccff9d-c9fa-4c05-9fc9-da28bece534f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f4384be1-ea74-4966-b45c-8933e8fb8c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ca8d65-e7ae-45fd-aaa1-5b1aa8a69a3e",
        "cursor": {
          "ref": "c40b33dd-c48a-48d7-9f2a-0c97b647a81b",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1938041b-caec-4b6d-a3f8-2ebba3c3e1db"
        },
        "item": {
          "id": "28ca8d65-e7ae-45fd-aaa1-5b1aa8a69a3e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "66a41ce3-4163-48ee-a83c-4f9eaeb5c9e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b85ef8-3acc-4f51-a5f3-d590b4a6cd94",
        "cursor": {
          "ref": "3db9b9d4-4275-4900-a96c-1e8512adf652",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cac96c03-483f-498c-ac2c-c28352eafa40"
        },
        "item": {
          "id": "83b85ef8-3acc-4f51-a5f3-d590b4a6cd94",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1a9dde29-5850-4ad0-9972-f308f1afcbc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48d36a0-d9fe-4980-9e97-5b2ce82b829f",
        "cursor": {
          "ref": "7d65366e-5132-4292-aa57-7499a68e3b59",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1cd1b3c8-6280-47a9-bd14-649b7aba1b06"
        },
        "item": {
          "id": "f48d36a0-d9fe-4980-9e97-5b2ce82b829f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "623660b7-7ee4-4325-a730-2a3f8b9edd5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35d054e-0091-41f2-a625-e2451ae79f7f",
        "cursor": {
          "ref": "48792ba4-84fc-4fec-ba2b-0989e0299b36",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d3ae45b6-3cff-46b7-bb1c-df7d1c8a130d"
        },
        "item": {
          "id": "e35d054e-0091-41f2-a625-e2451ae79f7f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "731f0631-4feb-46cc-81d8-32269057dd22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edff4ea3-026a-45b4-9fec-a5b229d0ccf8",
        "cursor": {
          "ref": "17c27aff-cf95-4ce6-bf5c-b6403ca77933",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fe0414d5-df20-4e0f-8dc4-f4dcc6dedaf5"
        },
        "item": {
          "id": "edff4ea3-026a-45b4-9fec-a5b229d0ccf8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "140e799c-ff36-4525-9f32-0056a547991b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93bdbea5-441f-4719-b99a-8a874a4208a3",
        "cursor": {
          "ref": "c81ddf5f-2f31-4a39-8c84-efb706f15667",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5d99412f-fff5-4ba5-968c-82894c7da5a4"
        },
        "item": {
          "id": "93bdbea5-441f-4719-b99a-8a874a4208a3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "20fe0fff-1cba-4ad6-b325-7c61f481d695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d58df6-8b84-4be2-82ab-112827d22177",
        "cursor": {
          "ref": "8e396124-ae2a-46a7-8019-b4e4c5b56c27",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3314c15e-883f-45d3-97f1-d365db6902dc"
        },
        "item": {
          "id": "59d58df6-8b84-4be2-82ab-112827d22177",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c17dd17b-ffcf-426d-8c30-a11cb859141f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693d9f1b-7b87-4988-b6f9-6d18e13b00c9",
        "cursor": {
          "ref": "58c1662a-c0a5-4e4f-9592-4e60e8fe28e6",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9edd1129-5b0a-4557-8957-c197a378d081"
        },
        "item": {
          "id": "693d9f1b-7b87-4988-b6f9-6d18e13b00c9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "024169ea-78da-4e8c-ae9e-7c2f7f16662b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7948f745-04e4-484f-b493-5ae57ed4e9dd",
        "cursor": {
          "ref": "3e861f7d-fdf6-4fe5-9384-d096e08ad86a",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "17e650de-051b-4d6a-8019-bc0409aaf372"
        },
        "item": {
          "id": "7948f745-04e4-484f-b493-5ae57ed4e9dd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ea68bd63-f392-4206-9c90-fae1a61f1f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b867c0ed-57c2-48eb-87f9-83dc9b0dbbdf",
        "cursor": {
          "ref": "31f98933-9ffa-4ad1-ba5d-962a90b74c7b",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "592aff2f-d2c5-4b90-b06e-41a42d90dfe9"
        },
        "item": {
          "id": "b867c0ed-57c2-48eb-87f9-83dc9b0dbbdf",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "baba8c73-30b7-49f2-9387-ac23569105bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5d926e-9462-4cab-ae80-fe759c5949b0",
        "cursor": {
          "ref": "167a06b0-f5e1-40d2-8c16-7e5a323268a2",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a29be905-fc7f-40fd-9167-92a4799ca0f9"
        },
        "item": {
          "id": "6e5d926e-9462-4cab-ae80-fe759c5949b0",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9713042d-0248-4cee-90ac-5ed0640e7667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d22aabe-6066-4bd5-a07c-87eb36efb607",
        "cursor": {
          "ref": "75de659c-0303-4801-a083-65fff18f2e0d",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1ec07f2e-6a22-479f-a5d1-279afe1e66ed"
        },
        "item": {
          "id": "8d22aabe-6066-4bd5-a07c-87eb36efb607",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "99acbf95-802d-440e-9e97-f408b1ae1da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7a8b6f-14e4-4f6d-bc19-87f9bb8ed1cc",
        "cursor": {
          "ref": "cb11fdfb-a2f5-4afd-93f9-83bae6f0a8b4",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "73e9a456-7b2d-4cc2-a606-8f3baeb8c24f"
        },
        "item": {
          "id": "3b7a8b6f-14e4-4f6d-bc19-87f9bb8ed1cc",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b41e6e72-45b2-4e21-9c27-78b13c2b146f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a0a8f1f-a1ba-4111-8a67-6bae7253bbcc",
        "cursor": {
          "ref": "7f9f8518-e985-4b75-8b2d-a2f7eedf8c1d",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c173901b-4256-4f17-b992-90deb43c52cc"
        },
        "item": {
          "id": "4a0a8f1f-a1ba-4111-8a67-6bae7253bbcc",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "dde01efe-4f13-43ae-aee6-25ae85937e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24169cef-49ab-4aa9-9c11-6cb6cce0661d",
        "cursor": {
          "ref": "a3166215-6e79-43a7-95fd-cea444891707",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c021740e-5f88-4a73-adab-c695fe47343c"
        },
        "item": {
          "id": "24169cef-49ab-4aa9-9c11-6cb6cce0661d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "9186c3c3-ec68-4e18-8eaf-58000146aff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df155d7e-5201-439c-a19a-7b72062bbd96",
        "cursor": {
          "ref": "30602b3f-94d9-4c44-8d21-e7ed7fdd08b7",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2889a97b-2164-4ea6-b724-4285a2051b27"
        },
        "item": {
          "id": "df155d7e-5201-439c-a19a-7b72062bbd96",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2720bc18-a8a9-4ec4-b480-00cabc5a3c77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fbd312-9332-4be2-9d10-26ecb6cb7c17",
        "cursor": {
          "ref": "b2a8b76d-b08d-40fd-9b42-1e4292998426",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "69ea6c0e-0c9b-4f4e-90ec-736d62a6b88d"
        },
        "item": {
          "id": "b6fbd312-9332-4be2-9d10-26ecb6cb7c17",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "09c2382d-2326-4b95-9d20-e8494cca6dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4a8bee-4c21-4fae-86d3-36062206f337",
        "cursor": {
          "ref": "0153c83f-2b62-4aee-8241-bef2e9291b80",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1c38a556-46fe-4fca-b4e2-b8b3d18d1bcd"
        },
        "item": {
          "id": "0d4a8bee-4c21-4fae-86d3-36062206f337",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bd6357a1-ae88-4798-bde9-2e25e3a250c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7371b7ad-4828-4407-8735-aa3402d160dd",
        "cursor": {
          "ref": "17adad0c-5d1d-4073-9f31-b0162620f8fb",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "30b7ef52-7094-4009-8854-9f0cb35fcd98"
        },
        "item": {
          "id": "7371b7ad-4828-4407-8735-aa3402d160dd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ca065a79-2056-4ff4-a63d-84113c845b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea359aa-0f92-408d-8de6-d03fb3a25e8d",
        "cursor": {
          "ref": "680e6f1a-46e6-4769-849c-ba0bd78bba3c",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "74927349-ad3e-465f-89a7-dbdb5b95026b"
        },
        "item": {
          "id": "4ea359aa-0f92-408d-8de6-d03fb3a25e8d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e3412ab4-3437-4590-861a-f9642b17ce26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a6555c-0dc2-4435-9aba-219b5b1321e4",
        "cursor": {
          "ref": "ddb18cde-4fe2-4e95-8bcf-53130375a0b2",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a01f4d50-b7df-4fd2-931e-41ed08e32c41"
        },
        "item": {
          "id": "b0a6555c-0dc2-4435-9aba-219b5b1321e4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "df51390a-0f91-4cb4-831a-d4b40a519ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c17880-ec6a-43a6-86e5-d328dbf8953b",
        "cursor": {
          "ref": "24810957-c8ac-4d7c-9593-8d74f99b8e41",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "14cf9b3b-53a5-4c0d-ba55-ec9e487d386c"
        },
        "item": {
          "id": "56c17880-ec6a-43a6-86e5-d328dbf8953b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4b872717-15ba-4af0-907c-63fbbc223592",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "4b43dbd8-cb41-480e-b787-1a19ecc49f42",
        "cursor": {
          "ref": "1d9f3263-58f2-4965-8afc-e3e652c7f02e",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9543f63a-8af3-4f9b-bb48-a30451d3de1d"
        },
        "item": {
          "id": "4b43dbd8-cb41-480e-b787-1a19ecc49f42",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1305b0b8-b7d7-4ea5-9376-c0c525dfc789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7be5bf-2a62-4612-87ba-bfe5744067c1",
        "cursor": {
          "ref": "612232ea-3cfa-4a40-a0f2-b4bb7c940cdf",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2ff068a4-ce17-4d64-86be-94d60ee1b32e"
        },
        "item": {
          "id": "ce7be5bf-2a62-4612-87ba-bfe5744067c1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "701f6f8f-09ef-417f-b382-8ea9d6f85e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c451c7-4321-49ce-9634-a2fa061df7ea",
        "cursor": {
          "ref": "c530c797-147e-46fc-9067-b3358261be38",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "313d9e4f-2926-483c-87c5-96744990ca9a"
        },
        "item": {
          "id": "f0c451c7-4321-49ce-9634-a2fa061df7ea",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8e345fbf-51fd-49cd-a735-f2bdca1866ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31f82ca-1634-4d39-91cb-c70d3f979833",
        "cursor": {
          "ref": "b2f8acdb-fa5f-4dc6-af15-1875530e7a94",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "08c79521-2d94-4818-bad9-8180609d4589"
        },
        "item": {
          "id": "c31f82ca-1634-4d39-91cb-c70d3f979833",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d872f7ea-4782-4303-8262-73fcc7ab6a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23081119-1bf7-48ce-bbf7-661680b45e7a",
        "cursor": {
          "ref": "11a9c302-bafb-40f0-9b83-5f81c9d4c464",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9ddc82b5-50b8-45e9-821d-dbb9ff10e440"
        },
        "item": {
          "id": "23081119-1bf7-48ce-bbf7-661680b45e7a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a08dec80-b488-40ba-8899-c2b2f3017397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb7a4c4-32d8-4f91-9438-aa913ef373e1",
        "cursor": {
          "ref": "fb297698-a793-4a5c-b5f6-2f327b41bcdb",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "407f6bb0-5427-4bb2-84ac-4bcfd9668184"
        },
        "item": {
          "id": "2bb7a4c4-32d8-4f91-9438-aa913ef373e1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9b866f8d-8b69-4c37-863a-9ec47d6ed6dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e03d13d9-1874-4031-8e65-668ce3dfc14b",
        "cursor": {
          "ref": "849d5e5a-4ef4-4a27-8a15-fffb59f15991",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a6a70530-f35e-4d6c-a20d-a225eed3a0e1"
        },
        "item": {
          "id": "e03d13d9-1874-4031-8e65-668ce3dfc14b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8172ccba-912f-43c0-b7c9-769145ecd4a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e49b8e8-c07b-43b3-8066-03c3ec183d90",
        "cursor": {
          "ref": "df9b28a1-a55f-4193-b020-9a5b5156f173",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "77ce40e9-60fc-4c57-a9f9-dc68767bfd9a"
        },
        "item": {
          "id": "7e49b8e8-c07b-43b3-8066-03c3ec183d90",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "01736173-7bd4-4b8f-a1b8-c0e837fbf045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7050d5-879d-4253-8897-7991ef13077e",
        "cursor": {
          "ref": "8068dda3-51f4-49d2-a951-e460267e7e63",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "39c006ce-f191-418e-961f-41d94a80038d"
        },
        "item": {
          "id": "8a7050d5-879d-4253-8897-7991ef13077e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4ca4da74-d738-411d-ad97-599e75790672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163afe99-30e0-4db8-9ee7-9ce82cd1af2b",
        "cursor": {
          "ref": "c81309d5-5db6-4b11-99d1-b9d54b8a3b47",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0f488735-33d8-4f7d-8460-2dcc5d98f535"
        },
        "item": {
          "id": "163afe99-30e0-4db8-9ee7-9ce82cd1af2b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5123928f-9d3e-479b-9c83-acc4b044f36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b1fb70-29b3-4aa1-a07d-117439bd0a32",
        "cursor": {
          "ref": "ae4b11ec-26af-4ad7-9336-bbd9a92b43ba",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0197de55-514f-44b5-b762-dc6e4542978a"
        },
        "item": {
          "id": "36b1fb70-29b3-4aa1-a07d-117439bd0a32",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "dd9f3810-6a42-4526-8894-791d3404a368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dda0a72-90cf-43a1-b6a9-b8077937d095",
        "cursor": {
          "ref": "519722d6-b8bd-4a31-b000-0a35aa89b625",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a53fc7d1-c4f9-4566-9ae2-df1a1c637851"
        },
        "item": {
          "id": "7dda0a72-90cf-43a1-b6a9-b8077937d095",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cf8b670d-4a32-4005-808c-764b11a80e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675fdd6f-901b-43ff-8a71-39a23026f56d",
        "cursor": {
          "ref": "997e8d86-3dd3-4a4d-9ec9-281c786750f5",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7e0183f8-e0be-48ca-97bc-f2cca97f0d3c"
        },
        "item": {
          "id": "675fdd6f-901b-43ff-8a71-39a23026f56d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "98012a7c-9eaf-4c6a-8e90-68367f4be142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673a9684-e062-46cb-8211-a6a62913ee2f",
        "cursor": {
          "ref": "7fc6bb66-8e3f-49c3-a583-8ce186b16ec3",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "285e67e7-5aaa-419c-b22e-c856a35554a2"
        },
        "item": {
          "id": "673a9684-e062-46cb-8211-a6a62913ee2f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "cd47b6b7-1a1e-471b-b654-ce3082f48277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7230bad9-a109-475c-80da-ff71b99d1774",
        "cursor": {
          "ref": "45fa2fd7-7b3c-45a1-8772-1a92841e104c",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "81eb3af2-4bd4-4531-995c-5941bc542d78"
        },
        "item": {
          "id": "7230bad9-a109-475c-80da-ff71b99d1774",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "af6d535c-d028-49ba-afca-24bbeaca567a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f787638-faed-4dce-b53a-661222d61a03",
        "cursor": {
          "ref": "45259e40-f5e3-406d-b2e0-7da77f43edca",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7eacdce2-cc67-4dd3-b256-ca0dfbd57736"
        },
        "item": {
          "id": "7f787638-faed-4dce-b53a-661222d61a03",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5ac2ea07-c025-47a3-88a9-e37abc4f0b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8107a062-6d03-481b-9955-b1bbd640d871",
        "cursor": {
          "ref": "3bdad9da-ee30-474c-8ea1-b10750caecf9",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e0ba42c2-dab9-4b38-84e1-d906c3de9f2c"
        },
        "item": {
          "id": "8107a062-6d03-481b-9955-b1bbd640d871",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "215b8927-9bf9-4ff6-87c8-97c69627511a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5124c975-b6b5-4d07-a9a3-a1cb572aa069",
        "cursor": {
          "ref": "06bbcc72-5bd5-4ec2-92fe-efdbf03fdc50",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "83c976aa-d197-4736-b100-c64a94518d5a"
        },
        "item": {
          "id": "5124c975-b6b5-4d07-a9a3-a1cb572aa069",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f17f4c72-9ed5-4b92-aa1e-87b6e8bc14c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed90602-5cf2-40b4-9e87-6de7da5cbeb7",
        "cursor": {
          "ref": "d023dcb1-5b16-4218-a6fa-e47d8c063042",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "87aec404-9caa-4660-908e-c0ffa7641f71"
        },
        "item": {
          "id": "eed90602-5cf2-40b4-9e87-6de7da5cbeb7",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "32e2d773-a85c-467b-91c9-1d1e2ac9198f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484caaa9-6c3f-4d68-84c0-ac8ba9513bd7",
        "cursor": {
          "ref": "77ef3ebd-e746-4677-94fd-6dc9da1ae039",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1cea5196-d5e0-42af-aaea-aa93f503bea8"
        },
        "item": {
          "id": "484caaa9-6c3f-4d68-84c0-ac8ba9513bd7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bf95ed6d-25ee-4883-8fe1-06397d78d393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b97168c-4403-486a-94c3-961876111b81",
        "cursor": {
          "ref": "c50b55e6-e34b-4945-97d0-956ce4bc8792",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3f8c3cd4-be26-40a3-8464-c898f4cd647e"
        },
        "item": {
          "id": "2b97168c-4403-486a-94c3-961876111b81",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "672296b8-d304-4c9f-9622-913e3e3e1204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5229fcfb-5c68-4aa2-8be5-4fb1e54c6bc0",
        "cursor": {
          "ref": "e7e51bd7-53c3-4a79-8105-7e8c610a0f36",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0f300153-dba7-4363-97b6-8332a487bce8"
        },
        "item": {
          "id": "5229fcfb-5c68-4aa2-8be5-4fb1e54c6bc0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5cbb68ec-8c9e-48bb-9435-80abe9ef3124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff787dc-6cad-4af5-a1c4-f78ead20f8a3",
        "cursor": {
          "ref": "a4723d27-e94d-4e69-ab26-dc2d5d019ac4",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1c217e18-5b3d-4a23-8261-27fa54c7fa18"
        },
        "item": {
          "id": "6ff787dc-6cad-4af5-a1c4-f78ead20f8a3",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "63b63143-0f13-4ad9-9135-cbc062d9c86c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52a6bd5-f576-46f4-8053-1bf02543dbce",
        "cursor": {
          "ref": "b65819fe-d715-456a-9fbd-bc2fddb1eb1a",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0e7c54bd-3e49-4968-a0a9-1f3ee51c9b02"
        },
        "item": {
          "id": "b52a6bd5-f576-46f4-8053-1bf02543dbce",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "488e6ad6-fd13-42ec-b96a-fefb33df8a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0266f294-e923-40c4-b358-7235b99c1123",
        "cursor": {
          "ref": "44132120-3ab9-4188-9e84-31558f0d8ac5",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b4f21f84-8bee-4fac-a902-511ff8aa2233"
        },
        "item": {
          "id": "0266f294-e923-40c4-b358-7235b99c1123",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "84e352d1-5576-4f2e-a19b-8812fddc059f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d247fa-da19-4487-af3a-6b915a5148f8",
        "cursor": {
          "ref": "36966cb9-3803-4e88-a09c-2d0d02a75f0e",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9b56bca9-16ad-41ab-9a9f-a245b92f8b3e"
        },
        "item": {
          "id": "24d247fa-da19-4487-af3a-6b915a5148f8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "75884460-76c8-46e9-916c-0d3591105656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2073de-e90e-4144-b32b-a59ebdbb70ff",
        "cursor": {
          "ref": "8751a6ba-ed44-4d7d-b32f-05fbde72ce6c",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e9fe1b08-d9fa-45fc-b54e-62fc7d09ff91"
        },
        "item": {
          "id": "bb2073de-e90e-4144-b32b-a59ebdbb70ff",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5834a4e1-3364-455d-a442-1161696137b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16269b5-7fc5-40ce-aaaf-7167593c00e1",
        "cursor": {
          "ref": "a91b2201-4e5a-480f-9af0-68c5ffc83e85",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "527195a3-e66c-4547-b57f-8a90635b8922"
        },
        "item": {
          "id": "a16269b5-7fc5-40ce-aaaf-7167593c00e1",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4e8e4b21-e926-424c-9636-df80fb954194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89098600-4cb5-484f-babf-3c2c2237abbe",
        "cursor": {
          "ref": "b83c2d27-8f25-4e83-8468-47ead73e7502",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e3c6a137-7fc9-42fe-a278-bddb5ebe114e"
        },
        "item": {
          "id": "89098600-4cb5-484f-babf-3c2c2237abbe",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4a35502f-7dcf-40a5-96f2-65af1f29ec03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a950d64-aeb4-4c00-b838-179b66d29e0b",
        "cursor": {
          "ref": "81cb1887-5a6a-435d-8e9e-61c896cb1471",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "adf25539-94bf-4ab5-a335-614864789bd4"
        },
        "item": {
          "id": "6a950d64-aeb4-4c00-b838-179b66d29e0b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "cd6181a3-465b-4d56-a125-88d10e97c610",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "8cf4c761-9aaa-4724-b405-77866bc2c033",
        "cursor": {
          "ref": "9b21db09-a80d-448f-8caf-c2ba29eb5d1d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "105612d2-938a-4706-9246-d3862888a80c"
        },
        "item": {
          "id": "8cf4c761-9aaa-4724-b405-77866bc2c033",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c9f87fb4-e9a2-443a-960b-6e34fcec2f23",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "4c2378f2-0662-43fd-820e-c3e9326baa23",
        "cursor": {
          "ref": "c93b12ed-59ce-49cc-aa11-362aef3183a4",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c37e11c4-b549-47e6-8458-9dc6c247ead5"
        },
        "item": {
          "id": "4c2378f2-0662-43fd-820e-c3e9326baa23",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b6e9d32f-c392-4a98-8391-c42145823091",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "12dd625e-a8cb-46a3-9da2-f0bce167b500",
        "cursor": {
          "ref": "99793130-c81a-42b7-b9db-a15daa79b209",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "658e36b5-3059-4b9e-baf2-5da9b05e8fb9"
        },
        "item": {
          "id": "12dd625e-a8cb-46a3-9da2-f0bce167b500",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2e48ca5a-140a-4678-ad84-df6e46e9f87b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171e4f9f-7f86-4fb3-b623-379e48c7d6c6",
        "cursor": {
          "ref": "4b6f8c39-110a-4229-8524-dc4cf1c08e79",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3a4d6325-77d9-4222-af90-c597836280be"
        },
        "item": {
          "id": "171e4f9f-7f86-4fb3-b623-379e48c7d6c6",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d1d634f0-1801-4262-9870-afc842f62a3e",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c7dbd48c-0c10-4009-bd83-d03bba584ffc",
        "cursor": {
          "ref": "a936e60c-d379-466a-a3cb-0d7da6be2c8f",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "55880db0-c97b-4c5d-ab70-fb90d6d96286"
        },
        "item": {
          "id": "c7dbd48c-0c10-4009-bd83-d03bba584ffc",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4c1c6aaa-acff-4e1f-97c3-3d451b39b288",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "db8d291e-003b-47b3-9171-ac0f9a2f342e",
        "cursor": {
          "ref": "06115c0c-ee06-4def-85fc-d58888aee355",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5db5b869-c570-4339-8cd4-2e68c2a3bc3e"
        },
        "item": {
          "id": "db8d291e-003b-47b3-9171-ac0f9a2f342e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8717c241-fbf9-4692-b575-6c6d48a967b7",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "5b23a81e-6334-4834-bcc1-8566fd069c08",
        "cursor": {
          "ref": "fd02b9ca-81b9-47fd-ab45-2a78807ce45b",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0a370c08-e248-4be0-b1ed-a71dc2a0611f"
        },
        "item": {
          "id": "5b23a81e-6334-4834-bcc1-8566fd069c08",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4989b70e-08d4-4055-9311-fb57923ff57b",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "c763b10e-9301-4362-9951-f21ea27882a9",
        "cursor": {
          "ref": "48e84a58-ac0f-4443-a71a-7782cf248683",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a195550d-b561-45c7-adb9-a9fffd14b6bf"
        },
        "item": {
          "id": "c763b10e-9301-4362-9951-f21ea27882a9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "64fc6b18-bcdf-4fde-837c-6981f1bfe4e7",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "1bb28bed-f912-4a0e-8959-b80a0fd13aa5",
        "cursor": {
          "ref": "4dd192fa-dbfb-479b-8d81-32402d1dfaf8",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "85a2f6e0-0b35-4241-8563-f610ee530cef"
        },
        "item": {
          "id": "1bb28bed-f912-4a0e-8959-b80a0fd13aa5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "77042050-f1ea-4d14-bd94-28c76e6bb4cc",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "07703b83-a8b4-4e7b-b6b3-0bf53c141b92",
        "cursor": {
          "ref": "3a1e4794-0f6a-42bc-bef4-e7d2d5f2dc34",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8be72f5a-10ee-45f0-bd6d-cd73dc78aa18"
        },
        "item": {
          "id": "07703b83-a8b4-4e7b-b6b3-0bf53c141b92",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "49b6c077-94ee-41b5-88de-b02c386e81cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99467fae-1e8d-48f0-953d-029c008842ca",
        "cursor": {
          "ref": "f18f6596-6823-47bf-9165-241d0dc83303",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "54168053-fd2b-4af8-865c-a5a13c02ce5e"
        },
        "item": {
          "id": "99467fae-1e8d-48f0-953d-029c008842ca",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1efc25ab-b8cf-4abc-b836-c78dc55e4715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be0f0b9-035a-4444-9f6e-723c60337752",
        "cursor": {
          "ref": "d14b53bc-cd59-4f8d-85f3-f1586a4ef48f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7cc331d6-c585-4363-a2ed-635a33628dd9"
        },
        "item": {
          "id": "0be0f0b9-035a-4444-9f6e-723c60337752",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a87e534c-bccc-49c8-80e1-da6327133ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d37a12f-b7a9-451c-bf51-51627b0749db",
        "cursor": {
          "ref": "3a174061-3206-4c84-a6e5-9a0713aa39a7",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6c33d9c1-9741-4188-a396-b7a55d76b79e"
        },
        "item": {
          "id": "9d37a12f-b7a9-451c-bf51-51627b0749db",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9874f7e4-ce9a-4bc1-8845-a2e0af1f55f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b6e33e-698c-410b-b101-d5ddb48fb4da",
        "cursor": {
          "ref": "ebdd56ad-6d9a-49ba-ae1d-1fde3d4c64dd",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "64d28a93-dc4a-4f13-b263-8f97546644e1"
        },
        "item": {
          "id": "20b6e33e-698c-410b-b101-d5ddb48fb4da",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ff7fae38-cec6-40a5-b29a-708673b260ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6cd153-8933-437b-805e-1b7c0bad05e7",
        "cursor": {
          "ref": "0c9b2475-31be-4d10-9707-ca059bf91ec3",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "64af68a8-a9a5-43e7-bca9-7a697b6af791"
        },
        "item": {
          "id": "aa6cd153-8933-437b-805e-1b7c0bad05e7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "27875305-7e92-47db-a058-ac107645976f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeba6646-cc15-47aa-a7c1-f94d3f25d3a8",
        "cursor": {
          "ref": "af6c4a50-879d-4656-8bb2-f00adab2a66e",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d51cefe3-6d76-4397-9332-7556cb138f32"
        },
        "item": {
          "id": "aeba6646-cc15-47aa-a7c1-f94d3f25d3a8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f2912cb1-295f-4c31-9dd0-85186f74e511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22fa266-9a4a-48da-b886-a6a6c5602560",
        "cursor": {
          "ref": "fb450ec8-aede-42a4-a687-3a90d116c684",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "63ca3468-41ec-4d99-9738-62641404ee29"
        },
        "item": {
          "id": "a22fa266-9a4a-48da-b886-a6a6c5602560",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9782075c-f067-4115-8fcc-eb5254b15e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9351262c-6b99-4945-aa30-9b91e1d40bd4",
        "cursor": {
          "ref": "1250695a-17c0-449d-b82c-587d8895f879",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "568ae160-4089-4782-83a8-490e2d8da34d"
        },
        "item": {
          "id": "9351262c-6b99-4945-aa30-9b91e1d40bd4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "59aa3d03-a1c7-406b-a361-4931dac87f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea20f8a4-cd8b-4607-bf54-9f074b36b07a",
        "cursor": {
          "ref": "1dcd7e64-fd01-4750-a859-8dbc9255565f",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bea739a7-a1be-4121-b050-4cc04584f42a"
        },
        "item": {
          "id": "ea20f8a4-cd8b-4607-bf54-9f074b36b07a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8f61b65d-db80-4ab2-bbf8-39751234af73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f33f0c1-f509-49db-b14b-06a314ba9bed",
        "cursor": {
          "ref": "5748f557-6df8-4603-8152-17925e51c0f4",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4b839f54-577b-4c7f-8c9d-db8639038027"
        },
        "item": {
          "id": "6f33f0c1-f509-49db-b14b-06a314ba9bed",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9400985c-9aa3-4ade-a207-3fc93571833a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a26e26-2467-4a0d-aa65-09855c0399bb",
        "cursor": {
          "ref": "b8329401-1d70-479b-89bb-ffc6f62f2811",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "75c62b12-a2f1-4832-a9f6-30289f05cdba"
        },
        "item": {
          "id": "d4a26e26-2467-4a0d-aa65-09855c0399bb",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2ee5bc0e-eb04-4bfd-a6d7-8c19b2712934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4223a2-5662-4fa1-af08-235becba7e3d",
        "cursor": {
          "ref": "c2d31e2a-fc2c-4cbf-b250-d0d90eb511fe",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e36372ea-9bd2-454c-8c2f-2496533cc4cd"
        },
        "item": {
          "id": "bf4223a2-5662-4fa1-af08-235becba7e3d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e7e3bc80-f18d-42bb-8f56-625046d2d930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd58fba8-14ec-4d67-b262-883943432e6f",
        "cursor": {
          "ref": "7ba5ba01-8689-40f7-bf65-b2e61ad62ba0",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4b8eb77d-9562-442b-8524-11b20e869f56"
        },
        "item": {
          "id": "bd58fba8-14ec-4d67-b262-883943432e6f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "05871a88-d941-4d46-a2b8-24864ef62942",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "34d9d3f2-9725-41da-b486-7e87a11b7cf7",
        "cursor": {
          "ref": "a32d50fb-8c50-4a66-b24b-92431750b1b8",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3e8ab3c4-1168-4cbd-a816-4baef449c3d2"
        },
        "item": {
          "id": "34d9d3f2-9725-41da-b486-7e87a11b7cf7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a9b89e9b-8911-4437-b50e-430154b67f5c",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "6bdc8951-c131-4ed9-a7d0-5ef692ea7263",
        "cursor": {
          "ref": "b6eab064-e59f-4406-96f2-2d3fb3a9b5b2",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f4f5033c-92a6-4d14-9940-aa0659f6e545"
        },
        "item": {
          "id": "6bdc8951-c131-4ed9-a7d0-5ef692ea7263",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8470d73d-d5cd-4a95-a75d-215afb248cfc",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "6e27859e-4b4a-4613-9582-4713d2b270c4",
        "cursor": {
          "ref": "fe0cf83b-1aaa-4bf3-97fd-0d98795da231",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "54d5ca1b-3605-4c6f-9b6d-fc1160316cf2"
        },
        "item": {
          "id": "6e27859e-4b4a-4613-9582-4713d2b270c4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f2a831c2-8098-4ef7-a190-1f5124117703",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "43ae2c47-3a5b-4592-a833-5f320d3ed394",
        "cursor": {
          "ref": "c49a657b-c02a-444e-93f8-5cfdf725e6fb",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "fba47081-2476-4d5a-9d93-89021e1c6b9d"
        },
        "item": {
          "id": "43ae2c47-3a5b-4592-a833-5f320d3ed394",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ab64e3ed-1048-4003-a752-c446d91b4b21",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "87fa6b38-5529-4798-84c8-8648606f64d8",
        "cursor": {
          "ref": "1bb8ec72-9ee9-4eae-abe1-50495298bd6a",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f3717597-79fe-4abb-bcbc-f13c6d0326f5"
        },
        "item": {
          "id": "87fa6b38-5529-4798-84c8-8648606f64d8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "eaa5e16e-ac27-419a-b2fd-66410aee641f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d4591b-8811-4324-a88b-43d9ace7a60a",
        "cursor": {
          "ref": "766bd5d8-b531-4954-8a08-6480ac923224",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "91b17654-0b38-4aa7-96f1-2e7407f3921f"
        },
        "item": {
          "id": "85d4591b-8811-4324-a88b-43d9ace7a60a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "303150ba-d86e-46bd-9a9d-bc8dcbff5ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2411facf-e3ce-4e49-8618-a4c8f74d7614",
        "cursor": {
          "ref": "65e8b266-85a3-43c8-8f0b-4bc46b62a5da",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f382081c-0232-43c0-8f43-16c87780377c"
        },
        "item": {
          "id": "2411facf-e3ce-4e49-8618-a4c8f74d7614",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b395f4e0-cd53-4aab-aeb1-c1b57887a63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bca3486-f747-4086-b003-4f41b3f24822",
        "cursor": {
          "ref": "1a24ac0a-7719-49d1-89d1-4b3136e41524",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "78cf7a84-ac3b-439c-ad2a-7a5c888c89d0"
        },
        "item": {
          "id": "3bca3486-f747-4086-b003-4f41b3f24822",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9506796a-44e4-4aed-80c5-f0869f31afa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3f9d26-82bc-4686-a349-3ad602c418e1",
        "cursor": {
          "ref": "36526472-2a63-4c70-afe4-759b0bd2479c",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "381c7f16-d4c4-4174-96b3-ee294db7c0a9"
        },
        "item": {
          "id": "1b3f9d26-82bc-4686-a349-3ad602c418e1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "65498952-1251-4637-b7c1-4c857a691f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733cf300-06cf-4e96-a36a-216cbd42d2a2",
        "cursor": {
          "ref": "dfd4d254-234a-4d34-b698-7e4bd92f30ae",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8f6bda5c-1dd0-4e00-a019-f61edb5da990"
        },
        "item": {
          "id": "733cf300-06cf-4e96-a36a-216cbd42d2a2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3b52a546-76f3-42ca-8d82-688135692c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7ddc8e-bd4d-4db6-9737-70e1f6bf95b6",
        "cursor": {
          "ref": "baa48e6b-a706-491b-a525-97ed15d43d6d",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d32335d2-9d08-4061-984e-d6717ce36026"
        },
        "item": {
          "id": "0e7ddc8e-bd4d-4db6-9737-70e1f6bf95b6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "871a0f19-3919-49f9-bde7-b545a7e6075e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8775d42c-ec3b-4e42-90e0-60b564a3e1ed",
        "cursor": {
          "ref": "00c10627-daec-4d8d-a0d2-0142150b0b81",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "eab0c2dd-cd76-4d03-8310-29f4cd79a5b9"
        },
        "item": {
          "id": "8775d42c-ec3b-4e42-90e0-60b564a3e1ed",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "49e5334f-f2ff-476c-b0ad-fae385a863e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d343a77-5381-4515-bcba-edec0b924471",
        "cursor": {
          "ref": "1f037a1c-d295-4f45-9b5b-02a58ad5e952",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "4a16a0b9-ead7-40f2-8d24-50175c967b1c"
        },
        "item": {
          "id": "0d343a77-5381-4515-bcba-edec0b924471",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "59878792-fbac-45fb-b21f-f2e2c7ec84b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6fb815-5dcb-479a-bf31-84db9f070935",
        "cursor": {
          "ref": "b0ce222b-0d25-4554-baed-f353b4efff77",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2e81e244-f5de-466f-bd7c-b304a111d6d6"
        },
        "item": {
          "id": "0b6fb815-5dcb-479a-bf31-84db9f070935",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e214d06f-6ee4-4ffe-a7b5-1cd8bd2d99e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8252a340-f7b6-4c3c-b2c6-bd8c04e4c80b",
        "cursor": {
          "ref": "9d3484f8-ca74-4b19-9035-5866ae23709c",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "b474ad26-a214-4ec7-9945-23c5845142f1"
        },
        "item": {
          "id": "8252a340-f7b6-4c3c-b2c6-bd8c04e4c80b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "eec8f3bb-dce5-40e4-b942-379cf22c6f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce1ed32-9842-43e5-887c-65ff1af9ea59",
        "cursor": {
          "ref": "d664ea8e-dcdf-4c0c-a683-a1bb01b32dd7",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "fe9f63d9-7f5e-4e42-9fd8-f2008721eea5"
        },
        "item": {
          "id": "4ce1ed32-9842-43e5-887c-65ff1af9ea59",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "939fe19e-90b4-48bf-b816-ff00a8a0c9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037a55b1-dc66-4734-adfe-f2d3180c599f",
        "cursor": {
          "ref": "72a9e702-7d82-4941-ba5c-cfb9fea6f0a4",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "c37702f4-1cea-4381-ac5f-87ce2207b8f6"
        },
        "item": {
          "id": "037a55b1-dc66-4734-adfe-f2d3180c599f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ed1bf608-321c-4093-aa29-00af44ae4fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f2e29d-2104-4be9-9304-108bcd646f9d",
        "cursor": {
          "ref": "8fa96abb-2fef-46e3-bd65-c8564da63e97",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "7f1a0ad0-4856-42b3-9f56-84eb0403798f"
        },
        "item": {
          "id": "05f2e29d-2104-4be9-9304-108bcd646f9d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9e8df26a-bc6b-4f74-add3-c888eb6bd01f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75fbc537-b94b-44f8-9831-ad3e0acfe25a",
        "cursor": {
          "ref": "e4d6d0b7-c6a3-44e4-9221-8347901c360d",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b66ea8ed-186b-43c6-8ebb-2fcf95d09e1b"
        },
        "item": {
          "id": "75fbc537-b94b-44f8-9831-ad3e0acfe25a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c8fc6aec-1aef-4cda-bd05-ae038d7264af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63539f7c-178a-467e-ae79-5d25572b832e",
        "cursor": {
          "ref": "60097b0d-8c82-4bdd-93e2-15f57747d162",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "15578122-198d-4662-b9a6-2241d0f24171"
        },
        "item": {
          "id": "63539f7c-178a-467e-ae79-5d25572b832e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "59e3dfd0-096a-4459-8b80-8c6c32061fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9f38ef-24b3-4d20-bfda-91372152c054",
        "cursor": {
          "ref": "4eeb3d06-cc6f-4db3-9144-161bdb7bc7c3",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "869dfb4c-40d4-4fe0-bc30-d542aefd151e"
        },
        "item": {
          "id": "de9f38ef-24b3-4d20-bfda-91372152c054",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "58c4b808-19eb-4188-a7f9-58adee6d52ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f243b45-f444-41e3-be68-77560b40fd81",
        "cursor": {
          "ref": "9ce58c40-c4be-4734-b933-8bc8ca3bf88e",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "3af2ab05-4184-4cef-b09d-97eba0492502"
        },
        "item": {
          "id": "5f243b45-f444-41e3-be68-77560b40fd81",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7a73b09d-921c-4baf-b840-01fd22bd1979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03254906-b772-41a9-bd75-cfa12118d894",
        "cursor": {
          "ref": "3a7a099a-2e1e-439b-be94-9d9ba36e8f7b",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "a6a3d17b-30ce-4eca-aa90-1453c9435788"
        },
        "item": {
          "id": "03254906-b772-41a9-bd75-cfa12118d894",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "256893dc-3067-44dc-9792-9e3f85c8c0c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5351bf7-6614-4641-96a7-6ac2e7b90585",
        "cursor": {
          "ref": "4b08097f-83a7-4450-977a-c718d3ddcd02",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "7e9a8f94-13f1-4a93-9e89-add64ba4061a"
        },
        "item": {
          "id": "d5351bf7-6614-4641-96a7-6ac2e7b90585",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "842c65a7-5748-4c5b-aae5-6ba74c1ac539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9af3ccc-9df2-448c-972f-4c6d206231f4",
        "cursor": {
          "ref": "96b22760-e566-41b6-a9fc-babb938d9ef8",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "1c19aae3-3b51-4211-b0d3-91dcfeb78174"
        },
        "item": {
          "id": "c9af3ccc-9df2-448c-972f-4c6d206231f4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2397226b-62e4-4a3a-bdc7-739853866754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0692257c-c162-49d1-af60-024da68c313c",
        "cursor": {
          "ref": "cb3cff46-e36d-4fd4-8aa3-5770973b1ec6",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3bc4e1be-9df5-4f79-907a-580e074e180e"
        },
        "item": {
          "id": "0692257c-c162-49d1-af60-024da68c313c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "84c909fc-d775-4f95-bbc0-3301e7f2788f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40758011-a8c1-43f7-841d-9fa2763103f5",
        "cursor": {
          "ref": "2d36ccbd-90a3-4d7f-8155-fa94300b5142",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "f662d039-9dca-4c2a-87b4-8befa0de489c"
        },
        "item": {
          "id": "40758011-a8c1-43f7-841d-9fa2763103f5",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6a752c02-d2bc-46fa-ae50-3dabb0c2a1d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5396b47f-85ff-4870-b47e-2a8b4996f315",
        "cursor": {
          "ref": "a20f375f-d48b-44d0-af47-ba13d2ac94f5",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f4a87a0f-19dd-496f-97ee-ab2bf5ce036f"
        },
        "item": {
          "id": "5396b47f-85ff-4870-b47e-2a8b4996f315",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "eb21f333-2f44-4c36-874d-a17dfd62d6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41652f5b-bc35-4921-8c70-142513ed1f4f",
        "cursor": {
          "ref": "d744ad9c-a4ea-4b2e-9b73-db4e504add67",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "79624313-f0d0-4270-9cf0-515504a01910"
        },
        "item": {
          "id": "41652f5b-bc35-4921-8c70-142513ed1f4f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2235807d-1574-4907-8cd9-9efef394ae1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4a5b66-2a03-4770-964b-55c2b00f3cac",
        "cursor": {
          "ref": "cae6e7cf-0d55-4908-8237-1b218b5e4b21",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "808b24a7-a8ea-4b7f-a0dc-6848bdd3d21f"
        },
        "item": {
          "id": "2d4a5b66-2a03-4770-964b-55c2b00f3cac",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c3a04e54-8239-497a-915c-9ff861d67c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f00be2f-0302-4095-9d62-b693ba9e544a",
        "cursor": {
          "ref": "fcbc2dcc-f40e-4777-9d26-fbdf2cadb16b",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "235504b5-8a76-4746-821c-134a9dc1df18"
        },
        "item": {
          "id": "0f00be2f-0302-4095-9d62-b693ba9e544a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "61435b52-3af9-4293-86ad-301a5a3bafc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8d109c-48c0-47d7-bff5-9fd21e93e413",
        "cursor": {
          "ref": "e8fb90c7-9139-4ab7-ab64-62a1d8733b9b",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "89008bc9-b7d0-44ef-96cb-af0cf60db64b"
        },
        "item": {
          "id": "fa8d109c-48c0-47d7-bff5-9fd21e93e413",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f24a052a-bf00-48db-a338-53a971c2245f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfd0d43-fa3b-4622-a8f5-062ba305dd3c",
        "cursor": {
          "ref": "8c8a90ea-f6cc-4b9e-80a4-64a198220d2b",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "20fa4bbd-9fc5-4470-8044-22def1a7a7c9"
        },
        "item": {
          "id": "2cfd0d43-fa3b-4622-a8f5-062ba305dd3c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6cf55287-411f-48ed-873e-67a8909207fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40dae37-9633-465a-9f2b-d89b8d8ca4f9",
        "cursor": {
          "ref": "5822bbdc-6e0a-4b32-801f-755e2d78e056",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "d9edfcfc-c6bd-45bd-9dbe-461a431733a0"
        },
        "item": {
          "id": "c40dae37-9633-465a-9f2b-d89b8d8ca4f9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6f894a46-7dcc-4a7e-8266-457671961c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4891a66f-6b2b-4b0b-a497-73f2423a830e",
        "cursor": {
          "ref": "4f08f813-6f30-4eff-a063-5f39cf9463f1",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "8eb89193-e4d8-4206-9a02-26d9aac1a020"
        },
        "item": {
          "id": "4891a66f-6b2b-4b0b-a497-73f2423a830e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e724e770-ab98-4cd4-a885-71831e11b246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb29dd9-c6c4-4267-9be7-5fe94a13aa19",
        "cursor": {
          "ref": "b3906e78-8a7e-45d6-9388-f25bf995923f",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f21eb705-f454-4173-9b3d-78febfbc627c"
        },
        "item": {
          "id": "0bb29dd9-c6c4-4267-9be7-5fe94a13aa19",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c8bffa0c-a1fa-421c-b0ce-0967adcf1e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d8fb5e-6a3f-48ab-a885-bb87e5e2ca2a",
        "cursor": {
          "ref": "20f28c33-05cb-4225-a506-6dc3a58b2fee",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "64d65a85-1e79-47a0-aa18-4bd37f0623d5"
        },
        "item": {
          "id": "01d8fb5e-6a3f-48ab-a885-bb87e5e2ca2a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1f2b3216-b492-4382-a128-bc468658ec4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0b667f-1c4a-499c-a047-9722c6b45073",
        "cursor": {
          "ref": "39576b69-2339-405a-be54-bd9e17bc82e4",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "77cdf7c9-0bd8-4afc-aeb6-120a511377f4"
        },
        "item": {
          "id": "de0b667f-1c4a-499c-a047-9722c6b45073",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "04788d5d-d0c0-4701-aeeb-69a8c3d1b925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7fc0a5-251f-4286-b7af-c7aaa9a89b6f",
        "cursor": {
          "ref": "9d26f701-1460-4328-8e08-24128673e5f3",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "53fbb445-517d-4c44-9a07-e9d218ea27e6"
        },
        "item": {
          "id": "ed7fc0a5-251f-4286-b7af-c7aaa9a89b6f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ff356a3f-9634-49a8-a8c7-aef3413962dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d749d3d-134b-4b2f-8585-80d53cb2baa5",
        "cursor": {
          "ref": "715ce9f6-6e5d-4110-9282-e40bb559fcaf",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "627ecb04-303d-40cc-82ad-3cbc54a49699"
        },
        "item": {
          "id": "1d749d3d-134b-4b2f-8585-80d53cb2baa5",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "73a16679-f0a3-4dc5-a838-d20847bff14f",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "b0fcc59c-6d4a-4d89-b14f-3ee5f3db0b06",
        "cursor": {
          "ref": "ca786fc5-d702-4c02-af3c-1eece09f9ac2",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "5c7fa4f4-8d5a-4d32-8a80-c81bcab5ed65"
        },
        "item": {
          "id": "b0fcc59c-6d4a-4d89-b14f-3ee5f3db0b06",
          "name": "credentials_verify"
        },
        "response": {
          "id": "210d5ebc-4548-4db0-be4d-79c77a808d13",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b68221-af60-4be3-a593-5dce84a51d87",
        "cursor": {
          "ref": "cd8106f9-7066-4e08-95a3-7f46295110f3",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f7eaa766-4b8d-4ef9-a0e3-fa655459e753"
        },
        "item": {
          "id": "c5b68221-af60-4be3-a593-5dce84a51d87",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2096c9ff-6f2a-44b8-b006-987e769351e0",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f15863-9c80-4c69-9b5c-0f2554f95535",
        "cursor": {
          "ref": "09399eda-f05a-4ffa-b405-c1e1b482de48",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "bf8d813c-9664-4951-a690-7568ef991855"
        },
        "item": {
          "id": "21f15863-9c80-4c69-9b5c-0f2554f95535",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "80fca576-921c-4992-a98c-e9369f828126",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f15863-9c80-4c69-9b5c-0f2554f95535",
        "cursor": {
          "ref": "09399eda-f05a-4ffa-b405-c1e1b482de48",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "bf8d813c-9664-4951-a690-7568ef991855"
        },
        "item": {
          "id": "21f15863-9c80-4c69-9b5c-0f2554f95535",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "80fca576-921c-4992-a98c-e9369f828126",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08bf9e79-5317-46f6-96c9-bb3e05e0e209",
        "cursor": {
          "ref": "25eb5dd8-1ff3-4cdd-af9a-f9a44a1ea69a",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "e195f6d5-d9e8-4c1f-b72a-bace045c11b3"
        },
        "item": {
          "id": "08bf9e79-5317-46f6-96c9-bb3e05e0e209",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4c43e3a6-eeda-4a84-9ab3-32151d466196",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36147017-41e3-4bdb-a7cb-01e5abceaf3f",
        "cursor": {
          "ref": "89a7e5c7-12d2-4f6e-8dab-ef51d137dfaa",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "324ca85f-bb31-437f-9038-5d5dddfeb5d8"
        },
        "item": {
          "id": "36147017-41e3-4bdb-a7cb-01e5abceaf3f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c09046fe-e816-4e21-8e57-144040adfdc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}