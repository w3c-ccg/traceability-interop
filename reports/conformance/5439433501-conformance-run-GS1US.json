{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4cc28743-5583-430b-a602-3a2d384ea939",
        "name": "Clear Cache",
        "item": [
          {
            "id": "304cdc83-9775-4804-ae33-be3f67d35599",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f37db1e2-4f9b-4f7b-bc2a-342c712514e5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "043a1f09-4881-4dfd-8ee6-31fc0fc76715"
                }
              }
            ]
          },
          {
            "id": "322be303-6276-4017-b6e9-bad1775acd91",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8cb6e6e3-03df-4276-8b14-28ba7589d45c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c645f8df-b6c8-4e5f-a4ae-da633a1ea4c9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "60f5d865-414b-4092-bd83-ac94f81285e2",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4f34bdc2-764a-4cec-9c29-c804531a9959",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e0a2ed4f-91d0-41e7-b487-2c2bc013b086",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2173c5bd-eb35-46a8-8ccb-a7ef500f6198",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f969adeb-089c-49e6-afb6-df9a3e10efc4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7699071e-7298-48f0-9c15-31cdda9440d5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bcd2c751-14b5-4e25-a5b3-da3be43d098a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "360115be-5d52-42d0-aca5-ee787f9a5a22",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2dc115e9-093c-491b-bffe-e3c6efe232a5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "84ce9baf-74a8-4a1c-81a3-728be130196a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "90fd7668-b701-433b-a894-1aa38e914308"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc0ae43d-8a67-4af8-9cab-2afe2b273b5a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0556e0a4-1eec-41a0-a168-52100623f390"
            }
          }
        ]
      },
      {
        "id": "7ade6476-ca37-4410-972b-44bc19f11e5a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1a155ebf-47fe-4e6a-9247-fdd627f3ddf2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "87a9e4b2-078a-46bf-8d3e-19f5e15f98e2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "316226d2-71d3-4532-ba46-143d5f181d4f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cce513d-5272-4304-b139-892761eae0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8900a445-bdee-4f35-b789-510e65308dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b931a1fb-b50e-4e52-b11f-8d200d931ae1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff31cfe-bd2d-478b-aa06-d0f1ed9134dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c44e098d-b1a9-4582-96e3-f54172f8aaaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0baf39fd-16d1-4b72-835f-e6bb4c9803f9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8acdc776-05cd-4318-9a12-77826385a1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdf8db8c-2eb3-4111-b4cf-7b1cd143f7d6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "14ec25e3-39e5-4c84-b0fb-26a67433e445",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fdb1075e-2325-4de2-b8c4-60ba7cf3a3a0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd322a0-e5b2-4374-84fc-a5d43303112f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a147f10-92aa-4c0f-954f-6adfb0788c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd68ca2-2127-4501-a425-e9dae1574a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db30e23-7d9c-44d7-8396-884bbc82c1e3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "58bfa697-1fd1-4132-8058-e8714aa593e6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "906c7b49-f547-4c9e-998d-90a52c4ef2a8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ffe0e067-d3cf-446d-a8f6-0d589e46da14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "bdf031af-5940-44bb-ba23-5a09c7f79091"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d14c4b68-ec3a-4cf0-bb4b-84a670c1be78",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3a5ab086-f5c8-40d1-93f7-667b0ab21f25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1465ceb-7cb3-4543-a60e-32730c6cf72a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "35fee779-d390-463a-8def-4ad2a20fd19c"
            }
          }
        ]
      },
      {
        "id": "9d2a8b4f-d523-40bb-8ab7-f945b2fe2845",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e26b50ae-0c56-4551-8865-f0ed36e63247",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c84c9e1-229a-4e9c-a325-7255e5919d33",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8c13617e-f95d-4ae6-8d3b-df275e1823fe",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f8f2c4-5e5d-46e8-9fe5-f939ad6d05d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355f2d4e-52fb-4445-9c0c-b800680ffb06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d060772-28e6-4dd3-a39b-0197ffd66459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7532a225-2d5b-4f97-bbe9-dfdad41b1ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfacdf22-8290-46ec-a5ca-e37d12f6524e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbd21fc-e3c8-4dee-a491-f698114466ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbedd92d-ee3c-402f-b18e-07562128de86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d1fed4-18e1-4e97-a803-994076ca3708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5329d94-34e8-4638-b53b-434733593783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e86e40-9ccb-4228-b881-c666b3825254",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a142aae8-4f95-429a-80ab-686ebbc7746d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d105e292-34ef-496a-857d-5f12603e3715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe32cb1-d5e9-4e0d-b338-8f63e3257b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8d64f8f-f7b4-4c0d-8eb9-89ff97dbbbd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d26cee3-721d-4a94-b374-6619cbe21c3c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db422cef-50fc-4c56-862e-094b89f55263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa751792-81b2-4f60-b108-21ebc56598c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b2158b-ccd9-42b8-84fe-3141ee61294a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2c3e902-0c3f-4be5-82eb-0404c2a2b831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a598e001-4a17-4e5d-afcb-2d95d4b490c7",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b61b674-71d3-4b90-a673-7702f7ea6d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b61bf7c9-d845-421e-a4e4-ba83548275f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768eec79-0daf-49ae-b31f-8d7bcfe4423d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ed200b5-788d-4c56-816d-ad698b8ac3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64245c68-f054-466a-a647-fefee4e526d2",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f65dc4-677d-433c-a674-ecb01cf82960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a98b6feb-3df9-4d9c-be7a-390191aa5717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c16518-eae3-46da-94f0-3d04876d1a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0568dbc1-5916-4b5a-b09f-9c7c39a6babe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895b8c3f-ac0a-49b5-9b2f-379eef6e56d8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96f0110-d150-4fae-8783-de1552870f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3056264-1519-4ba2-9fc8-27d4b3e0e3a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ad1194-9874-4778-9d11-a972844cc324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ead0520b-b594-4161-9392-91b34961a408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f195e84-99ef-4e57-acc0-1cba1f64f195",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b56bfd-efd1-4ea5-951a-ad2bd60aa740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2930ae8f-04b1-4df4-9bb0-8859b2fe3596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7069386f-a3fa-4afa-bd8d-0c4c509d5c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcc52b60-cd88-4bb6-a39c-afe68f0398e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b095d7e2-3210-49b7-bbe3-87c5120c6e37",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a62cba4-2add-4046-8aa7-c3cc17263764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba6fb9f1-a07d-42bc-873b-040a72191e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49c3177-6b89-45f1-a6cc-efd141e38f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91d85cc8-5369-4c1a-ac94-ee2442a5173f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4829dffd-f099-4aef-9f6d-6d091ba5b2c8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4271a0-a2c7-41b6-902b-f78c002c7c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a16ea61d-e263-4d17-96d9-c55be653f27e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca65f72-9cd9-4b4e-8562-51efb93c06fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fbb536d-147c-4572-be8d-20a1f0f655b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2b4906-55a8-42f0-aee2-4d779d43c301",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5add0a0a-3cef-4990-8f1f-fd5c1fe59781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a014db-fc01-407a-99f5-fc373b19802b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b5b225-e6f9-426b-9895-e971104d96f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01387951-6756-4768-ac99-241a6fc558dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fabdc3d-7f53-4d5a-b8a1-1d6a0c213729",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a7e71d-c533-4a02-bbb1-eda99bea8f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39a79db2-1065-4add-8f68-21363f3aea6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f44a47c-bc39-488c-83d7-58b8e182d8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39e774cc-4020-42a3-a7e0-bad0c2c3158b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38bb6eda-7513-4bc0-a724-6104ac91b3b1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a44950-0292-4786-b7c0-7b1921d2e534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d452b3b8-3c22-4030-bfb8-b0fbf3ed4671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d006d5-261a-42af-8255-26c9280dd8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db334941-0a81-4573-8033-c7040d77e6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e25515-237b-40ba-8646-5dc2ea0aa3d7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a06c7a-c7f1-497c-bd01-7d30cc616d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f51c92a3-9aa4-4f66-a3e8-657942334480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf29f73-4dfd-4f1e-883b-acd86edb1fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d24ea35c-a524-4097-80c2-716f5157306c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b047d7-1ab6-4c16-8d65-4968a7d8e92c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b79b4a5-fddd-404d-80fc-a0ce62262fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5583d8e1-f335-40cc-98c7-af690cf9e51f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb52a17-2458-425b-ad57-899a4e1af8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa78ec5f-fe98-418e-9475-ce5e251f1975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee7b409-b21a-4c1b-bb07-91d0c90e04c3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad8e382-bf86-46a5-9736-a9af0f764b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273b4bf6-9050-4f1f-8d22-362f72273ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8df64dc-c256-4ff3-a1f3-29be8df29a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd1fe6c4-da45-4adb-879e-3e9e0dc9cdf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44d78e6-9247-4b6d-a9fd-1dcf4e4df315",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d880bcfa-1b0e-4c86-abf2-e88a125b6814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c2ee77-e66a-458f-a3c1-0c7066cb77fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8483453-78f7-48cc-a13c-ef5d298d9ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ea7b6e6-069f-4f56-9b68-f22c0d163784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2c242c-c637-48ab-a995-ebd334a9dfd0",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a661989a-324a-4844-84d0-018acfc77af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee538e2-f801-439d-848b-984ccdaf316a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5fa02b-6e92-475f-905e-adcb10786c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "494db253-e066-4543-9de7-0a2be6859bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00e355d-d610-465f-aece-91097adb2d66",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "733b03e9-b6d4-4e37-97da-87baa7348e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "352a2885-adb7-4968-ba9b-32c0b28bf349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ef3d40-d4de-4531-a3ad-271032b66102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3de11ee-e4ce-48d5-bb1d-e39accbadb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7259a745-633e-4690-ba4e-f333a4b46306",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "322c6aad-c5ad-45a8-ab64-9edc43984515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4e41045-39e1-4755-9751-351619f5f043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad14e9d-090a-4b75-ac50-9cba70d7c6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "baca8ea8-86a9-4362-a607-64b95cf44577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcab4c1-6d11-42e1-b494-a7ebf2d89915",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd25a77-8845-438c-a10a-7b048c956e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1aa0c50-e87a-454a-a9b3-400afe694a41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84220663-2397-4ea4-8277-99466090dfe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97c285ca-7c63-4515-bd47-eee19c015d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e80ffa3-35a7-4d63-97ae-789d48eb5084",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5632174-9afc-4ea2-9bc2-ebe48b73695c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14d0b95b-5540-4453-9752-a426218c7ad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36fbbe02-9af9-4cfe-86ce-4a7cf995c744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "89f0a382-1488-4859-82d1-c654fc157bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c3818d-4397-4daa-aab1-16aed9927980",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a485c4d8-cbe2-4fc2-8a22-f9826bbf1644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d25c999d-4e54-4b94-bb62-386df4f1a7e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52c87be-5add-4b98-a840-f029feb3e4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f182cc32-d114-4e25-a795-6e9f6c543577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "116cefde-d51e-41ec-9f97-58a008b5abfa",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0544b809-0f0e-45c8-bb02-d6d48600ec89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbde9f48-4d89-4597-a529-d64a204d6c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4559af1c-dd49-463b-b867-0f593f6994cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b34d4639-7766-43a7-a36b-96553e132848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8024f83f-2e35-4c90-ad83-6f3590da5c18",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "febfc01f-2d52-4901-9c57-6730fad75f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f99856-10ff-47bf-bbf7-e385fed437b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c42042-70ba-4d18-9b7e-f5d5b92a3162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cec43c55-02bb-4d47-a0d9-e8953a22f86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062b2ab5-3818-42f8-b1e8-16b4df43e0a3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9e804c-da4a-4491-896c-8d06fd00d012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4534fc8b-80f8-4750-9b53-1fb9b3c675bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1fc919-2ef4-41e9-a72e-31b1bdb7332f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d3a43e-aba5-4740-bb82-823a48968f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d36c712-1091-40b5-b5b5-800c723d3e82",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f978842f-88ac-4978-bf26-cbcadb043364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9db81b72-c498-4cfe-a9a6-f1c3359848ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2065930-c36e-4b0a-a2e1-c8f3ef2fb83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae10d380-570c-4fe0-81d0-19ac77d765bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf0823d-a81f-48b1-b0a9-b617ef92f340",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e71e1a-7c02-4f9d-9004-5f177cf31fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ebcaf49-74c8-47a8-892e-60c4615302db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83381391-760d-4441-9ffb-85d17ec897df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "44067bb1-835d-44c9-b56f-f353f035626f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe62546-fd6f-4945-953f-c98227a8397a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17428737-03d1-44f4-8060-2bdc6a7b9341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1372621c-d621-420f-ba84-d6ded4690e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836bf8a7-d059-4bb8-bdf1-850e2d4104b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f63b5f2a-2729-4152-a7f0-b408cb0d36aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f687025a-9a9e-4aed-855c-4e6a03ed8a0a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df9b35f-4ab2-4ad2-bae9-899333977796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1172c038-e762-4275-9c95-e8ea1da82251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68818818-888c-4aec-a368-a796feb82a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "041db812-7e98-4bfa-9e8f-841ddacac8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7a3564-97c7-4bf5-93df-65ba54cb4428",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bcbc745-d76b-4ad7-9566-1ef3063c9c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6be042b-dcea-4232-b3f6-e9516adc26b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18b4c86-18fd-43c8-8140-e643606c4ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc0df77c-d5b6-4e05-a3a5-a4aa3d5ea30c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41cdd51-45a5-43f4-b71b-b575c4e8d00b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901b42a4-d38b-4750-9683-6886aed80613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7452a5d3-f7bf-4b3b-9457-2cf1465304d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda4791a-034f-442b-ae99-a21eb5736cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67008e0a-3a83-40c8-999e-c3b9e35c7c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "684cf400-62ac-49bd-b66e-c5362c6e5557",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "221189b5-f3a4-43be-b5f8-64c086ec63a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daf5ca7b-522d-48d4-b527-b05f56e8a928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0089ae-42c5-4a3f-bb7d-86622251fcf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da82e5e2-52c4-473e-9178-eb89668d8ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f987545-cf85-4c67-965a-cca43f75471a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283fc702-c1d4-4ead-bd24-fa2830483edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b24a72-a7c8-4769-80a0-63a7107005da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c1d7d3-d22e-441e-b8c3-e4c8fc60e202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6312fc6-61dc-45c5-a44e-b60e9974e5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad513015-e266-4697-b7d6-51731a65a097",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f75f67d-80fc-4216-81f1-9be4083fff22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c554e00-7d84-488a-9211-df91422be735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f87739-7cb0-4375-86d4-0a1cb05c3580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0b8514c5-fb8d-4cbc-a00c-e5bcd149974b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3684aa-a2a7-4aaa-909e-19cbacc8c15c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b678ed1-151d-407c-ac48-0f9d4b10ad64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3fb9366-12ae-4e86-aa2e-0e0f942865ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7195e4e-e210-4cef-90a8-dc2b81e22550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e20173ab-65d7-4ab3-801e-57637369bfc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4629bf4d-3acc-4be7-97d2-8462f87a007d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9be419-e728-4457-935d-9b7e1f3f15af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068583bd-ebc4-4f0b-b58e-4bd933284118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4ffc4d-2bd6-4ab2-b452-1ead45892959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d72ccd9-4155-469f-874b-785f428cb687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ac5df2-5418-4ef3-87bf-c04c208a22e4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d534ec44-6264-4c9b-bbdf-db76cdf4b2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8938d449-80aa-48c8-bba9-a091e7a00384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e3d215-2c6e-4c25-8efa-7185ebdaad89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "11b55361-cc33-4d27-93ed-bdffac1c73d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49559530-a352-406e-ba67-1bd220c0c21b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d0c5d9-1214-4399-9a4f-0f7a9ece6dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4248e44-8084-4e4b-8600-0dc74d38a69d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c654677-28c6-4d9f-9b24-833d4deb9fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b11d12-3d0c-4c29-b04b-6b18c533f4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fc997b-0e7c-4af1-b717-5fc67961bc4c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f6db48-572c-4fb2-a959-d268485e8d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560ff344-b7ed-46ce-843f-b69379acc8e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8b8a85-9ba2-42ee-9980-8008ddcbf6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e50591a-2dcb-4192-95bd-1e4cca483294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6f61e6-daf3-4570-8380-c5587d20629f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40e290c-3811-43d4-80c0-6675b8a376a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f97338c-99de-4145-962d-d716c6ccdc01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263a20b0-cb54-4feb-8cb4-3eef0beccb05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9eed50a-7b72-453a-8360-9b1419927eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b283e70f-1305-432c-9418-1f5932dd3acc",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1257a6a6-4572-47f6-abee-338fe90c0424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f3b6b52-4d66-4965-82df-d77d45c4a9fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc9cbe4-f289-4a6f-ac2e-7b492477dc02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "35b54c28-8138-4d88-8c51-b794151bc610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383b3399-acdd-4c27-b7c0-941e0fe2bfb3",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa1198a-5e6d-4652-b841-e224f30f1c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8cbc5c1-b67f-4f1e-a87e-f5ff97b2626e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb46811e-ed78-4c16-a17d-1f2bdc909c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "51d1f998-f7b7-4b18-9fe1-0af0de8380fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b110b631-827b-4fff-be74-b36a39778db9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54701f1c-f626-4bfe-9188-95e503f7e490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04aacc69-b732-4d11-8602-46cf4dc6d89e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac48a289-8285-4c81-b490-a992c57c3cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "deb67a0b-378e-4f04-bbfb-21c4cc07839c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d852430a-fea0-4dc3-bc3a-0a49d396495c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c89c1eb-75fe-44bb-8776-3ccc7add1e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d530141-0484-4dd9-8a44-d6d7d3703eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f627a6f9-a72a-41d2-9c00-91416abc6be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3740b909-8e6b-46cb-82e8-ae4b77e6a92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e614002d-1c34-45dc-979e-891109577986",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc578093-add0-4826-8f9a-a6de8c14f3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2169a9ee-1af9-4deb-b702-1f789ef19199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27518aa-935a-47f4-b4e3-e1c49ce9d518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a1e1fd-9cf2-4d72-b408-024cd45a2098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e942438-bba6-4211-b7c4-706708e3da54",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9c0517-e873-4f8c-943e-766f61f0da1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab1418f-121d-42c2-b395-af671179c680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48de321-3670-40f1-9acc-e648b72daf11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b6f6c6b-d178-42dc-9457-d013955c6705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3028551f-3605-4445-97fa-fa521c0ab34e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ae9129-b68a-4ff0-959e-7e8766479cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71d0a2e4-116b-48a4-bae3-3c797a168c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a512a8f-3570-4465-bb86-8be29189dba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5747d682-9113-4cc0-8b2f-4ad4cba49c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5205896-9c1d-4e0b-a211-79e4961ba282",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d3cd28-6165-444e-a91a-1fe861c33fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d57eb4-38e5-44f7-8e76-f9f07e3ba285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77ffa47-bb55-4029-a7df-b59097bf6141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d819911-80ad-43e8-be30-49e58a4a4476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c1eb3d-fbcc-48c3-b6a5-408ead35bb87",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66d0457-2128-4423-9a3f-16b5fbf04cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1f50e5-7b6a-494c-9f36-77b241058208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd6cceb-7ed7-4a47-94e6-32d5f5c799ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a5542f-313a-4b99-9ed3-1c23dae0be68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfdbb445-319e-4c0e-a59e-d6055e84bcae",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62efa8dd-0b04-4d41-be1a-0070425dd9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "127d0238-f57c-47cc-8aae-7e77ca6534bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9706d17d-3de3-4fe2-aa22-5e1d147c3fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c162ae7-1dd5-4903-b7b8-1a632696b8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6bb13bf-e3cd-4e17-9973-2a65283a5f1a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6fefc8a-2428-4830-88e1-ba701f05a20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "223f887f-f6ca-4ae4-a3df-feb77d1d0f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87027a02-f208-4608-9048-6de1c0219b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "50660191-3fe0-41b8-9529-80384cad26b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27bafb6-28b6-4ca7-b7c2-77dec5d44ea4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13bfddc-afa0-4f5a-b09e-20ad30db7ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f912f20-7cb1-4c29-b389-0a23335fad52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d57ec63-af13-4014-8013-6b1be8124e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "032470a4-a56f-4d34-8871-bd632584406b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8db83f-ce9b-43e0-b2c3-cafac6fd20d2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "274062de-d67c-470e-9d9f-66c15722a6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "654d94ec-1953-4ca9-b3e8-76870a74184d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19dbacc-4a11-4417-87cc-2f6154647133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8eaaabe4-3c6b-492f-8128-748bac9519d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434037fe-9e4e-4f98-8613-cc78a5b0fdb5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e85500-7b7d-41c3-ad25-1d4bb2856651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21594d72-029a-47c6-9128-934848ee16ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf63382-0808-4cb5-ba5c-d7c31939f33b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "04f416d2-36ad-4f14-a1c8-4f8f0f5af6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f25fb9a-fe5d-4db2-b1bb-1efd3a7a2867",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebdfe18-71b5-4f88-90a0-ce19499a437b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b54ca9e-1de7-4ee8-a810-70743aa2f53f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa7a653-4a0b-430c-820c-bded9e230a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e242a08f-7ca3-4f4b-92e7-8ea5313ac3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adfc0088-3878-4cf7-96c1-1564fefa3032",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc31d9c-d034-4894-809d-fb1bad7224f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee409769-4b42-4877-b127-ee2b7c2a98d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f91baa-63a5-43f0-9288-48ff43e1b7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb94697a-e48e-4277-a892-a7d47d857c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b283b367-3c80-4091-97dd-e9856343bbd7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb735a26-ced6-4e0e-9c8f-b8ab83b9d8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9fdae1f-2b30-44d9-92b6-a11cf0640860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bacfaa-da3a-40e7-9268-6c89d2a1b9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c2f3697-ad04-4a4a-be19-1094cace8f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b6919b-5ee1-4be0-ba01-03abb14f5fce",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7a7ee9-c72d-4c5c-89b3-5249c643046d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc0abed-b1a4-4839-83dc-dd84384b97e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e730e4d4-563b-4e03-b9ef-ddc9630da61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1606c9d1-5716-40f7-b87c-362771b12efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a8147e-6a1f-4cb0-86f7-c54813a264f4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a38e91-204a-4397-876d-b82c84cdf9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e464ddba-77a6-43cd-8e82-152a8cc9bce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a1d241-b9c6-4101-9aeb-5ebfb9bb55ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "59860f65-c607-4cb8-8a60-d4a4aaafd91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5487e7e-39bb-483e-8534-550a273fdb45",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5d04e1-2c28-41dd-9048-d5e0d30c4dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ee5e8f-775e-42f7-b344-d0dd84dba8f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe0480b-3a65-4c10-ba47-d9272f811c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "33bc67d1-d545-4caa-8b06-6e0d74debeab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f89ef2-5500-4e12-a723-994c38021cf0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ff2bcd-14c6-4466-9e70-bdb0a73f955e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "078f4641-2a1e-4a25-a082-29c69995301c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b7d3b1-b4d4-4673-aa88-901ae4ef6c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e582386-476c-45bf-9799-c026f5e766e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87eaccc1-bd4b-4372-b87b-22d15d4142fd",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1078dfe0-faff-42e0-8717-db008efc27f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0bae7a-2a80-4f2c-86a4-20c191f3d440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae92e73-4daa-49f3-80d3-d3f306b35f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f23d4ea6-43cb-4b86-b145-8596aabb5d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb47913f-5431-4732-ae8d-74f2685ce023",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a541387-ca85-4b97-858a-c2892a01e3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79103716-f0f5-448a-b00e-f00dd40492de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4b61a6-43b4-446f-811f-8d12d77675ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4990da40-ada6-447e-9398-ca3f50ab6cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bd50a8-cf6e-4286-bf26-242c473ce733",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a94ac2-8ecc-47c4-b454-a06a5ad61e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91afc7ba-a376-4b47-a04d-d210adee9440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e778d941-36f8-4d10-bb87-4e7d05bc6533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e435bc-3323-4134-b14f-87ed85d2c9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51577447-ebcf-4a10-81db-0ee438c31917",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f8f692-26e9-451e-bccd-601adccd3b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be81660-156b-45db-8988-7f6cd657cc27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8581490f-5c88-4441-9124-dfb51940380b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca195e53-3e5c-40cf-8108-66050567959c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608a77c7-d677-47dc-b1a2-fbd814a14f6e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58304b94-2a02-4c3d-b077-20b4d1ddca65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d78f38f-7d4a-4e93-8d52-91c0bb13892b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51f5dd9-2ad1-4c0d-80f8-2ccbe77b7b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d3af2ee2-33f9-4021-97d9-e9f3617187c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031bff7a-0b59-4aa4-b18a-833d58eef88f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0212cdd-090b-4953-a49c-7b0957380b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff01b267-ce01-4080-8763-98491cd5d1aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee2083c-a7ff-4d1a-b8a8-92d5d0a804df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "72ddfbf5-38bd-473b-a6e8-f0a1047bcf08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ebd0b0-cc08-43ca-905c-fad36f5343f8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0dd6cc5-4aa3-40b8-9091-e9cf13f10b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c64047-4fd5-481a-90f2-d6036558c3f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad70ac9-6203-4fc0-a30a-dd6790d2f661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6359e60-0848-4c96-9cea-bad6f43e6e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806d02d4-9235-4c36-b2e8-20327969c14f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d2f615-7b65-4322-971a-032c6c213bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f1717e8-0450-46cf-b94d-f5f6ac536661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62719d0-1102-47a1-bb10-4b5fdbbae43e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "685b3764-f9ec-4173-bdbd-1cd859e5a642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8eec87d-f25a-440a-ae19-13d96449c773",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "266dd37c-8335-4690-8783-4d0ac828783c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "999dc8b5-b945-4aa1-9859-37532be806cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5239b054-00f1-4041-803d-a87993957e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b6ad3bb-021b-4230-8b4f-8a523d0365bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b874d6-74f1-4c64-9072-f5f21db11a67",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1b512c-ab8e-4bb9-9e3b-e2fda0bea049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5171fc3-251e-4a72-a36e-5aeb345b4c23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7bdcd2-d472-4d1c-8823-259d9af60bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c27c6d1-72f1-4247-80e3-af398f7ea80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1befe8a-7adc-4890-803a-5b5558113f4f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b7e78e-3f7b-4507-aaf9-1b6046defe5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6df974c-6fa6-4fb3-b4d3-44dba3483513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d26fe14-5403-44c8-9a9f-59e67e89fa23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "426c87dc-d769-4539-b03e-3cb640d5292d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c47c9d-b9da-4a81-80fa-8e13bcd7d824",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ae0118-3c45-4838-9a29-a154097ec92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "853c7a61-1b7f-4d1d-a96e-f2ae9efab61b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1d90f3-9ae4-4dd5-b077-02a87ab41cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a0260fe9-8cd7-42f0-be2a-e943fe22c3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4c1779-7346-4651-af79-d87ff5087c3f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf39672-0627-43aa-8241-2559d799ff16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "223cbb51-950c-4972-b8dd-5d1243c5dc32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7b600c-f990-40e7-9aa9-fd544fa29230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "58c1daa2-9ace-4b81-8649-62f0d5b2304e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0d91e2-a5ce-4d84-979c-f7f0a2c66df4",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0d8fac-a541-4b3b-b6fb-989c5931fe32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a902fc5-1e35-4455-bfe4-208f3fab06fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a2a65e-6f82-4a41-9577-f3fc86806b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d25c6622-a6c5-48fb-be6f-d6f6484c68e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86de0205-c0df-45d9-b26e-808f0d872d14",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320da497-eeba-46d2-a5f6-0409ea7df2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b4956b-8542-4f59-9df9-532ae4bf2163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e71f69-b192-4661-8b17-cf09650341f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd298826-c385-42aa-aaf4-2e7fb54d7cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec915612-70f5-4fc6-b446-244c64a89d13",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9a298b-d3ed-47bd-80c6-78b0adf61cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799a9510-ef1e-4f12-b357-367d55f25424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e52c462-712c-494f-bf27-f1600477aca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0d07101-db62-4055-9d1e-51a08da7d0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb10bcf9-6a64-463d-a9fd-e76a6ee831be",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088ee99c-90bb-42f0-b149-8a8f980d4389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "259d45de-9dec-4fe8-955f-f073c2b88bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c0e68f-549d-496b-b559-f952148e8305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9c7c118-4489-40b1-ac2d-855a7e451f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6211fb4-da40-4e31-86a2-9b6d5a5f6349",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7e1399-f7b0-4e94-afac-9c3f4d181f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16ad0b8b-5a3c-40c0-b6f9-4d509ba0d611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ff3847-4f97-4fb5-8b6a-0ac036c2e995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aeabd490-3f74-4635-b69f-9076d21b5b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42e3f4b-e75b-4dcb-be18-0903bd3a1689",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d568358-8216-4cc3-bb90-ffa8c368c5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f82eaa16-1acc-40e5-8dc3-ededf32f3b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b05dc6d-4413-4e5d-a0e5-3015044351d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc02cd0-c0ab-427f-b8eb-3d0f55c028a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d95612-0381-40d4-97d2-edeb904e5a20",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1a86e5-d8a1-40c0-a114-165e1f45275e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1353e033-1c1e-428e-acf9-9af0f9e0b509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d4637b-0b48-4b10-941c-b048f3078768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55bc9433-f7db-41d2-a527-ed966a9ad390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2b37ea-99fc-450b-9dc7-9a2a4656e00a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a67beb89-c6dc-4186-9b12-426384afdcd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28465690-8b06-436a-b17d-3c710de982d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1860e6b3-380a-4e41-844e-9d361cf64c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5ee10c2-8dbb-4aea-94b3-15978c7ee891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f77048-18c4-40ba-92d3-ed93c7f5de60",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8057485-e0b5-457b-ab89-479202bdea44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3195005-a124-49e3-ab09-50e7f8489be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68825e9-9f41-4395-b8bb-8295c382be4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a5e2646-281c-4153-89b2-d93ffd2b7e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b788aa13-63a1-4185-8e5b-22a2b9003977",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe96d0dd-8d76-48cb-a499-9979e30b72fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143ae2b0-f9e0-418a-99ec-7338758b53aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67de46cb-def9-49f0-9ee7-d03c926d8a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "deb0bbbf-2861-4e34-9605-e3453017031d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff94d16a-8b19-4371-892e-a94e91ffe9e7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d237dada-909d-4039-a7c4-9c1b760f7b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb82da75-fcb2-48ab-b694-0ca3bcdcdf67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deecaf83-ada9-4f1d-b423-6d4d73be38aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5d59299-b35d-4117-a4a7-914dbc9d5d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947e6f94-ceac-4407-835c-2dec8f3cd6c4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7863690-17ff-40d0-95b9-a13c8c6bd37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de61cf3f-7848-4f2f-a948-7820155a1161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d08ad7-f00d-46d7-9296-33c650d6310c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "468b523c-b0d3-4f50-89ac-92e6fff74cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70b06c5-4d45-4d00-a18f-2dd6bb66f4f3",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17cfee1e-b1cf-4c2e-9881-d42efeca0b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165edd53-d0a5-4479-861a-ba3d5b479910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75789816-de34-4ac3-a121-2d38a9207776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "eaad0fe1-fa5a-470a-880d-52413d9e0ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f40b6e-0983-46af-9db6-3ae80588f06b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c682fa-052e-448e-9832-dcbf681650f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f3a7576-9758-4abd-879c-e4a2e46be0be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "656c533f-ebf7-4c1a-83b9-a20b92e3599e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9935d4f2-d60d-4908-b1c4-cda1cdde7c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0150d2d6-a64c-4ce5-b497-6752a7794e26",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214fc475-bfec-4dfb-ad8e-eb36bf854f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "113938c9-ffc7-4dd8-a713-3facf202a8ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913f5556-09df-42c5-b726-5c1e283b0525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8dae96d3-0f03-422a-b30b-46da2c30412e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279dc022-b0cd-457b-9c23-287fb3f698fd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5c6bd3-6211-4f65-ae87-a4e67e130dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0bf3357-cef2-49ca-9c74-39263c8651ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ef587f-0d57-4f72-833d-2de1772c366e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "05c47f3f-e563-48d4-8b18-3fc2c359f522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd98ee8-3be9-4c2f-9440-bad21ccc38d3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44e4ae9-347a-4d22-9aca-550dfea484d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "27eef4c2-f7f0-487c-827c-f919add8c58a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8ddb2d-4b5a-41d4-bf85-ee78a58a3e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6efe3da7-9c13-44b7-b4aa-3e7cc0061653"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3e992908-5868-475b-aec9-4e605882cc92",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86f47d2f-217b-425e-bf29-167bff0e2257",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8bbedb-53dd-40f5-9103-f95597103f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff8e6ed5-cb8d-414d-9493-9bff3bd79fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f438177-ae7f-43fd-abb5-f19d14115a80",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29be290d-ce74-405b-b445-75a656cbed83"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecdebc3c-86ad-4ac3-8456-bc862eb140a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4292f8e-7d26-496d-a952-410bb9812226"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a2cd56a-0a2b-4c30-ab72-a0d65a7fe14d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7babfd12-dbe3-42aa-8e7c-a9b4759fc311"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "37ae3ea1-64e5-4a97-a3e0-7ba2409780b9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ac63c711-e510-4f72-92bc-46acff4b4fbf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "73c9def9-c239-4e38-bb6a-25bd55d4cfa4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e69e1e08-8351-441a-baec-260824b79dd6"
                }
              }
            ]
          },
          {
            "id": "f2a984c3-6cde-4078-a2fa-b714f0c57bae",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d1bc9f45-faf2-4b91-a7f9-5d460d3626ed",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63f412a9-c18d-4972-abb6-00e4ff5a6778",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b0e6b67-5b0c-444f-927a-724b3034e2c4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9847d44-1c4f-4ccc-8aaa-376f5bd87d80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a9c2d6bf-7f7c-432f-8672-c4709ab02cae"
                    }
                  }
                ]
              },
              {
                "id": "aca65ba7-f910-4f02-806e-c80d6f1e7352",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f39f3769-f4bc-4175-975f-69434781181f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8b3372f-7d6a-4ad4-9547-29eccd9fa037"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17175ba9-dfdf-4faa-adbe-afafcb7840a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7df6eb7b-ea0d-44a1-aa48-59d46b66b42e"
                    }
                  }
                ]
              },
              {
                "id": "19792cdf-4d11-4db2-a04d-6f3bdc437c9b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc61328f-2250-4efd-a0d9-1625c836ab43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e0edc797-71a5-4f69-a332-398869bf7fa4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02b0b507-cbbf-4b69-81ef-4c4796946337",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fdbc0d13-639d-48d5-bf1a-0798074d91f8"
                    }
                  }
                ]
              },
              {
                "id": "b1a4672e-643f-4dc2-8ea6-e23f4a6a32db",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c79c8817-c238-4f1e-bd3e-8098f6ea817a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "78f8de8b-161e-4e23-b5ea-36e5d393f4a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fad92b6a-fdce-487b-9652-bb0b5978da3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1306535e-efb6-4e10-b307-ea022be897c3"
                    }
                  }
                ]
              },
              {
                "id": "abbb2246-f67b-40f8-ad1b-6f6558669729",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee223c2d-b5ce-4e59-b516-060fe0beae49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c308c506-f076-45f0-b683-82b6187f6466"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6378fa3e-d396-4ec6-a8bb-b8952eba9181",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7be5927a-d1c6-4eea-be9c-ec7222e5d5ca"
                    }
                  }
                ]
              },
              {
                "id": "ccc4b3d2-898c-42d3-a568-80221df001b1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3f4aa8e-fd95-4054-9aee-123e7f8ab9c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a8b7f635-fafa-410b-ac7f-cf6f58f3a592"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc61e636-ba62-4a0b-8e04-fa9250811204",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5d5fb812-10f8-49da-aeae-9be0787a9d03"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ccc07945-deb5-432e-88bc-5d9db464663d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f9ef6701-f982-4c13-8304-c792a92b1529"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "094f2917-85ae-43fa-b93e-1567f6aed9d4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b3a656a4-d3dd-471d-88d3-d92bff1b339f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe7bdae9-437e-420b-b1ff-7ad1f9a54c2f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3ea0a162-9305-4894-be27-c388e41ff390"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f6307f2-28c1-4ad8-acd1-58d781c377ff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1d9b8ce1-e25a-4b09-9986-4585e4e44102"
            }
          }
        ]
      },
      {
        "id": "c0ed69f2-0a97-4f99-810c-e2d301c1ff29",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2f42eebc-0021-40f7-835a-d7c2762ba2d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fd05d4e8-6edd-4a04-a37b-1cf23995aae6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3f7f9918-955f-45d0-986a-2d8745e4c95a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01728cc4-6cbb-431c-b424-443fae37e485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d414358-15c1-4795-9d19-bd66a8500d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a3578f-405a-4267-aac2-d0861066cfa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f47f66ce-76cc-4072-bfec-7f57cc9bd6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391d4123-bbea-4df8-843c-61062635f699",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c64b60-a24f-41a1-80b1-ecc62b2912e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62ca402d-3dbd-44b1-ab21-9dd71e133d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2538864f-70e9-4669-8fbf-f3e3540293cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "59a31032-bbe3-4461-932a-a1474094c837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb448f1-f951-49dd-9fa6-e200ab280682",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a2040d-adde-4a17-a537-5a771101aec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c69993c-0a8f-4790-bbf4-4a94c77b97a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f46c25b-c399-4acf-b8a5-19415cff3258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e317591d-3fc2-4275-a515-bc843a00e57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d350f8eb-46c3-42b9-a7cc-10cea5fb1edc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786e1949-760f-4af6-a2fb-d647ff3dd7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5592bc53-4be8-4dea-a7f4-553f6b4b9bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b103d6fe-202a-439e-a9d0-00615529e2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c1785bf-e827-4154-8009-cab911677633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78d2fe1-b46d-4d16-86f1-bc374fc28462",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1037eb33-c4ff-41c3-a418-3016d0965d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cbfb417-b79d-4525-9617-32cc0f5b2863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec041ab-90f4-4a46-bdc2-b2e9ba3d44a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff6fe3cd-e556-44aa-9964-3fcfbb431a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8804feb3-77c4-45ce-8184-603e3531f45d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b196523-4b4b-472f-8a4f-d827dc8cf3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e92fb5-3db5-4eec-b900-01c4dbd7cb66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c89b2b-624e-43c3-96ff-cd281571c349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "17ab6ad1-ecfe-4227-9246-ffeec6d7ab56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3ba309-823f-4e46-a6fa-3acbb5c40903",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9fa2eb-c6f3-4685-801a-88daa6f90d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b45a3f9-3760-4aac-b6c0-98c6ebe2ce59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4111c1a5-7ae7-44f8-b1aa-0902f434f718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "36cb9eaa-047e-4c5d-99e6-b8eb6c8b573a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c245ff-3cd9-4819-9256-87a6274e8f8c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15454332-14cd-4315-9902-961dae3b7483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef3c8eef-e3f9-44ad-ab41-ea3f81db66f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a307a90b-65ca-4f26-8c3c-fc83e4548257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1416f2b7-4bda-4292-b5c3-3fb8f97dbe6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c17118-fea1-4be6-aef4-df3982f1592a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef21b65-3bb2-48e8-88a2-812f1dc0e48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe6400e-7fc5-4ab8-b5e1-2046a05a233e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb00a3c-07a1-45ac-b889-275d91ea495d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc671b3-3ad1-4b59-9bbb-3d0a8c6f9c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ed320a-6bb1-4719-b6fd-5dd1aa4b72ee",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad64c3d-8d94-41cb-8ebd-dcd22a2099c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c3debc-1a6a-4228-af87-d4412f7cf85b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c3c40f-acfe-4e6e-addd-7bb8967a9779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c885bf02-3e2c-4d74-94d8-e5f56d3ac9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb252c14-df3d-4375-bb4e-d5a0d323c782",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df376ea5-3f94-4e74-b108-004d31c27ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6176e15-31ec-483f-bf41-567832f2de8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04bde7b-3d2b-4c7d-9b7d-10df7dd44854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1e6aeea9-efb1-4d78-bde1-9e93626f694b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b6e8f7-774d-49f3-9d72-21e01c2ce2e1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4805af85-88ae-4d57-8a46-2931b6bf6368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48706cb8-53e5-45c7-ae87-a649b3bf76c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b7f074-1b6a-49de-bab1-a4d9431c2cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "256bae8a-08bc-4f03-93bf-cd390a3ff999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9861c65c-e24d-4366-94e8-c90423cf8f78",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa559749-dee1-41b6-b51d-0b26bfcb41a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f660a4-7165-4245-b8d3-a09b8a6f1b6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34cd60e-e238-41d1-9b47-f205debc42bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a36aa61c-c009-4af9-bfca-9759a6a006c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61eea98-81eb-40ea-832b-a99c5ac0f668",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1737d7b-7f74-4034-8930-5401f20d9be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa5bc168-1f4a-42bd-b301-c047491ff9ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1045dc7-f3bf-40fc-b18b-d1237749c268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9726d70f-9907-41a2-b9d5-09c07a93766f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40a5582-b665-4d4a-842a-8d823652e88f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab54643b-ee26-4c32-926d-887177439a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d05409-6692-4955-a40d-5582e15df0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e393190-1656-4a68-8a2b-3daba419f38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ee692cf-795d-4222-8487-2dea88b2a48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584616a4-d7ba-4fac-8505-2971c12baabe",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "429bb4a0-aec6-4585-bd6a-88dd20749690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf1e404-e3ed-4395-8cd5-e1d4a8b79666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593c901a-bf5b-4e2a-827a-0aa31b7972f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeb90668-68d5-43a8-8515-b4f7dd49feb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26493977-1715-4180-93ea-b42ae945aa43",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64101d5d-b0d1-4897-af77-dfb1575a9f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c8239d-0871-4e8b-bc5a-4580b3d94432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2412b7ee-2963-443b-a715-56a2d15d0bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9694f143-02f7-4d13-b65d-455879f2a180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4378c02-e2be-4ace-9fab-fee59a23786a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22aaca82-0bd7-4436-9cf0-cfb176c27cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afab3f90-a338-4ca8-ac44-f372b96f6a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe36e15-967f-4377-a355-fc7a96a14e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce854371-1461-4333-aa7d-65fe1a440c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b517b39d-c8f0-4df5-988d-e9abb9f48d57",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf1b6c2-b68a-4374-b480-cb9b498a06f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a3301ca-3662-460c-a8a1-bfa94d3fbb19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6f5b77-af43-4451-ba7b-c4a37b239e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c8e8a05-a99b-4f99-994e-e2c1ff5bfdfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8142f6-2f91-4679-97a1-efdc61c866de",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9ce2d5-36ec-4840-a0b4-adb58af99db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21005839-8caf-4310-95a2-ad38e78a179d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960a536b-e5b1-40d3-bb5d-5d53619fc18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0989562-132d-499f-8e52-039fc0cf3ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251f4fa7-0ec4-4174-a6fa-1fa002de9d33",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8b23e5-025b-48b4-ba33-d1e48d251a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db06b036-8b2b-48df-9ac6-058e7a2f6fba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1738fac2-158a-4100-a877-7ceaad99de03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13065d7f-7e45-4260-a62c-a50bd41ece4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ee56d7-e506-4ada-87d2-0dc0f367b829",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b0ff64-ac77-485c-8fab-18c795959701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b6841af-dfbf-4e79-9f5a-b579108b2097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d52b3a-c74e-461b-9d8a-5c80c2b13e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc94e936-7745-4b6c-83a8-6cebc0639c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f5ab21-6470-4741-877d-058be02e78b0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bacb97c-ee23-40c7-9a02-fc50efbc2cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b03ac9-46de-4c63-bf7f-d28a0b74c4f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d05616-e0a6-482e-a26a-1b37ddacaba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c4d97ee-f065-49c1-bf3b-610599d08930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "844f6e80-8453-4aa4-a5f8-3327c5cba472",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14f75c7-307b-4f83-8ae2-1a074f7b7595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f38350-73c5-4237-88fe-92bf582274f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54b5f65-89cd-4058-afa9-012dffbb5953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d47d9a-7599-442d-b21f-97b2d0adbbd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adcb596e-21cb-4d35-b740-ffc8a178e2fa",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2dce99-6ca5-4fa5-9040-62f5842acfd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2698ce4f-7c9a-4a7c-9f7b-8c9c5e628966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054556ac-cdfb-454c-a6f7-946d0d3ce247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ece998e-e39c-44c4-b0fa-500499ab67ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65ad09d-3e87-485b-bba2-cc489221702a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc0c4bd-cade-439c-a58e-d0ba697a0766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5088a9c0-538d-4523-b728-2c7b488a7c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51184589-28c3-4a86-be74-5c2371434035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0137fd-66f5-4f2e-8886-252adf9aedd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e29d231-5ef7-4d82-9c24-2a5a130f1bc2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "993bc0a8-4d94-4199-ac51-8d48827423fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25127ac5-3915-4442-955c-5ddbf06e718f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b037f2-f39f-4359-93a4-4ecab4aa5c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c74dca4-f040-4242-b572-da91d7ec4c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "888b6f82-330d-488a-8cc4-739c7d77b9e8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d62044-6c9e-47ff-8bec-37dc221370e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd75a7c1-f8b1-449f-b09f-c081f6763d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab68132b-b2bc-40f7-b28b-935ee3386ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3a8008-d29f-43b0-95b6-068c078bbf4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1f16a4-7402-419d-908e-9af7cac1eb6f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f49cb33-7250-4aa8-849e-6a3d26bec6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c651ee-b5aa-47eb-a849-5808667a95fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "380c02d7-b48d-42ca-a761-8aa4f56744b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5717557-a624-4dee-a5cc-f68047b241f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e59e93-89b1-41f3-bb75-478efc298c8e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b36f34-6bf7-4b9a-b46c-3da6aeedaea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37177145-a3fd-4d6e-b13a-5d73b0b5c74e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a0d2f1-9a36-4a69-8a0a-98a602327951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5253ebc5-78f2-4912-abac-371b3c3e3c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbb37f0-4b83-4778-8cfb-bac4b6ee2bba",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce8e6fc-78c6-4882-a43a-ec8c0e70ff87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a11121-1cca-46ce-8554-cd530e55c4f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74055300-fc16-4694-9163-2361a8eb21c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d21b623c-bf23-41f8-9d43-83c1d8f6a794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c9874c-b773-4fd8-98cd-8fe712396ccd",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe65b481-c619-4351-bb80-286575bd8cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "371b6e9b-169a-4461-bde3-1039bbf5b5dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a32381-dd80-448f-b37f-578318a9e45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0789dd73-31e5-4a90-86a3-6b868180f32d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d5c1c4aa-f4be-4774-ad87-a161be3094e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6e1979e4-bb76-4c72-9bca-e7178b237c3a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58966adb-c546-439e-87c1-c61e9c1173b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "80a2ee11-ecd6-440d-a381-5ae002d9383b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77906128-dcdd-43db-8522-1fb0b7f60bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42191c9b-f206-4361-9ef1-3bf4359f2d28"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "800c51b5-bbaf-4eb1-98ad-a1076d733d87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47efe9cf-d5dd-4ebb-a4bf-5084262a1ad1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3ebd82a-67b9-4e6a-b3dd-39f0d10d5edc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bbd6184-32e3-41dc-aad2-12641aa8dbbc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a230fc8-aa3b-4157-a99d-c196a3738bef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cad716bf-c05b-4a13-b3e0-65b569fc3b45"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3bf3d9e2-fa19-4c73-93e4-43051ec371b1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95053ca9-18c6-436c-84ec-6204980a68e7"
            }
          }
        ]
      },
      {
        "id": "69dad4ad-6fa1-4536-b4b5-7c33fb78cd8e",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "dc13c9db-10fd-4142-aff7-c85469a47960",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f8cc3633-6dea-45f5-9f68-cd69537b171d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "741e0d2c-ac59-4d08-a276-23a438855701",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e23d73-35fb-4ef1-8399-6f7fb7a85a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660bf00c-eb9e-4ee5-a013-74a3fa09263c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec6c832-ccc7-4b80-8479-ba676b98dfd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "05703c58-2ef1-4cc8-810c-238246ea8f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fff41a-f976-4d56-9cb1-1d069fbe3899",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b407d1-c893-40fc-bc90-e4f3ac90afde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84769ec1-0b33-45b2-a8c1-b63d2ac7b514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e4bc2c-571a-44a7-9893-b7af5489f673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9504f984-2dc5-4d9d-9775-79e3a9a5620d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ffedfe-20f1-4c43-b119-e1fe8946924f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34da577-9472-4401-b61a-1cc678c932f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "310279f5-ae5c-461d-9e95-86ae8cc8bbec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64cee1ea-b1f8-43eb-845d-489758f86823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b40efe-f5a5-4dca-9442-cd83e987a158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b902f098-93a8-46a0-b7ee-a1422db523c2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f078df-49e8-4357-8048-fa7eb1e3bfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd22e08e-9788-451f-8d4e-4169c14c4115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c6412a-929a-490f-935a-d6c037984435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9541398-e5d3-44ba-8e0d-d568a2830f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff39d6f-b945-45d3-9238-51f65132beec",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b1ad1b-ea62-41d7-b3f1-fdaf288a1737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c292511b-20a0-43c8-9d99-13a0ea8dcfbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc9b3cf-a2a9-493c-8f6a-b1f8a18f7a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5756e027-63b0-41be-b52e-93d1f1a59b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7517a79-7da7-46f2-9969-91c85acb2bc4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7566bbe1-f94b-4a7f-8550-e9411d866787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c93164-336a-47ed-a787-d61f32dd6157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b75086f-533b-460f-8074-c992279be27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb9cb581-fdc3-4c93-8304-02f470c18470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6da1a8-2e36-4227-9c67-f02e0cf2a86e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829eefe4-7528-4820-91ff-41aae1fd67da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ad48c0-4cb2-45de-8490-c9e4330a4084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212036bf-6e23-4b98-94d2-a83fb2997c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5b19f6f-6a47-456c-95de-abb760a52867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5feaf058-3014-416a-825f-5b40d87a5b37",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "744747c2-b417-4449-8b8d-1cf583096005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "839deb43-ac92-4a6c-b340-721e7fe52ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222a0a44-44a8-45ec-8c52-d7d28a8dd054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2dc3869-2158-4120-b231-4da12721bb39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3e139b-e2e9-42dc-8eb5-a16a3e29e25c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e39e6b-72dc-4a1f-aa94-04872134aaa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b16d93-1790-41ff-b8dc-5a4fc921f053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6723af6c-014a-4e6f-908b-c09f684161d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c54e8ee-d54b-476f-ad1c-fc1e6bb9bb8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4341f703-a5f1-4a17-a0d3-2a89a3d97c30",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90be3758-60cc-4017-98fa-29f3cec65abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "140ffd8a-eae0-43d2-9f5e-bf0f5abc17ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b98a1e-1216-4015-86b7-16da5bfde24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fee35357-00a6-478e-a95e-f6147dcab7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94b073c-711b-4e97-8129-9ab2181fe31d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05c5139-3a26-4b2a-90a9-cfa56b0c4ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32684681-3c84-43e6-8ab5-a2965dd6701f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6265aadc-65c8-4ace-93be-71707a5a940a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7f7e9e94-9461-494c-b44d-83d8cd0b546e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe29e1e-4020-48cb-ae34-50a533038717",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d11c34-9b57-44cc-9fb1-fb375b513333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36347831-6a61-4e60-b011-77253b025299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa4d4e9-f3a8-4176-b118-280e929e4609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b7808d1d-e0cd-401b-96ae-4040f42c7a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e40fa7-53c5-4148-bd31-575fee2c80b3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e774d244-676c-4019-a7b4-1fe06f27a94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59250ffa-835d-423c-ab8f-7737906ba5b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c643d9-11c5-49ed-9d61-8c2149a26a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca624ecc-6c19-4cbb-9e96-34b2d1b07c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906ac4dd-6067-4de7-a727-4cd6055c5511",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4da856-b22f-4a93-85e6-9455eaf53904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e838a78e-d19a-4984-aaa5-9ff4fbf40ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d067749-60e1-4507-bb52-dd9c3f00a8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "72a76fe7-c551-451f-ad7c-571c0531267f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c105b571-61a1-4c2a-a3bb-343ca3a5e590",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70327518-518a-4072-a6b4-38dcc4b5d486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ae0922-740c-45f9-bc95-7df2416ed9c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa828de-2a91-44de-816f-c6de0d77a518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7491a9c7-3639-4e60-9184-735a0cf09237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7849b6da-02ec-4d26-bf9f-be66d1e143e5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbee8b2b-f0a0-4183-b002-022fa4edf78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa01ffa-2902-4805-b6f1-78b843ba1fb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dbfd1aa-5b92-4575-a61a-d7c46f3728c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "25437d1a-8700-408c-b55a-e108d4491c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5aa0ac8-29cf-4f97-be62-17eab4b1ad21",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8cfd93-9a78-46c4-a96d-a17d5b7033b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8feec1a0-752b-4a58-a8a7-d01228483f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b28adc-2804-4908-a979-415f0c93e88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b38d724-cbf2-43de-9340-82eeca270034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd83e4e-593f-495f-8dc5-075577c57574",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4193cb-58b0-462d-98e8-659df5631716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92a52dc-91ef-45cc-a25d-4f7444761aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1106991a-7abe-48a1-9cfd-a804affcc8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "645c66a5-a099-42c4-9576-1dd7f46202b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aacade7d-b391-47d8-b8a8-f06ae95fa0a9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee522ac-2bf1-4449-be09-3efc18c33acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "209e4705-1110-4c87-9ba0-79be03c637e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc404386-848b-44b3-a6b4-15e4238de532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dab7ba9d-c57b-4209-8ff1-0db1d22425af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09071382-7fdf-452e-aa50-a2cbcf666e0c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f449d4c2-e5b8-4cee-8e16-7d358e7711d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91425e3c-96d9-4633-b11a-15f833be6ad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea2592b-9715-4a34-a733-381a69aa8872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0bbbf7a-4e42-4587-8bd5-ae581440d6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803de55b-4e14-4b93-be78-c5c2d84d93f6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c941f73d-e203-41d4-ab07-954348021909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa14e2b5-8eeb-4618-b23b-0bb782860b03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168e1f06-cb70-4fa8-8546-d1dacae37e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05fcd991-c765-4879-86ab-d65dc852120e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bd7a18-845b-4218-94b2-1fe29754cab7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "299ae176-9dd2-4f9c-a3b7-6d7e5b485f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "004c4d00-f6be-4297-92ce-c418061166d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b35f34-9a26-44ee-b0e4-b96db75a07cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf5e7f15-69a8-48cb-bddd-24b9b3e11e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9471e17-bfe0-4d3e-9429-2a5ae9bc8e70",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ec000d-be96-4313-8bce-80854a23aba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32e39a3b-6383-494b-9f5c-1e1f06bc9841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a21e464-16a1-46fb-93a6-8d15278f10b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d93b138c-ebb6-4a14-80bc-24594461dd30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a3c466-ea66-4575-a2ae-9065f6256664",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e9e9f6-da2f-4a75-8789-b94e3e4d469c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1152767-0a23-4b56-bdd1-593bef5c52e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f16e08-b0cd-43c9-826b-e3613b883707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb4a0b53-1da4-4fa9-9537-175529fd5bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256eaa58-c8dd-4f81-b8ef-183a0346a3f2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f265b2-bedf-46fb-ad75-4e1a27fac7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b0bd92-8928-4c27-be19-f516218574fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2450bb5-023f-4c3f-a0c9-eebf885bd565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07914127-938a-49f7-bbd3-208c9792f26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e204b130-ed87-4025-abd0-4650fab42be5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c9c21c-ea29-4a17-bd76-725c87a45def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e7a40d-67ec-4482-901d-74239abd78d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdad592-2c77-4c91-98c6-001e078757c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c7f338a-8fdd-40c8-9293-6a5cfa3fd437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da39aeea-333e-409b-96ae-9579ae3ae0f1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e5e73d-a914-4a3e-bcc0-1268e4a34d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1a2a921-b914-48c0-85a8-d3fca5d3c4b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83f027c-c113-4e30-9499-fac4e75483ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee8094d4-2a3e-4c28-8602-0a23f7ab90f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb50664-2ef6-4260-96b6-46e48bc4329f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb89055-393f-4f1a-abd6-ba382651188d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9fe877e-313f-4016-ac95-ef0353a16ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1a7dc1-c07c-42b5-a66e-68b072a4cfed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf81d2c-f72d-4867-b7e4-5c88c3986f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08008b6a-34c0-477f-83bb-85e77f416586",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec8ef2b-d43c-4a1e-848b-921c1e69e3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7518e840-5df7-4234-8fd7-a86d9a75f946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c6b188-7515-42b3-8b35-b8a2b62a0e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0257a791-e87c-4d9e-9901-6554f445a9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828e1070-942a-4297-8804-a88aeb080ed0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffef11b1-cf96-491a-8318-0c9c258adee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2055bd3-1b2f-4abd-994b-bb4b1ddf4603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef3fb94-cb80-4ded-b764-036df4191ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45d8a165-97c9-4933-a29a-2bf85a3225ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50f7229-3785-41fe-a2a4-143fee203dc6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "212f3faf-630f-419d-a143-d7508debec82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "747556ab-037a-48f0-8d54-a5cee0ffba17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a71b13-6bfc-40fb-b18c-033243d825c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a463581-3f9c-40d9-b420-a30c0396a49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07551e49-4af4-4568-a68f-5e09f8f28d35",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6806de2a-0cfc-4112-a30e-120a10a13a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291bf62c-ff5c-47f7-a59a-3a88b3f6944e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fba5ed-5fe7-4f53-b79c-8ec023dcb4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d6a88dc-e3cb-4449-8cc9-6643ea07bf0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a3e41bf-7a27-4071-b355-8fa6923b4b79",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "419bb2f8-8462-46cd-8229-314f90b8d7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c1541f3-e1c7-404d-a345-2bea42318c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44b3a5e-a917-4731-8acc-5e8aed5ffbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffa897bd-ed89-442c-a945-c931c27e209d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95ab9fa-51bc-4ce5-819a-e0fc3f6d97aa",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276e25a7-adc8-4c54-8c1d-474571b1a49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4f9714a-4513-4349-bd11-2cb7c7faaf36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad37f116-a94b-4731-9071-51d5772a7015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "161a813e-5f30-4ed9-a75a-67e217ae9e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d0412a-1099-4951-a31a-66f48f7830e1",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41530f2c-491c-4c59-9e38-ab75646a72c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e14949-8ddd-43c7-acc7-96bf6ead6851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd773915-7446-4d29-9e8c-53922be78247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a30317a-daed-42cd-8429-b9746f324890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4454cc3-7124-4ec6-8a45-60e397aa2e34",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2c54ae-2506-43c3-a7c6-d6dab3db0c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "888d7758-d51d-4de1-8a3b-31ea04fb7a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3dd6086-3e40-49c6-8e54-4e2c3cd1d919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "934d13b8-612d-4e21-a2a3-497759ac71a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39e6b2b-4d4e-4cdb-af60-5bbb8f035b8d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17c8637-c818-4bd0-af50-72f477d284a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d217393-200e-4796-9aae-ba88863226fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf88c27-0802-4714-ae52-da2842de2780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43901d3b-d70a-448b-a424-a6b6f9927d75"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ca534f30-916e-49d5-8842-03ce1201c71e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cf94cb3b-e182-4d11-9de5-09720e0cad17",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc2f68d-a54c-4a8c-9dc7-0565899a6ee4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "62d34905-50b6-450f-aae1-ed84d49940b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e08736-b1a1-4cd9-b5f1-2a9b55c89501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3026e16d-3776-40ee-b8de-4019ef664062"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d04e0ed-3c7f-4302-a944-471ad9a74f6b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "936c1487-33b7-46c2-a3b0-09d4a3f66327"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01bf46af-ddb0-47b3-a295-813ee43df47f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "529adf7f-a97e-42d9-acac-73cff5b46669"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ee16ecc-ae0d-4efe-bdac-54952e672ff1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "706d7d54-3f2f-4955-8f4f-e126ff5ca4ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8bc7c646-3cc4-4de9-8b9a-cec2809503d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a07dda74-dc76-4e64-a45b-c98fb61e6892"
            }
          }
        ]
      },
      {
        "id": "dbf02b1e-2e9c-4d86-ab6c-b1ec0b304918",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ffde1120-890e-44e0-aeb8-cc8560e2b293",
            "name": "Negative Testing",
            "item": [
              {
                "id": "93ce2652-63d0-4d4b-a33f-401eb35956c7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "669f21ec-fcec-475b-b05e-fb03f24051bc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e855bbac-39e8-42f8-8e79-f6bcce621fc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "751e6171-31cb-4302-871d-27d9ffe28138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a632b71-2aec-4a10-9962-b23342c9be22",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa417567-5880-4206-b349-fb80bfb8fd2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4edbf632-9e63-40ab-9590-9a239ea1f9fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2dfa319-ee06-4bd0-baf3-fec52b019ffe",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c0f797-575b-4d7a-b1a0-6873bfc89ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba1493f-b10a-4a73-8f94-7902cd00c53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136d8ce9-14f6-47fa-a2bc-a33f93232041",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e87e565-e190-4f4a-ab15-d2ad663101cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b0c966-1801-41f2-b0c9-7a8ae1c85e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e244d860-12ed-4f57-b204-45f87513bf49",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "065fa4e5-a085-4678-a009-bbbc51d8f7ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff209f3e-8207-474d-90ec-733241aa80ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e66b77-60e5-49a6-8bf8-39798d726528",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44016b65-1882-4f49-a1db-05a4ecbe6bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4572d595-d6bc-4539-9a85-f1fb29b32bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af42c65b-de09-498e-9bd8-05a35bfc1478",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbd53b3-96ad-4d0b-a088-29dec37aef97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c217de-cf28-4123-93ef-0ada0d0c056e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c35660a-d2b9-488a-a67b-d9230a519371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d45638f-f6cc-44e9-91c6-adbe9af32379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4456450-9ce4-4bc5-acab-e94b7f989910",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddecdb72-ab89-4cdf-889a-fe6b743490d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5c8ec9f-091c-4f79-9fd4-e2886c309ec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee4e9396-4b35-4278-a932-18cf81787a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f5d4e8-27eb-49fc-b9a1-c9f41411bce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23231f53-c1b3-4746-9773-49d96a509d9c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51494614-81a2-4e3c-80bd-9c92b3480c76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce833531-f656-42f4-9deb-40b78eee1eed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae4f129-94a9-42c7-847f-9cb5fd75c61f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef7c58e-2c3d-42ac-909b-c58b5eacc2d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d68be7-98b4-46e7-9df9-a0584591d0db",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc41375b-eecd-4d9a-bb93-7919e9e2a62a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45eda38f-b46d-43a1-ada8-5e8bc3d35bd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8571710b-942f-49a6-b80f-151cb92c979d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba5887de-4907-450b-86e8-5c8f63a381ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2f4ee7-dda5-4219-96b1-4ef1d5691403",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fc11ae-43e0-4459-b4f0-96ba7f7415af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247db2a5-7ee9-4add-8c16-3b5c1b6411c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69acad4f-fa96-4cc5-9c65-3623b6e701b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b4a109-1fd6-4b46-889e-f9f21ab37f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7bed15-a1c0-4b9f-aa06-e10284a95622",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b29ee5-2c86-49ed-919d-4d250e26ad3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfddb433-c807-448b-84c2-ada004dea399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8119d3-c9ea-40ef-8302-7a6966d55b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e5f5ff5-e73d-4e0d-98d6-2b12e5d07c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbef5d53-ae60-46ba-a64e-e23b59db0ced",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af98c3d7-7b85-43a7-852b-76dde706e963",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8ebab0a-b5fd-4a55-ac43-ded1e6cb1d49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64406e1d-c0d8-4a2c-9634-a40a012d2547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e52518fe-a36a-48f9-9927-ff4d7a5d378c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e77ef6c-845f-4ec2-8963-a3820553c129",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9fa4f2-f31e-4db5-8df9-8d767c79be50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eee3ca9-2232-4b43-8358-c5ee442def82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0f70a2-a0d0-4b62-a3ab-e4dec03db38e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31885967-529c-425a-a3d5-300360c550db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4086c8-07fb-426b-872d-4df1b9cd9859",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b708928-2d51-41d5-8141-3221f2a674f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0ea2b7d-96f8-4db2-a450-2857adf1bff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a3cf3b-8b41-4a3a-a7f8-cc21ea927cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "798770e7-e48d-4750-a506-9f2b13b351d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1474aa47-8a85-4e7a-abbb-27092f0af6b5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d752390f-d130-48f8-b93c-a22b7caa6aac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d12c8c15-a357-437b-8f5b-b35b5e5f43da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67706ac5-6e04-4ff6-a1e2-3532322912a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e22ca49-23fd-4554-8126-2216723f9ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b13327-bba6-4474-b40e-41014b08357b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59f8cfe-2f82-4c43-8551-f0cb8f530a51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd8b4540-33cb-4431-a4b5-f239ebfb050c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bcde2e-fa04-40fa-80d5-f1da4fb8f39c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4dc4a24-5031-403b-b5a8-8d5a3aa77268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb853e1-cbaf-4b3e-ac2d-26e387a3fd5a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910a7b68-2335-492b-9ff6-b85e7c450bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4215777c-b7ba-43b6-b60c-3f1da0151be5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd31d2f-a12a-4b85-8724-01d8df32f280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c635752-efb7-4380-9f88-bbdb3733ad96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6349d5f-b866-425f-a554-cb74d2f7ef4f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c873b0d4-5f21-4b8c-9269-db3379d1c7d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a42ecbd-ed95-4e14-b20f-9a5dc1736678"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5825c85-dd3d-486a-bb40-c4d7e6400f7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa065ac1-fcd3-4835-9eea-5d2f5ac6d0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f25673-b3b3-4650-8f74-551b2f3284cc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a1c582-c19d-494e-bdd0-86fa1dd20eb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3ca5563-1273-45c0-9d53-a9486f5f4048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9b07a4-8dce-4a88-bcd3-002c207d1b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8bf1f7b-48f6-4215-b62e-f83b92a62e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade8217d-e1f7-4847-a602-ca26bbc5dca0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf1670d-4b86-4471-949d-9b0856f1ece9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc44ead-bc4a-4e0f-9025-9c86c88976d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d584739f-48bf-44e4-ab85-775d86b74722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "315d7ec3-3867-4c5b-a62d-b784fc1bbffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4668c00a-6e17-457b-84cc-ef59859919ad",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59157155-bbfe-4399-9624-8306757a63ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1503c7e8-a2d2-4a8a-8027-75c224c9c52a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78d8042-c253-49e7-a0b2-0ff1357078da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a5de66-275f-4e0f-be3c-25d1118c2a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347a6e56-df70-472f-b967-aea9961ccc9c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5b74a0-94ef-4313-abae-20fa7a9b012f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1861db1-93ec-4fd3-892e-7008762c23f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9396cd4-de35-4350-9fbe-6a75a10f4e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f5b6fa4-3ec5-4cfd-aa77-4c8a9e658514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "852589d3-211b-45f3-9116-f0b707ed31c2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c44a6a-a4c0-4300-a845-8f8a0debb411",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc1124ed-5fed-4ee9-9369-454e5d42c22a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "009e2ea9-7373-462c-94aa-89f939cbd930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebab6ee8-a739-4ca0-9f24-ccba4f88b5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa95d49e-7fce-45b3-907e-874fdc332243",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b5c6af-f006-4a83-8863-3db888e9d299",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "749169c4-e59b-48b9-9463-0b22d924c34c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f70b91a-cfbf-42ac-a660-62ce0a08ca8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2919999-ff46-46d7-9795-84cadb35ae88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7b74a3-8d24-45c0-89a5-8477b22dc301",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2039ee-8c24-4473-afdc-0a6ff6dd8750",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c383b4b-ee58-413f-876d-a0157fae4d41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4ff964-0f56-48e0-bee6-0398599da712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d799a8e3-883b-40a1-9900-2fb1ad58237a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36872e57-773a-4364-8c08-0952ce34c253",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a51889-6387-4f35-b5b4-52d2fc3cf14b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b93ad14d-8437-41f7-aa94-85258f57b918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1350fd2a-08a6-4f1e-8e5e-1a8015794b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4919301e-916e-44ae-9d23-13c38a424d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcbde75b-1f4e-416c-ae73-e1b235f8f30d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8fbf52-e5da-44cd-9394-3724ebb1cd39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccfc3e85-6e8a-43f4-9ec0-e313a8af8f22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c0694b-8066-4e8b-aee6-73d42f1f38c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21440cb7-7c0d-481e-9ca9-7d888d828c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72245c2-75d7-4ec3-a2fb-d07d25a66aa2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f73aea-10b1-4172-b634-1e495fdffb45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d234dd42-e964-478f-9750-fb006c1f734a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b09a0e-bb44-4f72-8194-c24b2f90b690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dccbd79-42f6-416e-a5a9-4a338e03dc1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8178ed7-29ea-425b-8757-7e4f5cfe742c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4917774f-8874-4927-a34b-64b061a09d28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e9edca4-bdfe-4825-bc96-f30f1a2683b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00aa63ad-4c2d-47d9-b1c1-9ffed25c86f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "676be599-ad67-4b5f-bb42-abfd656657c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340686d2-54e0-42f0-911f-94bafea6cbd4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3779ef6b-70c7-4904-abea-3c18a79b661c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "728bf69f-3cb0-4c10-a169-8f736ac10640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b505d07-4989-42e4-9673-46b864aeecd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df3f0ee3-0b05-42c9-b3de-dd8627ecebbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce18d94-292f-4bb1-a663-5b0369c6f157",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c981eab-2fd4-4148-a6c0-49845c76164e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31e5f93c-bb4b-467c-b816-f0f9660f16f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "675b4aa6-6d17-4e4f-a6e0-43799d36dc92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c3a7b4-c800-4681-baa6-cf6e001af64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2742e7-0b77-416b-99b6-bc1c88f90461",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6cc073-fb2d-4463-9f8e-000562d96d8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "578c9a75-ec2b-4486-9c96-1dbcde9c4e55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a555cb4-1177-4e66-b715-004ac2f1301b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86fa4a7c-b6b2-4a5d-b8e1-9e6ff1d2438a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0698082f-48a4-4280-93c8-855b0b1102d3",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652f1a0a-d2fe-44b6-8456-68c5ea3d4dd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db96a875-690b-483b-b218-158bba8dfbdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "616e120e-4f76-48c4-b41d-e8042cd9f934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1261537-ca1b-432a-9cf3-a324d231a597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c285d7-ed47-4e00-9b4c-bf25c8fa4c47",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300b47b4-addd-437f-ae26-b419856dee7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "938f87ed-65f9-4b1c-b51f-8e8ff1851afa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38cddc1-5a34-499d-877d-e6ca2df93adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feddf5d7-3bc4-4e47-874c-d2605b9b2414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940ccbf7-7612-4156-aefe-32f81a73eacd",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5052bc3c-c3da-43b5-b85f-1ae70217a42f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3988d72b-a769-48ef-b78a-4f760231216e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f917456a-2c03-4993-9922-bdf756926938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aaed383-6f4c-4741-98d1-00b6fa14d71b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d25eac-e0d7-47f0-a3bd-094d5e988f62",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed54485-3449-485c-8e55-daa71d61b9fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ed10755-3ba9-4cb6-ad8e-280c1cad8bb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e26e18-7b96-4fb9-8e4d-7ebec3823137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29711088-72b1-4fd6-b276-02df5645fc78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d325205c-3d58-42fc-af76-f1954686c023",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0610446-6de2-41af-8404-3b85eca76a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "729ab2c5-16c2-4ff9-95e6-98701da60db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e53a37d-f9cc-4bea-9d23-19f7916c94b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f924c5-5396-4356-834c-f28753e1264c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c80dd8-c547-4101-91f0-80c1828d2df9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a91c10-1d09-44eb-939e-48c2d2f1f431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cc50e55-8cfc-456a-b5e0-331ed1a6db6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad35145e-0af0-4de0-829b-2de2e113c0a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d167b79-d806-4457-9601-c191f9770178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb57beb-590c-49ad-b04c-921c37832123",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc4271c-36f4-406b-bc87-823fddab1a6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0ca674-8918-4bb3-a10b-c5d9eb904bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e204e0-5be8-403d-9b3a-529f7270a87a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4cb6345-1680-4b98-a4a6-cbbbe292fc4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a23058-6d1b-4ed5-aa8d-196282b6f252",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d472ad-fa86-40c5-8385-b9dda4eb79b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b631da5-5e79-4a93-9832-e3cd3c8d7ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc39baf-cd3e-4e9f-b7dc-bc77365098e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d16a440-d4f3-481d-a271-80b9e1891cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a95c77-6afe-42a5-b35f-ba11e2e2bb85",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ae03f1-7490-4287-a1a3-4f12ab4cc45a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad25e5d-0e4f-4870-a644-bb07c7217d4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef92a2c7-eae2-4046-9a67-fc573a8d157f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5cd12da-38fc-4da9-83c2-a4808f0116da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa949eba-3ba9-41bf-8754-7f43fe839ecc",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6cf9ce-0f93-4412-9266-3c103e3ad8e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6939d3dd-1aa0-42c5-a1a2-22f393bc77d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66bce0c4-ad5a-4b93-92ee-df65a143ace9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12af73e4-dcfa-4cb5-8386-810ff1e1b0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9437f2-f80c-4769-af75-1d7d5301b1d5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f374f0a-8d1e-4004-85a1-5d1e4bc56068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1a1872-b1a5-4a06-87cb-37e221ffb37b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c30d7b-8d4e-497f-bebe-3b9bf459332c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa6bd6e6-ecf6-4760-b66e-7490f029076c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8193f2-b794-4460-971b-a6285f413df5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969fb0b8-4523-4b9b-b579-f36034ded2db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c9bee4-7cb6-4696-98b0-d3bcc3ba7e73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6045c048-4a28-4dcf-b7ff-5aa792131d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b874fd6-088d-42aa-a49c-65f26209b9fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a682eb4-0548-4cbb-8b61-635a6b65a552",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd06f071-eb8f-4456-81df-045d1635d004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff735eeb-f021-403c-98f4-a76039598b0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af7e6cf-d4d9-4871-b674-7fd748449fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20d50fcd-bfc5-45fb-ac5c-d3533e02690e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e308e1-e0d4-4967-be90-ecd6287a4fdc",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab6a9c2-89ab-41fa-bc56-1af5016c3152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f18ac3c-ef89-43e2-895d-bb3853a4317f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2fab265-0656-4fcf-801a-22770bbc72d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce763cf0-e0dd-4f62-9478-6841b93b11df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1559ef-6065-4e61-aab2-5d0de62142d0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac59ba0-336a-4d4f-838c-5642f30231af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c30017-a9df-495f-8c90-a9c30f495528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a950c00b-d350-4140-b0ca-1e43fc5e1c71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b58203-740a-4afc-be29-832c5dc03ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c679b3a-3c8c-42bf-9bc6-ec3f880874eb",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15598bf7-9375-426d-926c-559397841d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55683386-17ba-4d22-bf4c-79d8fa16f983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59bee3b3-e1fa-4cd1-b484-6eded8bbfd01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1baccb8c-9e27-4276-9fc9-c567f4d12609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cac94da-984b-4a25-8a44-2004efb5cb5b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205d7f96-2d35-4165-91bf-298f8bac896c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a40a95e2-bd03-484c-9b88-71b7966efb4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35671be-6361-4338-a35c-65a879ead21b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb46570-b38d-4705-bef1-262812a8fe54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a3f733-15e2-4dad-9ac8-ef3410b9e1ce",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ee1bfc-5daa-4bc8-b43d-f2c556d6520c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "544051e2-e713-4037-a4e8-9a969479b07f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0072da-00a6-4c4a-b527-c55d21dff24b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8bb4c40-05cf-49cc-a9ce-d4722cbbb431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328ac94f-d689-403c-ab2c-81641d47bb8b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8c324f-2d90-436c-ade3-a347d1934b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53bb9ea4-107c-42cd-bc27-903ed7ec75bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a59fae-19c4-45e1-b8e0-007d8fd2ecc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d373e509-1238-472f-84a2-d31fb19cb7fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd4e228-a9ed-4b21-983e-eb30c310866b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39387d32-d9fd-467c-883b-267cb5e08bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90b126df-aeb3-4741-b63e-aeaa423d9db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90866c09-4a81-4c99-94f1-04c23d90bbd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "760535bf-5ab7-4624-a8ef-b9b5693eb69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fbb2ce-f1d3-4d57-bc58-d460a8889303",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f302147d-f2e7-4046-afb2-059666d1baa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92af0747-50f0-4467-87e2-911334a08439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2c9d5f-f72b-422c-afbe-565c6cca10db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd0b5605-dd83-4015-8db7-0b94df2ddc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "003010ca-5575-4564-8fc7-77b21fdb297d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa8a5a0d-a073-4e84-abf0-e38d05017253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce17a2d1-0bf9-4ea9-9d0f-ff9362943116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "443c84cb-78ce-4e32-83b3-98c7d637d274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed4ff59-3a43-4a36-8650-b18db0ab8cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c2f7ae-ca51-4e6f-98f0-cb0f27e553f3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf26b4f8-1b76-4ffd-965e-a6f8a18aebe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c164cbed-ab9a-4a80-bc02-358688655255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b19237-0ae1-4334-8345-e288f9434a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e71219d-f292-48c6-862d-b34cfef5008c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900a079b-e9fd-4732-91da-6467fb1a5048",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd67d65b-f2d5-4145-8ad2-ad17c4a23001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d96511b-8002-47bb-b0ab-d43e0e9a933f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "868bb30f-048e-421b-b62a-7697615fc996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691f5e3d-77df-4da0-bfc4-f5b4d36348b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac4610d-d744-4106-a188-088ba92aa393",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698a9c4f-a413-4c3e-9c21-f8da419b558a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93a191a6-a40c-445a-a470-c70bcc5a14fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a3bc24-8da5-4e6c-bfbc-1ca00f5ea430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d616891a-b18f-4c77-a4e3-4afca1dd9ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370ab2e7-8f4a-4311-8ce9-d9ed63f7045a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51205101-275e-4598-8764-40dbf71d69ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc58ba9f-504b-4646-a26b-dfda105f0b88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03662b42-ae47-4292-bf74-246f4a2b18c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2216bb4f-8a65-4f47-aa0f-5340558c1aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd9e541-7cba-496f-8d97-680ea58492f9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d251552-883f-4058-b8dd-3386c7be0f66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "314c447b-27ba-4a0e-b520-aafa7db359fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e511ee8a-ae60-49a2-a1ee-178dfc12b831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c91187-1ec6-45e9-bbd0-3a80bc0cc5e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d1fa4a-67c9-4628-8cc2-75f9f9eed465",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a5ae91-4c2b-43dc-b609-624178abddad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec049a4a-d03d-4d49-ad31-8736c70e5b6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d21f2f-305d-4d30-930e-6a62f8afc7c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86d5a3bc-b628-4007-afc0-672d5b17acdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc0f334-1747-4f3e-a741-d09f30fbf7cd",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e546be67-1c68-4895-92d5-d8d1e5e44e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8336e5ae-a6fa-4bfc-95fe-6473915b6e91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7473ba07-3830-4e26-a307-dada09033f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be493b1-8fb8-4810-8295-9e1a38640846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d7df24-1dbc-4bd4-a356-ae2a9a0429cf",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd6d0df7-5bd4-4a19-b4de-53d880269157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f73dfe4-b422-470a-8d37-7000a10e3cb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85cfc76-1816-412f-8d66-2c0fe9b2ffc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343737af-ecb8-468f-80e4-b44d21653199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8875034d-bbb4-4c7f-a6ef-033ef30e11be",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea519e09-e1ec-48a9-b940-4a4d1527f18b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a2ee64f-9f54-4337-a19f-7a82636f1733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "174a384a-b6e7-4612-a2f8-3d5a329eaebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838519ed-0da9-41ec-8fa1-1de94bff7f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656d8af3-9efc-429e-94a2-360c425b817d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f1efae-73a6-4f59-a84a-87c6c81913e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bec6eed-83d6-4298-b9f0-6bb6da6e830d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c222e854-e5da-4504-b7e0-0bb6aeeceac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c923014c-5439-4d4c-a42f-89f55d9751a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e58d2e-115e-4465-9229-f9d3bcc27747",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77232809-b8ab-4f8b-aff5-c1a744b9354b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e62f599f-73bd-41c5-adc4-26001a323e74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b385cf-7f12-4449-bbff-4d838af1df24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e8ba10e-6571-41c7-84bf-3a5d19e2b18f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746728a2-c60b-4a9c-9503-27930cd53675",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0016fff4-c34a-460d-9ab9-7a2f6cf4439f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a0c45d5-6ec3-45c5-b2f9-878593207ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18794cf-5d3d-4132-b8e0-f9cf99700ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402a5a50-795f-42f6-86f3-6def79a98f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1ddfca-6731-4e97-b64b-9d1a6bf3dbc8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8ed273-2190-4315-bba7-e99f590320f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c18dc23-2fbd-4a09-8421-eebdcaf92ac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d99d5e-76f7-4c19-8418-0e88732986bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2274e6e3-3a52-4302-8663-7953e497c890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4deb8f-8316-471f-aa5a-2288e42fa136",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3af339c-3bad-4380-a5a3-227dd1ab1297",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6619a47-d53b-4634-bbcc-28dbe3ee16fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82e49e6-3dc2-4f8d-b075-c2aad8f7ccfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c48ef0d4-f42d-416f-8f0a-97adc08c68d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca708ba2-dd4a-4479-9a88-e0563fb79531",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6291040-fdc9-4b7d-8e8e-0cdc4b6a37ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0da38de0-eb4f-48a1-bd85-88933c67c3b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff97700-d0de-4e32-81ec-0c463708e1bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "506585b7-b929-49bc-845c-0fc1fde06466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22344675-4428-48b2-bafb-0aa4438a3f03",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9308be-9830-42f9-8414-07fc62d1f08b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0a79e2c-912c-4658-ad36-2b22d1f9123c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04951f92-5041-4c60-9f54-ad847aa4ebef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3e18b2a-8262-49ea-b5aa-3dcdaff45336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c97e48-9be8-4e1f-b1d2-18a9d387ddae",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc4353e-fac2-4cff-bafd-496f243712fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "feba0276-4410-473e-b62d-4e808bf98171"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "782b9f44-471e-4acd-8fc6-f7b2b988159c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac2c764-7f19-4c11-bbd3-43d2f6c2ba00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f01e256-9834-4f10-a223-ebd5f7abeaa2",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0081731c-6502-45a3-baab-bd115f7a707e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db266443-a553-4bf4-84c9-2673936e58c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "618a3aed-531a-47ce-a041-5c5ef48c2c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282f0302-5094-4af6-8a71-56d9802f6254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62229a56-2d59-4f70-86f7-fc3fdb77e0f5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dccb2f6-0842-4ccf-be97-e3c360f5d639",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f068904-aaaf-49fb-9bde-d868b3debd63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3675675c-fd29-4328-b070-f7eaf8208aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4223b13d-2a91-4691-bf75-84828da10462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e77aae3-06bb-4e0a-9b04-814854660498",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a0bd92-ac54-4e0a-a386-2bad5341b3e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc914ef3-f347-41c7-8263-524d8b960356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df40e03-87f8-4fe0-9e5e-594480cc3560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "230ae273-57dd-4766-8fbf-219c9300cade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5409ee81-6899-440e-94bb-85fd6c22bbde",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ee5eea-074b-40ec-b12e-aa15bcf2891e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4846364e-4504-419a-955e-d63baaf53dc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a22a35-683d-4fe4-b450-5ee7c62da5cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cfa72a3-a11c-4df3-84e7-e97985e36329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4836f9ac-6427-421f-a542-6f660489dc57",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1af6a11-7a1b-4c36-8bc1-250fdb88f0b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c966230-7282-4662-a289-e36017eb4bf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "100f049f-4017-4fb2-9e6e-8a02ba2b9ca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151001f7-3f5e-4580-a774-abaf72b6c028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5144d45f-676a-4366-ab8b-816a7e5e993f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff3e221-2d50-44e8-82dd-655c24d6f517",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76f70992-c578-4f13-90cb-22b5c89dcceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "094551c6-2a7e-4152-ab78-9a2ee24518f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c67226c-c26d-40fb-8c9f-7ea09509ec9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2aa758-33b7-44a4-8dc5-3893e269784a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2525157-d5d7-4c7d-993a-2b4469e8cfd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9193c17-a471-4a65-b6d4-e5bf49205cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5bf39f-7f29-4de2-950c-ba36724299c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f281051-f691-478d-8758-92aee4f99145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7344b05-3535-44ee-9ffb-5a3e2b4fb835",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f915ca2-a08e-4028-9e36-7bf4b2082b66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "804eb1a5-ef6b-47a0-88a8-8dbf4a93ee40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1e4ee1-b241-401e-bef7-5b91062a1d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c25e7807-e79c-4b66-b18a-41c484a50b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f3aaa1e-f1ac-4835-b6e7-f74d355b2563",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02bdc68e-3a91-492e-8469-5d63555cccb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c96f917-5f95-403f-a0f1-4d8251c0e27e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3322e722-f672-4d95-88c0-1134937776fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b1b5fa4-28ef-44d8-8d7e-691803129b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfee6f4-c35a-40db-a627-d894fe7a2f80",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1626748d-348c-4d3b-bdfd-1568b4cdab6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5fe6aae-0577-4128-bfd5-5e5890896cdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6855d89-889e-454b-82fa-ca8fc8144ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e28fb47f-6522-49e0-809f-06ad8391b924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39aae0ca-c15c-4f7b-bc7a-d1de0251c652",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8577bf3a-ec2c-4c14-a9f4-62ce87465240",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb6d7bdb-659a-4884-bf4d-98949d58a3a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "964ed37e-baab-4169-ab9e-c3ee8386faa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c54d86f0-814c-489f-b410-8adc29e4a7af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d775e5a-34bf-4666-b4e9-100d31d119ae",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932711b3-a1aa-46c6-a4c8-361a61d8f7e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ba62ae4-cdc1-4033-936d-33e2357776f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70c1fa9-d3e4-4a87-81ec-6257c6e52811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d71ab25d-3b64-4060-91c7-3d7d8120bad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9fe797-06b2-48c4-928d-8d7c0906b302",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a034e61-19ae-4935-8f30-89231cce38ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a8d6de1-305e-464e-a719-7946ec0dc262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8669c58-74f5-4724-b82a-955d2b8279f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b5fdc47-b7ba-4113-a719-55f3fff1c2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067c90d4-e63e-405f-8f71-6cbcbb05fb29",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9705e4ff-9b51-4422-9b73-cc14e9f87d87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93a282ae-7f36-4e21-b694-7c7ec2b43549"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "763546d1-8150-4df2-90f0-70be68482d92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9079088-219b-4b57-9338-0ae497217773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa92da5e-f33b-427c-a93b-a15c530765c0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb786725-bf7d-46b7-8464-82a48e2c00ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c0eb3ff-5aae-4d16-8938-142dccd5de64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ec487e-8dab-4b15-a2a3-88e02a3eabb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d76d167c-08b4-44e8-9d5c-c1e57d05136a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59039494-138d-4d10-927d-f398821526c5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3696497-5f05-427e-b448-adcda2903114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9613895c-64f9-4f74-b58d-695fbce88aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02aa64c-5e70-4712-be36-e40d69edf390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3666f55c-0efe-42df-b917-b79d4113c9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "127c59c9-158f-4412-a547-ebf412ed44d9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44758401-7061-4fe0-b544-704caff8d2b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffcdc2da-291f-4694-978c-f341638305b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe33a6ac-82b8-4f15-9626-bb978de1c8e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12db4882-086f-4e12-8fab-d4ab995bface"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3098d211-79be-4a4f-a769-28e36719c988",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809c191c-dcde-4f43-b217-d2b7c2e838bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d54161f0-a987-4605-bd66-2723224271fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7c1385-e9f2-4ce0-be6f-f74f493dafe8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b65a91-6601-4fd3-8751-ca1d50b571be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f7f583-ce79-4477-ba03-fd8abcb7574b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe1b978-f509-4024-b9d6-affff4e06e31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3f002c2-d2de-4139-8363-5c31c874c508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05c9c8c-fe7e-45c3-9b27-b08833bf950a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82b1699b-38f7-4a0e-a979-b581c8e0b418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe8ba5a-8c58-462d-b1a4-eae6e2337f05",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572ff56c-8a4a-454c-860a-72d970d634ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee22c42c-c8c0-4d14-bf47-6b43d4d7832b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b425f5d-3502-4ec0-b911-1c4a29656752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "561a00f3-c05c-4ff1-918f-9652761c44ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c74dca-e855-4e93-b83e-20457cfcfd6f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33133f8-adb9-49f6-bb05-138bda4b28a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4b0a463-d0dc-4f78-a2d1-d35556274d0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09186b5-567c-432b-ad74-a2295b76168d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e821f0a6-2e8a-4a86-93de-728cc03c4ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da31888-8fb8-4a19-87b2-9be2dbc90607",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4393a1dc-99c9-43f5-a456-e0842a45d5de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00cc6ede-1bd3-41d3-b44a-88f89e4d9817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25adff0-883f-4359-8b46-47b4528baff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f02f953-1caa-4fea-9547-d190f2e14699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea817be-d24b-4303-9b39-ea6261fb56ae",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3400b7-64da-43de-96e4-89cacf7ea87f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ff8be4e-5d87-4674-8c34-2546f5fea809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d728b728-780c-4397-96e1-62260770d114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af11e25-0960-4b21-90e8-bd448bff789e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2783d382-e742-4726-b885-e649d96a606f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d50af8-025a-4875-8646-c9cd3a9dfbfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "117b5681-aea3-4afa-8681-700faa4ec428"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6254160-b444-4e60-aa7f-36387d1af81c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7134b83-1aad-4b3d-829a-48b91da41f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8bae83-da9a-4fb1-adab-9c8c67b9f418",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e21943-3c40-491d-9abd-53f9061280ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4f9fe92-68f2-4621-9622-eea332423bb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8030dee-8475-4fc6-9014-4ec945bf6bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82bcf331-37d0-4da0-ab66-aa86a406760a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce8d8614-1022-4a23-93f4-0ea34516b4e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "111c29d6-435a-457d-b065-7599e59fa87a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2db4924f-a580-41d4-90d2-468bdf142a07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "69c84bbd-f002-45a4-8b30-85b7da9137c2"
                    }
                  }
                ]
              },
              {
                "id": "a13f6483-bf49-43c2-962b-d15c7ed80998",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9fa55aee-71f1-47ab-9132-b7a8b63508ce",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e3e613-a215-41c9-aa56-ba192372ec3c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ede6fdc3-5a90-4c3d-8cfb-373174068b21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "442b86f4-0e63-4516-858d-d5889718d50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3c65f0c-d6d6-4a2b-97fa-bcef83487c42"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "969952b2-6da9-4380-905d-ac408736bb9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9594df7f-9798-4433-98c3-e85a6486d3d9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9274d12f-a983-4034-9777-6154ed18e80d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b69db79-fc40-4d84-835a-c92a669944c4"
                    }
                  }
                ]
              },
              {
                "id": "927fef2e-ad9c-45fd-a7e4-ccd0e9f84527",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "864c866a-bf95-491a-9e94-ab98ac819400",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537d0ac1-045d-4a85-bbaf-70674567d200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "02bef0b5-4b3a-47fd-83eb-c71d546b8198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce538802-2f63-4169-97b8-7b998f0e1ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "891cf8e1-3e59-4f51-985c-e76aa8c9f0c5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ac239517-1b7a-433e-9e4c-2831350a949d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d3ba0efe-a8d9-4922-bf07-b082dac2a92d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b41f604f-08c7-4e60-89d2-a3e4ab61248b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2c330240-8600-4764-b289-1ab57e25ba09"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6f95394-e648-467f-8147-7f7442dbf57c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "150594a0-14ef-44f3-893c-09e30ceeaa1a"
                    }
                  }
                ]
              },
              {
                "id": "f34a5724-b4a6-40bf-becf-03d2b7635983",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc2a27f4-6b8a-489d-b4bb-14759050159e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "397876c4-d634-4030-8115-60725f6f0b99"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "010800c9-153f-4e5b-a9b8-45566152ba82",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d83fe9a5-1893-45f4-a11d-b92f9b624724"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "958161c8-ce6e-4d2b-8a4d-4ee83ce3b12d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2390993f-cf7d-49b4-9493-e224ed19e796"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7bd6999-81a7-4369-a683-deba25250bc5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "34e9899c-7af7-4283-80d1-7c611f91f216"
            }
          }
        ]
      },
      {
        "id": "7bf6ebae-a8c9-497e-9477-736dbf507c3b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1082e125-4c22-4f08-a434-3663ca758ebf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61e95a0e-d0d8-4279-b17f-a28c4e6ea6f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b7887faf-7e77-43b6-bc55-2c208892316b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b35140-1eb2-4a5c-9798-d7a610fb2b7a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c5e8f66e-d6af-4d8e-9978-d3acab62216a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6f2bbb-ba1b-498d-9a5e-4a6c8eab8786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d43aae83-dfc7-48e0-a4e2-d5fb7b0bbde0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38e2ba01-59f8-46f7-b98e-69f6a3f130e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3904a87f-827b-45cd-b4a9-bcf3d343ee9d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "13c78da1-1306-4e82-a978-28e0febcb809",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7659f4ed-c9cb-4db8-b8cd-efefa0c9612e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3843dab-6d99-4670-9819-1ff4fea3ab48",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9b6eb75c-0f8b-4d87-87d9-ef0edea4b92f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2a656d9-2bc8-47da-a560-97ade6c862a2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26e7a78e-1aa9-4ec7-9911-e47002946e1b"
            }
          }
        ]
      },
      {
        "id": "e03fa994-4330-42b2-982f-ee53fc6423b7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ca3b4ffc-eccf-4280-a5e4-1c340f140c2a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab6a2c4d-6391-4685-8cfa-5422d5478605",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c47dcd20-3b52-4407-8509-86bb2a0753b2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985b90d1-a9e0-4ddc-bab2-8372c2836b3f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "179a3e11-1fa9-457a-92bb-38e5e217f8f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4a1966-d14d-47bc-9635-fc2207333d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "749c7917-4fa1-4138-aa0b-8d915e9994e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "473eb9d3-442a-4411-801a-31dcbe436641",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5338dbe-7b26-4d5b-ace2-f08f53c13ee4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b106e9dc-a3c6-413a-85a3-ea718f555fb3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c789d30a-c8dd-4cfc-a3b0-f97547f785c8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc1adbc8-4449-4431-812c-32514bea4b40",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f59851c9-e1f5-4e63-98e1-bbcbc21f56b6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b510ade4-44e0-4ad8-b8ef-dee409e7dcd2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cf2e540c-8916-4a2f-a688-2882ef7d97c4"
            }
          }
        ]
      },
      {
        "id": "4e2fed7e-542f-43db-8b5c-122b91523b83",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5d35dcea-58f7-4ee3-935d-089046b4e581",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c0bcf7e3-c319-4759-bb86-1f159c220a6d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ebe5fe2f-027e-4c8f-8e9f-ab057b6df01a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29469574-4e68-4819-a073-23a5304efc91",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "439d531e-bffa-4511-9440-52f57ea52b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7513da38-d987-498f-b00c-217e23f5a4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9985f2f1-7f60-4a29-b831-eccf9929bf1a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a773a7db-e2fc-43f1-bb34-ceb98c000cfb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55b61ae7-d708-4b39-8b04-e582573f44e2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc08cec4-52cc-45cd-bec3-7b3a6e935e69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f87a201-7316-4ab3-97e3-8a32ccda779d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb397a7f-1100-4598-9774-f310343f8884",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d78ee9c8-35f0-46e7-8c87-065a081e02ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b32d7432-b16b-4a2b-a3a7-64dfda21256d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55b12e56-8096-41be-8f29-eab6b34f4e01"
            }
          }
        ]
      },
      {
        "id": "da32ac00-6bce-441c-8fd1-033009fbfb2a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58c260dd-bf35-4c8c-890e-c695c46685ac",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51082d0d-6cab-4ca3-87ef-fcfb05a75efc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4a8129e3-1a63-4a8b-8634-c2a4f16fb1d5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5da232e0-28b0-456b-9cb1-43e1efd2e125",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56b5751a-dd9d-4086-aa9c-02dbb89fb37f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 226.88732394366207,
      "responseMin": 14,
      "responseMax": 6537,
      "responseSd": 716.837352626806,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1688345417865,
      "completed": 1688345493769
    },
    "executions": [
      {
        "id": "304cdc83-9775-4804-ae33-be3f67d35599",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ed884059-0a49-42c6-9089-45c638780808",
          "httpRequestId": "6b8b05dd-2776-487b-8bc9-d2128a2507ce"
        },
        "item": {
          "id": "304cdc83-9775-4804-ae33-be3f67d35599",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9810379b-8d53-405f-9381-494297283e01",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 0
        }
      },
      {
        "id": "322be303-6276-4017-b6e9-bad1775acd91",
        "cursor": {
          "ref": "e8067477-5e06-4a57-aacc-5b0924bcb4f5",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "80a2540b-a5c0-4533-ab47-dbd0f583c82d"
        },
        "item": {
          "id": "322be303-6276-4017-b6e9-bad1775acd91",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a502ad29-f664-4097-8eb0-b0a6ccd75720",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "e0a2ed4f-91d0-41e7-b487-2c2bc013b086",
        "cursor": {
          "ref": "923c449c-a68f-4a93-b143-4df7fa260257",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5d33dfbf-6564-451b-950f-e74770322d44"
        },
        "item": {
          "id": "e0a2ed4f-91d0-41e7-b487-2c2bc013b086",
          "name": "did_json"
        },
        "response": {
          "id": "ca53e77e-ca10-48d9-ad40-d0e2aac2f34e",
          "status": "OK",
          "code": 200,
          "responseTime": 562,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316226d2-71d3-4532-ba46-143d5f181d4f",
        "cursor": {
          "ref": "19b4abb9-ef72-4fed-985e-77ce6e510749",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2b1c802b-ee34-4aa5-8671-18fd80aa16c9"
        },
        "item": {
          "id": "316226d2-71d3-4532-ba46-143d5f181d4f",
          "name": "did:invalid"
        },
        "response": {
          "id": "fa89cae9-8964-4e03-8ec9-4e7d949b61b7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 839,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "316226d2-71d3-4532-ba46-143d5f181d4f",
        "cursor": {
          "ref": "19b4abb9-ef72-4fed-985e-77ce6e510749",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2b1c802b-ee34-4aa5-8671-18fd80aa16c9"
        },
        "item": {
          "id": "316226d2-71d3-4532-ba46-143d5f181d4f",
          "name": "did:invalid"
        },
        "response": {
          "id": "fa89cae9-8964-4e03-8ec9-4e7d949b61b7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 839,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b931a1fb-b50e-4e52-b11f-8d200d931ae1",
        "cursor": {
          "ref": "6543476f-50cb-48f8-87f9-b39fe44e35d1",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f4493c29-d09b-4d49-b570-54d5daf83d40"
        },
        "item": {
          "id": "b931a1fb-b50e-4e52-b11f-8d200d931ae1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "56183343-a533-48e4-ad85-840c032ef1a8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0baf39fd-16d1-4b72-835f-e6bb4c9803f9",
        "cursor": {
          "ref": "902e07a2-f43f-4f39-9f51-d588749696fd",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7af6db3c-b1fc-4a9f-8bf0-9f0b2a9cb368"
        },
        "item": {
          "id": "0baf39fd-16d1-4b72-835f-e6bb4c9803f9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "67b67c5d-cc27-4bc2-b917-d4790e730cab",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb1075e-2325-4de2-b8c4-60ba7cf3a3a0",
        "cursor": {
          "ref": "ca77f014-63c3-4d68-a1cc-16cc79119137",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e5f41815-5b2a-4b09-8fe2-3dea01493dd7"
        },
        "item": {
          "id": "fdb1075e-2325-4de2-b8c4-60ba7cf3a3a0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f71ad08b-0d7c-48e7-b70a-16f48103d10f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "906c7b49-f547-4c9e-998d-90a52c4ef2a8",
        "cursor": {
          "ref": "2a4a948f-7d0f-408c-bc93-2cc6d84cd732",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2e2d3a61-0691-4f29-a659-5d6dd225c611"
        },
        "item": {
          "id": "906c7b49-f547-4c9e-998d-90a52c4ef2a8",
          "name": "identifiers"
        },
        "response": {
          "id": "aef931b4-4d69-43d0-a576-baeb1e25aabf",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c13617e-f95d-4ae6-8d3b-df275e1823fe",
        "cursor": {
          "ref": "2ef8c7ea-dff4-43d5-9da5-958463be8fc4",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9365f50e-9186-47e1-a78b-778a936af76d"
        },
        "item": {
          "id": "8c13617e-f95d-4ae6-8d3b-df275e1823fe",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7c28df19-8c89-4f0c-9039-ba3c8c687b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfacdf22-8290-46ec-a5ca-e37d12f6524e",
        "cursor": {
          "ref": "fa1c6e08-1c74-4d46-91fb-ae05439a73fb",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f4acce16-8b8d-4d39-88cc-e0ef7b2587d9"
        },
        "item": {
          "id": "cfacdf22-8290-46ec-a5ca-e37d12f6524e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "85f823ee-a4ce-4a44-9967-88e5f8fa2466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e86e40-9ccb-4228-b881-c666b3825254",
        "cursor": {
          "ref": "d50ef799-e269-4d3e-923c-e54f43605c85",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bbe88fc8-1a4f-4f62-90d4-f8ce6d9f97a9"
        },
        "item": {
          "id": "24e86e40-9ccb-4228-b881-c666b3825254",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "58a8991c-be2c-479e-bb30-44969508218b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d26cee3-721d-4a94-b374-6619cbe21c3c",
        "cursor": {
          "ref": "a5ed9c81-820e-4e0b-9298-59608e98636d",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5b17245a-1f89-448f-9c9a-dfd0c032ea25"
        },
        "item": {
          "id": "5d26cee3-721d-4a94-b374-6619cbe21c3c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d2dc0bc4-68d8-4e5a-a2cb-1d5bd26609d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a598e001-4a17-4e5d-afcb-2d95d4b490c7",
        "cursor": {
          "ref": "ef96de93-8830-41e0-a8b0-75a2c5bfdecc",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "93fcf46b-3427-4615-b58b-b16c33eae8d2"
        },
        "item": {
          "id": "a598e001-4a17-4e5d-afcb-2d95d4b490c7",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6ab27f90-12c1-40f8-a724-023abf54c463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64245c68-f054-466a-a647-fefee4e526d2",
        "cursor": {
          "ref": "bd290a86-2d8d-4fe2-a3b3-d0dbde9eea88",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "49717575-37d9-4cde-ac72-8506c2946406"
        },
        "item": {
          "id": "64245c68-f054-466a-a647-fefee4e526d2",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "63381614-748a-4e61-bd7d-5f09f9d770ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895b8c3f-ac0a-49b5-9b2f-379eef6e56d8",
        "cursor": {
          "ref": "090de2a3-bccf-4dd7-8c90-35b9bb22128a",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cf9b6c98-0147-4720-a7e1-4e52506c807e"
        },
        "item": {
          "id": "895b8c3f-ac0a-49b5-9b2f-379eef6e56d8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c33b9397-5120-44d2-a034-2a65ba449bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f195e84-99ef-4e57-acc0-1cba1f64f195",
        "cursor": {
          "ref": "a6d539ca-efa9-42f1-aa1c-fd213c988ea0",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c267788c-976a-48db-90bc-f1615e34cd9d"
        },
        "item": {
          "id": "4f195e84-99ef-4e57-acc0-1cba1f64f195",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "77e3ab8d-8c7c-43db-963e-9f7f27bd82e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b095d7e2-3210-49b7-bbe3-87c5120c6e37",
        "cursor": {
          "ref": "68d105d7-f3ba-4d27-89bc-450947766480",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cd3c6e8d-c0c2-41eb-8315-7a93e3a1446c"
        },
        "item": {
          "id": "b095d7e2-3210-49b7-bbe3-87c5120c6e37",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e071b78e-9aa4-4787-b8f9-0d01d98c5768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4829dffd-f099-4aef-9f6d-6d091ba5b2c8",
        "cursor": {
          "ref": "e935a714-ea0c-4647-887a-73b23773bcc4",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fafc6fa5-6936-4291-a29f-9d734468bff8"
        },
        "item": {
          "id": "4829dffd-f099-4aef-9f6d-6d091ba5b2c8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0222a402-d886-41a5-a6a7-7e740e1f22c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2b4906-55a8-42f0-aee2-4d779d43c301",
        "cursor": {
          "ref": "1a43d267-3360-43a6-b19e-3b3da18efa35",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a77e60bc-c445-4d6d-8c9c-5e9f379feb61"
        },
        "item": {
          "id": "8d2b4906-55a8-42f0-aee2-4d779d43c301",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4d212eb5-7151-4f7d-88e0-f4481dd5e296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fabdc3d-7f53-4d5a-b8a1-1d6a0c213729",
        "cursor": {
          "ref": "99a23b35-8fe1-4ee0-afd6-3f584d7eb33c",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a0f3aa2b-aa31-4816-8ff5-bba5a0c73a7f"
        },
        "item": {
          "id": "5fabdc3d-7f53-4d5a-b8a1-1d6a0c213729",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f6fcfcfc-cd02-403c-ba4b-1e6837585074",
          "status": "Created",
          "code": 201,
          "responseTime": 826,
          "responseSize": 983
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "38bb6eda-7513-4bc0-a724-6104ac91b3b1",
        "cursor": {
          "ref": "366b95b0-f0c7-443f-9dfd-22135d31fdfd",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f318ba92-83af-4480-9918-1d104c30e7d7"
        },
        "item": {
          "id": "38bb6eda-7513-4bc0-a724-6104ac91b3b1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "368fb77d-e8a0-4e92-af3d-247f58aacf73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e25515-237b-40ba-8646-5dc2ea0aa3d7",
        "cursor": {
          "ref": "b0feba14-61e8-4a49-b296-3799b00bd920",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "642fd8e7-816d-43be-9c2d-e05c97918f0e"
        },
        "item": {
          "id": "c6e25515-237b-40ba-8646-5dc2ea0aa3d7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2c0e147d-8437-4b85-bb84-1b4dcce72636",
          "status": "Created",
          "code": 201,
          "responseTime": 6537,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "f3b047d7-1ab6-4c16-8d65-4968a7d8e92c",
        "cursor": {
          "ref": "51ae89a1-9927-4a4f-b23e-550a08f2b2ab",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e9668f4c-2055-498a-a7d5-b11958d1e6bd"
        },
        "item": {
          "id": "f3b047d7-1ab6-4c16-8d65-4968a7d8e92c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f0089959-98ba-4b6b-9dfc-c3024fed1a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee7b409-b21a-4c1b-bb07-91d0c90e04c3",
        "cursor": {
          "ref": "493fdfee-f041-47d0-93af-8008ae7432a1",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3b55edc5-b91e-41ef-9e37-8b92ac0ad42c"
        },
        "item": {
          "id": "aee7b409-b21a-4c1b-bb07-91d0c90e04c3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "07ee1284-f72f-4157-a227-cdac1511b2d6",
          "status": "Created",
          "code": 201,
          "responseTime": 3715,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "d44d78e6-9247-4b6d-a9fd-1dcf4e4df315",
        "cursor": {
          "ref": "d76ad38c-65ab-439b-b902-4fb25b61d276",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2c515b09-c146-4c58-95bc-88dc21449fe1"
        },
        "item": {
          "id": "d44d78e6-9247-4b6d-a9fd-1dcf4e4df315",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f246054d-e4e1-44bb-9e35-5510b6977f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2c242c-c637-48ab-a995-ebd334a9dfd0",
        "cursor": {
          "ref": "ce33ddab-b77c-4a83-9764-ef5b2fe22ad0",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "796f0bbf-9bd0-42e5-bceb-b96f8711c6b1"
        },
        "item": {
          "id": "ec2c242c-c637-48ab-a995-ebd334a9dfd0",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "069d5618-3d7e-4223-a8ad-d7eba6fc2bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00e355d-d610-465f-aece-91097adb2d66",
        "cursor": {
          "ref": "5f5d30b0-0365-45df-aac8-c04db8f55b71",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2abae1f9-5d3d-49ae-ae38-00aef153a8d4"
        },
        "item": {
          "id": "d00e355d-d610-465f-aece-91097adb2d66",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c528b6af-872b-4ec6-981d-65e54e09d58d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7259a745-633e-4690-ba4e-f333a4b46306",
        "cursor": {
          "ref": "3910208d-ff64-4914-91c3-c1984a1a40b1",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "191279af-5177-43a6-b778-e8350405f0b6"
        },
        "item": {
          "id": "7259a745-633e-4690-ba4e-f333a4b46306",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6bdd4628-ee39-43ec-bb60-e6199b24b27f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcab4c1-6d11-42e1-b494-a7ebf2d89915",
        "cursor": {
          "ref": "997a156a-5cf6-4277-ae45-9b1b32e6f4e2",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "dad01838-0682-4aaa-95ea-7628a0a6ee37"
        },
        "item": {
          "id": "9bcab4c1-6d11-42e1-b494-a7ebf2d89915",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9972bb43-c886-40da-86bf-f42f2919a5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e80ffa3-35a7-4d63-97ae-789d48eb5084",
        "cursor": {
          "ref": "4f3b9525-f44d-4333-a2ef-7dafb3e1345e",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ae094609-3625-4303-a26c-0fd8aa0098c0"
        },
        "item": {
          "id": "7e80ffa3-35a7-4d63-97ae-789d48eb5084",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "fac7784c-b751-436e-a154-9eb3544fa7f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c3818d-4397-4daa-aab1-16aed9927980",
        "cursor": {
          "ref": "8dc4acf1-053e-4c35-804a-434959d085fd",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0b38c6e8-f2ff-4b97-ad51-cd0cdae87e8d"
        },
        "item": {
          "id": "17c3818d-4397-4daa-aab1-16aed9927980",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "513dd345-ad81-4d35-9afe-9f74dae7572e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116cefde-d51e-41ec-9f97-58a008b5abfa",
        "cursor": {
          "ref": "64d23298-c785-4236-9d97-b8ba7ce0fd10",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b8953eb0-0984-474a-9833-6c7d0ec49cd7"
        },
        "item": {
          "id": "116cefde-d51e-41ec-9f97-58a008b5abfa",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0ad93643-0218-4729-b1a9-11351c531ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8024f83f-2e35-4c90-ad83-6f3590da5c18",
        "cursor": {
          "ref": "2af189d3-ab2c-4098-be2f-cc5b92980dd1",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c2a0a870-ae24-4887-b24e-a83190b62c74"
        },
        "item": {
          "id": "8024f83f-2e35-4c90-ad83-6f3590da5c18",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5ee045c0-45de-4c27-b685-e74d3734a114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "062b2ab5-3818-42f8-b1e8-16b4df43e0a3",
        "cursor": {
          "ref": "8b06a432-77fb-4c07-a660-4c0a9ed59ded",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "069333a0-45b7-4bfb-bd2a-5d1666c2c966"
        },
        "item": {
          "id": "062b2ab5-3818-42f8-b1e8-16b4df43e0a3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "173de49c-29d1-44f3-9c6e-65eae894aecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d36c712-1091-40b5-b5b5-800c723d3e82",
        "cursor": {
          "ref": "b9f1ca7b-e9e1-4f1b-b685-393920450ebf",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b8e659c0-6541-4012-88b7-769de0502980"
        },
        "item": {
          "id": "2d36c712-1091-40b5-b5b5-800c723d3e82",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "efa9345d-439b-4f5d-9854-13b12b6eef98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf0823d-a81f-48b1-b0a9-b617ef92f340",
        "cursor": {
          "ref": "2f81b70a-7409-4861-9d6d-b78f38c1dd24",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fcad87ed-4c31-4cca-8b87-94b11ac5ed88"
        },
        "item": {
          "id": "edf0823d-a81f-48b1-b0a9-b617ef92f340",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3bce832b-fb2d-4bc3-a419-aa12ef336753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe62546-fd6f-4945-953f-c98227a8397a",
        "cursor": {
          "ref": "03189c06-7950-49fc-acae-31282b75687d",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7f414108-8924-41f6-bfd5-ddd7287ac3e3"
        },
        "item": {
          "id": "2fe62546-fd6f-4945-953f-c98227a8397a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b228a98f-550a-41d1-9bda-cd96530be599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f687025a-9a9e-4aed-855c-4e6a03ed8a0a",
        "cursor": {
          "ref": "5aa5c642-32b1-49b7-986b-90556e89c0f8",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "71e97291-e82a-4357-b298-faa1601e0052"
        },
        "item": {
          "id": "f687025a-9a9e-4aed-855c-4e6a03ed8a0a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c9fd3cc2-4171-4421-8255-cb5202620af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7a3564-97c7-4bf5-93df-65ba54cb4428",
        "cursor": {
          "ref": "8e00313d-7f49-4dd5-93cb-2f49efe8bbf0",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3ea5ecca-cccd-48d7-9f5c-ee2663731320"
        },
        "item": {
          "id": "3a7a3564-97c7-4bf5-93df-65ba54cb4428",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a0c04ab7-7fe0-4d87-aca4-a39895b8b842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41cdd51-45a5-43f4-b71b-b575c4e8d00b",
        "cursor": {
          "ref": "d3abf256-201a-480f-9552-e83486e473a5",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "dfdc444f-80da-4e61-822e-14bf83956563"
        },
        "item": {
          "id": "d41cdd51-45a5-43f4-b71b-b575c4e8d00b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "123c5965-0340-4501-8c86-8fd1070a5824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "684cf400-62ac-49bd-b66e-c5362c6e5557",
        "cursor": {
          "ref": "62ce3994-cb9a-4829-ac52-574912edb5ba",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d0b7baf1-ff7b-4dde-a19c-015839c09640"
        },
        "item": {
          "id": "684cf400-62ac-49bd-b66e-c5362c6e5557",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7de0732c-d74e-492d-b0ec-572716de7080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f987545-cf85-4c67-965a-cca43f75471a",
        "cursor": {
          "ref": "3f649efb-4e7f-4c18-ad2f-894c5824b620",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d004678a-66a8-49c7-9c02-b19a65aa2225"
        },
        "item": {
          "id": "7f987545-cf85-4c67-965a-cca43f75471a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0ee6e1fa-8cac-4cc7-bff7-d2d42709c8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad513015-e266-4697-b7d6-51731a65a097",
        "cursor": {
          "ref": "0d43b477-2cc2-4311-a774-25f911a86d85",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0567717b-e756-43d2-9f31-45c73a515e43"
        },
        "item": {
          "id": "ad513015-e266-4697-b7d6-51731a65a097",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "38015c79-b277-47bf-bd85-bd6832b01611",
          "status": "Created",
          "code": 201,
          "responseTime": 2678,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1c3684aa-a2a7-4aaa-909e-19cbacc8c15c",
        "cursor": {
          "ref": "92b72381-bef6-4bc4-a23a-b86b8852e823",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "aa3544c1-3aa0-472c-8a4f-fb6db5140177"
        },
        "item": {
          "id": "1c3684aa-a2a7-4aaa-909e-19cbacc8c15c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9e765761-535a-4f7f-9328-457f5086a41a",
          "status": "Created",
          "code": 201,
          "responseTime": 2854,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4629bf4d-3acc-4be7-97d2-8462f87a007d",
        "cursor": {
          "ref": "b2f76462-ad84-4461-a7e9-71f7cc8754dd",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "454b30ac-ca56-4cda-bc7c-8e49ca1af1f7"
        },
        "item": {
          "id": "4629bf4d-3acc-4be7-97d2-8462f87a007d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8dfd12f0-86c3-4a29-8553-6c3e75b24a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ac5df2-5418-4ef3-87bf-c04c208a22e4",
        "cursor": {
          "ref": "26d0b1b5-0039-4bd1-bd85-ced46cc96f42",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0c9a30ac-b2c7-4a56-afba-30e767211945"
        },
        "item": {
          "id": "14ac5df2-5418-4ef3-87bf-c04c208a22e4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d3f86f7c-1516-4f21-9b2d-1cb77089eaac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49559530-a352-406e-ba67-1bd220c0c21b",
        "cursor": {
          "ref": "0bae30b1-7778-489f-869d-81cd38affd5e",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6b45245f-4e89-40f0-8f25-b727c6ffbdfc"
        },
        "item": {
          "id": "49559530-a352-406e-ba67-1bd220c0c21b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6d36f090-41c4-4a21-b3b8-fcb98b45d20a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fc997b-0e7c-4af1-b717-5fc67961bc4c",
        "cursor": {
          "ref": "36f301d1-fc95-41b5-af36-e61d3ef7fb30",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "aaaad9ee-daa7-4a47-a015-fa64c1ba96af"
        },
        "item": {
          "id": "15fc997b-0e7c-4af1-b717-5fc67961bc4c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2e680f4e-f5d7-48c5-a75a-84ad23ac848c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6f61e6-daf3-4570-8380-c5587d20629f",
        "cursor": {
          "ref": "cc3b9ad4-18bc-4776-a049-046911825dfb",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d3b29e82-433a-49b3-9d77-0883e723b045"
        },
        "item": {
          "id": "ce6f61e6-daf3-4570-8380-c5587d20629f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "83d14188-bdca-424c-9201-a34efd57d1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b283e70f-1305-432c-9418-1f5932dd3acc",
        "cursor": {
          "ref": "b23bcbc4-b809-40f0-97d4-2f58f36e2efd",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "32ee8c9c-130b-4422-b625-976956e228fe"
        },
        "item": {
          "id": "b283e70f-1305-432c-9418-1f5932dd3acc",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "17b89334-8513-4406-88e5-e7217d72accb",
          "status": "Created",
          "code": 201,
          "responseTime": 2618,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "383b3399-acdd-4c27-b7c0-941e0fe2bfb3",
        "cursor": {
          "ref": "12af868e-685a-401d-a24e-8db096244ba7",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6abe584d-d1e9-4b58-9016-6f67e0631a43"
        },
        "item": {
          "id": "383b3399-acdd-4c27-b7c0-941e0fe2bfb3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1cadfc15-f04d-4335-95e0-fb25d0b62acf",
          "status": "Created",
          "code": 201,
          "responseTime": 2755,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b110b631-827b-4fff-be74-b36a39778db9",
        "cursor": {
          "ref": "c39c5798-694b-424a-b36b-504fa3034636",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bf7f0ca8-3d2a-4737-b092-9be68b66bebc"
        },
        "item": {
          "id": "b110b631-827b-4fff-be74-b36a39778db9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "686b356b-92b9-4126-ae05-d3a3ba78eb72",
          "status": "Created",
          "code": 201,
          "responseTime": 2824,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "d852430a-fea0-4dc3-bc3a-0a49d396495c",
        "cursor": {
          "ref": "e1c708dc-3ac4-4637-a3f9-498abc4fe0c6",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7dc7ed87-fe2c-4700-bbfa-828556775dd4"
        },
        "item": {
          "id": "d852430a-fea0-4dc3-bc3a-0a49d396495c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7ed0c69d-6a7d-44b0-a620-33f3a3c18737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e614002d-1c34-45dc-979e-891109577986",
        "cursor": {
          "ref": "75323aaa-aa0a-4c22-a037-1648271befdc",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4a7242e7-0a99-412e-9680-f37c32284155"
        },
        "item": {
          "id": "e614002d-1c34-45dc-979e-891109577986",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "94f28f54-f1ad-45a8-a6ed-e4a342624efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e942438-bba6-4211-b7c4-706708e3da54",
        "cursor": {
          "ref": "5607f3c4-d757-4cad-803e-6516cbba7c38",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f2a01fe7-5d40-4ec6-8929-5822af6dd7d5"
        },
        "item": {
          "id": "7e942438-bba6-4211-b7c4-706708e3da54",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0e695d1d-1a56-43e4-97c3-c877d8c99908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3028551f-3605-4445-97fa-fa521c0ab34e",
        "cursor": {
          "ref": "d0c40048-3678-4fc2-944a-b39f982d72b2",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "96b688f7-b28e-4bc5-93b2-bac1bed9c4b1"
        },
        "item": {
          "id": "3028551f-3605-4445-97fa-fa521c0ab34e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "997406d6-d8ef-4bdd-ab3d-e8f57b086b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5205896-9c1d-4e0b-a211-79e4961ba282",
        "cursor": {
          "ref": "88c2b572-1f47-4d06-975f-992cae58016d",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4b0d01e5-ec11-4195-8855-7a5ca7b96784"
        },
        "item": {
          "id": "d5205896-9c1d-4e0b-a211-79e4961ba282",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f83f8169-3198-4bc4-9a2d-a4f76bba0ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c1eb3d-fbcc-48c3-b6a5-408ead35bb87",
        "cursor": {
          "ref": "39a94f6f-d5fd-4ac5-914a-ce49ed9d27c4",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8466dcd7-fc6a-42e9-ae92-f148910c4d1d"
        },
        "item": {
          "id": "31c1eb3d-fbcc-48c3-b6a5-408ead35bb87",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "30cd0243-fbb8-4e95-b434-de81ef0c8e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfdbb445-319e-4c0e-a59e-d6055e84bcae",
        "cursor": {
          "ref": "54a8c388-6bae-4c4e-88d3-7775798644c4",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "349bd1cb-1768-4662-ad72-1b6b19d96481"
        },
        "item": {
          "id": "dfdbb445-319e-4c0e-a59e-d6055e84bcae",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "dea7c025-181a-42dd-b0e9-a5500f41e3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6bb13bf-e3cd-4e17-9973-2a65283a5f1a",
        "cursor": {
          "ref": "eb41b52d-9031-4492-91d7-3196803e3bda",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "23fb1ea1-e5fe-4d30-be10-3d7d179cf983"
        },
        "item": {
          "id": "a6bb13bf-e3cd-4e17-9973-2a65283a5f1a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8a2df237-4cc1-4341-bc46-9aaf1edbd577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27bafb6-28b6-4ca7-b7c2-77dec5d44ea4",
        "cursor": {
          "ref": "9cb551d0-7103-4a51-a383-24a59320d4f1",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "80915a4a-5ac3-417c-b52e-0bf7b6f6b98f"
        },
        "item": {
          "id": "d27bafb6-28b6-4ca7-b7c2-77dec5d44ea4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6f0f8366-78f8-4995-b8b5-7724563eb2cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d8db83f-ce9b-43e0-b2c3-cafac6fd20d2",
        "cursor": {
          "ref": "3dde5e32-b18b-42f1-ac13-db00823115a9",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d5a380a8-a206-4da9-adce-1c984c278479"
        },
        "item": {
          "id": "4d8db83f-ce9b-43e0-b2c3-cafac6fd20d2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3243548f-d308-4a86-a6d0-10c72d6fe6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434037fe-9e4e-4f98-8613-cc78a5b0fdb5",
        "cursor": {
          "ref": "12eb56bb-6cd8-46de-957d-53cc6196d7e4",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "31dbe32a-6499-4719-84a2-8591d3b86f06"
        },
        "item": {
          "id": "434037fe-9e4e-4f98-8613-cc78a5b0fdb5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7ba144a0-3452-4c3f-b042-7420d5d2b613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f25fb9a-fe5d-4db2-b1bb-1efd3a7a2867",
        "cursor": {
          "ref": "0ca18012-6e46-4e95-b4c1-854d16618246",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "de7471ce-e3e4-48ae-ab6a-5c996d7a0a57"
        },
        "item": {
          "id": "3f25fb9a-fe5d-4db2-b1bb-1efd3a7a2867",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ba144a7a-f842-45ba-abcc-57ba7fad810b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adfc0088-3878-4cf7-96c1-1564fefa3032",
        "cursor": {
          "ref": "3b6dacdd-5c23-4a36-879d-78bb119f3105",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "26fe45cb-dde7-4246-8c5d-15198caaeff0"
        },
        "item": {
          "id": "adfc0088-3878-4cf7-96c1-1564fefa3032",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e7d2ac35-2a6e-42cd-b892-442e11809eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b283b367-3c80-4091-97dd-e9856343bbd7",
        "cursor": {
          "ref": "01160a9e-e1b6-4056-8abd-d6943d00d1c6",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9ba3bbb8-3ed5-417d-859c-543096a4257a"
        },
        "item": {
          "id": "b283b367-3c80-4091-97dd-e9856343bbd7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9874336a-0d41-4830-8d71-b41b3f2ea8ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b6919b-5ee1-4be0-ba01-03abb14f5fce",
        "cursor": {
          "ref": "af055cd9-2be4-4ed8-a527-d83dcd1b7012",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4cd56c96-80ed-458d-8d37-26f1ba0ef2fb"
        },
        "item": {
          "id": "16b6919b-5ee1-4be0-ba01-03abb14f5fce",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "58e6d52a-8b77-4e7d-a98c-401e71181414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a8147e-6a1f-4cb0-86f7-c54813a264f4",
        "cursor": {
          "ref": "1530dedb-e9c3-44cd-b1d8-73e08bd80b05",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "58ee212b-11ef-4f8e-a237-b61bff0261d7"
        },
        "item": {
          "id": "c0a8147e-6a1f-4cb0-86f7-c54813a264f4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "84ebe88c-e731-4961-91be-812f1f872449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5487e7e-39bb-483e-8534-550a273fdb45",
        "cursor": {
          "ref": "f88215e6-573a-4948-aa57-ff15f4455593",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "96e0668c-9be6-4e62-bf08-aa0602382d25"
        },
        "item": {
          "id": "d5487e7e-39bb-483e-8534-550a273fdb45",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f51b9c0f-2e2e-4911-89bc-a24907d82710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f89ef2-5500-4e12-a723-994c38021cf0",
        "cursor": {
          "ref": "377ac855-0183-45fc-8851-89fb8cea318d",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "34757988-51da-4560-b343-bc69b5616806"
        },
        "item": {
          "id": "a3f89ef2-5500-4e12-a723-994c38021cf0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a870215f-8fa8-4c39-8ada-e92b4f586012",
          "status": "Created",
          "code": 201,
          "responseTime": 3073,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "87eaccc1-bd4b-4372-b87b-22d15d4142fd",
        "cursor": {
          "ref": "15114eaf-0994-446d-a446-e53d1795b8a3",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "73031cb1-76ae-4baa-99d7-d4c0887a33b0"
        },
        "item": {
          "id": "87eaccc1-bd4b-4372-b87b-22d15d4142fd",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f62ff73d-ebab-4e5d-87dd-fd6a4a9d20cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb47913f-5431-4732-ae8d-74f2685ce023",
        "cursor": {
          "ref": "bb8b492a-b2f0-425f-b935-8caab950ff48",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "47b322ea-45be-4415-a322-a2e5b1c1fedc"
        },
        "item": {
          "id": "fb47913f-5431-4732-ae8d-74f2685ce023",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "079e2708-af8f-4c07-9387-a0f70c1ec1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6bd50a8-cf6e-4286-bf26-242c473ce733",
        "cursor": {
          "ref": "6ba4bb0f-4c2a-44c8-b14f-5aa6acece751",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "aab99ca1-1095-4fac-8a24-770094c7cc03"
        },
        "item": {
          "id": "f6bd50a8-cf6e-4286-bf26-242c473ce733",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f49bb939-8d3d-420e-90b6-eb25c0714372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51577447-ebcf-4a10-81db-0ee438c31917",
        "cursor": {
          "ref": "ead80acc-0374-4f9c-8324-b3022ee965c2",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0e7e28c9-4613-467b-a85d-f3fc2524203a"
        },
        "item": {
          "id": "51577447-ebcf-4a10-81db-0ee438c31917",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4df82bea-c585-444f-8a47-1bc3b3262f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608a77c7-d677-47dc-b1a2-fbd814a14f6e",
        "cursor": {
          "ref": "ed324379-ec85-4d39-8be7-f72fb5a33e3c",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "cb316107-1545-4d4d-8a2d-6ed39edbd25c"
        },
        "item": {
          "id": "608a77c7-d677-47dc-b1a2-fbd814a14f6e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1065d616-2b11-4c76-b026-193e16a01245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031bff7a-0b59-4aa4-b18a-833d58eef88f",
        "cursor": {
          "ref": "e1980ea1-0a51-472b-9fa1-fe9c7d893e0d",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d1404c1d-b19a-4eff-85e1-bbc0a46a9181"
        },
        "item": {
          "id": "031bff7a-0b59-4aa4-b18a-833d58eef88f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "57a55fd5-8546-4ec9-8319-a86ec178b087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ebd0b0-cc08-43ca-905c-fad36f5343f8",
        "cursor": {
          "ref": "83225914-2e9c-42e2-a806-1c85ebaa42f6",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9eb8dab5-6a2a-48f7-9f6f-b6a29ca511af"
        },
        "item": {
          "id": "e5ebd0b0-cc08-43ca-905c-fad36f5343f8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c00c444a-6aef-4ace-8870-1afd36a63b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806d02d4-9235-4c36-b2e8-20327969c14f",
        "cursor": {
          "ref": "35752e7d-f9cf-4460-8300-1e6eee73f27d",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e907988e-dfc0-4bc7-9f3f-7648cfd3559d"
        },
        "item": {
          "id": "806d02d4-9235-4c36-b2e8-20327969c14f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2f20838d-4850-4851-acee-69c3acdac4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8eec87d-f25a-440a-ae19-13d96449c773",
        "cursor": {
          "ref": "ca27a139-bc86-47b6-8ffe-358924d37c19",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e5b3c991-0789-48c3-ab6d-5967a6ff7fad"
        },
        "item": {
          "id": "e8eec87d-f25a-440a-ae19-13d96449c773",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "bf942e4d-7015-4ea1-ae91-4b7fe09338ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b874d6-74f1-4c64-9072-f5f21db11a67",
        "cursor": {
          "ref": "f44d88a1-f6f8-429f-8a04-a47de02a63cf",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "aa54405b-e119-459e-ad93-86de19de018f"
        },
        "item": {
          "id": "68b874d6-74f1-4c64-9072-f5f21db11a67",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9e14e50b-05a6-4bde-971c-bba5b48ace3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1befe8a-7adc-4890-803a-5b5558113f4f",
        "cursor": {
          "ref": "393ddb12-6199-4f64-b17e-3948fb7750ba",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9f838d33-0dde-40c2-b0c7-91f885ba7a86"
        },
        "item": {
          "id": "e1befe8a-7adc-4890-803a-5b5558113f4f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "20c45b4e-51d5-4a75-90d3-9216dfbf893a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c47c9d-b9da-4a81-80fa-8e13bcd7d824",
        "cursor": {
          "ref": "a7f05f30-7f1f-40e2-8ebd-c31bbdd0fc5c",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ebf7e29d-035e-4bcb-bd84-511cc59fd102"
        },
        "item": {
          "id": "35c47c9d-b9da-4a81-80fa-8e13bcd7d824",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9ddf942d-3720-4c48-9018-cfe9d6bac416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4c1779-7346-4651-af79-d87ff5087c3f",
        "cursor": {
          "ref": "9a149b59-f2a8-424f-b875-5e8229076809",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fce77f09-2b81-4cea-9ebc-deb7e316172b"
        },
        "item": {
          "id": "9c4c1779-7346-4651-af79-d87ff5087c3f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7ab9e62c-17bf-4dd8-8c0a-b8d89c741925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0d91e2-a5ce-4d84-979c-f7f0a2c66df4",
        "cursor": {
          "ref": "62455fcf-5fa0-4068-9120-d63e46b610ed",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "12d6ff49-558b-4874-9cfd-5c2ae9e809f6"
        },
        "item": {
          "id": "3d0d91e2-a5ce-4d84-979c-f7f0a2c66df4",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d28c379c-c825-4459-b273-0d1a4b8c74ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86de0205-c0df-45d9-b26e-808f0d872d14",
        "cursor": {
          "ref": "9bfecdc2-2b72-4e33-bd64-c96462cb8c45",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6a03ebe3-f6e3-46db-9fdb-9e583fec24d2"
        },
        "item": {
          "id": "86de0205-c0df-45d9-b26e-808f0d872d14",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2f2d1eb7-9b65-453b-84d2-cbc39de7fe83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec915612-70f5-4fc6-b446-244c64a89d13",
        "cursor": {
          "ref": "23e37ecc-2b47-4472-939e-56cdc3cf47de",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "68c0d112-d061-49a8-8afc-2665de8d8777"
        },
        "item": {
          "id": "ec915612-70f5-4fc6-b446-244c64a89d13",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1fce5cea-96d5-4435-a874-aa5ebf571d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb10bcf9-6a64-463d-a9fd-e76a6ee831be",
        "cursor": {
          "ref": "10363148-be61-4e59-acf8-b7ecd8d5823d",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "44f722ce-af8a-4022-a442-59d3db34387b"
        },
        "item": {
          "id": "cb10bcf9-6a64-463d-a9fd-e76a6ee831be",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "93cd7b31-55f9-4f26-93ce-a6e543260e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6211fb4-da40-4e31-86a2-9b6d5a5f6349",
        "cursor": {
          "ref": "cd037304-a329-437d-ab49-30528e22ab62",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "abe86640-d8cb-4606-b16d-65deec5bef65"
        },
        "item": {
          "id": "b6211fb4-da40-4e31-86a2-9b6d5a5f6349",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4e0c407e-8cf2-4247-bc9d-6de062047c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42e3f4b-e75b-4dcb-be18-0903bd3a1689",
        "cursor": {
          "ref": "b30d7b03-2ec6-4090-bbbd-6cf8df05404b",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "218d8d12-56c8-4dbe-8a5c-03b978ec7b70"
        },
        "item": {
          "id": "e42e3f4b-e75b-4dcb-be18-0903bd3a1689",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "859e4a39-83c9-40cd-8cbe-ca6d60bf82b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d95612-0381-40d4-97d2-edeb904e5a20",
        "cursor": {
          "ref": "f65045d7-f3f7-42f5-9c58-5f33a94772d7",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a0eecb7d-2018-4507-bbec-380dde9bd2d2"
        },
        "item": {
          "id": "98d95612-0381-40d4-97d2-edeb904e5a20",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8aa54353-4a87-4f9a-874a-0c988149d4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2b37ea-99fc-450b-9dc7-9a2a4656e00a",
        "cursor": {
          "ref": "94a9661b-94bc-48c6-a370-fd8f6adbaaf7",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "018d61cd-d890-4baa-84a4-db1e333838c1"
        },
        "item": {
          "id": "8b2b37ea-99fc-450b-9dc7-9a2a4656e00a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0bc32241-37d2-468c-ba75-bb6f47a59fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f77048-18c4-40ba-92d3-ed93c7f5de60",
        "cursor": {
          "ref": "e1f5ac05-56be-4b61-beb3-34270356890b",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6963eb9e-942a-4d38-9605-58a109ae5a62"
        },
        "item": {
          "id": "62f77048-18c4-40ba-92d3-ed93c7f5de60",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "754d36aa-4259-405e-acae-0fed5b37b490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b788aa13-63a1-4185-8e5b-22a2b9003977",
        "cursor": {
          "ref": "1d8c9099-5617-4806-9ac7-3e0afed6c978",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6ba5deee-3353-4f4c-931d-6e21354aecf1"
        },
        "item": {
          "id": "b788aa13-63a1-4185-8e5b-22a2b9003977",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "54ea3661-7ccf-42b4-bfb1-fb42ba4cd158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff94d16a-8b19-4371-892e-a94e91ffe9e7",
        "cursor": {
          "ref": "23f28918-f46e-41d0-a4aa-e0d15fc2aec3",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "aa51200f-6ef4-4487-97e5-e289d9a6946b"
        },
        "item": {
          "id": "ff94d16a-8b19-4371-892e-a94e91ffe9e7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9af5f69a-72ae-4782-8c6d-fd8e282ef771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947e6f94-ceac-4407-835c-2dec8f3cd6c4",
        "cursor": {
          "ref": "dea0bc5c-b992-4122-a652-bd9af0286800",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7af7acea-f34b-4a53-9bbe-77bd9724586b"
        },
        "item": {
          "id": "947e6f94-ceac-4407-835c-2dec8f3cd6c4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "53b640f1-2733-4848-bb03-349f5fdebe02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70b06c5-4d45-4d00-a18f-2dd6bb66f4f3",
        "cursor": {
          "ref": "3382f8f1-cee8-4148-93d9-c6f590d9226e",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "09a0a07c-3101-4006-8d6f-cb512915f940"
        },
        "item": {
          "id": "b70b06c5-4d45-4d00-a18f-2dd6bb66f4f3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e526f876-82ba-414e-9ca0-4e28af38e890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f40b6e-0983-46af-9db6-3ae80588f06b",
        "cursor": {
          "ref": "8282554c-6596-4574-a3c6-11458344dc9a",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "614920a5-12fa-4b8c-a611-f303722b3326"
        },
        "item": {
          "id": "b2f40b6e-0983-46af-9db6-3ae80588f06b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b0299c19-cbbd-4b86-bca2-4a6ae1593691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0150d2d6-a64c-4ce5-b497-6752a7794e26",
        "cursor": {
          "ref": "5e1a3397-75f4-43a2-b096-041c315ad55a",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b815cf26-33c2-4ef8-832f-aa264fcee106"
        },
        "item": {
          "id": "0150d2d6-a64c-4ce5-b497-6752a7794e26",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6b588a42-2cd0-4e2f-9fe4-c1bc859c4200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279dc022-b0cd-457b-9c23-287fb3f698fd",
        "cursor": {
          "ref": "83f1ebd3-9f9f-4870-b75f-1527907ae47a",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5fd3a527-386e-4537-bf11-7eb4e206f9f9"
        },
        "item": {
          "id": "279dc022-b0cd-457b-9c23-287fb3f698fd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "32dc3212-4d8b-4725-932d-b9bb6c862ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd98ee8-3be9-4c2f-9440-bad21ccc38d3",
        "cursor": {
          "ref": "3d865377-6864-4534-ac58-559a6f0c64ad",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8592fb5f-9b97-45e8-bc4e-bc2a54cb1f1e"
        },
        "item": {
          "id": "bdd98ee8-3be9-4c2f-9440-bad21ccc38d3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "dae0d07e-39ef-43ec-b26e-0ca5c0b9ea0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f47d2f-217b-425e-bf29-167bff0e2257",
        "cursor": {
          "ref": "cf7d42a5-4b52-48d8-866c-ffe7b9b84c62",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "91dbf7be-6400-42d9-a9b3-7f47d8c1363e"
        },
        "item": {
          "id": "86f47d2f-217b-425e-bf29-167bff0e2257",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "15146292-e883-49f2-910e-3158b4311c81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "d1bc9f45-faf2-4b91-a7f9-5d460d3626ed",
        "cursor": {
          "ref": "13a4bf7f-0fec-45f5-8b32-1d960158f98d",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9bcb9093-5682-4ffd-b245-41fc5ac4c362"
        },
        "item": {
          "id": "d1bc9f45-faf2-4b91-a7f9-5d460d3626ed",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c95ade30-8baf-4454-a6b3-a52bef070056",
          "status": "Created",
          "code": 201,
          "responseTime": 2871,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca65ba7-f910-4f02-806e-c80d6f1e7352",
        "cursor": {
          "ref": "3d02486b-2936-4857-8c62-7b6675ab1436",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ec5a57a2-63e3-46a4-9796-2d139a17f2d5"
        },
        "item": {
          "id": "aca65ba7-f910-4f02-806e-c80d6f1e7352",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "75ec2b50-2284-4d02-9742-d3a981deee15",
          "status": "Created",
          "code": 201,
          "responseTime": 2607,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "19792cdf-4d11-4db2-a04d-6f3bdc437c9b",
        "cursor": {
          "ref": "8a827afa-bdb9-4209-a8ad-96915f5cd1e1",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3e56ea36-94f4-4910-b828-3fb8b82b29ca"
        },
        "item": {
          "id": "19792cdf-4d11-4db2-a04d-6f3bdc437c9b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d5232849-2fa6-4c8a-b7f3-c45fe74a7aac",
          "status": "Created",
          "code": 201,
          "responseTime": 2749,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a4672e-643f-4dc2-8ea6-e23f4a6a32db",
        "cursor": {
          "ref": "e2c8a522-cabf-4ab3-94d6-153b39331310",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "718f0ffc-b36d-4750-b9c4-f54ed67b55f8"
        },
        "item": {
          "id": "b1a4672e-643f-4dc2-8ea6-e23f4a6a32db",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c117c4ab-d9ce-4740-b310-6b0f5979316d",
          "status": "Created",
          "code": 201,
          "responseTime": 2844,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbb2246-f67b-40f8-ad1b-6f6558669729",
        "cursor": {
          "ref": "4e646bc9-1524-4be1-a77d-ca18c40516b3",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1289d64b-80ce-43d1-a78e-3853cc4d8c4b"
        },
        "item": {
          "id": "abbb2246-f67b-40f8-ad1b-6f6558669729",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8d4f9745-8a16-4068-86b5-8d5b30cc69c9",
          "status": "Created",
          "code": 201,
          "responseTime": 2855,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-07-03T00:51:10Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-07-03T00:51:10Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "ccc4b3d2-898c-42d3-a568-80221df001b1",
        "cursor": {
          "ref": "877cee25-1844-4d10-bd68-c66900066e3a",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "836ca4d3-618b-4a86-944f-2a2eaf179dce"
        },
        "item": {
          "id": "ccc4b3d2-898c-42d3-a568-80221df001b1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f38104ce-cc48-464d-8f1d-e6092308e748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "3f7f9918-955f-45d0-986a-2d8745e4c95a",
        "cursor": {
          "ref": "6b33a3d2-2521-4bc2-b397-72cb951b888e",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6f92994c-190d-4da0-b1b5-dd1a875fa907"
        },
        "item": {
          "id": "3f7f9918-955f-45d0-986a-2d8745e4c95a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "567c7822-2d02-458c-9544-85e63da9f2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391d4123-bbea-4df8-843c-61062635f699",
        "cursor": {
          "ref": "3a952e1f-3b8c-498d-b0f8-a5dc51aa5d11",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8d1f95e2-fd57-4f7f-a5d5-85aa6637bafe"
        },
        "item": {
          "id": "391d4123-bbea-4df8-843c-61062635f699",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "741dbfd0-ee7b-4c80-8394-e60bc62028f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb448f1-f951-49dd-9fa6-e200ab280682",
        "cursor": {
          "ref": "d2c6f39a-c968-49e6-a6df-ba7a9d6e0732",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c7211592-a2f3-4e9e-8024-05fbed751076"
        },
        "item": {
          "id": "8fb448f1-f951-49dd-9fa6-e200ab280682",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a041b81a-6612-468e-9420-dcb25222f012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d350f8eb-46c3-42b9-a7cc-10cea5fb1edc",
        "cursor": {
          "ref": "c895b7ef-819c-42da-8ad6-4e2b18994ca4",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4ea7817c-5d0d-47d9-9117-f4c82a6fbfed"
        },
        "item": {
          "id": "d350f8eb-46c3-42b9-a7cc-10cea5fb1edc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4be759a5-ac13-4bf7-ae8a-51ef5c8b12f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78d2fe1-b46d-4d16-86f1-bc374fc28462",
        "cursor": {
          "ref": "3a410f68-4365-4fc2-88bd-0b38d491c934",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6452f2e0-dae3-492b-8720-5e788f9c70b6"
        },
        "item": {
          "id": "e78d2fe1-b46d-4d16-86f1-bc374fc28462",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "21ed3a2e-e5c5-4221-96ef-7b9c681c42e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8804feb3-77c4-45ce-8184-603e3531f45d",
        "cursor": {
          "ref": "95113079-2006-435c-b655-b291fbbe9d08",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a34c1fd4-1eef-4ac1-8667-2ad547ee3484"
        },
        "item": {
          "id": "8804feb3-77c4-45ce-8184-603e3531f45d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6839e158-585e-4a07-bc0e-8efc16054b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3ba309-823f-4e46-a6fa-3acbb5c40903",
        "cursor": {
          "ref": "fa5b60a7-2341-44ea-b3d1-5b91761f6081",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c3b881aa-f895-4ddc-85fd-c9f67939ea50"
        },
        "item": {
          "id": "3a3ba309-823f-4e46-a6fa-3acbb5c40903",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "33e8325d-ab09-42be-b3f7-dc81a9c8dabf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c245ff-3cd9-4819-9256-87a6274e8f8c",
        "cursor": {
          "ref": "7e7a6b01-fdbd-48b5-bb70-838a7767ecbb",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "34b9b2c3-1ecd-45d5-92d6-db95a1611765"
        },
        "item": {
          "id": "49c245ff-3cd9-4819-9256-87a6274e8f8c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f81b49e0-21a9-4a48-9964-9ea27dbee3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c17118-fea1-4be6-aef4-df3982f1592a",
        "cursor": {
          "ref": "48424595-a1ad-4599-a82a-1dddee7595c7",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9cb8c2e1-ae94-4aab-9c71-7c9cf2d189ee"
        },
        "item": {
          "id": "93c17118-fea1-4be6-aef4-df3982f1592a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "afb501a9-2597-41ec-98e6-3633be64cc2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ed320a-6bb1-4719-b6fd-5dd1aa4b72ee",
        "cursor": {
          "ref": "c2c8b9e3-e103-4e2c-9eec-125cc09b5d74",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "991d6dc5-8a42-47da-b187-f0ed685b2577"
        },
        "item": {
          "id": "c4ed320a-6bb1-4719-b6fd-5dd1aa4b72ee",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5c147c86-dba6-456a-a195-feacbc4fbd49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb252c14-df3d-4375-bb4e-d5a0d323c782",
        "cursor": {
          "ref": "039470e7-bd0b-40d9-bc78-37cc320d4e04",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "24b4a2ba-5834-42b0-a86b-b4dd69957992"
        },
        "item": {
          "id": "fb252c14-df3d-4375-bb4e-d5a0d323c782",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8fd5dec1-9f49-4da3-b362-e696bc6ce656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b6e8f7-774d-49f3-9d72-21e01c2ce2e1",
        "cursor": {
          "ref": "1fcfca34-70ac-4b52-a1ee-c1d9cf6b259c",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "56faabae-7929-4e21-baef-df160bcee940"
        },
        "item": {
          "id": "c5b6e8f7-774d-49f3-9d72-21e01c2ce2e1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "698aa68f-56cf-4f29-b5fc-e4b9dd6d8132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9861c65c-e24d-4366-94e8-c90423cf8f78",
        "cursor": {
          "ref": "954c4adf-b092-46fa-99ef-2884a2fdbe88",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "15841a0c-28b1-4dcb-a9a2-4296b934a124"
        },
        "item": {
          "id": "9861c65c-e24d-4366-94e8-c90423cf8f78",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f83fa335-31a2-4c30-a941-defaf874101e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61eea98-81eb-40ea-832b-a99c5ac0f668",
        "cursor": {
          "ref": "4aa8c5ce-cf41-4230-88ea-b8c838eb7640",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3f74e14a-6c1f-41b2-96d3-f7bee45149ca"
        },
        "item": {
          "id": "c61eea98-81eb-40ea-832b-a99c5ac0f668",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3f1abded-2200-4a92-b8be-a33151980a31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40a5582-b665-4d4a-842a-8d823652e88f",
        "cursor": {
          "ref": "0b465c08-af78-47a7-9eed-09d49975d248",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "557d499f-f636-43de-ab90-aac4ffbf0889"
        },
        "item": {
          "id": "d40a5582-b665-4d4a-842a-8d823652e88f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "85293cba-ab1a-4c3e-a956-b7b8c3674889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584616a4-d7ba-4fac-8505-2971c12baabe",
        "cursor": {
          "ref": "01b901c8-c25c-49b1-bf74-b90b5b4d513a",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a9433b4c-ff17-488e-b55e-ccaa5aea47b5"
        },
        "item": {
          "id": "584616a4-d7ba-4fac-8505-2971c12baabe",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f2e7efcc-21cc-4c06-9b12-554321ec6c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26493977-1715-4180-93ea-b42ae945aa43",
        "cursor": {
          "ref": "37257b78-3585-471f-bf95-35385d1472ad",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4f8e0d64-a6c3-4231-864d-6d2449726f8b"
        },
        "item": {
          "id": "26493977-1715-4180-93ea-b42ae945aa43",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "64df4571-8fca-473d-858c-3bcb64029065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4378c02-e2be-4ace-9fab-fee59a23786a",
        "cursor": {
          "ref": "72b60498-6b01-4fe6-91e0-fdbb5f3dee6a",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "fd4bd069-f5a6-4c50-90d0-aa01ae18faa5"
        },
        "item": {
          "id": "c4378c02-e2be-4ace-9fab-fee59a23786a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "82fe10a8-b5c7-4e7c-bf0f-6df02a62cc0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b517b39d-c8f0-4df5-988d-e9abb9f48d57",
        "cursor": {
          "ref": "ae2b735d-4ef1-4650-9549-53bab62c0a9e",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "15c244b2-a86a-4235-a599-70b7748ee948"
        },
        "item": {
          "id": "b517b39d-c8f0-4df5-988d-e9abb9f48d57",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b5d957d1-22aa-43b7-a39f-79ea1d06cfda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8142f6-2f91-4679-97a1-efdc61c866de",
        "cursor": {
          "ref": "9da3f6f3-2c4a-414e-980c-49eafdeaab89",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b80f399d-1ff3-40a2-8a81-661c8bb2560b"
        },
        "item": {
          "id": "ab8142f6-2f91-4679-97a1-efdc61c866de",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4b620db9-43f6-4be3-a575-bba8a9c5e790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251f4fa7-0ec4-4174-a6fa-1fa002de9d33",
        "cursor": {
          "ref": "391c38a0-d107-417b-902f-19a9416558d1",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1856c541-e9a3-4509-b5a2-a1bc365758a1"
        },
        "item": {
          "id": "251f4fa7-0ec4-4174-a6fa-1fa002de9d33",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c49c073a-1f8e-411b-9fe8-76de02d74a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ee56d7-e506-4ada-87d2-0dc0f367b829",
        "cursor": {
          "ref": "9877f1c5-7535-4bed-90af-56b4cf2f2e67",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9ff6c210-8d12-49ff-8449-3536bb8764dd"
        },
        "item": {
          "id": "60ee56d7-e506-4ada-87d2-0dc0f367b829",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "396867ca-b939-4302-8c5d-a1fb4acebc60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f5ab21-6470-4741-877d-058be02e78b0",
        "cursor": {
          "ref": "8eabc8ad-e108-4824-ae61-30954dc16b45",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0fd82172-7312-4ed1-bde1-ac66e1113fc6"
        },
        "item": {
          "id": "f5f5ab21-6470-4741-877d-058be02e78b0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "893b9df9-28b0-4225-870f-58f3c53cf3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "844f6e80-8453-4aa4-a5f8-3327c5cba472",
        "cursor": {
          "ref": "d7e38aa9-7274-49db-a6e1-44cc1dee0a3c",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "eb4a6ff5-5447-48b5-a36b-2b7af914fb8f"
        },
        "item": {
          "id": "844f6e80-8453-4aa4-a5f8-3327c5cba472",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bbe29315-4340-4022-9e8b-ea244614f0f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adcb596e-21cb-4d35-b740-ffc8a178e2fa",
        "cursor": {
          "ref": "f587cd50-9fb7-4bf1-ad1c-6bb94e10cc05",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d31c6f7b-c173-45bb-983f-94f8b411965e"
        },
        "item": {
          "id": "adcb596e-21cb-4d35-b740-ffc8a178e2fa",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "42e4d813-052d-43a7-b221-f7fa9da4d087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65ad09d-3e87-485b-bba2-cc489221702a",
        "cursor": {
          "ref": "9fbe7e67-0523-46e2-9028-15c7d1af5bd5",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4d3ae821-b8fa-49ce-a599-3e2057f537a8"
        },
        "item": {
          "id": "c65ad09d-3e87-485b-bba2-cc489221702a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ca9d5738-89be-4f93-8859-4cd45cb36b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e29d231-5ef7-4d82-9c24-2a5a130f1bc2",
        "cursor": {
          "ref": "184e3dc9-60db-42b2-992b-9fd36b305d91",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3bb7b243-0ad7-4ff9-a7de-7524f79e2be4"
        },
        "item": {
          "id": "0e29d231-5ef7-4d82-9c24-2a5a130f1bc2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9349d478-d46a-4490-a91f-3848fc11e789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "888b6f82-330d-488a-8cc4-739c7d77b9e8",
        "cursor": {
          "ref": "0823984f-72d9-4bb0-a9b4-bf1253be6dd7",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "853aa8ec-8ad5-41cd-a47e-ae3576cbc7fa"
        },
        "item": {
          "id": "888b6f82-330d-488a-8cc4-739c7d77b9e8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0cf8f953-5efc-4156-9a91-8f7d0fb7840d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1f16a4-7402-419d-908e-9af7cac1eb6f",
        "cursor": {
          "ref": "74f1458c-682f-4522-be3e-4ede97d69b39",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ecf332bc-3d15-49d5-a79d-1f5d4f1f0508"
        },
        "item": {
          "id": "cb1f16a4-7402-419d-908e-9af7cac1eb6f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "38ba83f2-3583-4168-a361-76c9ea5ef013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e59e93-89b1-41f3-bb75-478efc298c8e",
        "cursor": {
          "ref": "99c3a1cb-9bac-406a-abe2-ab470de783f4",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d535c46a-aab5-4b01-9016-82e3f970a5bb"
        },
        "item": {
          "id": "a6e59e93-89b1-41f3-bb75-478efc298c8e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3b37ff92-5fa7-4d6e-8d3d-3ec6a0388e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbb37f0-4b83-4778-8cfb-bac4b6ee2bba",
        "cursor": {
          "ref": "1d72c5db-8205-4314-8a3d-d88906000f9e",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b57fe220-4fe1-45b3-8d68-b8ee69648ad4"
        },
        "item": {
          "id": "0fbb37f0-4b83-4778-8cfb-bac4b6ee2bba",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "845d93e3-c323-4409-970c-20286d81d578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c9874c-b773-4fd8-98cd-8fe712396ccd",
        "cursor": {
          "ref": "832a2c4e-f5cd-4220-b47f-8f8534ad4e46",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cef3cc50-1bd2-453c-8c78-199822e5f5f0"
        },
        "item": {
          "id": "e4c9874c-b773-4fd8-98cd-8fe712396ccd",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a86f1d06-c54b-4253-b58f-b9d52f744950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1979e4-bb76-4c72-9bca-e7178b237c3a",
        "cursor": {
          "ref": "b4d3279d-4e3a-429c-9093-aeacc959be33",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3b319fb8-e887-4339-b241-63d39dc43f37"
        },
        "item": {
          "id": "6e1979e4-bb76-4c72-9bca-e7178b237c3a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "afcd93a9-6b86-4c08-94c6-9bf5b667269f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "741e0d2c-ac59-4d08-a276-23a438855701",
        "cursor": {
          "ref": "987f6fde-b5f1-4216-adab-49a07d573ccf",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "13df3fa8-d33b-482e-80fb-c4c7da49b565"
        },
        "item": {
          "id": "741e0d2c-ac59-4d08-a276-23a438855701",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "511e121f-cca7-44ac-b3b6-3bca0da5182f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fff41a-f976-4d56-9cb1-1d069fbe3899",
        "cursor": {
          "ref": "8d25afc6-f79e-4979-b70b-46697c3f4bd6",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5b5dcf3f-a9be-4589-8079-5fbc097778a5"
        },
        "item": {
          "id": "85fff41a-f976-4d56-9cb1-1d069fbe3899",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6be90774-91a8-4905-868b-b685ba95e968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ffedfe-20f1-4c43-b119-e1fe8946924f",
        "cursor": {
          "ref": "678a9afe-497d-4122-97a3-0375342b79c8",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c3fb7033-0dd1-491b-be48-aa007c7a4422"
        },
        "item": {
          "id": "d1ffedfe-20f1-4c43-b119-e1fe8946924f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ad588af1-1859-451d-a491-0ea559ddf564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b902f098-93a8-46a0-b7ee-a1422db523c2",
        "cursor": {
          "ref": "2d652357-eeeb-4334-a9f3-a4e1d77e5951",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "eb5294a7-d9b0-404c-b0a2-34271cc8caba"
        },
        "item": {
          "id": "b902f098-93a8-46a0-b7ee-a1422db523c2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d9eb338b-69eb-45b2-8c19-b889cbbe0bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ff39d6f-b945-45d3-9238-51f65132beec",
        "cursor": {
          "ref": "0e163b2a-8cef-4bd8-80c2-4ccf5dd755eb",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "20a339c6-b09e-4cfc-88b6-445c28a80468"
        },
        "item": {
          "id": "1ff39d6f-b945-45d3-9238-51f65132beec",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "05dbe8a1-2472-45e4-9845-5a6a105712a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7517a79-7da7-46f2-9969-91c85acb2bc4",
        "cursor": {
          "ref": "98e56c72-5499-491f-acef-1aa10d332edf",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "fc28fc49-325b-479e-ab40-4b83c1038f1a"
        },
        "item": {
          "id": "f7517a79-7da7-46f2-9969-91c85acb2bc4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3b498007-b8c9-4c4e-a9e6-98096f8f0774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6da1a8-2e36-4227-9c67-f02e0cf2a86e",
        "cursor": {
          "ref": "a56d3a4b-a950-4816-8ff8-55f62c3f39eb",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0ecf077c-ede2-48fb-95b1-4fe4b31d1fb4"
        },
        "item": {
          "id": "9b6da1a8-2e36-4227-9c67-f02e0cf2a86e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "66348ae3-1876-48d8-9a82-54172c608da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5feaf058-3014-416a-825f-5b40d87a5b37",
        "cursor": {
          "ref": "e1588595-2748-4b46-a05f-c1cbf468b022",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "96c8b81d-79ab-4692-bcb1-eafb4664877c"
        },
        "item": {
          "id": "5feaf058-3014-416a-825f-5b40d87a5b37",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4eb39c88-337d-465e-90e6-875077b29585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b3e139b-e2e9-42dc-8eb5-a16a3e29e25c",
        "cursor": {
          "ref": "9353fecf-fa5c-4dc6-a5c6-c61d4d630dd3",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "fd45069b-1565-42af-b488-a29ea818267e"
        },
        "item": {
          "id": "4b3e139b-e2e9-42dc-8eb5-a16a3e29e25c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "28035979-aa72-4272-9d4e-515b0d2c8055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4341f703-a5f1-4a17-a0d3-2a89a3d97c30",
        "cursor": {
          "ref": "1b9fee90-20a7-489e-996d-f8ca98ff4916",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "00f29bb6-bc2d-4566-bbf7-d533e76d9722"
        },
        "item": {
          "id": "4341f703-a5f1-4a17-a0d3-2a89a3d97c30",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8b2a650c-5f8f-4b34-886b-e423252cd3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94b073c-711b-4e97-8129-9ab2181fe31d",
        "cursor": {
          "ref": "a869685c-f950-4250-a846-ff2c8da2f04f",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c417e429-f4cf-49b1-b33e-223638c360c9"
        },
        "item": {
          "id": "f94b073c-711b-4e97-8129-9ab2181fe31d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "40b46792-9bca-45ad-bbf0-4bf54c1d4c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe29e1e-4020-48cb-ae34-50a533038717",
        "cursor": {
          "ref": "b8e5689f-be43-4e0b-bf87-e82762e6148c",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1e7d8900-0a02-4ad9-a847-889a700815c6"
        },
        "item": {
          "id": "2fe29e1e-4020-48cb-ae34-50a533038717",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "713bb7a9-0f8a-4622-b567-5e8b13f35f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e40fa7-53c5-4148-bd31-575fee2c80b3",
        "cursor": {
          "ref": "2cb840c3-26a1-4edb-8fac-fefee0a4e3d0",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ff24f04a-4f37-49f1-8f0d-4e576b1b6ed0"
        },
        "item": {
          "id": "f8e40fa7-53c5-4148-bd31-575fee2c80b3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "644bd705-a900-4f69-b09e-afaa0a72f411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906ac4dd-6067-4de7-a727-4cd6055c5511",
        "cursor": {
          "ref": "a960563a-ddf1-46c2-bd26-1c11659ec9dc",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "dffc39d6-d128-4fca-97d7-722e5b206b26"
        },
        "item": {
          "id": "906ac4dd-6067-4de7-a727-4cd6055c5511",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ae87231d-cb2f-417b-844f-c3135674fc82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c105b571-61a1-4c2a-a3bb-343ca3a5e590",
        "cursor": {
          "ref": "8450506a-9897-48e1-9cb6-3375e29d91db",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f179ed2a-5fb5-4df4-8fd3-4e4a6299840a"
        },
        "item": {
          "id": "c105b571-61a1-4c2a-a3bb-343ca3a5e590",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "62adc0d9-78b3-4337-85b5-ca710b4437b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7849b6da-02ec-4d26-bf9f-be66d1e143e5",
        "cursor": {
          "ref": "a9e9fa3c-eff4-4a5e-8101-32e31560c523",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "eed1664c-2ccf-4355-ba8e-d9d7c76e77e8"
        },
        "item": {
          "id": "7849b6da-02ec-4d26-bf9f-be66d1e143e5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0ad1382e-58af-45ee-8ea7-6f8c4a9daef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5aa0ac8-29cf-4f97-be62-17eab4b1ad21",
        "cursor": {
          "ref": "9817dacd-9174-4b5f-a701-0724bffbcba6",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5833ab4d-1930-4114-8c32-30b0481eb774"
        },
        "item": {
          "id": "e5aa0ac8-29cf-4f97-be62-17eab4b1ad21",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1454cc75-08dd-4848-bf7c-fa4583fb1fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd83e4e-593f-495f-8dc5-075577c57574",
        "cursor": {
          "ref": "bbc1ef29-29ae-4a1a-b377-429a728d0c58",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "78f0786f-cdcc-4d5d-8739-5d6a8844124c"
        },
        "item": {
          "id": "7bd83e4e-593f-495f-8dc5-075577c57574",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "91e68692-9443-43b0-a046-23c122243019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aacade7d-b391-47d8-b8a8-f06ae95fa0a9",
        "cursor": {
          "ref": "25a2239b-6bb8-463d-b3f4-a5fec790e4cf",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "03db37f5-22de-4ac8-93ac-71f9d1ea7166"
        },
        "item": {
          "id": "aacade7d-b391-47d8-b8a8-f06ae95fa0a9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "821e5657-53a1-40aa-bc8b-4cb995f292c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09071382-7fdf-452e-aa50-a2cbcf666e0c",
        "cursor": {
          "ref": "c6183b16-2091-4e73-acac-87f10a63b0b6",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2971ddb2-6e80-406b-a360-e35b2220384a"
        },
        "item": {
          "id": "09071382-7fdf-452e-aa50-a2cbcf666e0c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ddeec6fc-264a-4703-a8fe-de2282b587d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803de55b-4e14-4b93-be78-c5c2d84d93f6",
        "cursor": {
          "ref": "053957f1-3e7c-4e12-84d6-31cd02c7bd15",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "cb9e6a85-fcc7-49ff-9e80-7d97a96aec04"
        },
        "item": {
          "id": "803de55b-4e14-4b93-be78-c5c2d84d93f6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b4ca3111-2519-452d-900c-3d6392a7b9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bd7a18-845b-4218-94b2-1fe29754cab7",
        "cursor": {
          "ref": "7e3b7f74-cff8-4adf-8a89-57dd618fee52",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4e5db574-e4e5-49bb-a0d4-b7c319f290e1"
        },
        "item": {
          "id": "09bd7a18-845b-4218-94b2-1fe29754cab7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b30aa605-58d9-41ea-a403-b54245c5de2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9471e17-bfe0-4d3e-9429-2a5ae9bc8e70",
        "cursor": {
          "ref": "dac4077c-4061-471b-be3d-ee68be21f943",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d2f19d70-8739-4f40-b509-ade9419766f8"
        },
        "item": {
          "id": "d9471e17-bfe0-4d3e-9429-2a5ae9bc8e70",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1ab8d4a1-571b-4ec4-abb7-764fcdf3d1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a3c466-ea66-4575-a2ae-9065f6256664",
        "cursor": {
          "ref": "2007c68e-da76-4c00-b9f3-cd0715943917",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4e310968-6af8-4016-bc3c-bd70f1847cae"
        },
        "item": {
          "id": "31a3c466-ea66-4575-a2ae-9065f6256664",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4d78b321-04dd-4812-9468-5e930b3aacb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256eaa58-c8dd-4f81-b8ef-183a0346a3f2",
        "cursor": {
          "ref": "7872379a-0df0-46f3-90ab-74b7ef3667eb",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8bff7f47-410d-4512-815c-0acc327cc6d3"
        },
        "item": {
          "id": "256eaa58-c8dd-4f81-b8ef-183a0346a3f2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f20e60a7-27d1-4841-8c2a-9d433ec00f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e204b130-ed87-4025-abd0-4650fab42be5",
        "cursor": {
          "ref": "25a9377b-2dcb-490a-aa3a-8018ca296720",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7d836cac-2b92-4108-a571-1da2c76dea73"
        },
        "item": {
          "id": "e204b130-ed87-4025-abd0-4650fab42be5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "88cb96a0-c95a-4343-837f-3ab101d01924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da39aeea-333e-409b-96ae-9579ae3ae0f1",
        "cursor": {
          "ref": "68fba90f-8b4d-4a55-ae77-7e20b80caef2",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "835f6cca-ab62-45a6-9565-5941a284a916"
        },
        "item": {
          "id": "da39aeea-333e-409b-96ae-9579ae3ae0f1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9b2b38e0-9739-4ae8-9b87-c2479cdfb91a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb50664-2ef6-4260-96b6-46e48bc4329f",
        "cursor": {
          "ref": "1ddd942b-04ee-4709-be88-44ecee88faec",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "56477cc6-6a6c-4556-a75a-6b77c91490ed"
        },
        "item": {
          "id": "3bb50664-2ef6-4260-96b6-46e48bc4329f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "39941611-64ee-4c9f-8caf-2ffec1b70d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08008b6a-34c0-477f-83bb-85e77f416586",
        "cursor": {
          "ref": "2137879f-8002-4f8c-92af-8e815fece315",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5c3ee5c5-72fd-408f-94e8-e3fe0d393f3a"
        },
        "item": {
          "id": "08008b6a-34c0-477f-83bb-85e77f416586",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "292b61a5-74a8-4172-b8e9-a03c599cd394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828e1070-942a-4297-8804-a88aeb080ed0",
        "cursor": {
          "ref": "843277ca-6bbe-441d-8ad0-bfa7fa0e55db",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "47ac66c3-734a-402b-932f-f03c734ad8d8"
        },
        "item": {
          "id": "828e1070-942a-4297-8804-a88aeb080ed0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c55c756b-189f-4fd5-a7c8-82e423df08e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50f7229-3785-41fe-a2a4-143fee203dc6",
        "cursor": {
          "ref": "ef191742-bd3f-4340-898a-b2eb02aa5cb8",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "654d2c56-9207-4ece-990b-d73f5fe39c6d"
        },
        "item": {
          "id": "c50f7229-3785-41fe-a2a4-143fee203dc6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4943e340-6215-4961-bf53-c057cf1c6d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07551e49-4af4-4568-a68f-5e09f8f28d35",
        "cursor": {
          "ref": "80c62146-c503-4c07-b795-a87f4c64c526",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "30f833be-f871-408b-8458-9c3d4e0e7610"
        },
        "item": {
          "id": "07551e49-4af4-4568-a68f-5e09f8f28d35",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "bd3cef09-577b-4400-91d2-5a23383d0841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a3e41bf-7a27-4071-b355-8fa6923b4b79",
        "cursor": {
          "ref": "91829947-8155-4058-b160-ac26de2ae012",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "35e1cd37-8715-42a5-8b24-dcfc9b818040"
        },
        "item": {
          "id": "1a3e41bf-7a27-4071-b355-8fa6923b4b79",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7e7c8078-eaeb-4dfd-94a2-4ce30e0a6a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95ab9fa-51bc-4ce5-819a-e0fc3f6d97aa",
        "cursor": {
          "ref": "1de44767-18df-4d08-85ec-676536d4c9da",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "877eab1f-6e27-49da-b2ee-675ac507a46e"
        },
        "item": {
          "id": "b95ab9fa-51bc-4ce5-819a-e0fc3f6d97aa",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "631e252b-d6fb-415c-b521-24bab9ad8a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d0412a-1099-4951-a31a-66f48f7830e1",
        "cursor": {
          "ref": "545017e9-fcf8-405e-9326-ae7260b09977",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "873937ea-1299-4b5a-abb6-3e049debf3de"
        },
        "item": {
          "id": "66d0412a-1099-4951-a31a-66f48f7830e1",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ab6359f3-7385-456e-a7c6-37d9fe139059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4454cc3-7124-4ec6-8a45-60e397aa2e34",
        "cursor": {
          "ref": "3d7f7850-eea6-4503-92f5-ae586db20f9d",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a3d8979e-d055-4fcc-9f38-5519454770c6"
        },
        "item": {
          "id": "f4454cc3-7124-4ec6-8a45-60e397aa2e34",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "31103aee-2832-4c13-a6f1-cce7e646dc94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39e6b2b-4d4e-4cdb-af60-5bbb8f035b8d",
        "cursor": {
          "ref": "49c2767c-8a33-4e5d-b7a7-826bd9846501",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "29f2554b-410a-41e2-96cc-0d44308da08b"
        },
        "item": {
          "id": "a39e6b2b-4d4e-4cdb-af60-5bbb8f035b8d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "cb230ca2-68f1-4e85-b78d-1e5a5a4ad8bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf94cb3b-e182-4d11-9de5-09720e0cad17",
        "cursor": {
          "ref": "2967e378-abbe-4cdb-a7df-fc420485dac9",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "86d59a1f-6620-4b7a-81e6-0a1f37031f69"
        },
        "item": {
          "id": "cf94cb3b-e182-4d11-9de5-09720e0cad17",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "db88bc75-48e4-4ad2-b082-8c27d2655edc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "669f21ec-fcec-475b-b05e-fb03f24051bc",
        "cursor": {
          "ref": "4ac522a3-3340-4352-b3b3-46242ccbb9c8",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5895c670-c683-425a-8f3e-b76202747525"
        },
        "item": {
          "id": "669f21ec-fcec-475b-b05e-fb03f24051bc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4277789a-b53b-4587-b3f4-2143ea50e6a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a632b71-2aec-4a10-9962-b23342c9be22",
        "cursor": {
          "ref": "cf8c47c2-bf1e-4171-b849-ed98febf3061",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "921cffbc-4f34-4fc5-808d-d52e42ed9dff"
        },
        "item": {
          "id": "7a632b71-2aec-4a10-9962-b23342c9be22",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "25bc1321-ac07-491f-8475-51903a73fd37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2dfa319-ee06-4bd0-baf3-fec52b019ffe",
        "cursor": {
          "ref": "087b269f-32e3-496e-9c9e-1ac3c377630c",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a98993b9-60c1-416f-a55a-cbd8032600aa"
        },
        "item": {
          "id": "a2dfa319-ee06-4bd0-baf3-fec52b019ffe",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "57c63648-5bd5-47c4-94e6-5c078be9c37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136d8ce9-14f6-47fa-a2bc-a33f93232041",
        "cursor": {
          "ref": "285c3894-f72f-4e5b-b405-327ebcb5548c",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a7da82af-023d-41e6-bda8-6b09e0d27e09"
        },
        "item": {
          "id": "136d8ce9-14f6-47fa-a2bc-a33f93232041",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "22e46706-93ee-46c0-b0af-8820f3c9f6a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e244d860-12ed-4f57-b204-45f87513bf49",
        "cursor": {
          "ref": "fb786713-6219-4502-b99b-c56fda681e6b",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4ab6fb49-90d9-4fde-9b2d-220973d5f1f4"
        },
        "item": {
          "id": "e244d860-12ed-4f57-b204-45f87513bf49",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "143c5a44-88df-4539-9b4c-2064b20d531b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e66b77-60e5-49a6-8bf8-39798d726528",
        "cursor": {
          "ref": "d2de7806-b577-499c-a626-7c0216e666b3",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "33852a9d-03b9-4b61-8e9d-806ccd3c434a"
        },
        "item": {
          "id": "04e66b77-60e5-49a6-8bf8-39798d726528",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4cea4264-b67f-469a-85d9-b0f37dd5a69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af42c65b-de09-498e-9bd8-05a35bfc1478",
        "cursor": {
          "ref": "33c1d855-5b1f-4c05-94db-e9fc13e495a9",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e604e863-659e-4988-9050-1369e77632bb"
        },
        "item": {
          "id": "af42c65b-de09-498e-9bd8-05a35bfc1478",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d8659dcb-6cd8-4888-b319-1865d387fc28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4456450-9ce4-4bc5-acab-e94b7f989910",
        "cursor": {
          "ref": "5efda3c3-e2d2-437f-92af-101a478540bc",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a22d2090-7fbd-47df-b703-838729321f4d"
        },
        "item": {
          "id": "f4456450-9ce4-4bc5-acab-e94b7f989910",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "716c9872-56f8-4a20-84a8-eb2934ec8125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23231f53-c1b3-4746-9773-49d96a509d9c",
        "cursor": {
          "ref": "45106f94-6735-4d36-a0d5-2bf8da5fc2a2",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9b49ad14-00dd-440f-9c83-dfb00ebfa1e0"
        },
        "item": {
          "id": "23231f53-c1b3-4746-9773-49d96a509d9c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6cab1aa0-5a16-4bdc-908c-c701adeb9a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d68be7-98b4-46e7-9df9-a0584591d0db",
        "cursor": {
          "ref": "2ec7953a-3b0d-4189-81d7-5393646b2d46",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "da27c24f-dcc2-43bb-aca1-fbeb332e0947"
        },
        "item": {
          "id": "87d68be7-98b4-46e7-9df9-a0584591d0db",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2f99f6d2-1e96-4d68-874d-b158d3c76ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2f4ee7-dda5-4219-96b1-4ef1d5691403",
        "cursor": {
          "ref": "12c4ed72-2ed6-41e9-ab8c-5ff43b2ab746",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bf3cde8e-23fd-4e3b-a35b-e3d8a2992e15"
        },
        "item": {
          "id": "3e2f4ee7-dda5-4219-96b1-4ef1d5691403",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "32f6ae7d-d222-417d-adb7-e1e1b22d3cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d7bed15-a1c0-4b9f-aa06-e10284a95622",
        "cursor": {
          "ref": "7c2a31a8-6ff0-4be2-b091-620b62f82283",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d55403fe-45a9-4fbe-92c7-bd1007e19b9b"
        },
        "item": {
          "id": "2d7bed15-a1c0-4b9f-aa06-e10284a95622",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8ad10679-2e7e-4f18-a866-ee3f1910097f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbef5d53-ae60-46ba-a64e-e23b59db0ced",
        "cursor": {
          "ref": "ef0ce2c5-812b-47c8-a323-bcf7221ae8e7",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "06364ce3-98b1-4900-b2e7-6b77935bebad"
        },
        "item": {
          "id": "cbef5d53-ae60-46ba-a64e-e23b59db0ced",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "826b5729-f922-4e92-b6f4-41940b278d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e77ef6c-845f-4ec2-8963-a3820553c129",
        "cursor": {
          "ref": "7b3b0412-bf48-40ab-afe9-641e8f0b604c",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "412039e7-f057-44bb-83cd-53ef699931ad"
        },
        "item": {
          "id": "4e77ef6c-845f-4ec2-8963-a3820553c129",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "562b8db3-4f57-4c18-a8a3-ec7602669663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4086c8-07fb-426b-872d-4df1b9cd9859",
        "cursor": {
          "ref": "81e27321-4c6b-4afb-99d0-f8bdb6ef903b",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8d2264b5-9e99-4426-bbdd-9ad39d4aa7bc"
        },
        "item": {
          "id": "ee4086c8-07fb-426b-872d-4df1b9cd9859",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0f8fc52b-9698-467b-a890-bdb525c4b954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1474aa47-8a85-4e7a-abbb-27092f0af6b5",
        "cursor": {
          "ref": "95dbca74-c6a2-453d-a412-cc32e8d0c135",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "66c3b959-b0f3-466e-b20e-590d4d9959ba"
        },
        "item": {
          "id": "1474aa47-8a85-4e7a-abbb-27092f0af6b5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0853e48a-c78a-4d14-835b-022495ead1c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b13327-bba6-4474-b40e-41014b08357b",
        "cursor": {
          "ref": "3f1fb34d-b6a2-4a13-a218-e604f44d4f66",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f585c68b-a137-44f8-a36b-ec0b11d34006"
        },
        "item": {
          "id": "94b13327-bba6-4474-b40e-41014b08357b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2ac76fca-7dac-41c8-9c31-bcd974bc80ec",
          "status": "OK",
          "code": 200,
          "responseTime": 246,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "5cb853e1-cbaf-4b3e-ac2d-26e387a3fd5a",
        "cursor": {
          "ref": "30e5ed86-c937-4242-b7d5-139eaae49a99",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9cee0443-ae6b-45c2-9431-d436b6a52d47"
        },
        "item": {
          "id": "5cb853e1-cbaf-4b3e-ac2d-26e387a3fd5a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6071b0a3-d0c4-4a5c-936b-7aa1029ecfdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6349d5f-b866-425f-a554-cb74d2f7ef4f",
        "cursor": {
          "ref": "21f5a6dc-265e-473a-a95e-ea4e39b34fb9",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f355ee65-c968-4961-b7b9-df643968e43f"
        },
        "item": {
          "id": "e6349d5f-b866-425f-a554-cb74d2f7ef4f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "383b3720-3b6b-4efa-9a76-f4538d8b3146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f25673-b3b3-4650-8f74-551b2f3284cc",
        "cursor": {
          "ref": "4b74809f-3a37-4b69-9a51-f208cd9a8ae3",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "29e5b773-8523-4cb4-bcc2-3370ae8ae273"
        },
        "item": {
          "id": "b1f25673-b3b3-4650-8f74-551b2f3284cc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "99e796d4-9900-4762-a145-f04086426c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade8217d-e1f7-4847-a602-ca26bbc5dca0",
        "cursor": {
          "ref": "1998f990-797b-44f1-b3a0-97e9fabdd2b5",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "228ad4ed-595b-4ac7-9607-d0345dbe114d"
        },
        "item": {
          "id": "ade8217d-e1f7-4847-a602-ca26bbc5dca0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7b7eedbc-4054-4535-84d6-1883b7273b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4668c00a-6e17-457b-84cc-ef59859919ad",
        "cursor": {
          "ref": "32dad3ca-787b-48b7-81f4-b051760e2428",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "973a1620-96a0-409f-b4d7-3b851e54c5ec"
        },
        "item": {
          "id": "4668c00a-6e17-457b-84cc-ef59859919ad",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b4349d28-7507-4785-85e6-41e29ea4c12e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "347a6e56-df70-472f-b967-aea9961ccc9c",
        "cursor": {
          "ref": "1cbecb10-e59d-4340-99d4-3b7230ffb6ce",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "153d5f75-f8a1-4d5c-8f68-a5f0792fa589"
        },
        "item": {
          "id": "347a6e56-df70-472f-b967-aea9961ccc9c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a8b04d38-0ed2-4166-a682-b4950faabf72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "852589d3-211b-45f3-9116-f0b707ed31c2",
        "cursor": {
          "ref": "f08f541d-93fa-4ceb-851b-4045cce365b6",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "18d3c16b-ea93-4084-856e-b5b6572e56ef"
        },
        "item": {
          "id": "852589d3-211b-45f3-9116-f0b707ed31c2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7f942d27-c884-4397-bbdf-76ec4d614ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa95d49e-7fce-45b3-907e-874fdc332243",
        "cursor": {
          "ref": "ef512475-69de-47df-9726-943d3c9f62c7",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ba6feb5d-54ac-4642-ac0e-240cf0043f1a"
        },
        "item": {
          "id": "aa95d49e-7fce-45b3-907e-874fdc332243",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6f11f66e-56aa-42c1-839a-83f228c45eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7b74a3-8d24-45c0-89a5-8477b22dc301",
        "cursor": {
          "ref": "7b5a16e3-7ed9-442d-903d-01282d3f7f23",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "edea6e92-c0d4-4dfb-9b0e-796a2ceb3679"
        },
        "item": {
          "id": "0a7b74a3-8d24-45c0-89a5-8477b22dc301",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "693b9736-c204-492d-83a6-8feafd6dc094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36872e57-773a-4364-8c08-0952ce34c253",
        "cursor": {
          "ref": "a866396c-c759-4e53-9519-b5387f3f9204",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2bf38a41-4bc0-4d9c-9297-63a30954be47"
        },
        "item": {
          "id": "36872e57-773a-4364-8c08-0952ce34c253",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "24f8dcfb-8287-4056-b4cd-0868addbc131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcbde75b-1f4e-416c-ae73-e1b235f8f30d",
        "cursor": {
          "ref": "f5651e0b-07c4-4893-801e-e2f01618770b",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "183dab05-d440-4dbb-a509-6af3097b77ea"
        },
        "item": {
          "id": "bcbde75b-1f4e-416c-ae73-e1b235f8f30d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a8940a02-3c39-4460-8469-689e7a1d0a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72245c2-75d7-4ec3-a2fb-d07d25a66aa2",
        "cursor": {
          "ref": "9260b579-4586-499a-ae47-be4869ec2b55",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e76060cf-a5e3-4f22-bfbe-ec5415d315a8"
        },
        "item": {
          "id": "f72245c2-75d7-4ec3-a2fb-d07d25a66aa2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9e8663d9-c407-46ef-86c3-f1ded299ab5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8178ed7-29ea-425b-8757-7e4f5cfe742c",
        "cursor": {
          "ref": "e2b91846-8fc3-48c3-a304-e76dc1043d69",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fb0e5a62-b901-4059-850f-e7304d79d519"
        },
        "item": {
          "id": "b8178ed7-29ea-425b-8757-7e4f5cfe742c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "52625eca-a269-4ad2-9b39-4e9f9f817f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340686d2-54e0-42f0-911f-94bafea6cbd4",
        "cursor": {
          "ref": "ed155abe-bc0f-4462-8afa-8920fb533b84",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2a0043bf-037b-4a62-b90b-cc178679c34a"
        },
        "item": {
          "id": "340686d2-54e0-42f0-911f-94bafea6cbd4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5fc88fda-f3f9-471c-8775-6eac1849066e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce18d94-292f-4bb1-a663-5b0369c6f157",
        "cursor": {
          "ref": "2442a032-bced-4011-ac59-b4deb98b1fb8",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2a22a1be-cf72-41d1-9155-20717bc4092a"
        },
        "item": {
          "id": "8ce18d94-292f-4bb1-a663-5b0369c6f157",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ef772d82-d13a-40d4-b270-c49ad56f74fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2742e7-0b77-416b-99b6-bc1c88f90461",
        "cursor": {
          "ref": "f81c3a9c-a802-489f-8b52-4128ee0a8c26",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "012cc074-9bef-4727-839d-cf12dcc7071f"
        },
        "item": {
          "id": "aa2742e7-0b77-416b-99b6-bc1c88f90461",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "727ce3ef-eefe-444b-9b48-2b8378cdc244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0698082f-48a4-4280-93c8-855b0b1102d3",
        "cursor": {
          "ref": "bd6315c6-543c-4e40-9425-9c782b56b212",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "fdbd0075-0876-4fe7-89a2-b465784be1c3"
        },
        "item": {
          "id": "0698082f-48a4-4280-93c8-855b0b1102d3",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3e6f0c0b-8f72-46cd-8774-3fb9708b44a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c285d7-ed47-4e00-9b4c-bf25c8fa4c47",
        "cursor": {
          "ref": "62765d10-5e76-413e-94dd-24605f0d4a4e",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "48bf13d8-b1b6-4479-947d-b15c252bac55"
        },
        "item": {
          "id": "64c285d7-ed47-4e00-9b4c-bf25c8fa4c47",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4645f0a8-3e51-4a72-85e5-445b4de305ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "940ccbf7-7612-4156-aefe-32f81a73eacd",
        "cursor": {
          "ref": "b66feca1-972d-40dc-8176-66b408cf4406",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e46fc12c-aaae-4de7-841f-6336669c1e82"
        },
        "item": {
          "id": "940ccbf7-7612-4156-aefe-32f81a73eacd",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b252842d-24f5-4651-9825-9e83c30f7ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d25eac-e0d7-47f0-a3bd-094d5e988f62",
        "cursor": {
          "ref": "4f2709af-1266-4d5e-adb1-2a0a5f4b2168",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "19511762-007c-4a98-8258-c192519e599a"
        },
        "item": {
          "id": "b2d25eac-e0d7-47f0-a3bd-094d5e988f62",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cc0528b2-e6d8-44be-b1f1-c28df86425bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d325205c-3d58-42fc-af76-f1954686c023",
        "cursor": {
          "ref": "28815f33-f7bf-4d22-bee2-29bdbdc02efe",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "20740351-10cc-4cf7-8c60-8567c11d1f87"
        },
        "item": {
          "id": "d325205c-3d58-42fc-af76-f1954686c023",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1f5ae3e9-02e3-4d9a-9396-d75a3ae771a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c80dd8-c547-4101-91f0-80c1828d2df9",
        "cursor": {
          "ref": "c72eeaa1-facf-4233-abf1-6e086603bcb1",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "89f51671-9014-4d5d-830b-817c13d7a804"
        },
        "item": {
          "id": "11c80dd8-c547-4101-91f0-80c1828d2df9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dd7fc1c6-ea18-4ec0-8c89-1b8a827c6e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb57beb-590c-49ad-b04c-921c37832123",
        "cursor": {
          "ref": "96038073-0bef-450d-9c94-fe98531ee2ba",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7c92aeb9-4007-44b0-8a56-a5e1e0d9bb4d"
        },
        "item": {
          "id": "dbb57beb-590c-49ad-b04c-921c37832123",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "fd88d1f8-eee0-4a41-a5ec-c5c420b4ca86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a23058-6d1b-4ed5-aa8d-196282b6f252",
        "cursor": {
          "ref": "7b62bd57-7e65-497b-aa4f-bb10c1defd31",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f203e725-eb31-4b6b-9b8a-c145fba7ab74"
        },
        "item": {
          "id": "60a23058-6d1b-4ed5-aa8d-196282b6f252",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7f40c89c-912c-4911-bb65-ce627bad5eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a95c77-6afe-42a5-b35f-ba11e2e2bb85",
        "cursor": {
          "ref": "3cb65ac4-a735-480f-8e60-ccad30b8bb83",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6cf59e7d-9a69-467f-bd28-d47855146ce2"
        },
        "item": {
          "id": "d1a95c77-6afe-42a5-b35f-ba11e2e2bb85",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6611d297-f622-489a-8204-ba147e01995e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa949eba-3ba9-41bf-8754-7f43fe839ecc",
        "cursor": {
          "ref": "e89e0834-94d7-48f7-b436-d8c4d89315ca",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c4973f4d-3b48-4f80-8ae8-5438ea6b8379"
        },
        "item": {
          "id": "aa949eba-3ba9-41bf-8754-7f43fe839ecc",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6a1efb87-b58e-4522-914e-082855cdd45c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9437f2-f80c-4769-af75-1d7d5301b1d5",
        "cursor": {
          "ref": "51242b5c-5f14-4bf5-8e7f-33dcdea44b0f",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6a682059-e4d9-4f0b-ac9c-40f56a860eeb"
        },
        "item": {
          "id": "ba9437f2-f80c-4769-af75-1d7d5301b1d5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5178690e-1fe7-4a1b-bf21-22aa3e9a2170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8193f2-b794-4460-971b-a6285f413df5",
        "cursor": {
          "ref": "b0d82414-9566-4c62-bb16-afb930567032",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4e604003-1893-4c9b-8971-b2743e32eba8"
        },
        "item": {
          "id": "3e8193f2-b794-4460-971b-a6285f413df5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9a825347-c2f0-457f-bbbf-8bd4b1b03d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a682eb4-0548-4cbb-8b61-635a6b65a552",
        "cursor": {
          "ref": "8f270f95-bee6-496d-ab54-7e4ff7c44808",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "dd346cd6-454d-4e2c-aac6-90983be66dd0"
        },
        "item": {
          "id": "8a682eb4-0548-4cbb-8b61-635a6b65a552",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9c009232-5b7f-4b18-b3a0-535ac343e8d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e308e1-e0d4-4967-be90-ecd6287a4fdc",
        "cursor": {
          "ref": "59de2a62-a85d-4516-a821-fb17117411d7",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a4df731d-e6ae-4bbf-928a-34b206b52387"
        },
        "item": {
          "id": "87e308e1-e0d4-4967-be90-ecd6287a4fdc",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "79ffe055-1807-4c04-897a-b77262e52422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1559ef-6065-4e61-aab2-5d0de62142d0",
        "cursor": {
          "ref": "c6a17fb1-e0d6-4e9e-9fa0-abb866c3923d",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "128fe3f0-d039-4f9e-86f4-2b7e3c0d4445"
        },
        "item": {
          "id": "fd1559ef-6065-4e61-aab2-5d0de62142d0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "600fc8ec-f293-4dda-838c-d8140279013a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c679b3a-3c8c-42bf-9bc6-ec3f880874eb",
        "cursor": {
          "ref": "85e4c066-8313-417a-ba82-97efbec9c2c4",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "575dda40-4d1c-47be-85fc-4c2e3485684c"
        },
        "item": {
          "id": "4c679b3a-3c8c-42bf-9bc6-ec3f880874eb",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f91fc39b-958e-4cf0-a2e4-62ade0216936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cac94da-984b-4a25-8a44-2004efb5cb5b",
        "cursor": {
          "ref": "6495cb39-e88a-4463-af62-eda3fb8b2f17",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "159cf360-3a27-4947-ba9a-4dce58b6b65d"
        },
        "item": {
          "id": "1cac94da-984b-4a25-8a44-2004efb5cb5b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9a6b251c-f1e4-432c-8230-7717aa68ff61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a3f733-15e2-4dad-9ac8-ef3410b9e1ce",
        "cursor": {
          "ref": "2d73ce8c-a9b9-4dfb-900a-86fcb9aa9d0e",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "21ba1904-e9c6-4baa-a72e-970e70919bcf"
        },
        "item": {
          "id": "69a3f733-15e2-4dad-9ac8-ef3410b9e1ce",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5f085b35-4be9-4bf5-bb22-a962db286306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328ac94f-d689-403c-ab2c-81641d47bb8b",
        "cursor": {
          "ref": "d55d5078-c7ad-4675-b7cf-6a59423d17e8",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bfcb20fb-2fd7-477d-a9f2-39bfc3d7e4e5"
        },
        "item": {
          "id": "328ac94f-d689-403c-ab2c-81641d47bb8b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8e2a944c-9958-44e1-b602-ee423cc63127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd4e228-a9ed-4b21-983e-eb30c310866b",
        "cursor": {
          "ref": "5eb9c096-cd6a-45f4-84d8-112fd529ce32",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2045b19d-e777-4c70-b4f3-885b3d5f4c5d"
        },
        "item": {
          "id": "bbd4e228-a9ed-4b21-983e-eb30c310866b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3353b971-2b52-44dd-ba0f-5ba83723123a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fbb2ce-f1d3-4d57-bc58-d460a8889303",
        "cursor": {
          "ref": "d874435b-cb4a-4702-b5a6-0d7290e239ed",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "23e869bf-2f9c-4168-b7c8-7e4d54565830"
        },
        "item": {
          "id": "d3fbb2ce-f1d3-4d57-bc58-d460a8889303",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0f475a0b-c682-4853-9d99-95f1d85278aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "003010ca-5575-4564-8fc7-77b21fdb297d",
        "cursor": {
          "ref": "7b4ba558-93f7-482f-99a2-8f3afe921178",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3fe13c09-cf0c-4e0f-8def-068c0af16055"
        },
        "item": {
          "id": "003010ca-5575-4564-8fc7-77b21fdb297d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5fef552f-56ab-4acd-b517-1fe3d90ff953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c2f7ae-ca51-4e6f-98f0-cb0f27e553f3",
        "cursor": {
          "ref": "7f1573bb-f88c-448d-8bca-e00771001b86",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f8d9a95f-0989-4789-baed-08949cc2f671"
        },
        "item": {
          "id": "63c2f7ae-ca51-4e6f-98f0-cb0f27e553f3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9b8a0dbc-28ca-4b3a-939a-2f37f38981b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "900a079b-e9fd-4732-91da-6467fb1a5048",
        "cursor": {
          "ref": "e0ec1362-f3bd-4fc6-9ffb-7ee26da5db01",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "dc08e0df-c351-4b84-b505-9334ea21ec31"
        },
        "item": {
          "id": "900a079b-e9fd-4732-91da-6467fb1a5048",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ea50e15d-204d-4c19-8ae2-2efd066ceda0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac4610d-d744-4106-a188-088ba92aa393",
        "cursor": {
          "ref": "2ff5fd65-bca2-47ab-93b2-6af0a81e1fad",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2b1f4c3b-549b-4f60-82d9-d2a6f848673d"
        },
        "item": {
          "id": "aac4610d-d744-4106-a188-088ba92aa393",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5a561082-af7c-42ab-aed2-ed926e0c1c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "370ab2e7-8f4a-4311-8ce9-d9ed63f7045a",
        "cursor": {
          "ref": "85720aa4-2e2d-463b-a236-da003d046ee9",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "87e36d99-cc33-45ce-8834-49478c6a6c62"
        },
        "item": {
          "id": "370ab2e7-8f4a-4311-8ce9-d9ed63f7045a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8dba4fe1-b5fc-4bf3-86c3-81badbf26760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd9e541-7cba-496f-8d97-680ea58492f9",
        "cursor": {
          "ref": "b2483a66-b617-4d5e-9c16-01c696721544",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0499ffe2-bd65-4630-a3ef-e44185e65f8e"
        },
        "item": {
          "id": "3fd9e541-7cba-496f-8d97-680ea58492f9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b27e2f77-42dc-4ce5-a77c-450b0d618345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d1fa4a-67c9-4628-8cc2-75f9f9eed465",
        "cursor": {
          "ref": "d84e5e4b-13df-4184-8f12-258462d52497",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0ea7411d-fa5a-4c59-8d99-8f3a1fa01830"
        },
        "item": {
          "id": "d4d1fa4a-67c9-4628-8cc2-75f9f9eed465",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3130024a-92a0-40ed-baa3-477fbee98ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc0f334-1747-4f3e-a741-d09f30fbf7cd",
        "cursor": {
          "ref": "fa39d622-31ff-412e-8c9f-4fe325bb4486",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c3a0a7ba-7dc7-4b94-9f4a-ba547e98b1c0"
        },
        "item": {
          "id": "7cc0f334-1747-4f3e-a741-d09f30fbf7cd",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "464a6b8f-8efc-40ff-8d5d-a681201a9685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d7df24-1dbc-4bd4-a356-ae2a9a0429cf",
        "cursor": {
          "ref": "9e1e2b51-fe52-4a59-b78f-990a38f98bbe",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "aaba5c25-9230-472e-9b61-f40ea4340f92"
        },
        "item": {
          "id": "38d7df24-1dbc-4bd4-a356-ae2a9a0429cf",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b5e2a6d7-d23b-44a0-a463-d5b3ad204c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8875034d-bbb4-4c7f-a6ef-033ef30e11be",
        "cursor": {
          "ref": "a42a0019-e107-4f97-8739-f1ec9ec761ce",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "51f8afb5-0158-4bb4-a43a-05900b2c955c"
        },
        "item": {
          "id": "8875034d-bbb4-4c7f-a6ef-033ef30e11be",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e5c08ba1-6fe9-4def-8d18-56c81d438cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "656d8af3-9efc-429e-94a2-360c425b817d",
        "cursor": {
          "ref": "ffba5570-9141-4090-a372-0cd4a599edf8",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a90018da-f3a2-4c9a-b5f0-78f587fb1c5d"
        },
        "item": {
          "id": "656d8af3-9efc-429e-94a2-360c425b817d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "582b12b7-d28c-4efd-91e0-6bff8bbeb9e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e58d2e-115e-4465-9229-f9d3bcc27747",
        "cursor": {
          "ref": "8a458495-a6c8-45bf-8f3f-424582fd9768",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "182982eb-9890-426d-b537-2cc1de9e1ae1"
        },
        "item": {
          "id": "98e58d2e-115e-4465-9229-f9d3bcc27747",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2c31ab2c-bb38-4c18-b0c4-e705e682b6f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746728a2-c60b-4a9c-9503-27930cd53675",
        "cursor": {
          "ref": "62ea5726-ece6-4cbe-bc62-6631f3396b4f",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "082a591b-9dee-42c9-a2bb-ba90b2969682"
        },
        "item": {
          "id": "746728a2-c60b-4a9c-9503-27930cd53675",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f9b83534-effb-4481-b454-f6c845a70a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1ddfca-6731-4e97-b64b-9d1a6bf3dbc8",
        "cursor": {
          "ref": "a3f539d1-dccc-4ae4-b99c-ffc1c6a359f8",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b91efabf-80d0-4fb7-ad65-4650dd8813ad"
        },
        "item": {
          "id": "8a1ddfca-6731-4e97-b64b-9d1a6bf3dbc8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "fff96933-9337-4da4-96b9-c3efe2c700eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4deb8f-8316-471f-aa5a-2288e42fa136",
        "cursor": {
          "ref": "28e40266-a7fa-46f8-96cd-928ec1eac3fe",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "020f8ae4-8326-4429-9337-e585b4fa6276"
        },
        "item": {
          "id": "4e4deb8f-8316-471f-aa5a-2288e42fa136",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4b4f5ae2-064b-4280-9f60-17a35378455f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca708ba2-dd4a-4479-9a88-e0563fb79531",
        "cursor": {
          "ref": "2428603b-1364-4473-8f4d-569f9de0f87e",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e73bbbf4-e72a-4cc5-8906-f1ef3dea95c0"
        },
        "item": {
          "id": "ca708ba2-dd4a-4479-9a88-e0563fb79531",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2bb06ebe-e251-4f84-bb4d-d626f6b53481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22344675-4428-48b2-bafb-0aa4438a3f03",
        "cursor": {
          "ref": "dc96935c-7b8e-4cdb-aef9-69bb9169fc73",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "883d47d7-ef0b-446b-8c27-58b28f0d52ac"
        },
        "item": {
          "id": "22344675-4428-48b2-bafb-0aa4438a3f03",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "dc358738-95a1-421a-aad8-14c56db30dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c97e48-9be8-4e1f-b1d2-18a9d387ddae",
        "cursor": {
          "ref": "06341a53-9b5f-4ecb-badc-309993ad0e47",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "59e46d50-93f5-41df-a46c-712a93d06a65"
        },
        "item": {
          "id": "45c97e48-9be8-4e1f-b1d2-18a9d387ddae",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6f70b5d7-d790-4dee-a245-041917cb71e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f01e256-9834-4f10-a223-ebd5f7abeaa2",
        "cursor": {
          "ref": "14e3a450-42db-489c-b9aa-8afd4b822990",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "257f306b-0f7a-4591-a6b4-4f0fb41483c2"
        },
        "item": {
          "id": "5f01e256-9834-4f10-a223-ebd5f7abeaa2",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4a053ed1-e731-49d7-b5cb-173b256a8abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62229a56-2d59-4f70-86f7-fc3fdb77e0f5",
        "cursor": {
          "ref": "41e7ef91-4b39-455c-b85c-4abafb23703c",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b6ac8247-260a-4a08-86e1-7866ffbe90d5"
        },
        "item": {
          "id": "62229a56-2d59-4f70-86f7-fc3fdb77e0f5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7831042b-814a-4c23-a60a-740cfb6ebdf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e77aae3-06bb-4e0a-9b04-814854660498",
        "cursor": {
          "ref": "a18f6aec-c594-49d9-a417-43cf57be5703",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "cfae3f2b-8e48-473e-a761-3cd119725a69"
        },
        "item": {
          "id": "0e77aae3-06bb-4e0a-9b04-814854660498",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "20697b5e-ca6e-47b8-a3eb-7c3c7c0fbc2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5409ee81-6899-440e-94bb-85fd6c22bbde",
        "cursor": {
          "ref": "a2e6a090-580e-4186-b939-57a2f3ed0125",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "f1796a6e-6934-4f76-9352-1dc4031822f8"
        },
        "item": {
          "id": "5409ee81-6899-440e-94bb-85fd6c22bbde",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "67f2c129-fc29-4fe7-86e7-28e31885a293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4836f9ac-6427-421f-a542-6f660489dc57",
        "cursor": {
          "ref": "1a28a562-37ab-4078-a4a0-43f2f2c6b01c",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "647549b0-1c56-4ef5-a6a8-7dd19ce27d02"
        },
        "item": {
          "id": "4836f9ac-6427-421f-a542-6f660489dc57",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "de0c6150-76ac-424b-9dcd-0dddf469738a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5144d45f-676a-4366-ab8b-816a7e5e993f",
        "cursor": {
          "ref": "a571eaaf-d7ed-49e3-bc7e-69fd9b643593",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8e7f821c-0e94-499f-9d0a-fd5b1070b6a5"
        },
        "item": {
          "id": "5144d45f-676a-4366-ab8b-816a7e5e993f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "51798b45-477e-4985-a559-9d0329e193e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2aa758-33b7-44a4-8dc5-3893e269784a",
        "cursor": {
          "ref": "730c955f-be79-4f0b-a61b-624f321f84cb",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "969e413a-6e62-4817-b7a0-66f4cd21b52e"
        },
        "item": {
          "id": "ce2aa758-33b7-44a4-8dc5-3893e269784a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6059ed48-0a4c-4f2f-93ef-155334be2b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7344b05-3535-44ee-9ffb-5a3e2b4fb835",
        "cursor": {
          "ref": "51e734d5-9c9e-493d-8f53-1709ebc69908",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "44f92de4-0043-48a2-a144-504370862415"
        },
        "item": {
          "id": "a7344b05-3535-44ee-9ffb-5a3e2b4fb835",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7515fbf4-f8e7-4a4b-ad8d-f4038bb725b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f3aaa1e-f1ac-4835-b6e7-f74d355b2563",
        "cursor": {
          "ref": "f3daa5a9-18c2-4f56-94b2-b509691bbfe0",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "fe8e3578-f182-4d70-bf0c-2a66fa3fc51d"
        },
        "item": {
          "id": "8f3aaa1e-f1ac-4835-b6e7-f74d355b2563",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "36a06146-f96c-42b9-ad3d-e79f94e4b029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cfee6f4-c35a-40db-a627-d894fe7a2f80",
        "cursor": {
          "ref": "ec19c843-42e1-4c6a-b75b-61a0b511819d",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "84703200-2ff9-401f-b0f2-adedafc70df4"
        },
        "item": {
          "id": "6cfee6f4-c35a-40db-a627-d894fe7a2f80",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "608ba7b6-9a1a-4770-b25d-581fb2867756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39aae0ca-c15c-4f7b-bc7a-d1de0251c652",
        "cursor": {
          "ref": "a01fac5f-0b82-4b8e-a54a-d705b9ffeb06",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ab008ec0-a3f9-4c92-b6e3-bca8beb14a79"
        },
        "item": {
          "id": "39aae0ca-c15c-4f7b-bc7a-d1de0251c652",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "380894f2-36e4-4d26-81f7-33580879600d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d775e5a-34bf-4666-b4e9-100d31d119ae",
        "cursor": {
          "ref": "048f2f6e-d9dc-4680-819d-790eb389e58c",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8dff3bdb-0f18-4a14-863d-309c4f147d40"
        },
        "item": {
          "id": "9d775e5a-34bf-4666-b4e9-100d31d119ae",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "fbc91a70-530a-41c8-baa0-1d28187c980c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9fe797-06b2-48c4-928d-8d7c0906b302",
        "cursor": {
          "ref": "64649fd6-7e25-4bc0-8ba9-d2431aeb2846",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "b58eab68-a7cd-4679-ba85-064ab72a677e"
        },
        "item": {
          "id": "6f9fe797-06b2-48c4-928d-8d7c0906b302",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a22b3576-4463-4711-b7a6-912639ebd846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067c90d4-e63e-405f-8f71-6cbcbb05fb29",
        "cursor": {
          "ref": "90e9ad22-ed77-40d1-9ede-13db6295fd3d",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "ea7cdb17-335f-4f81-860f-a83395fc053e"
        },
        "item": {
          "id": "067c90d4-e63e-405f-8f71-6cbcbb05fb29",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "52862e9f-ef09-4e29-8be3-1f39c802389d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa92da5e-f33b-427c-a93b-a15c530765c0",
        "cursor": {
          "ref": "425efc44-36eb-40f8-9f9e-a6ab3bb32984",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "092b7b9f-c670-4f58-a1aa-f3d470e85c9f"
        },
        "item": {
          "id": "fa92da5e-f33b-427c-a93b-a15c530765c0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2df330b2-b697-486e-b293-df5d86d40ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59039494-138d-4d10-927d-f398821526c5",
        "cursor": {
          "ref": "c3ca0e43-62d0-432a-a8db-7ba8fc0958f1",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "55f532b1-149b-4547-b026-e1e5431028ba"
        },
        "item": {
          "id": "59039494-138d-4d10-927d-f398821526c5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e133213d-120a-4e33-8e63-4dcb1fc144dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "127c59c9-158f-4412-a547-ebf412ed44d9",
        "cursor": {
          "ref": "ea518940-b525-47f2-a1e5-f1815ad089ce",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "f974fb00-20d2-48f5-b017-aeeef9c2989b"
        },
        "item": {
          "id": "127c59c9-158f-4412-a547-ebf412ed44d9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e5a397b4-f3e0-4519-9f09-c59a92453d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3098d211-79be-4a4f-a769-28e36719c988",
        "cursor": {
          "ref": "b79e0234-5549-4d21-9c19-701b0163021f",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "359c0da2-de1a-4998-b13a-cf11fb8e2921"
        },
        "item": {
          "id": "3098d211-79be-4a4f-a769-28e36719c988",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bf658713-769f-4dd9-9e84-9c61c53a0562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f7f583-ce79-4477-ba03-fd8abcb7574b",
        "cursor": {
          "ref": "f99e7748-f742-4706-863e-bd83dcafdfea",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a2155e6f-c3a9-4a84-bed9-735c3a96d1c2"
        },
        "item": {
          "id": "b9f7f583-ce79-4477-ba03-fd8abcb7574b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "98d64966-bc75-4e7f-8d8f-a8e799de91bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe8ba5a-8c58-462d-b1a4-eae6e2337f05",
        "cursor": {
          "ref": "cd81769d-a6e8-4632-a2d5-c265fb1dbf3a",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "89ce6701-0ffa-403d-8168-f71dcd7973c5"
        },
        "item": {
          "id": "abe8ba5a-8c58-462d-b1a4-eae6e2337f05",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ce69b3ac-c749-4f58-b333-1cface6b1ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c74dca-e855-4e93-b83e-20457cfcfd6f",
        "cursor": {
          "ref": "b191d207-7955-447c-8eb9-eb67a1d81903",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "eed25ee6-3b4a-4fe8-a3bb-a0c339a448e3"
        },
        "item": {
          "id": "e2c74dca-e855-4e93-b83e-20457cfcfd6f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "05fcae05-9f98-42ef-ab80-321d6b0dd6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da31888-8fb8-4a19-87b2-9be2dbc90607",
        "cursor": {
          "ref": "6fb12a84-c7dc-4555-8214-62680f1aeeab",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1fb0957e-3d1e-4a36-9bf7-685420a2cf66"
        },
        "item": {
          "id": "1da31888-8fb8-4a19-87b2-9be2dbc90607",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b655b3f8-288d-4fe5-9ae2-27c66284f99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea817be-d24b-4303-9b39-ea6261fb56ae",
        "cursor": {
          "ref": "05f3531b-6dcd-46a8-a181-54569a5a4a57",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "44d4c710-2cec-4d8a-952b-30c697cac1a6"
        },
        "item": {
          "id": "7ea817be-d24b-4303-9b39-ea6261fb56ae",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8a2cf50b-6cf3-4ea2-b052-a9324065352b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2783d382-e742-4726-b885-e649d96a606f",
        "cursor": {
          "ref": "6adb2a50-da82-4466-88b6-64f77a63ecbd",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "e69eaf87-959e-4201-85f3-75899705bb78"
        },
        "item": {
          "id": "2783d382-e742-4726-b885-e649d96a606f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "280e6f7c-9911-480a-9d23-f914acfdb554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8bae83-da9a-4fb1-adab-9c8c67b9f418",
        "cursor": {
          "ref": "d8da9ce1-abaa-42fc-8e87-07974c5fd77c",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "b285761d-b870-4a9c-860a-c5027dc5d2e4"
        },
        "item": {
          "id": "cb8bae83-da9a-4fb1-adab-9c8c67b9f418",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7a3172ec-aad0-456d-a6d2-ded3c3d710e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa55aee-71f1-47ab-9132-b7a8b63508ce",
        "cursor": {
          "ref": "87f2b16d-bae8-4b89-bd81-9519c49142d1",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "d02d5137-5211-4416-8c20-bb25314f7e22"
        },
        "item": {
          "id": "9fa55aee-71f1-47ab-9132-b7a8b63508ce",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "16b83dde-9244-43ec-8460-6cc61e3ef5d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "864c866a-bf95-491a-9e94-ab98ac819400",
        "cursor": {
          "ref": "5c1675c9-2763-456a-bfc8-c412c9c294ec",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "cb257f09-cadf-4802-8f7a-22ec6bc8e7b2"
        },
        "item": {
          "id": "864c866a-bf95-491a-9e94-ab98ac819400",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "463fb6a8-93b5-43f1-ab48-8835be514806",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ba0efe-a8d9-4922-bf07-b082dac2a92d",
        "cursor": {
          "ref": "5d234448-b01d-4cff-9c1b-a3002a3c0ef1",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "d0e363af-870f-47a6-b193-56824aca99ab"
        },
        "item": {
          "id": "d3ba0efe-a8d9-4922-bf07-b082dac2a92d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "dab4b0bf-ae66-4052-b167-5c8ba96430ea",
          "status": "OK",
          "code": 200,
          "responseTime": 2007,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34a5724-b4a6-40bf-becf-03d2b7635983",
        "cursor": {
          "ref": "02d2ea59-e691-4027-8b8f-15dab8a7ec47",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "4d419b41-155f-4df7-bb08-5120d63ee9b1"
        },
        "item": {
          "id": "f34a5724-b4a6-40bf-becf-03d2b7635983",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "65a91184-b628-451b-b1ef-8113bee12abf",
          "status": "OK",
          "code": 200,
          "responseTime": 2636,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7887faf-7e77-43b6-bc55-2c208892316b",
        "cursor": {
          "ref": "d1ece34e-6a2e-466f-8219-498f677bd2ff",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "21b7b98c-9377-4be7-b72c-d6a197860bd3"
        },
        "item": {
          "id": "b7887faf-7e77-43b6-bc55-2c208892316b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c0e222bf-7107-4085-a6ef-fb398efc08c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "b7887faf-7e77-43b6-bc55-2c208892316b",
        "cursor": {
          "ref": "d1ece34e-6a2e-466f-8219-498f677bd2ff",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "21b7b98c-9377-4be7-b72c-d6a197860bd3"
        },
        "item": {
          "id": "b7887faf-7e77-43b6-bc55-2c208892316b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c0e222bf-7107-4085-a6ef-fb398efc08c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "c47dcd20-3b52-4407-8509-86bb2a0753b2",
        "cursor": {
          "ref": "d268f7e8-6283-45a3-beaf-9545eb83634a",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "4f566ebe-0b33-46c7-b486-45008a7fe886"
        },
        "item": {
          "id": "c47dcd20-3b52-4407-8509-86bb2a0753b2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0269bf95-bece-45f1-be36-535b8ce558ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "ebe5fe2f-027e-4c8f-8e9f-ab057b6df01a",
        "cursor": {
          "ref": "7fd3534f-37ed-4058-833a-0472a51c4f2b",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "abbf2817-a430-4900-84b9-39472bf144e3"
        },
        "item": {
          "id": "ebe5fe2f-027e-4c8f-8e9f-ab057b6df01a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "77729d31-58c0-4aff-ae9f-7017c1d893ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}