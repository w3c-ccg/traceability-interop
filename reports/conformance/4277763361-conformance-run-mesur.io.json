{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "493dfe23-47ac-4263-b2be-912673b2e90c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d733cb1d-4842-46fd-9ef6-73251f08492c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "69fe41d8-2782-42d5-815e-74b3e2fc4f4d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ba88f8fe-98e5-496d-b7fe-1cbb059d436b"
                }
              }
            ]
          },
          {
            "id": "0fafa3ce-41c3-4d66-bd7e-ab1b8d128b46",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "19d3a61a-e886-4318-8e0b-8a0269ab1cef",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "809e4e2a-34c3-4c90-a78d-60d51d20223d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d9e9c71b-a8a2-4058-bf4f-24a60a847e3d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a044cec6-f84b-418c-a740-235c0cb59dbb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9fac9860-a624-4167-95b3-d223946e748a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "73be86e2-86c8-4513-b3b7-b5872722945d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a6ffb512-ac16-4dcb-8f5b-2dc2ded7496a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0a5d3374-4ca6-4765-adcf-b9c6d81bb54f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef4d9180-8fdb-4708-ae60-a8c2a3f9820b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5167a4b5-4348-494d-998a-90417f0622ec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f841fb67-84c7-48da-9d60-69c1fe851d7f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "33289975-5c7a-48e9-8c2b-4a5b809513f0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1bf44127-12ae-4859-a116-e3e825e33a3f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba5a67da-1e52-413c-a66b-fca090054ec8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e2e77f5-8795-4c50-a1e8-e1b0aefceb86"
            }
          }
        ]
      },
      {
        "id": "533fbff9-fb93-4516-85c2-5fafb596bd06",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "46c14662-b3ae-4705-bbb5-63abdfcff559",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b17c479-a966-4247-8d5e-df69d4ae4fea",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6b56bec7-294c-4627-b07d-482ebe9959c1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fac94c-76c5-41a3-bacd-282ef66628ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2da5f78b-5a12-4fed-9427-ea69c70ba1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a409a1d-fc7a-4911-9366-59021a819b7e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94854708-9f28-42cc-a454-396d6415f17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff563b9f-da7f-454c-8b6d-2061b4119bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3689f3-7a07-4504-b1a7-c13f3424211d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b06fd9f-e5f0-47bd-bb10-54c0281905c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e79093a-cda5-4566-821e-82069fdd86a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6420666a-d528-4172-96f5-4638aefaa6ab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e145ee7-193e-4cdd-965c-b4108540c09c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3488b560-d2c5-4e5a-8e5c-638d69c27ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "572a70c3-0cc5-4ed0-b8b7-28e03d1692f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3947c2cc-171a-48fa-bfca-1ea7619e6ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4676469c-3d70-4495-ad85-e00e0e16cda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cc3d39-ed04-4225-aede-068779598eda",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c79b6d-4578-4abe-ab35-5672cbae71bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a3b55a5-6809-401d-a693-b24fcbe76aae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93b7de1-5c83-4c81-bcc8-cfb72ae71627",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "7197c8b7-e20b-47a2-acf9-71435faad398"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bcc0fbd2-9727-499a-acf9-12a6cfb3fc2a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "08d37c40-aa7f-4d6d-ba13-6f61a4290cd5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "588049d0-962f-4d84-b983-4efa4fa3a24a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b00cce3b-3f7d-401c-908b-d820192c9adc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1557c220-3c80-4eea-99f0-b1cc67d0cb34",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "7e6a656a-99d9-466d-8f40-22a22bbf456d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "25dce610-82ef-45e3-b3db-5bfca36d763f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1474008a-65c8-48eb-956a-843942c815e4"
            }
          }
        ]
      },
      {
        "id": "ef3c4e3b-ed1f-43fc-9e7e-ac69de27ce47",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "790aaa62-f5b6-4e48-a4f9-e84885ca4959",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d91e8cc3-4d72-4ce5-abc3-78a381ebf38f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3ddfee78-6458-450e-afa0-ae933e84ae15",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3af348f-a9fa-4c4c-b55f-ac0527586262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8724053-ef59-4910-a6cd-be722351871c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c312fbfa-3db7-4a5f-9dfa-b4cc12291685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "346813c5-9734-43ab-a5ae-eb178516aa61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e596f9e1-7812-4b8b-8497-40c2c5ab4ddb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9efa3eb-8ec8-4220-8175-f481dc735ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed29f06f-d0c9-4d5b-b929-d87f270f0bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c021026d-ac71-4253-b552-1854e126487e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d65b2fc2-8e50-43b4-9b1f-0aa9d882e107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f08b8b-e03d-49ec-b947-53cae10f253f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae3f81cd-4dfe-441a-b5ab-b405201c56d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93cb2957-704a-43d6-b084-f88773694bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50ca8df-d9ae-4978-8acc-3ce02903bc7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c868ac5-7a2a-4039-b13f-3ef99109ad6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0afd498d-7e1d-4e18-9835-1549810bec15",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8fc692-7df5-40f6-ba16-ec5d9c9b2312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c43820-04a2-46a4-a4ee-a946810b0023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc42deb-8bbe-4d10-abea-077e16f16ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de66be7a-8d89-42cc-8da0-7196dd58b035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330a7177-d4e5-4570-91a4-5150bd0af5b1",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e58a7a3-bd71-41cd-9115-4fb000297fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac698f37-796c-4dcb-b760-f0a3ac932caa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb1ca92-9b92-4477-936a-281587581df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ec776f0-331b-4461-bbb8-3b20991781b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a9b566b-6d61-4e21-a554-bbe5af6123cc",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a52c3e-c750-4cdc-b336-b007d1ed326f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e57b2ef-9e28-4e03-a8db-0eab5114338c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c959da-df25-4c66-b150-dd4a4ab7ab64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6bb71e1d-664d-421f-8488-91fbbf2a6ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59a8a4a-81d8-4bcd-bd7c-4fb0665ba425",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0be480-6830-4837-9573-b15afe65452a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0601fb5a-174e-4ea8-be14-ad1df061996b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc46a12-5137-43d2-8a67-a867837ab534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9cfa36b-0171-426c-a936-598dab1e92bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5555c9de-7565-4310-9195-afe4b8db70b3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2caad37f-83cd-40e6-95a5-de00e1dba83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1de5591-d892-416a-a2d6-a9e90be02305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0d694d-ad06-4758-8543-05d5f59831e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d43e0f1c-e37b-4fcd-a7c9-a38b62ccc807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbadf5d-8c52-4aad-8cac-2e03cce77704",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfbf630-4119-45f9-a35f-213d9112a0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56e7a8cc-965a-4c6e-a2d4-eb61a80a9f6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33a95cc-df5e-4dc4-bfa4-67c824a32978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1cfb6e3-9e00-42a6-b06e-581d1d79220b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da9ca3b4-9e3e-489f-acfa-fecca49c742d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98eb6b0-5fa1-40fa-807a-52a04d7092b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987a5b75-bac8-49ca-9ae1-783877ca436a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aca472b-6868-4a05-be30-5b4c6889e055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e925f47-fc9a-4233-a9f4-a3a9e6dca3fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634d8ef6-7600-488f-815d-ec21182f7fe1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af153b1-92a4-4fc9-8030-4fc7dc862d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acbc7c83-b93f-4768-91c9-d7709135ae49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb010f50-d08e-4186-920d-d17956cabf9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0abae26-1e40-4610-a912-ff1eac42ca77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25bfa4f-29df-4ddc-99eb-0ddbd5978d75",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c777d39e-165b-4d81-8fd6-fdcf70e28ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fddc5c05-759b-45fc-b82a-646c4821491a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63117bc7-71c7-4ef3-8863-af550296b909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "820c5316-932f-49c6-90b6-cacfe334d85c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d754369b-1064-4882-b6ec-5499def0a5fa",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7a93ee-58d0-4c7e-8f3c-9d9dd99b8446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2758fc3e-40c8-414e-9047-fe7b55d0ab93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66332847-8748-4b0e-a43c-ead3925ca72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cca07265-fb79-4137-984a-b95aa7e82c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8417dd-75ae-432d-82ac-a9ebcacf68d3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "241d8f64-a158-493a-b56e-6a3e30243e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9acf469-0272-4bca-bcb4-54622e960908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a4248d-108d-46b0-85a3-be78700515c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33dc55db-b496-4896-9e34-a648d51c8220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428062a3-c874-4d80-8ba2-7a4e577dcb53",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd02057-318b-47c7-8170-51bbfdbc23c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09272a09-33b0-4712-b88a-20de5c985a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf46ef4-da45-4418-8d8f-514d39349549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7908281c-fb61-490b-809d-33ccd57886a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e1e179-2a93-4d14-b053-ddb454515e33",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c458ebb-db48-4dfd-95d4-b592639a3f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c56efedc-8bc6-4b08-85ac-fd74e47bc584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a13702-780d-46dd-a877-72010fc0f99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74929de6-4045-4ddb-8578-491ef34dc8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7feac9b-639a-4702-9604-26238709dc99",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc905823-e5d8-4c7d-b3f7-e5d7b4d03294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04d873ae-8a15-429f-b258-3826f20676c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52630075-582a-46c7-91db-610356ff9824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8b2b4f1-cdcd-41ee-a7aa-121134571558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44a4506-b494-4e30-b064-3d666a246527",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb88ca0f-dbbd-4e89-893f-98db9af0c96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22eb48c5-e5f5-40d7-b1b2-c4098b5ae44a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab2e7cb-316e-4854-908d-57773f690a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bc3f26a-6a2f-4a85-84b7-0aca1fe7e915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0382eb-bcf9-457a-b4da-88a6b6d98e6a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60bb897e-b1b6-43a3-a466-32d767608faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b38988-2513-4049-a2cb-4c901f93b800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b16f573-59a0-49aa-a323-44160cf766fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8bf1044-475a-4ae5-bf16-ed1eaa89309f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300d63a9-bfac-403e-9d38-20064e590f7d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b91fb6-b755-49b1-b1b9-f890ef191602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c25aca0-8cef-4842-8909-8f644950dc9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0214e2ec-1575-4c95-bfcf-4c7f45444118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2962843e-1148-4671-a769-ae3e46c114bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5870a1f1-c57a-487c-ab55-276c1bc2c0ba",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c37b94-9e3a-41f8-9a1a-c571c31353f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a74d2d2a-4d58-4825-9e80-a17c18a72468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2467db3-c1c4-43be-8fe2-31772e56161d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84bcc841-358d-4681-ac6c-fd6f237b6f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb7825b-e32f-4263-bb60-6d22cb15a346",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8822e87b-8c00-4d9a-98b6-36b08a40a5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c61e608-d35b-47db-888f-44e8952333ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76183769-3495-47dc-951f-6928300d4df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ae73f3-f843-49f4-a164-7733d87acd91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dedc7a71-da2d-44ad-ba2f-f801e81dffdd",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1600300f-e856-4563-a966-9d588255bf97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c612fad1-8d7b-4d1c-a6e6-28fd12468480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76275d6e-143d-46c1-a29d-45d6618bcd50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "55ec2c48-9dcc-4d11-b8d7-07563baef0c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8ccf53-5966-42b8-95ea-1f958b42ef94",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb694d7-2f7b-437b-9078-2ee46ff50329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68957cce-d16d-4a76-af5d-7298870621fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad29903-dd83-4670-86f1-5abd24dc8bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "760f8630-c392-4a86-8e7b-ff734f2916b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b3dd87-9e17-422b-aa7b-a62143c87f7e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31107930-24a0-4a2c-b188-99897f44184a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d0600f-401a-4be4-ac86-389986db794e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3f6f95-df72-4a58-a7c1-3cef193c415a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a45a8708-edd6-45d1-aa3d-5342c46f5b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc46fc0e-44b2-4bc9-8a94-f2775127503c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c603dd-3464-4711-87d9-bc3f05df93ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14333fdb-f612-4641-9d81-5a7ffcce90ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0398e5-f8eb-45af-96d0-5c411584d974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2413ea7c-319b-4fe0-8afb-93674581d244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6602f3-676b-41a6-ab1d-43f53514986f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5be75f-daba-40f4-af37-e3b96dc0cc89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df446a9-f5c0-4190-b6ba-2c4bdc42c4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9453d74-3e64-4cdb-a851-4ed966942318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "70bc5d5c-5767-4771-9461-c7e37f557556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af12345-6ccd-4e9b-b528-417c048e8d4d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "425bc24b-b908-411a-abd7-9812a0be51f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be575cd-31fd-4c16-b294-06786405fd99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b804e0de-7f35-48d5-bfff-32a7690a099a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6454881e-8b93-4274-88ab-827622e3782b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0938db-0255-4e97-8126-a7005a6918d1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7bad194-b120-4e0b-a9c2-3f573f35250b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe71e44e-2159-49b7-b210-134c84cc5760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf19a510-f203-4a82-a720-6953a97e87da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "88456b9a-6261-428c-b448-c1f0b455b84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433fdf55-3c08-47f9-b110-737fdce73590",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb8c9cc-6fc7-4c35-b27c-578cb1e773a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ff6555-18d3-444d-8032-fc9440d54f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6018fcb4-b2c7-492d-898f-c52e1714bdfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba19e1bf-7617-4f71-b505-7efac0d3641f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d9157b6-d261-459d-b73c-ca6d1b1148cd",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b3afb7-c654-4d0a-9455-925bc39f316e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15503f16-f973-4b32-80eb-3cdf7d030c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f14f53-91ca-4bde-b496-fbfec941e821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb20bb55-7784-4580-9fe0-075a017e6a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57fa413-04e1-4e6f-adc7-15a834030591",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5882ad1c-1dd3-4a52-aae3-f1a4cbb29fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0048c712-0d40-4eea-8236-8035f05b97d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7155373-35f1-4218-8bac-d8ef19e9511d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c512613-b4d5-4355-895f-3dcbefaea480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962fce45-8a17-4896-bdab-ca44a6fe7031",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "006b5195-5f69-4416-916c-8490180b5e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d88c58-ff39-4f5a-8f11-10f239d72089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5928fe20-a3eb-4c88-8ed9-fc0a53db8191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82d9e62e-f898-4b2a-86a3-56c68a9f17d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa1b17eb-946f-446f-b718-82ada61aca62",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde0cbf4-acdb-4c38-b6d1-a481a05c2639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e672eb-ca5f-4562-825b-987ac7c52cf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f13536-62e7-4ce8-8f40-2c717818a05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5121768a-496f-4ac4-9e03-45a151eb5b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84232253-1072-44bc-9a1a-f890dfabfadd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6208dc82-1e8e-4be3-9b5e-5e5ec335e626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7814b839-8639-4873-b550-019fe44bfa18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad457a0-b9f8-4eb9-ab4c-912d938be129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "beb0c746-483a-4a7f-ac92-071641390b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2302c75a-67c6-4a0b-9c3c-5b5eae831163",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbcbe56d-2760-49f5-9e6f-0190849a1457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "025de70b-b61f-4160-a413-17d6541da995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1b8422-c7fa-4a7a-aafe-23e5c1d47802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "744488e3-8684-4ff7-ac47-327fb046e9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e2cae1-e905-4835-b045-21fdd67d297e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abaeddaa-dc03-4243-9a16-7f52799fd523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5a5b13-d448-4567-a6cb-56cc0624ee3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35e9d6a-4c15-4efa-a8b0-ea1eb4a7a67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "02eab7bc-0b04-4cdb-bc88-b7ddd7a5abcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815ede48-fffc-465c-ac8d-77a91e8e64ef",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b8f0d1-c92f-4e8b-94b9-2d72a354e4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f25c5df2-37ee-44ca-8ccd-1db890221558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ccfc50e-62c8-4cf4-b6fa-0575eb87d48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ada340b0-2fec-4458-aba9-88c8af862e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e39a569-2b7b-4802-861d-b2c4cb476436",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fce370a-3e7a-4592-b87d-89dbe71c4c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f423f66-e21c-4d98-9689-30069ef6843f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb4cb29-6886-4a98-b607-052656ce43d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a393487-daaf-4b38-94c9-2c59dfb7b055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "394139e2-63e0-47f0-8bf5-5018dfad32d9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bb74ef-14d4-41fa-8de4-2b5c831a8fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fabfd8f-60f6-4992-9f94-13778168e5ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589725c7-d578-4539-a9be-c96098110aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3f6e26-3c85-4b4b-8db9-bd9a63f39c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41bbc1e3-87e3-4c29-9f82-63e1d6e1042a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a328b2-5b7a-4766-89a8-2843520aba17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb7063a-98a6-47e0-86fd-421da7607a7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3ce8e1-e837-476f-a0af-073ac9195de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e20c14-4fe5-49ce-98fd-b6c77683223f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2326d7c4-d6e2-4f0f-835a-17961a260990",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6100fd69-f783-43f2-9121-4f094b390938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66038b9a-b290-44c6-892e-4cfcffd6aebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388debea-e3b8-45f1-b358-f7d5162e0fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3f949086-9261-4189-b425-8c2d6aeb37ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ab3fc4-15ef-4177-aa1a-fa772d6a6fc0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97106682-2da6-4129-8bcd-2d9d922c7c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e871d19-25d0-4cc8-8df6-b1cbdfae23f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f15c71-a21f-48f0-8abf-b8e602817152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "246b20ad-1222-4835-87e3-b3639c5803b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43fe6c9-bf24-4bb1-98a5-3586ac67b57a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd63791-69d1-4bff-b4a6-c4d292f54077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d04b420-b410-47fc-a807-14319d992c12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54995b25-6c92-4584-aa7c-fe5249679382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8795927d-9faf-4bc0-809a-b435100dbf8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba2f1b02-3373-428d-a43b-f9a9ce111d67",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da641113-966e-4250-8ecd-ce3dc48bf07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f453e506-ffe9-4c29-aba8-8cf9074704a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5bfc6d-ec90-4124-b176-8badd6322c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "13f5bd7a-a1d0-4038-be9c-468f645ce0fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a237d4-c308-428f-b87f-e500916fc864",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d70646-3df0-4ec1-8ff8-ee50d368cf29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c648e0ce-6e21-42f1-8a34-bdf9fd3d2784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a57f8d-f4be-4554-a001-f95494eb0858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24ffbfb9-88e1-4e36-a10c-e2965517ce26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dea9680-beab-4a65-a05e-6d544a3d883d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd4b931-6e35-4a14-9933-192db673b698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cdaf88f-300e-4562-81a0-f6ee16b00109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c4232f-a399-438c-b9a7-e0f7a5be3b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd455ce0-b1d4-4928-b652-a21a7235f819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796a58b7-9507-4167-8a7f-e194669cdc50",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "005f4c0e-dd80-4edd-8c6b-3bc705d5765f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79f3b2f7-3766-421d-b6cb-2c64023bfe86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a74408-44ef-455a-93d4-492509c5042d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e149197f-1678-4f8b-9daa-9dee60894abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148b6255-f0dd-4a24-bac2-5b741e132eeb",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ebd3a6-9371-4e4d-8a02-b21adba7211d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11dc7ac3-bc19-4608-a121-f214c0f6551c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9372e8-d888-4fbd-b380-31900ebf730c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00c2894a-453d-4737-8e54-f40650baafdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272159e0-bcb3-4141-a880-de2add59fbcb",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28fbe75-f6f4-4293-8d62-bf1f6d5c0673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2593e8b5-e7b4-4e5d-8117-e1cb404933fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e10b08a-7600-4eb5-a192-9e22661c9f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd07f21e-7c75-470f-b809-88cc06776dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6917e1b3-1d49-4b23-9fd9-d4b71af2950b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911988e9-8dd4-4d6a-9e8e-8a740c0e149f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf7ead9f-7ae3-4746-9bc3-6e922756128c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3dbb38e-3f4c-4a9a-92f1-3dccba3211b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a4447f3-796f-4208-94ef-90676820bf8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2352386b-9012-4e52-a61e-c28a9b692b82",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c88e707-79a7-4bbd-8117-114cc21f30f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b793a8-c479-4c7c-8dbf-26bed7bf02b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281d6691-8d3f-44b1-bdf6-5a317a50beeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb3a0df-e875-40ef-8a84-3d96d0c2f316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb85b3ff-064e-4045-9732-63ac3286f1b7",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe7bcc3-9351-4918-9c08-6aa2e3bf0306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5586217b-73a6-4d6f-a58d-f95a806dbf55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2a999c-2dae-41fc-be85-9328aba6036d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "daaee37e-058c-4a3f-a67e-07e7070b2d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8a438d-768e-49be-aba3-49139a2e15a8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba41e57-4b3b-451e-864a-38de5de1088b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "793780cc-ea58-48dc-bf8b-e337eeac297e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2755ff57-acfb-48a4-a978-9dac97254650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "91bfbf1e-78a5-4898-8d64-21b7112055e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efd2a19-000a-4c81-97d4-82c4d9747e95",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4869cb29-9484-4524-8557-48896aa94e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9be489c-7102-4aec-814a-48d25caab22a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd98937d-4fc0-4e97-a20e-81bc292b1cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9eee641-a640-42ad-bb5d-2ca73cc673c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ce17dc-bbbd-4579-8f8d-354426a7fab1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0de6141-a93d-4cc4-87d6-cd840313acb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b0a31a-6d5f-492c-af36-ed7fec47fde3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dade99ad-68e7-4953-af46-8d4c9ed86c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "85aacded-b019-4b30-814e-d1596babed43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf764bea-6bd5-4036-bb24-fd86373581ee",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9915e8df-3e8c-4a94-81a6-8646e2c6bc52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b195004e-08ed-4cec-999b-37985a1ae000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20501e2f-8bbc-4522-837d-a1c238c22cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "182a794e-8fec-4cc0-a007-9c5b7b6580b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf967b5-b9c9-410d-811c-0ac1d629540e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52681744-a0eb-45cd-b7f1-425fb146727d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ef0e8b-d065-4a64-8f32-4e7333dab77f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116c9b3f-b833-4499-a00b-590b4a569d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "677606e5-2906-42ef-9d82-40e3ac63f047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96eee4b0-1e44-4a8b-a46f-9e5af1a5236d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9838fef-bfd7-4bfa-8394-2d27c3711269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cfddfa3-0664-4c9f-a736-340eeb55f5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d9e70b-c3eb-4de5-b7b4-2456c129c2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9190a98e-679e-4cac-aeca-1bc40722b984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a05d17f1-ffe4-4993-b743-fdfdf990ea46",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa59c56-2805-48ac-830d-2d12060cc1ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4dae85e-33df-47c8-ab8a-e888ed0365fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eff0645-308b-4cae-82cc-6f824649df34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd2dc0c7-a467-4083-b298-f5fdd2588d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49f5ef4-05ed-4040-b987-aa711c2dbf19",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ddc7ce1-cbac-4ed3-b815-9491f9f47780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18bd27fe-3594-4730-8c6d-2629678b61d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578912d3-d99f-4e89-9ea5-e94c2e629580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c8d196-fc7a-4a25-92ca-db6a84cb63aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eda9d89-9f5b-4333-8640-d5650fc68eea",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b35f3d-c321-4e11-ac49-76a4ae0b3c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3710a3-1c44-4d3b-bb0e-06db8ca5a1ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b43f15-abb5-4d26-9630-02e4566e7a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3065d469-1aee-43e3-93af-7dbbfaf7bca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8592a2e2-02f5-416b-ac74-41217478cabe",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f829656-555c-4e61-89a3-2311e683499d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff6908cd-c126-4858-9931-a77a8bdb1d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a3b346-073d-40b4-8f02-e59de07e9f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "997d604d-404c-41de-853f-3b93edf02fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018a0b2a-4b99-42d0-b2f0-7e97b73b9229",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd7da4d-681c-4681-afd4-f2ff4fb4f70d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c10b364b-14d9-42fb-bc1b-0f1823425450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf04cdd-c0a4-4b6a-8014-fe025359bdb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc89ea2c-08f8-4c75-b4fb-d275b9d224dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "318f4c3c-5db9-41c7-9a02-8bec00b1c7d1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f91d5e1-9972-4867-90c7-651acca487de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c11bff2-d415-4583-a93c-5f0fedb982f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1729936-ba22-493e-9c6e-82814b49cd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7350a81-afa2-4a0f-bdba-b8127008aba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38cbd268-5e90-489f-82ef-8b94cdcb48a8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43def6b2-681c-4787-a1e6-eee905bc081c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb110af-8537-43c8-8ea5-4a3ebf606129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e552e16f-3ff5-4efe-b048-20f390abea2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df785a1c-d92b-4b53-898e-f43b7463bbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f486645e-9b49-430f-9486-64cfa44086c0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d616e60-16da-4cab-8952-9306179be5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2137c953-0479-47e5-a2b1-e0ca74c4445f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800a069e-77bd-490d-b47b-f0b77ceb9b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bff2e089-32e9-4a81-ad0a-7604fd5277c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74008758-81d0-451b-b962-059166ad0fc3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9e6cbd-b630-42e6-8d3f-3022afda7ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e2336d-9507-4a3d-8db0-1c4336976d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34808156-300b-4faf-9acc-494173cd102e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "59b88671-1c9c-461a-ae34-5b931e0f7565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cdcc5d2-f862-44bf-9edc-d82a8c6d0db5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb78943-b8ac-4c6d-9ff7-76938449def9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21a9eea-8be5-4f43-ba23-3df3a7a6a4d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e416faa3-a830-472b-85eb-5974249fd59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9e7cbd7-cafa-4061-91a6-aa78ac3bf0b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b974f223-d19a-4c5b-87d7-7beda28ebf1c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d682d2-df0e-48f7-add3-c455a4227cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a2f6bb-bb83-4831-8f49-5dfc14d8e120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff66878-7c00-4091-bc43-d19818d2f08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d21a6835-dbf1-452c-b408-b9321e0d5193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6412c77-2ce5-40ca-bde9-8205806b4030",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce63481-deb5-4469-959a-d3cf51bcd3be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f7955f-8c09-4fb7-abe1-aaabbeabeb3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a7de78-896e-4c4d-bc1d-7a16c4de42fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a83488ae-7f22-4033-8834-e6ef2c434009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02595db-2562-4a74-8add-6c4c81965956",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af12eaeb-d6d0-449f-855b-a009776a0050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb350fc5-decf-4d7b-9e94-b922a9d1a43c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3196c76b-e3aa-452f-9082-b1e8a6bb4541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9039ec36-cc96-44fc-a7ad-b33d9b514194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30bf602c-b2a4-4f4e-b983-a20969deca8f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc16ab5-befd-4c55-9fb3-73c86048ab32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a6b6f2-a0ed-48c4-a98e-8ca53d0e7653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8401f0fb-896e-498f-8773-034b76bd314e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b13d010f-a51e-4774-8558-2d09c2a6354f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997e5989-a858-4d15-a8b4-07f503d0e9bd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec89cbaa-df76-4cd1-8a24-6298dd07337c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71df21b9-c14a-43ee-a96e-bfb2f56640cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b4c724-daa8-4e31-b9dd-30e222a9ba30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2804638-7afb-491b-9b48-977df18643d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd2b9b3-2d6f-4a11-a0d3-30dc37c3a5bc",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca6b553-a5c7-4e66-a9b4-f5cb1e690183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b2046c-3c9d-4225-9c96-027fb0ba0eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1dbaac5-0a48-4b9c-8e09-c0cbc18d759e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "007bda84-67d9-4e57-a336-a56b9b388ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23619146-26d0-43e9-8746-425b684a994d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e271e2af-aab3-4497-a18c-86ecbe198fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c497d40-c0ec-4164-87b4-ebfbe0b49f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4dc040-7e14-4d9f-99ae-f0be9589a253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8273688-fa2d-48ae-8d20-9f3799723f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc825bc-42c1-42a0-81f5-19b29fa68836",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74b50b4-f2aa-4c4d-aa20-f193296b2fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bebb61ec-0e47-4edc-8217-374918da1612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c850e2-60d4-4883-9af5-835ddccb14aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "336ef9f1-a298-40ac-9920-e5891b8693b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efdadfe2-0ee4-4f97-8607-82a4db84046f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2653b730-b2eb-48a9-b0ed-5873acbc5623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "339043f0-82d0-4da7-8fe4-6500a1459af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32cfa814-4f4e-4124-8829-a1db151ea9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "566477a7-caaf-4d1b-ade9-1602a3e6f993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbd1e7f-ac04-49c5-982a-b4fdef4b3b21",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bfe60d4-5446-4713-a496-25bb3e0e590d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56fd99ba-1122-450f-bf9a-e682059bfb59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f93dd51-fda2-405d-9bbd-3987ac487aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "588f9e7e-7aec-4464-bccc-ce7609432dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b231c1be-5750-4963-baed-8d73cfb1c7b7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfca0bba-645d-4e6b-aaed-4f7ae3a67148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "487fea9e-b89e-4eb5-b1a6-c4fa4f7cab5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ca868b-945d-42d9-89a5-bbd0b9caa319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ed8ebd9-a958-4fe7-82f5-32de01d6b957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7962d9-7e46-4abc-9096-92ebc3e4d971",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9218e56-e6fc-49fd-b92e-ff9510c7e43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0211eee-19cb-4577-84f8-8b2302fa3d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ac3524-2b35-4c93-bb4c-8b5d9cbb7d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c40714-db69-4c11-8f9c-f111c10b5504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6494ab18-e1b9-4870-8167-401e0ee02242",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93511e0-e6f2-49ed-9639-16d2f805fbf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8864631-1f32-4984-80de-264ab3d51122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca96b0a9-4a8d-470e-84c4-afe6a6472e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c35725f2-e1db-4c70-bd2d-3bd7fdb7060b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d11c542-5fec-4211-9321-de5d8a5d8675",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3969ef-858d-4672-865d-23cc4258915b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2b2439f-00e2-4bd8-a128-27cf9ff7b524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c4f5e6-edbb-4178-819e-b7dc9fa29817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "58b2492c-e873-4dbb-810d-5b8a9236efa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0628857-0fee-40da-a7cd-d5e44bed5a24",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9bfb9a-fcda-475e-9fc2-1c6c69e1b307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f81378ad-a667-4258-81eb-a0ef21a226ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231977da-3a47-494f-90b4-0e736ddf5c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb1125c6-a055-47fa-a1c8-f92f0ac7e949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50029ed1-c381-40a3-951c-6e45dbbd9b79",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051718be-002c-402c-add5-5b0c7a19b2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82763bc1-39f7-4cc1-8844-1d30bdeda39f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3878c1d8-7529-47d7-b155-54202a31e1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "04709e2b-38e9-42d3-a535-6eec239faef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fef3c4-6530-4217-96aa-48dca6437fec",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32fb4cb-ba5d-4c8e-a6e2-d332cc57ef13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b53a93f-f6d1-4ded-9f17-3ef5f9b1227d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973d081e-1f2e-485e-81c1-c990cb7526cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d40bad6-3962-4c01-8f75-358e99b8d3a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c5ed15-0344-4b39-b1d7-bee2301cebcd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3f51c0-e7c4-4aee-ab6a-0786c6e85fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aa99cac-d27a-4e4a-bc89-a8db26e1bdb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0430e9-eb27-4de5-8368-c9b75eef573f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "06a195dc-3350-4b36-afc5-e1b6628302d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1722166-184c-4188-af60-5fca741b2fa3",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17d33f2-9294-45c2-913f-6d793d115a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b6c727d-2210-46b6-9ca3-8436f95059e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30ae9b0-b73a-4272-b815-d571b2e3c68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3d2fbc-335f-437f-aa18-c1fc8019c570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ce4058-f040-4c81-abd2-6d7ab9eab9d2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24b3c1a-a54e-4247-841c-cb3ebe114dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5db449ed-5196-4b3d-af5c-85957e94d3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af30090-51e5-41b6-98d3-610ae7b4ea47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d16e4d1-a987-4b7c-a78b-ae96cd961626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2186ea23-8c59-42c0-8625-00eb8bb696c2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fd478b-1e7c-4429-a67b-09d863e818e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc568576-3cc2-4fcf-93ff-aa18b6f4e0c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e21074a-ef5b-4bb7-84d6-f1f677804447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7dc02f27-9f13-414f-9279-a539110f8bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d035f814-a549-4e5e-a072-735a7a17e2b8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b509ff0-067f-4a62-85f8-9de311e9d422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe643d6-fa89-4f94-9b83-b07bdfb303bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a251a4de-d12a-423e-abb8-22306db92c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "242889fb-1745-4463-9201-dde5ce8c24db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0bd5e2-a6ad-487b-aed1-37d7fe62cd5e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13dc9a82-cbae-467a-9c2a-992d19ef4868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "38b4c307-29bf-4acd-9a21-bc8fca76bfff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe39b91-9b71-45a1-a72e-1ff999223795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc63333d-99d7-4bc9-99eb-6a30b7c37e72"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a4566582-fcdd-42d4-877d-feeeb0b04341",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "156ecf5f-e6f4-4d72-acf3-83f3a4c3413f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff91fa3-c43e-466f-88a2-9703c9a04234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca3f132f-081f-4dee-92df-e4ed78325168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5edbbd6-1f25-4ca6-9fda-2e5c5475d50d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d0f9a0aa-1432-4781-852c-ad000e785cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569696c7-5dae-465d-a3d9-e1062616cffd",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4aee894-7d7f-40d7-9bc3-8a9aa1d91547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75b9bfce-3707-4c23-93d1-88fec8b74690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09062fe4-b971-498c-969d-9d6a6de1fd16",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5b620e0f-c20d-4545-8937-25dbf2408e1e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6850f6d1-c081-4e9a-bcc7-2b23f5e3fcb5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "431df387-b431-4007-8f6d-a77cb4258b02"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcbed9db-45bf-4959-8f92-9bfc8e580c62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df8de372-b844-47ee-b36e-0dbe28c65448"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eaad699e-d314-473e-a288-955a1dfe5b97",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d3655600-b4f9-4c7d-b5b5-4985c8a4e97c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "471af07b-13ed-4859-b720-60e448b0b9ae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "41a6ce5d-7b18-4260-bebb-0d551adfc77a"
                }
              }
            ]
          },
          {
            "id": "e8e3d75e-6e0a-4970-9fdc-1f21ade701a5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "54fe2f5a-921a-4c40-8294-6011add0645a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48262562-db34-4063-93c5-00bd376bb199",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e53de808-78b7-4c95-9025-5b39131393fd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d115d5e-d795-482e-9133-5d687449a1b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "51bde2e9-4100-4c7d-bce2-f5c84f300931"
                    }
                  }
                ]
              },
              {
                "id": "d17d527d-bb66-4329-85af-568465489d2a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0677560-3c2b-4c8c-b608-47fb3a81f682",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aeed1c87-efdf-4871-9384-fe4ec6813c3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47a2ebbc-9d65-4cae-8e39-552204148b9e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5064f785-c812-4efa-bf54-19a45f2ae731"
                    }
                  }
                ]
              },
              {
                "id": "336cfde5-4d3b-4f50-a036-8b632e95cd5a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d8ad74b-fd18-4eb0-9a4b-1727b40f388b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "978cd67b-ed56-4ad6-8a19-974590dd56e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d4d3168-118b-454d-8945-59ef5592876f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b4a99828-f39b-4782-9704-bf70aa756a46"
                    }
                  }
                ]
              },
              {
                "id": "568538f6-7300-4cc9-abf7-369d60384090",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "094c7d88-68d1-4f72-8709-fa11c0ad914e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb939fe1-4be3-4091-aec2-fdf9763c476d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6aab126e-ffdd-439c-bc9e-e8b3a9ea6dce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f0ed53c1-39d7-4673-b6b7-a4476446da04"
                    }
                  }
                ]
              },
              {
                "id": "af00d57d-45e6-43e0-ad4a-42e78d34441a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d9bc58c-06db-492e-9e0a-2bb166462c3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a2319a4-7583-406a-b308-1e202bd49154"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38177b1d-a04d-49c9-a9af-81d106e8ea59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "41781832-59f3-4ae0-8c0d-b63c28e98f28"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5f69aea0-dcba-47d1-a703-a3520df2ff9d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "38ae6796-212f-4251-9d88-193782a4af95"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f3735a87-e3c7-4ae1-820b-101f97d2b7b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bbbcccf6-b50a-4695-b7b1-13b69c88eb55"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9fbbac51-f612-4800-953c-edb8dc994f66",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c29fb89b-657b-4b51-bd7a-78049d82b664"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77ff1438-ced0-40cd-9359-06f5dfa5966b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19bd7970-155d-41c8-bbc5-ab30d2fd1eb1"
            }
          }
        ]
      },
      {
        "id": "cacbc0f6-89ed-4854-add7-3f2f888c996b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f407ed0a-60d1-4e7d-b889-9785b1a2eaa8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6cd4c89-e0a5-4a1a-8392-5283b41319c9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1b6f6cf3-796f-47d8-8c2b-e0c1b6f306ba",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8f0746-641c-4501-9d9b-e2d690da5cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a23c5796-27e8-4448-b9fe-995f0e6bde56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b0449b-a8fd-4851-bd23-9ca4de7c57b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e453175-495d-4f4e-8cb1-f99c5bf6e76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7208774f-1c57-40e7-9ac6-69166a93c935",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd43c78-e23f-4fb9-9a89-ba299bd3b586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d3e4dce-dbd4-431e-9d8d-133cc4d7568a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801c0468-ae37-4720-8da6-233ef4175714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "69251e45-a0c4-4867-bfcf-70972a0e21a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fff435b-c2f4-425b-b97f-20a5b7f014ef",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee1e6a0-c1c3-4f39-a25b-34d8dc995b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c4a7a95-34d4-43df-ad66-2c517029babf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e02e778-b13c-420d-834f-8fe8f9296b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb74d2e2-40e4-48b4-9e26-85fa7454af2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d05836-a211-4e40-bbd8-9c9ff8fafa05",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19a31b8-fe51-40c4-9fef-ac2d232eb390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef76d00a-a967-4208-975d-e6345e36e062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e361aee4-3c38-4917-8624-25ccef159208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa52035-5a20-40a9-b3e1-345865d66a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6512f2-e2a3-4910-95be-fd256ac42ed8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f979cb-a617-4987-bcb1-bb2a0d0da784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7f18f52-45f0-4b12-868d-7912e05e73db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde31dd5-9eeb-489e-be95-745260e81082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76c964c0-abf5-459c-a974-eb54af0a0ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0059653-eeb2-48f6-822d-4a8597337959",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a06626-b658-4a2e-b212-37d61b099b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebb29563-c7b3-4401-9f16-ad41fa141dd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48372c8d-96f0-479b-92d7-37dac35c3c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e729ff7-ef6d-4dcc-b1e6-886efecaed3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d30cf9-14d5-4814-9c58-cb03a0218b56",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47e9f01-66fc-476b-8151-997a70672443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8022f99c-a69e-4e94-988d-66eda9adef8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b099ec3-0c78-4d80-ba88-956ab1358a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "52cbf795-9c96-43d2-a45b-1bc3a44f2fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb47e37-e7e2-43d0-a294-97b1c77653d8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d440e45-1384-4eb6-ae34-9a9daecea957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20026acb-713a-4a0a-a619-f78dcbd95619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07044370-295b-4fa3-a505-c9ed9d22b609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4291ace2-e9fb-400a-bb24-50bd2fac855f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5d2feb-b2ac-4657-a45c-bc04a9097073",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dfcb639-1bc8-4365-a39e-e40fbec040da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0da5f60-e1a0-4478-9716-3d81afc4d63f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f482981-0c27-49a1-b197-1fbf69401546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7f0f25-b23c-439a-af80-bbb68ba14880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a071d7-23cd-4190-8ab6-a7b9c063e91e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b6460d-f034-4137-a316-78324bd5fa57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cba9b3c-5ed4-4671-a1e5-187a3d08d621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc303075-befc-4d03-9fb0-9361d815a111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "052ffd25-16fa-46b3-af78-b3c6d4c40432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbaaa8af-30ed-45d9-8e8c-4508fef5df98",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd299f6-c390-4aae-9412-5cd68344f2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c08f3b6-440a-4c08-ac33-9775fbcf67d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c97ae57-8459-487f-811f-917ed1800d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "df31060f-b130-4ca1-b7c7-87243153263d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5411e95-8463-4d48-9626-3f9763666205",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1dc27e8-16b7-4954-9942-c367571913d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383b4b61-b10a-467a-b8f1-55eaa261535b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6d8993-1b3a-40be-ad98-2b8a567e699d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "50fbf6c5-39b1-4e63-b7b5-b7cf21ad2348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c0b419-94c6-4a8e-90ec-0071383e5ad3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d506e1-5d2b-4c1f-bc0c-e9ef9bbfbd75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877cf60d-f9fe-4a0e-b36b-2708a0843d98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983531d7-ff1e-454f-9d3b-32e2b72be35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffcd29cc-8cb7-4764-8cdb-f3a8360e2774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6963e95e-3f35-4f10-ab01-d7fe7ef2177a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8daebc49-3dec-42c9-94ae-3e92587b93dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081f6015-c9ee-4a66-9cd8-16910409a231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21e040a-419d-474b-bbdc-151519073b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dae72be-57e6-4a4c-ac57-2db7107fa088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7bb951-4eb8-4e01-a859-382f5872e1ec",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98149028-d408-4550-94b0-71dc3e3dcd08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36be588e-b25b-4b35-b84e-0ee27a2a2f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5202418-7f45-4fed-a0b4-2c60b348d513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f93fb67-d1ff-4f2b-82d5-878745b7b8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e75fc3-b0b5-4352-ba11-569adcffe5de",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69413709-9689-4842-8dee-579589556a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f9142e-2b52-4f48-bbab-09b4e12b806a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6b87f0-2ac4-47b6-b8fe-ca0f2616f929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "23e2d3d9-d5fd-4cd1-9a5e-95fbc9dd98f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cceb4c1d-fa05-4417-a00f-d181f8d01370",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93721ce3-f268-4d7b-a103-31afaec64f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc831f0e-373e-4a6d-a223-978b080d5fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c144453-bd26-4cb3-a98d-e4d7893c5d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "27ec0e9c-4e11-4fc4-8513-4e494220298b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0961ba7-d720-4edf-8dba-dcca0fc86f93",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23fc888b-0e21-430c-b7d2-4e5be35f7cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c221513-6112-42de-b6ea-df015961cb6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18fbad4d-c633-41ba-a643-fe813460dcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a539d5c5-878c-4c1d-8215-b6164b186573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a918ad06-a396-4bb4-b02f-5c9a432a5d7a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "693687dd-9f55-4e7b-9c0d-c6269ddaabc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2141e15-d862-47bd-b4d1-aaf1ab830412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d33bc90-b93b-4a5c-ad53-12919f2f8442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8b54eb-0e56-420e-a6cb-88b9e1a87f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28c253f-2ce1-430e-a205-126da9fd49ba",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a9cd52-9830-4bb4-91ac-06de31c21243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be543c55-65a5-4d03-9df5-6213da1d3ba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c93d34-0a73-4b61-9d54-63efa81a1620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23eede00-275f-47fd-9720-4066209047a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e424c72-3157-4dfc-9182-bf3c6ec9bd72",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0a215a-3170-4b0f-b3f6-23dd172f91d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "158f22b4-7685-4586-8907-3d51e9ae9142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2d1990-e534-4aac-8111-8540037e515d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f64132a3-99b0-46a4-b673-8e8ade1b4bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b86474-cf71-4d6e-9343-69fe6ee4bc90",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c06c9d5-7c38-4b62-baa8-81e4f521c787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c3a395d-9f22-4746-905e-8c30f44fa767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6345a9ed-0fd2-4cb7-9b32-f9265b0e0c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "882c5fbd-af9f-4777-9fca-c2fefe9d2f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a93634-3541-4815-bf1a-eb8bd948b696",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b69de44-4a3d-4eec-8c4e-fcaf92a4766d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42333185-c4b0-4823-b701-bcece83a032c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204e4539-01a1-477e-ba04-24e35b0919c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b47a402f-edc1-4037-8581-c76a9beb4120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530e2499-d90c-46fd-9ef3-b124d8f192d9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08f703d-82e3-4222-909e-2be2b9f59316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6002537f-f010-48e6-93a4-e7caae11bdbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9896118a-c94a-467f-93bb-72f464e6ee41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bdf19cd-4442-4137-9824-e0c31f2e5376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c42ece-65c1-49ad-998f-60934dfa6007",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86f9199-f612-4ac3-a8d4-6134847bec31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a4c0f98-ff3e-4f6b-b647-51a996c6c228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0dc1866-12e9-4e0a-bf0f-b15281b5b969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d235851f-8e7a-440e-87fa-e86ebc766f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84cc606e-82e0-471b-9e3e-e3539dcb787c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0b6044-3556-425d-b6ba-47a03c73305d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9b27f53-1355-4c91-8a69-9e1a6c32e460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f19ee0-9049-484b-9e8c-2e96c6cd7c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a6fbc2b-7c72-4e65-ab66-66bc23b2c329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103072cf-d53d-409b-8389-4cca41bf0af1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acad943e-ed8f-43c9-a6e1-1b0e05edd2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4a154d-06e6-4a67-bf57-e1172c6d60ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1c652c-c4de-401c-abb9-47f07b51cdcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc96871-0575-45e2-b9b0-d95dbc023942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7261c4ba-2026-4d9f-b813-1a57c41f4cdb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02eea4a-1ebb-4096-9fa3-282face833ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dfc3bdc-bcb0-4a82-9857-3d67a7cd4e4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f4b821-51b7-49b8-bdc6-d3957943f140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a94195b-6431-4224-8888-5319f905bc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a8f8d7-ceb3-4ddb-adbb-1f0baee461c7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c1e6ff-de66-4214-94c5-4ef5ee86a62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "802db8ca-ad86-437e-ae1f-0e8c6eff37c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ec227e-e774-4c80-a921-f3b989241434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02943e11-adf2-44ef-82df-8964bcfd2c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00643a3f-1917-4056-ac1c-d18b9adb9ef9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf66acfc-82f4-4722-95c7-5402e91b693a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfae546b-2bca-472f-97e9-56d958f07e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae177a7-75b9-413a-be8a-7abe85f5e14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4520aded-d6ac-4059-a068-19db77f9fe51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429ea388-1ee2-4806-9d6f-818d09474868",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9fc097-8d76-4da0-80a6-2e07cb44dc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052be12d-f3c1-4c05-b88b-6c37b0b2086c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a288bc-13e0-4e61-9ce9-b1ff822a06f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27eacaf1-f075-4ff0-a183-70b275367e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011e4f64-c382-486e-834f-53b46511cc9b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14d8ad8-dffb-4f76-9310-f591be4279db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8249b53-4146-4e63-93ef-4587cc988877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c7832d-c154-4982-900b-d11eaabc9cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60d94ce5-1228-4b19-b725-c3ab03fefc5c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "de0599f3-01bc-431d-80a8-491ec5762b1e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3b3340c4-5d6c-4418-aae8-141fcb22b997",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da793d97-3a76-4fa6-9b2c-71f73b6af5d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b7877c-8c1b-40c9-9e83-e224298fb776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f481695-9371-42b3-aa82-631d95967942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dede06e6-8963-4098-9217-e97aa519e658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6924d4f1-1411-479a-8fb8-03b2951a34af",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e5ad13-1651-455c-9bcd-8ecbae872bb7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "53735931-b080-4340-8224-726ec829865d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aecf6775-cf17-446f-a0ec-ca9b21bcc312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b89e77a9-eb96-483f-b299-2f01aac97c2c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff10e955-fc53-49ef-bfc9-351efa6fed1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "958a0ca3-f49c-4139-a5a9-817a9d51240c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca9ee9c3-e07a-42f8-ad3f-8ccec7262be5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "681cea69-b7fe-4cee-a631-a6683bef58bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9cabec49-f0fe-4a72-b3a8-8fa31e28eda5",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "36829e3a-fd18-4646-b816-05f828f7a2f8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c6cf2f9-775b-48d5-ba8f-040207766c54",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab9bc86f-902c-4e15-82e9-6a621e61854c"
            }
          }
        ]
      },
      {
        "id": "6ceae9cd-6309-47a0-8c77-e0db1aea42b9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4a9ce9ce-77f4-4789-b4e5-e705155ae51a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5653b48a-1161-46f5-abad-9c9964bace31",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "333dea4f-a4a0-4cd5-a4dc-e2e2518bdd82",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19fa17b1-8f9c-4d66-b6ed-912778105ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f19ea768-9d1d-44b8-ac4e-2d7070f69e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98746760-355e-4a5e-bd9c-10fb56950bac",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2791f0a2-fa46-427d-add0-e3a19a0d4431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efd55e72-48c7-4371-a440-839f371e5965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b311f5-6c50-4733-a0c7-174587baa7eb",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2de0598-8570-4717-a5d4-0d9ed45f8e73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a44c976b-8357-42a1-9251-e237c01cd27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f2a3f7-3165-4170-a5c2-1ab8a16863bc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13363610-9357-4fdd-ba92-4006a7f18893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1144e67c-b569-49f6-929f-98ff1bd361a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8894433-8bf7-44c0-9108-736ba0925dbe",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3d468d-4b81-4f48-97d2-97acfca948bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a90e1fce-2412-4221-ae59-40e357a0aa43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736ea523-34f2-43b6-94a8-0bbb078e519d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caba2236-679e-4e2e-b4ba-9ab5f378db09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f32fba49-c50c-415e-81c5-1f1380e10a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3430fa6e-cd2b-47d4-9d61-ed246e2c93bc",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a14d8f9-4dd5-4f61-abef-f009816d67f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17086335-103f-4475-a415-eb208bad3fc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a474a18-0992-44eb-8ee1-20215d4d563b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c2e971d-28b6-4eb4-a62b-78f08bc6316d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a502bc45-1a42-4fbe-a181-f92885fece79",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20c101b-2218-4443-8e92-9457af77fd72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08cd7f8e-f26b-4881-a7e9-7c3ee4f707ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74db8dec-93a1-4b72-842c-26f96eaa36b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a811d0b9-bfb2-45a4-b4f9-9ef382eb5222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2f6ab5-8715-4671-9f89-cd464d8a1cb5",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e15117-0137-4492-abb5-c3bd92347464",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7fa5fff-91dd-4613-b145-5470f8ce3966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa62c27-62b7-4fd6-a423-40884791e023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a33e3033-a0c3-4155-b214-08fe8ae7aff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6b6052-6269-461c-8124-8898decafd88",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6d8fdf-0cfd-407c-ab4b-42d315fe3bf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "246192bb-5a43-410d-8f6f-90422f1da518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "889297a8-7d10-4a9a-8fc1-7dd144e8813c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e67a051-b187-4c9d-9acd-5d9570bf5413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6b003e-d5a6-4a5b-8c59-8c9c4f80e33c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df874f8e-4d35-422b-8e82-ffecff110078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0baa661-5a0e-4c33-860a-e18b8d614263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b0c95c-97c0-4078-9f11-b34461dd4e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311f9940-e5dd-4605-93c6-3f134f8a4e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3dbc0c8-ac0d-4aea-a42a-8d416e2e0bb1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ae70fa-8aae-40e1-bfe0-843f580ee01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee01a528-cc09-4059-b738-8daebfbd551a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd13986a-d5ca-48fc-ae58-6472f3ae89f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aa72a9d-3668-4d36-943f-a99e99ab0d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13042d0-fc44-4a3d-8148-34469c548e43",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e33c26-4209-42b1-8754-9520b38af89c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "357d13a0-fd71-4d66-b203-d5647acb2d50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39351d5-9935-48e1-b3b9-0ee3d329c656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5b1542-8211-44f4-8cbb-9a3501a64fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa0a4d4-49ad-428b-afc8-0a601b2e1ca4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f7227f-088b-4217-866c-8269838497ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c84570b-78ae-4e43-9292-2e3c02f0244b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b709bd5b-cbc7-42c3-a5d4-37928b83763d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36e0af8-1646-4d45-8818-67c3f626a842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c24d55-0927-4f73-a98d-943796fe5df7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f78ab80-e086-4899-8771-2262649e0263",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c2eeb7a-8cfc-4f73-8610-a39d6628d97b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f8861f-7650-46ae-94a0-44981f4f194f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d65a103a-f293-4cdc-be79-af0ef4545ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8a455c-e248-4eb1-90a7-ea5d050d9bb8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cebe6b0-530c-4ea2-b3e0-4465a50e2e54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ca928a9-4c2e-4723-ba04-d6375b2cb1c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86756b2-758c-42ee-9384-d8e9d22d02a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b22585-8e80-43c3-aa64-9c7622a14859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3033d9f2-d79e-438f-91a1-91f862c2602b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68720fcc-6a96-4113-9e83-3ecba114df05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7bd54c7-a608-4a0e-80ed-db8879b9c9dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "598e0590-01b4-4e0b-9d50-dedb05308241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "680c184d-da85-40ae-9f72-75154b9e81dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0f5d26-fa2b-4ac3-a393-d35ec92ba2fe",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f9e323-6eeb-4e6e-bd62-7eeda9db375d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6280ccc6-14c0-4b9e-b53d-8497a61be395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99eb8004-b932-439b-9ddf-d738e1ed31e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef4b9f3a-e49c-4ff5-8ddf-ebeafee8dc61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a69d481-4dac-42a8-9335-5f2b07c8a8ec",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71888202-3dde-4d99-bc14-d4c035a586ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ca9c233-07f6-4452-b947-a43fd2e4b191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56671a6c-be00-42f5-bdbf-8fca87f55d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eb02299-dc55-4c57-9b7c-5da33934cbfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf5faae-c0d4-488b-a94b-a83e4577b120",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf24965a-b194-4102-8af1-4b06d88de944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5675f4cc-ff7a-4563-a1a2-e1d391c5c2cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "724b1830-015f-4d9d-9b2b-bd789273cb23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b326aa-f3b6-421a-9042-e501f53b2ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf50efe-b286-4871-9a77-96871a4f7ebf",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dab152f-bc41-41d8-bef2-f6fbef100f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e087f0-588e-499c-933a-7f641cbdda77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6ea495-705b-4983-9d76-c0fc7ac53d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d0b6b60-1a5a-4393-9634-f23f78a12c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb2d794-e093-4c34-8754-b5c84c71b89b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362c4269-d855-4371-b32e-744c92a9969a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e64e20b-a951-4f22-bdfc-6343a66734d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e850f326-2afb-4b5d-a6e6-038a2940e0d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bec4104-0864-493e-9d6e-1a621bb39243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495e9913-14e4-4516-babd-2b90128a3e76",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40dbc13-a79e-459f-98a3-6c167d9562c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9776e7b0-f4d1-40d1-b174-a4971ff48dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fa548a-e81c-4985-b814-292004a4282e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76511ff9-52c0-4145-87aa-858e0a6d4438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9fb5c9-643b-4ae0-a562-a97039f281bc",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb06c78a-833a-4b7f-af30-538d881bd39a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12f6d2da-a470-4375-9760-5969c77545da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b8e29b-7e3f-4f6b-9250-3707ab9640fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e638e5a6-ed4d-48fa-94cf-1b7b2c2913ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27b60ed-49f6-497c-afd4-62f5b94b8d65",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c36f28-39e0-4f42-8000-996301852c61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea603a7b-3985-472a-90d4-270ce5b42cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3dbd56-cb11-4985-8db9-eff42dba158b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b1ef72-babe-4c74-a7d7-93820f7c8a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01efa4d-250a-4f40-91c6-a17c3b7ccb73",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70f18cc-6c21-46fe-b0db-4d6d93b83ae2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bcd85c6-4b29-4fa6-bcf2-366040db612f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3340aced-3a53-47db-8d67-df76510fa796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ceee44c-a498-423b-b883-e440b4952f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51916f4-cfd6-4216-aee2-643e1dd8f220",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1ab763-c9ee-45e8-bf75-6e0c25e65a7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a6c9e64-8c5e-413a-960a-16d39da15028"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e1727f-36e5-4d1e-87a0-493b7a8d57f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b1de64-a3e3-42a3-9a70-482819cb3564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3913b747-345d-497e-ae22-74f29032df19",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5a2b26-295a-4018-b413-9ffb4013ff32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75807577-9b60-407e-b89d-eeac6d812edf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cfc0156-c9b6-45a3-a7c5-b8c7f5fd76b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c38122d-9979-4759-b5c7-145afb765746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4dfed6-370c-43fa-8b76-67163fe79e30",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c3894d-4c7d-4e94-b134-35fe8c8b4696",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebf6d21b-e342-409d-acc3-3cd475e26c70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "126c81ea-2162-413f-90de-3bcf60ec5623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05c8c78d-d77e-4705-83af-aa31dbe33430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed5127e-e98a-4944-b0ce-332291b2aa2d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20ce364-956a-409c-a18f-9fcd6498bdef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4af4143d-927c-4286-a414-d5313f75c4de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bd7ec4-5395-46c8-8885-2fedee5d7dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9f919f5-fe59-48cd-b503-7006e9ccf23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0a93aa-2202-4afa-aa70-e533e8ecae86",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4c9ccb-5ef3-46cf-bf0a-838fbf84c103",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da2ee8b9-3541-46d6-bb65-e45399583d3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fdf5c4a-f942-4d41-9d9f-7f1dd016943e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "766e4d1c-4544-45bf-9ade-9606f3b9b8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608334bf-eea3-4646-9157-8c6b5bfd5c5a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2357c5d-b67f-4f1e-bad1-f866ca20f966",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4acd3654-567e-4ee9-905e-b3d123d258bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4c86e0-3bba-4053-ad52-98029f1103fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ca8d3a-5e4d-43b0-a09b-3c83fa03065a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97769e18-6b9e-4963-921e-da6572764638",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d09b63-8f59-4ea5-b70c-7ed4832d637a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02b93c7c-8b31-4758-b8a3-be22f416e181"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db1128b-b33e-432c-a4b2-402c4d9f75e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d55967-94d7-4597-bc77-7cbff8784783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d589ffa7-1786-468d-80a9-b4d28091fcb9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736dccbb-ecae-4d81-81f4-aad5e3a6691f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3519c68f-2385-4e2f-9d07-41c0e9952298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ed5f2b6-6521-4dc1-b404-01fd9c2cfbb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623da2d2-a7cd-41c7-824a-2ce592cf3f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede3d3d4-a0a8-4e35-af25-ecc4dceda177",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b029a0-08a7-41cc-ab9b-1024a2ffeba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1762566c-d049-4eba-8008-87dbc648fe57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2de9691-0174-44f4-baf8-0eaacfa18c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0410a105-0680-4365-a02d-4b2fc501d7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cafc53a8-9423-465d-b25b-0916615bd5fb",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ae0600-aac0-4e37-847d-416c8f09f270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c074920-5a9b-442d-9739-a35c8da2a7b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2662e845-9299-4d49-b018-bf5f14f6ec9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f750a6ce-9884-418c-b78d-8d97c2209dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a7122e-59a5-4ca1-acbb-45e9cbe02987",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c12874-9c5f-4f19-adc8-b8e58bb98cb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7072896-a925-4cbc-94d8-c8d9325ac509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56b6db7-3edb-4c7d-a17a-8c5093da72ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bdbc06b-4ec9-4ccb-ab89-4615c265eeb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95136ab-4190-4a90-b5a5-f04eeccd74fd",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9128343-a9bd-4e7b-ae83-44054f585d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45084946-1d7e-4ccd-88d2-fcbe6e50285a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1d7f63-08e2-4770-b060-73d4647fefe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042c04b7-7810-45cf-be4a-d49509eb4a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50876864-44ac-4aa5-8fcb-223f201285c9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb61276-3702-41ca-9b9c-26f372fd20fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdcb9e10-354d-4399-9617-94dc595d69fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ea921e-f1b0-4a8c-80df-ba870aadb2f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b16335e-cf75-477d-bec7-3ecdaa79518a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68301d8b-0804-4d2f-8132-b8b9544138c4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df76471-c672-48da-babc-ff21bb7a7c62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "080ff9c4-e13d-40b5-bcb7-cfe094e5b6fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7db370-1e1d-4963-89e1-fdbc471510ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d80a6d7-2da8-47d0-94ef-38d057ea82a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1833dc-044c-4d5b-a57e-a10ad46c1134",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917991f9-0c12-4cb5-9340-6c252f4a91ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888d3009-e10c-4187-8ce0-b0129eee0ee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e19098f-e9b8-4502-a5aa-80d9c63eacd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1e5d93-84a4-47a2-9664-20b7998e427f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410dda19-959f-43dd-aef7-00deca29752c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d95e6a-c540-448a-a827-59b3d9fc225d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58533a7b-cfb5-4194-a426-7f166db8d9fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c846ea2-06da-4f0b-9381-3a0f13a61f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f147837-ad15-49e0-8ec0-ff67e925cae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad998857-2fb7-4957-8d7a-d847b114273a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df231ea3-f1ae-4e7c-86d3-aafa4ec91002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e7fbac1-966f-49d3-a926-1e02b6b611c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10edaae3-da55-45a5-9562-8af6a20730a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4005ed1-4c98-43d0-9368-3354d2647e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66588ad7-c375-48a0-a473-848c9e7f3a6c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d6866b-4cae-4a2f-8dd7-440efbb2e546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8acf8048-beb8-4b86-83ee-59f5a02de0fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfb730b-ec90-4c4d-b7dd-356ebee8ad53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9360ede6-7aaf-43d7-8980-3fd1b817b110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da6c357-50dc-4e24-81dd-977831c6d88b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45509013-0b4a-46e4-8046-d783f3e61f7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3863e2ed-6901-4889-ae23-f0635ac6b97f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb376ba5-4bb9-40bb-933a-d8954b0123f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f933efc0-f957-4c11-80ad-ec97db093a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23fbd4a2-1b86-4ece-ac87-1c996627bdf0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc590a3-61ab-48f4-a95c-9510073ca3df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64dceb4-0bbc-4faf-8b34-f74d51ffe0f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71b6b2a-c1f3-47ae-8d71-00ab3d0b785e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aa11a54-c49a-4ccf-98c3-56001a89eaa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d45160-dfe2-43fa-8f58-07f58959d6f0",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ae07c7-62d4-471a-b317-75bbdabf0f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70cf083f-1d48-4f10-94a8-20eb8401a9fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e75fe8-cbbf-44f9-9663-519ea0d20c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f192d129-65bd-4dea-8b48-93c41e4cb672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6d578f-714a-4cf2-9d5c-c1db376af655",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7faa3ee7-93c4-4683-9c0a-8c1314a50bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df3207f4-37e8-4269-b250-05e6c23c32fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "598c94a2-892c-4ad6-9730-740ad40bd799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bfc01af-a739-4d2f-853c-c1657dbad9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceade71e-6feb-4cb9-843a-de0479766765",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38c1e5b-7993-4807-a5c5-04b744bcaaf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9543255e-4fec-4d08-9e3b-39c5e103a2b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2153c0a-f950-4c4f-bf58-7d480ec2b5c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4023e193-2447-4aec-b8d1-2931360741ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3469f5b0-de5a-4547-b2ed-77f8e144e4a7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27617699-af19-4a9d-a5a8-ca66d6ae028a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ebe46bf-d56c-4941-bc0b-e24d5f02e9a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb35eb1-c381-4229-9593-958cd795eb31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4b86a7-83ac-435c-877d-451aa539b3e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458b8781-abe5-474a-a321-b237245030fc",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13e683d-36eb-43fa-b908-12f412946048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbcdcf6d-81a0-4113-9754-f6e289eea55e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae700eb-2c03-4984-80b5-65194738bb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ba49dd-32fe-4e36-a94e-0cfd4b0b955b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d40109-872c-47f8-a8aa-e5912af9e724",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0c815a-b99c-4db7-9fd5-c94c3c03a342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72dc61b9-bf27-4f06-8706-312ea60997f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6315ee26-4b7c-4bce-adce-cc9a03db4d1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ff67c3-2ab6-4ca3-8b61-6dea9ce93d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e655395-13a0-45f6-a823-7a67e2666466",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073061d7-acd2-487e-a790-18c2c798817d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae48206-c9a6-4ec5-86f4-ae19ad6f66a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2e15cc-afa7-4745-83ff-71e7fef031ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "113ffb11-8b8a-407f-aa96-47694bb87c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aab24a0-7f8f-4b82-9cb2-4fb7a6318c76",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ad4377-7786-41db-8cd6-e6295370c0a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc8abd98-2dff-46d8-8772-5c3943eb21f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d8ae0b-0808-48b3-ae4d-88a42af8fa43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3d6f328-8c78-45bb-80e2-731f7e259dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ecff04-fa12-422b-a832-185b498fa61a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d416ddf0-a138-4d7d-9c35-d82f2b2a22e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f984b5-d28a-4c5c-ac40-d2895fe4d079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "190334cc-b9aa-4569-8f93-1d8e2360ea4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6cef94d-ae05-44cd-b9ef-2718cd4a6ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4ddb7c-80c7-4829-92f5-906757ddaa7c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4045a0a1-7334-42f3-91e3-c3d5d827cd33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f6abea-8e36-401a-8d28-cafe969a66b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56d8b94-169a-4900-be64-32712d5469c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7ef0bd0-3605-42e6-bcef-a8218add85c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0b9e71-c52a-4dbf-860f-8039e3c70dad",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf11caad-26a4-4466-a59c-4c9e1bbbf863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a01157d-235a-4c03-a99b-671777673727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c594f1e-575c-4e66-b4a0-897ca11df83c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac9c140-1bd7-43a7-bf37-b8f784808a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573a0e9c-1854-4f6b-891c-81bf2ffa8025",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4ee0af-eac3-4af7-8f90-2707324d4c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930ab707-a655-4542-9599-81b7d0eee679"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8ebb38-82a3-4fb4-8f8a-b227edc5137d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312fa76a-9759-4dbb-87af-5d2331660b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928854b1-f77c-4d5f-838c-252e7adf47ce",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8e4385-c8b4-47bd-b078-a10e9209de54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "811ff6a2-b6bf-4d20-b6a8-2c6f9e816f88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9894fe-8853-4eb6-a717-f5b74b1c8f03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85122ec4-fee7-47cf-9954-23a5587bf783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9e33f2-2f29-4aa5-adc5-e9e2c33519d9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0d5f3d-6dde-416a-a92a-f97a60bf4b94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae091886-2152-4857-a72e-65e8c6000269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cae6d32-5e5a-43c3-b582-5e809d9dfa26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b849d8f9-a6fb-4988-8005-e485cd903775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b53b6f6-f962-4d8a-b6ea-d48dcb103102",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8651f4-ac13-479e-a8b9-18b4ed4fc86e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea5bbefc-ab0e-4a8c-9a79-aa06a0ffb2f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14858f7f-4efe-4867-bd3f-9c4a3b1dcbb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dedd238f-ada5-4d5b-b445-9fa7ca4c8899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1a46c8-a182-4c43-9976-820f39e2b603",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54fad998-6cb8-440a-a05c-e5deaebf8dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24dccbfa-a317-44ce-be8c-732e12c3bdec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24128eaf-9665-4f41-b1b3-2259e9cf9555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a4456d-dde8-44ef-af41-facb172d8848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6983438b-51f8-48c9-a253-6c3273191b81",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72533b4a-4092-42ac-97dd-035eccf3a134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e7a02b5-e008-4c8a-81a5-712dd30ab30f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff7a4ff-c5ac-4f54-80c2-9f574a67cf36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90497535-bf44-474d-9669-d6584c38f9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e5bb1e-836c-41b4-aa63-10875cf06f9d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4bf2567-ab27-4f27-844f-f58647ad89b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4572247c-da69-48c0-9d64-51fefd19350a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7202ac53-9127-4872-836d-21af92fc7e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0816ac0e-ca25-4eb9-936e-3a83fa67d2a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d68785-49b8-4ef9-b88e-9514c1d62ffc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150d739f-b5e6-4818-b36b-4d8e6f4ea679",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef62376a-a232-456b-bd6d-3ab1b2cb790c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f1d448-50e1-4303-9e2f-fa91654ec1a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6462035f-8bc8-437a-a20c-26ce64b9feb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04a2629-9985-442c-b416-8eca65614b41",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522f05d2-d91f-439e-a3e4-06030933ea0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "549d0fec-1151-4269-b262-499e0827e514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35494d04-ad2a-44da-9c3d-99dcbdc1c176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8360b792-48de-4c54-93e9-2cfa436591c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8369d6b7-93bb-4f53-a658-d5bde19fde07",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0e1195-c867-447d-b1ad-a35834436984",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1893ac32-8246-426c-9772-3c6391b5f5f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "201e7b07-2568-4772-932d-da41681fa422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98fb9834-2be2-44af-b8db-31917a19c3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41cf44d9-87c4-45a6-9246-5b3a435df950",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5398bf56-d05e-49da-a20b-590af8d1ca7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8b7a9bc-dc8f-4566-a298-4c95fc640cd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29df037-db23-441a-8dea-b43188dbb0cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4650d6b7-fb07-4b98-9b4a-a87a071e2205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d17b75-e5b6-4b38-9b46-7611c3405633",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafcc1c2-9273-4aa8-949d-158eb04e21fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44429399-c3a7-4e3d-93b3-d1c021c2b26a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5f2242-3e51-4c54-af0d-bbd060ebb21c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fab492d5-bbe2-4453-a6f7-ea3165760af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78fdbfdf-0d64-43ce-9ba6-6f948ef1bf72",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d82fe0-0891-49e2-995e-8dc89d1e3ffa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7e7ef49-ec28-49e2-8dac-5bd2a7940248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e721613a-d8db-45c1-9157-db584b3eecbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8894d5e-5fe9-4265-a8da-1a68c08c699e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c678d3-daab-473d-ad0c-b4dec313b8c2",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74190f36-9dd8-4af9-a2ea-a9daa296b50d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b4f259c-002b-428f-8046-281cc48d903b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2cfd639-96d1-4c1e-8c9f-3d99237fcc42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3133da48-f135-4c15-b36a-36e22eb2e5db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7301363-8d3a-4e9c-bb35-2557c14f23ac",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5aed9c3-07fb-447e-8d0f-a53cff4624d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a55b9bc-0926-4171-b118-ae39fc4b2b07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbad2e9-d048-4dc7-a4d9-995d41e7e613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba73369-2ed1-4b69-b4be-a39c7eff1a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0d6c9c-1505-4fa6-9656-a51ce61c4dfa",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa776063-a60e-4e47-bf75-24d95d937e5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c865f6df-84b6-499b-b079-5ae03ccb40a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b839032-2178-4d31-9756-3bb9c05285d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb47a9c5-caf8-4b83-a2f9-4220f2a8567e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3782cc18-347e-43bf-b2ef-00b8f462a610",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7890ad-6fe8-443a-8a06-08060c63c030",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "050a0846-1452-4ebc-81b7-bd8116e5930c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59bf3900-b992-4f87-8b6b-5712e856d973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec31431-26dd-451f-8243-7a6c1a666968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96f92e4-d10a-4ddd-bb42-8a18ffd3075f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e2e23f-0b1e-473c-88cb-9440a645f82f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eba8678e-d205-4889-b4e7-ec69d3335e8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcaf0639-419e-4490-b787-7b147f92aada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fed2da1-5370-40c7-bb19-221c4b43bede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a67073-f9fa-412e-bbda-b6748b5e148b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e2d5fd-23d4-4af9-a27e-dc71ed5d27c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb7921a9-a1a9-4f17-9073-f1b443be920e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcadb75e-8894-4d5c-8b6b-a740184e5862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b67dbf5f-20c5-4d84-93ff-78fc8235bf9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8beddb8-24d9-4117-9c2a-d196c36ea0c4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0668f409-ae6d-4397-91ce-45c734f0eec5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed40e46f-acaf-4faa-a978-1a008d20c942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67769ab-beae-461d-b418-a8bda7a1fdf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0381edf-6a8b-416c-a732-11ec599d9ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce9ed80-37b7-441e-aa47-a302cc7d5de0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf18d459-af20-495c-b5e3-b0f054d4ceaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "129f54e1-0704-48a5-abf0-99bedc891f39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ed1873-9bf5-450e-8090-6bbe16689ba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d818c8-0ebc-4691-86ba-adf207bb2baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f23cb0-802d-4237-9fc7-690dbbbfd6dd",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed9774b-711b-4e60-ac3c-282bc6c2f991",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38ef3709-edd7-4aa1-b8b1-5602634029ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eda6c22-d7b7-4459-afd2-daadf9c44a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7165c204-f6e9-4ac9-bf92-fa56418503ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f1ed9f-1bdd-4dbf-af18-39ae1c2593b2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ae818a-1f80-4ffd-b26c-20bcc9bdb603",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7800939f-2858-4fba-949f-ca71b3335805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d62f45b-ca39-40fd-af2c-1f10239cea61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a3b504-4e41-4780-945c-66bc0de900f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4498161-9912-4c32-bf05-427969449a3e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0612654a-ff24-4998-8715-23fa4ff2736a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3977b1a-aa0a-4d9a-8672-27ab22e7eacd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ab05f8-dc61-44a5-803d-30609271a884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e59b87-40ab-4750-96d1-80f701626917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8849086-23c2-42a5-a6a1-bfb6a8f09083",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe4047b-e70b-4735-abbd-5229a2e6df06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "903b2ef0-e289-446d-83ae-d31022b1ce89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "546bffd6-67a5-4652-9e25-1c4bb0b85e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394187c9-04c9-415e-8715-d77b4a606afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4993b7d4-b225-4335-8d05-0dbc715ac9d3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82cafdd2-1cca-4f70-9ace-52bb332ac5b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01e7c357-7643-4df4-a688-93d2cddf0190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3c6ec3-a6e6-4358-8a94-dddfd6b5ab6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc51cebf-cb84-4040-a043-c3d42fbe49e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b1432b-f4bd-4cf9-8308-4e45881e065e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647cfb54-5c03-40f9-bee9-12871d019374",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70cc96bd-c31f-43dc-bc73-fd07e7b54ba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b353ff6-7035-4fc6-8c22-bc3ab74cc806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5eab23e-dfb6-460d-b4d5-2d739e0610e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9009b6f0-319e-47b7-9176-2b735a817b15",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64752a5b-65f9-4a62-b0ae-4ada9b70d05e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f29e07f-48aa-4463-a849-ad296c0cb3d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7084c2e0-1194-45c1-b1fe-03ecfca65149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90602529-b2b5-4e77-b2ba-b7d2af33190b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc483be2-f902-45e2-8cd0-c27f4aae2357",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb23e89e-f85c-49af-8f79-f8655df32987",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dddc2f6-52ab-4fa2-a870-d3143a157770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d260d1c6-8ef9-45e0-839f-98b0d61038e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "458a1040-a777-42f2-989c-41a0e908d9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba265d0e-1a30-4dc0-a17d-a7f0e2165cdb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208d2ff3-4fd7-43d5-b961-3c5da265de25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0003ee1f-49ac-4629-a94a-97fe450b7463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c802ed3-fb37-40cb-abfe-5ceedf38c027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1798f055-6480-4b4a-8a5c-e7298987f41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2fcc55-3f57-4b16-8cec-f4a6f2bdcdb0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b4e840-119e-497d-b110-750befc3309b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e44e5d68-6446-46b6-abeb-e98f656b44e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca5ac10-8eca-48c6-8d9b-582778c6226d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24078fb7-3b47-4808-9849-f6a4d9e02da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0521b706-de86-4f64-b80d-548031eb53ce",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92464624-81af-4e78-8345-a2ad520a5bc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "278dce85-1fe0-44fb-a196-56eba8e1c33a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be476b73-dc71-4646-82a5-c27b810b5d74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f78a30-c0d6-4bcd-8d41-0f8e41c09a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f90cac7-0e45-445d-b51d-a7cef5d3b402",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef904001-99cf-4e53-ba39-c74f454b017d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec243cfb-9bb7-4084-92be-2dfc896f2901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cebd58c-2164-4abd-9dd6-274c18c65593",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c5ca82-7a1f-4b91-8b41-f2c8c23fe04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3482b87-1200-41ca-b5ea-2593626a5b65",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14ac16f-579b-431c-967d-a2864e6c70c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "471ec7a4-07e2-4a2a-ba4a-7627868ec7f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62de8cec-8888-4d8d-aeb5-2e0d91bb3751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "072a2d6f-5172-4593-962c-171bae5d1bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee624d3-af63-4d04-b20d-e2688e97e37b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9a9e46-1622-4f14-a501-9b9f40a7ed60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2768d2c-f2f7-46da-8c5e-8a21fdfe6217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95de0013-4dd3-4218-8465-16e1d973e9f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b634c7be-ae3f-405b-af32-43a74b132df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f08375-b5b8-40d2-b0d7-4fb7219fc78f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b20ff70-201c-453d-b6fb-f25543ac944f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2c6d0a7-42bc-412d-b67d-3b4cdf15ea50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be30dbd1-638b-4470-927e-6f91422fc3ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72b93bd8-520f-4b71-a926-b8644503af45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c804b82-de5f-4aeb-9ee1-2a228ac1dbf9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fac8927-0b68-4995-b1cb-09def2bd2b7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a03822a-8f36-4d2f-9fa2-5cd4b12e0516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "397de52a-78f8-4a5b-86e4-5ee0a4d952f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeb3221f-5d02-4d07-a0e2-33927a7a751c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9d40ab-2c1a-48ec-8275-673dc4da94ad",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ca1955-4aed-4c39-bb2d-35a838fc8ea5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34392b96-b0da-48d6-a114-4d5ba4d04167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1ea63d-90dc-44fc-bdb7-5571511eb068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1fc59f0-38a5-4988-b506-6aba071edf7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7afdcae3-9d95-4595-861f-2e804dafecae",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1048a94e-06b4-48ed-9c85-d55f2936a550",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de1415e7-7fcd-453e-96cf-389c8446c51b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "400f3682-3d84-41ae-9440-91fdb09dd601",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "484b8d02-e2ee-4f30-b217-541a239802d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0978e80-3887-4f4d-83d8-fd5c0c9050d6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb13938c-6f71-4c0d-aabf-955c937f62ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65e5bb78-3222-4c8c-8971-53d5375f8640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b87bfb-67b4-4321-b873-d0eda138970f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d168a75-588a-4daf-9cf6-ac95ed94cc5d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ad2236a-9f09-4237-ac73-43088914bab9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4536e70-1ba1-4a72-901c-3791b6fa0220"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8dcab4e1-853e-4d40-85e1-92493c9fea4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "462743ff-fd8c-4985-a803-498f03a52727"
                    }
                  }
                ]
              },
              {
                "id": "914e0536-8e3a-44d3-b241-5253f7d6d312",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "99b95241-b85f-4fc2-8b70-ff2034f86639",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba45f70-9b27-4794-9407-6f26b49316aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "60d4f845-177e-442e-945a-4a33655f94c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39a43ff-a65f-4610-8b9f-6073d924e2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14cb0ae1-7de7-4402-b612-aa110240b6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4771d27d-7b87-40ee-8635-b90f8d497e54",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e553275-400a-49fc-9c6a-63b80c221b9f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8b2713ec-a8ab-4d71-9fb8-cfc6ff2d5e88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9db86d-d0ce-4b19-b36b-64933cf91d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4da17de2-f698-4692-82c1-ed1bf9802c5e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb89ddf5-e5f1-404d-ad3c-7c07493be33c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6f11d84-5683-4fa9-a45f-f29f5ede8b0e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c73fd970-37d9-4263-934f-675c317fd7b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ea9afab-30f9-412d-816b-46deaf40f27a"
                    }
                  }
                ]
              },
              {
                "id": "cbbf84b5-f24d-4235-8b1a-121dc3bcaad8",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "87512585-e9ea-497a-8bad-5332f895369e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7187c25d-6ddf-46e6-9b16-6917ea8fbf49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fbdb6399-c16a-42af-a3d6-7a55d282d7d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9201bd-b280-4a80-a4e3-07799045656d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9139a16b-820f-4f3e-95c4-f047d596f6e8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f24e09b4-6c73-411f-a498-4ae83ed06046",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0be030d2-6eb2-470e-9eec-d45b94b35093",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04a9cb83-e089-462d-9c4a-d4860fe8f600",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6a307f75-3bf6-4f5d-9962-48aaf98f73eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78a8ef59-0dfc-4582-ad5c-7ab8b7116b64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e44f04d3-78a8-467c-85f6-5923986bbfe7"
                    }
                  }
                ]
              },
              {
                "id": "bb889499-d9ca-40b5-8a93-bb486df91e70",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2e3a051-381a-4d1d-b1ca-fcc143a5aebc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2f317462-121e-44d3-a4b3-a865d989fba1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c01e679-3b73-4321-94a6-7b7622455015",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ea893da-1399-4de2-b5a7-0d459f5c3a46"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c96cf19-b474-4dad-abf5-f4dc996d176a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5f145795-91ce-4e1b-8b26-af43fb2cbf6a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "729ed758-255b-46a5-8781-91568741fd93",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "08d26ab9-a80a-4948-825d-50e7d17aad1a"
            }
          }
        ]
      },
      {
        "id": "d2d2caa3-6b09-4024-83c1-1cb1663c3c54",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1e324f8e-2638-4ac8-946e-f5d4339acde9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6c54767d-f17d-41ba-975e-0e738a9ea9d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b419d774-d93f-443d-bf18-39df756e3950",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a6428a-b3b0-4901-82cd-78de3a9d2917",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3ac3b2c2-48bd-4395-9a84-8735aa7dd5e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad286aa6-0c90-4504-8b67-714458dec0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9843e2dd-827f-47c9-ac06-d4bbfb094c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ca574f-81a6-46bb-bbb6-b227e70f471b",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19e340f-cbd8-463a-aee4-bf354f991cad",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c3c92f94-c084-418b-b5a2-7a93227f5f58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ee769d-6f6c-4fe3-93d4-c08520d3df6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c307384a-046f-4d23-b9d7-2e03536f182e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e58ebfbe-b0f5-468a-b087-e4c4ae4442a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6eb4ab65-694c-4bee-ab18-9db2ea1a4ec4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "46a5025f-b9c1-4aaa-9c97-d403bf1099ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56896f38-2fbf-4bf8-8163-6a069f5c4301"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b6f0ff8-a1d4-4179-8246-bb94a2a586f0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9c6cde3b-0d71-48e7-8c04-3824cbc3afa4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb169cc1-9688-4e7a-a7da-a7452af24d84",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d6cd13c-3df0-4ce5-8dea-175d5d685c91"
            }
          }
        ]
      },
      {
        "id": "00c46ace-6273-440b-9f2a-6fbf824eeaf7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3ae2887e-afec-493e-903e-723a4e8210b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4187ab17-2f22-449f-b7f0-0975dc5dce8b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9dabecc-52e1-462b-906c-46d04e568bda",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30bde40-bd53-483f-906a-00e625427918",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a47ee3db-ca54-4641-8a0f-5aa2717788a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84feb168-5395-4b59-bcde-c269f0c007d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1ed2a11-483e-4449-a85b-45ac5319e7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60eb5fde-b0f7-455e-ad87-6453390af636",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f306d2bd-8a1e-4dbe-a8a4-94814642d6cb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bb3e6627-5b63-4908-aebe-645ed58cb4e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb09f7c1-f393-4825-a795-5ecb3c0eaa65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "836b041c-0f97-4bc8-b1a6-5b7ebf9dba5d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de0e9719-6054-45ea-b88e-af7281e40b85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac4400ad-fbfa-4d53-b31a-631be8368671"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1fc1c5bd-c1d2-4b3f-a48c-3ed1ca98ff24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08bb3137-5498-4814-af55-7a435c7494aa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c26dfc6b-f87b-4479-9c9a-262310a369c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3d827311-dc28-4d22-addd-9fffdd61c193"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e101d1d2-8845-4bdf-9031-d6dca567c863",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "57dcd7da-a45c-436f-8e3f-ebdd4f2bd699"
            }
          }
        ]
      },
      {
        "id": "ee7376ab-0e5c-44df-bd01-15377b40463c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "47ad2bc1-792f-4b4e-a36a-9379d2636834",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ad68d9e7-0e0a-4674-8f28-6943bd40d709",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2b4368b6-e08d-4c8b-809c-808142c58457",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec11b19-5b08-47a2-8ffc-e0ed516947fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "35f7a30d-e6d9-45e3-895b-6843c57423fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa1ab5a-1379-4fd1-924b-cfbab722bfbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5301d88c-f324-4edb-953d-5cf7c719fc99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48e7630-da98-41e5-bfa5-4f7e57abb43f",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a186c116-15b7-4cd0-b7d3-1e9863056f8c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5b5eefad-e3ba-46b5-bdb8-d5c138cac8a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51d6829-8636-4673-8265-0ae932b6ea41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76159d61-e90b-4f15-a21e-7de6d3c9c3c7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83501341-a425-45e3-beb2-a467af3340e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8abe28c5-89ea-44fe-9444-bb245ed1be43"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "402a90d5-b675-41d8-81d6-c9792bb84470",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc916d7a-6f53-451a-bf04-59cbc9441894"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8682f58-9563-4702-9b7c-ca26d2cafcd2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "709befda-63f6-4227-9fde-dbea237dd055"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8777d2d2-8a60-42f1-9448-d3190349edc4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97c8bc74-ee26-46e1-ba23-566bd872b06d"
            }
          }
        ]
      },
      {
        "id": "19183367-49b7-4b23-a286-fc62f82c38d1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58c75489-4c7a-4e51-89d5-556834a9faae",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eee13e30-882a-4e2e-96e8-199a62258f08",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "cd09c885-088e-4182-8b1b-506b1f1e6966",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0ff07c67-5519-486a-a02d-05aaf83f4d8e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cfa5378c-2873-43fe-8766-5bbe1849e6a7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 35
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 55.922779922779924,
      "responseMin": 20,
      "responseMax": 338,
      "responseSd": 33.40984847741177,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677458489750,
      "completed": 1677458514807
    },
    "executions": [
      {
        "id": "d733cb1d-4842-46fd-9ef6-73251f08492c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ae4843b6-9398-45b6-842a-25f3f36ba4af",
          "httpRequestId": "dc293876-4856-46a7-8829-065bd6cbcf33"
        },
        "item": {
          "id": "d733cb1d-4842-46fd-9ef6-73251f08492c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b7e18628-a8fd-4451-b441-1987a2bde17a",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 0
        }
      },
      {
        "id": "0fafa3ce-41c3-4d66-bd7e-ab1b8d128b46",
        "cursor": {
          "ref": "4af9b9b9-1125-4214-af03-e524ba91b6c2",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d9c468a7-089c-4d38-89d0-14b8c2ec9b55"
        },
        "item": {
          "id": "0fafa3ce-41c3-4d66-bd7e-ab1b8d128b46",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e8047895-9507-4a50-b478-355445ca09ef",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "9fac9860-a624-4167-95b3-d223946e748a",
        "cursor": {
          "ref": "ac81d1b0-37d9-41d0-ac32-1d628cc5574f",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b675bd09-2130-41d7-a92f-1f1543498e0f"
        },
        "item": {
          "id": "9fac9860-a624-4167-95b3-d223946e748a",
          "name": "did_json"
        },
        "response": {
          "id": "4f5f9b75-317f-4a6c-ae7b-7b004dc827b2",
          "status": "OK",
          "code": 200,
          "responseTime": 199,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b56bec7-294c-4627-b07d-482ebe9959c1",
        "cursor": {
          "ref": "03ba9081-41a3-4916-85a6-d0a4c75b096c",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae637ee8-10f9-4a12-957a-50aaac0c7452"
        },
        "item": {
          "id": "6b56bec7-294c-4627-b07d-482ebe9959c1",
          "name": "did:invalid"
        },
        "response": {
          "id": "1155acad-2117-4217-b75f-bb33011b1a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "6b56bec7-294c-4627-b07d-482ebe9959c1",
        "cursor": {
          "ref": "03ba9081-41a3-4916-85a6-d0a4c75b096c",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae637ee8-10f9-4a12-957a-50aaac0c7452"
        },
        "item": {
          "id": "6b56bec7-294c-4627-b07d-482ebe9959c1",
          "name": "did:invalid"
        },
        "response": {
          "id": "1155acad-2117-4217-b75f-bb33011b1a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "6a409a1d-fc7a-4911-9366-59021a819b7e",
        "cursor": {
          "ref": "8dbfada1-6388-41f5-b3cc-5ae36343476d",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c9e6226c-14ab-47ae-8ab1-27de5b3d198b"
        },
        "item": {
          "id": "6a409a1d-fc7a-4911-9366-59021a819b7e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f3d290b3-1c71-4fb5-a34c-24f71450fddc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 85,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3689f3-7a07-4504-b1a7-c13f3424211d",
        "cursor": {
          "ref": "da42031e-f2ce-4237-9908-924a6e6a7884",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "13a41b51-52d9-4fe9-b6d2-f406b1c97391"
        },
        "item": {
          "id": "bf3689f3-7a07-4504-b1a7-c13f3424211d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a1a38172-0e3f-4126-bbb7-cc34f3cd77c8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 48,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e145ee7-193e-4cdd-965c-b4108540c09c",
        "cursor": {
          "ref": "0e486e97-142d-47a0-98af-665430a7be07",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b3a435a5-eb22-4105-8fec-181ab8752c77"
        },
        "item": {
          "id": "4e145ee7-193e-4cdd-965c-b4108540c09c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d62a35f5-3ad4-4df0-b578-afa44d5f3795",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cc3d39-ed04-4225-aede-068779598eda",
        "cursor": {
          "ref": "4069a8ab-f802-4586-8feb-d73e1f4762c6",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0ffdff9f-41d4-45c8-9841-2922f95389ee"
        },
        "item": {
          "id": "29cc3d39-ed04-4225-aede-068779598eda",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "db0e69b1-3211-4fe4-b191-ce711a320e8f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cc3d39-ed04-4225-aede-068779598eda",
        "cursor": {
          "ref": "4069a8ab-f802-4586-8feb-d73e1f4762c6",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0ffdff9f-41d4-45c8-9841-2922f95389ee"
        },
        "item": {
          "id": "29cc3d39-ed04-4225-aede-068779598eda",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "db0e69b1-3211-4fe4-b191-ce711a320e8f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d37c40-aa7f-4d6d-ba13-6f61a4290cd5",
        "cursor": {
          "ref": "d045a6e9-7386-4039-83d8-c2e0282d2bd0",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a3d2e790-176c-4f96-8926-7a85ccd51b5a"
        },
        "item": {
          "id": "08d37c40-aa7f-4d6d-ba13-6f61a4290cd5",
          "name": "identifiers"
        },
        "response": {
          "id": "1374592d-34bb-4a96-be98-dda0ba8fccdd",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ddfee78-6458-450e-afa0-ae933e84ae15",
        "cursor": {
          "ref": "5e4822e6-1b96-4a5e-8893-b1e152f63593",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e11b2796-983c-448d-9c8a-b6b188991440"
        },
        "item": {
          "id": "3ddfee78-6458-450e-afa0-ae933e84ae15",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5547b417-b089-4ff4-a2ae-30cbd01f3212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ddfee78-6458-450e-afa0-ae933e84ae15",
        "cursor": {
          "ref": "5e4822e6-1b96-4a5e-8893-b1e152f63593",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e11b2796-983c-448d-9c8a-b6b188991440"
        },
        "item": {
          "id": "3ddfee78-6458-450e-afa0-ae933e84ae15",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5547b417-b089-4ff4-a2ae-30cbd01f3212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e596f9e1-7812-4b8b-8497-40c2c5ab4ddb",
        "cursor": {
          "ref": "7f0d1184-fc82-4849-91b9-fa8a88dd7a92",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "08758706-320f-4b55-b11a-70dd2cd70cdb"
        },
        "item": {
          "id": "e596f9e1-7812-4b8b-8497-40c2c5ab4ddb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "64de918e-4d72-4605-b0a3-b7e5615d2593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f08b8b-e03d-49ec-b947-53cae10f253f",
        "cursor": {
          "ref": "aac2ffbc-e570-40b4-a741-a42ac9068993",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6954e17f-c394-4e75-a99e-010b486ddf16"
        },
        "item": {
          "id": "e1f08b8b-e03d-49ec-b947-53cae10f253f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "dd659a42-a049-4350-a440-d96ad70ab01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afd498d-7e1d-4e18-9835-1549810bec15",
        "cursor": {
          "ref": "ff9d502d-ab9f-4a73-ba30-9de7ea0c1501",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "032c14e7-36ca-4a19-8124-449a2aca52cc"
        },
        "item": {
          "id": "0afd498d-7e1d-4e18-9835-1549810bec15",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8fbf193b-78ed-4786-a523-9be9a1db6fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330a7177-d4e5-4570-91a4-5150bd0af5b1",
        "cursor": {
          "ref": "a1737bfa-c548-4ea2-bac3-e745396f9f0d",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c4b44fee-4302-4fcf-ad6a-d8b7bbdea6e7"
        },
        "item": {
          "id": "330a7177-d4e5-4570-91a4-5150bd0af5b1",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0ac058d3-87a3-481c-9e66-fa9f1a125d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a9b566b-6d61-4e21-a554-bbe5af6123cc",
        "cursor": {
          "ref": "a6d53d39-08f6-405f-a07b-da002e741cf4",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f9ad6f2c-a402-42d9-a428-e174e42856a8"
        },
        "item": {
          "id": "4a9b566b-6d61-4e21-a554-bbe5af6123cc",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b5cdd3d2-935c-4083-9b8d-76d41d6e5587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59a8a4a-81d8-4bcd-bd7c-4fb0665ba425",
        "cursor": {
          "ref": "b1c7eacb-0db5-4177-8799-2b90d66005fd",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fc18f051-657f-4613-8bd0-b8a951e3a13e"
        },
        "item": {
          "id": "b59a8a4a-81d8-4bcd-bd7c-4fb0665ba425",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9a950682-ad06-4cca-b8f0-15b31f384b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5555c9de-7565-4310-9195-afe4b8db70b3",
        "cursor": {
          "ref": "858aa66f-e62a-453f-bc84-75566c74db53",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "91bf220f-c6a0-4f68-950a-72abd22c066f"
        },
        "item": {
          "id": "5555c9de-7565-4310-9195-afe4b8db70b3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b4490bf5-b3d7-494c-8a29-53f37c215335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbadf5d-8c52-4aad-8cac-2e03cce77704",
        "cursor": {
          "ref": "59a791a9-1146-400c-82e4-335918259dc9",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "72e9568d-70cd-40c1-8a1d-403435161ad2"
        },
        "item": {
          "id": "cbbadf5d-8c52-4aad-8cac-2e03cce77704",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6398906e-37f7-4f35-9a94-510564a3e144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da9ca3b4-9e3e-489f-acfa-fecca49c742d",
        "cursor": {
          "ref": "1013ce78-7a7d-4d1e-b946-998610ba4494",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "01456311-9206-4678-aa83-826ced913c90"
        },
        "item": {
          "id": "da9ca3b4-9e3e-489f-acfa-fecca49c742d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ba1e8c53-f569-4d80-98fe-b756db313438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634d8ef6-7600-488f-815d-ec21182f7fe1",
        "cursor": {
          "ref": "3645f6ce-d59c-4e6f-8179-2862c4978447",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8bb4268b-8b81-455a-9a69-556aa944fc25"
        },
        "item": {
          "id": "634d8ef6-7600-488f-815d-ec21182f7fe1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c1e8cb29-b1b3-4ea2-b7d2-559e847f9a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25bfa4f-29df-4ddc-99eb-0ddbd5978d75",
        "cursor": {
          "ref": "1a71a417-f9b3-412a-aaec-8ca3eaaca9dd",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c7bdb0de-fe9d-4837-9401-42774507e229"
        },
        "item": {
          "id": "d25bfa4f-29df-4ddc-99eb-0ddbd5978d75",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "60b86671-80a3-4ab4-bab4-5853511d8156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d754369b-1064-4882-b6ec-5499def0a5fa",
        "cursor": {
          "ref": "d6bcacea-652e-4bba-af51-bfcd9268078b",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9d2187a6-092a-49b8-87f9-969b7d7eedc4"
        },
        "item": {
          "id": "d754369b-1064-4882-b6ec-5499def0a5fa",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "406674dd-de50-4516-88c1-1ca9c272bb79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8417dd-75ae-432d-82ac-a9ebcacf68d3",
        "cursor": {
          "ref": "142d98fb-7011-480e-ae96-9c193b672115",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "391b7c8a-d114-4de0-8d43-0111cb8b2c60"
        },
        "item": {
          "id": "8a8417dd-75ae-432d-82ac-a9ebcacf68d3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9729fc5d-450e-4f41-b024-10357754ea90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "428062a3-c874-4d80-8ba2-7a4e577dcb53",
        "cursor": {
          "ref": "2daea3ea-6048-42bd-9d7e-97cfbda432b6",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3757db35-6be8-4c66-ad33-6c60757e9e36"
        },
        "item": {
          "id": "428062a3-c874-4d80-8ba2-7a4e577dcb53",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "73662745-bf19-40ec-8dac-993d407372a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e1e179-2a93-4d14-b053-ddb454515e33",
        "cursor": {
          "ref": "96cebfc4-211f-44d2-89d6-cbae680aa4fe",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1a2b36a6-32cd-4cbb-9e95-67db5205ad41"
        },
        "item": {
          "id": "35e1e179-2a93-4d14-b053-ddb454515e33",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a6d84f64-5ecb-4b17-80d9-935f09446703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7feac9b-639a-4702-9604-26238709dc99",
        "cursor": {
          "ref": "223b78f5-ef2a-4f34-9543-aa883fa968a5",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d91f402b-2d0b-441f-965f-742301a0ac28"
        },
        "item": {
          "id": "e7feac9b-639a-4702-9604-26238709dc99",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e8d8a97e-50c3-4eed-8f9f-28500b5ea8b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44a4506-b494-4e30-b064-3d666a246527",
        "cursor": {
          "ref": "e81a8ab7-93d9-40dd-82c3-c46bb866690e",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a3d6ac24-94ec-4962-ba06-f6feb2e3a74c"
        },
        "item": {
          "id": "d44a4506-b494-4e30-b064-3d666a246527",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ac960363-7f66-458a-b8ab-9db1a40343c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0382eb-bcf9-457a-b4da-88a6b6d98e6a",
        "cursor": {
          "ref": "32b2727e-d57a-46fd-961b-4af23679d290",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "970a2611-1dab-450b-a98c-dae5cfa68083"
        },
        "item": {
          "id": "ab0382eb-bcf9-457a-b4da-88a6b6d98e6a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c558e370-9c04-43d6-98dc-96547c512a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300d63a9-bfac-403e-9d38-20064e590f7d",
        "cursor": {
          "ref": "f2cc0cb9-448c-4102-94b4-c580d74ecd36",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "82de1e73-cb3c-462e-8795-d31e3b7abf4b"
        },
        "item": {
          "id": "300d63a9-bfac-403e-9d38-20064e590f7d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f582295c-4788-4ab8-83b1-81a9e7d19017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5870a1f1-c57a-487c-ab55-276c1bc2c0ba",
        "cursor": {
          "ref": "25b09b8c-7903-4cdd-824f-538e08024133",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "761d8c55-7f85-491c-8a66-75bb0595a6c5"
        },
        "item": {
          "id": "5870a1f1-c57a-487c-ab55-276c1bc2c0ba",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "11b2ce7e-993d-4ce2-8eef-f51da218d0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb7825b-e32f-4263-bb60-6d22cb15a346",
        "cursor": {
          "ref": "b7c0759c-6f0d-48e9-897b-39c6beebdf4a",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a96a0171-13ec-40f3-a61e-75e3be0770c4"
        },
        "item": {
          "id": "0eb7825b-e32f-4263-bb60-6d22cb15a346",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2d2ccf60-f917-4a15-8f8a-b5e550cc52bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dedc7a71-da2d-44ad-ba2f-f801e81dffdd",
        "cursor": {
          "ref": "99d5552b-9dd4-462e-80a7-01e5478ae470",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "942e3cb6-4f11-4e7f-b6b6-d1226c6f13c3"
        },
        "item": {
          "id": "dedc7a71-da2d-44ad-ba2f-f801e81dffdd",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9512f46f-f6d2-48d0-9987-8ec06e44de39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8ccf53-5966-42b8-95ea-1f958b42ef94",
        "cursor": {
          "ref": "c5d82839-2c22-427b-abc0-742b1e3b1d9c",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0b2c228b-0880-4fbf-887f-e929cee0f19e"
        },
        "item": {
          "id": "9f8ccf53-5966-42b8-95ea-1f958b42ef94",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a3924612-8bdd-40f1-a70e-9c5217b55283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b3dd87-9e17-422b-aa7b-a62143c87f7e",
        "cursor": {
          "ref": "96352ff8-fba1-4c62-a055-3b9820c7faa5",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "15530890-764f-4b0c-b0c5-b6ef4944efd3"
        },
        "item": {
          "id": "e9b3dd87-9e17-422b-aa7b-a62143c87f7e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f3819eba-dccf-479c-b246-983288e34c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc46fc0e-44b2-4bc9-8a94-f2775127503c",
        "cursor": {
          "ref": "8029ab52-1924-4ef7-82f3-a57bbea070e2",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f1138946-0b19-4da6-8663-405961d7a94c"
        },
        "item": {
          "id": "fc46fc0e-44b2-4bc9-8a94-f2775127503c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "93fc2b12-19fc-4c67-a47d-36af662377aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6602f3-676b-41a6-ab1d-43f53514986f",
        "cursor": {
          "ref": "92f0c7f5-c117-4c53-a32a-af682f3823ba",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bb530df2-7eff-4b57-b635-8b940e21e0aa"
        },
        "item": {
          "id": "9b6602f3-676b-41a6-ab1d-43f53514986f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "66377b3c-21fa-48a4-8231-a78abc74632a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af12345-6ccd-4e9b-b528-417c048e8d4d",
        "cursor": {
          "ref": "9ddc1b57-2e42-41d8-8b5d-a073024c88fd",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "38013ed8-4256-4750-93e1-67c339b06ae5"
        },
        "item": {
          "id": "4af12345-6ccd-4e9b-b528-417c048e8d4d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5143a82d-9438-472c-8426-171bb905b3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0938db-0255-4e97-8126-a7005a6918d1",
        "cursor": {
          "ref": "98988751-ff5e-4999-9d4b-7622d36b4701",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2ab21950-7dae-4e1d-a4c3-05a48d19e830"
        },
        "item": {
          "id": "8e0938db-0255-4e97-8126-a7005a6918d1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "70bfa248-4a44-4962-a568-92e15d14e219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433fdf55-3c08-47f9-b110-737fdce73590",
        "cursor": {
          "ref": "f696957f-24bb-4c3b-84e3-1c6a98727dbd",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a2a77920-47a9-4161-a6a8-a74210c2b865"
        },
        "item": {
          "id": "433fdf55-3c08-47f9-b110-737fdce73590",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "da760750-4d2d-4701-bf60-e7de1ce7177d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9157b6-d261-459d-b73c-ca6d1b1148cd",
        "cursor": {
          "ref": "ce6a4138-7790-4194-a675-1ffd194c2154",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f0436913-c51a-4f09-90d7-e598f1525bf3"
        },
        "item": {
          "id": "8d9157b6-d261-459d-b73c-ca6d1b1148cd",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0efbb3ed-ded3-4069-a100-661a5929cc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57fa413-04e1-4e6f-adc7-15a834030591",
        "cursor": {
          "ref": "fb1c78b5-4b02-4b0a-bb1c-530e375ccf19",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0b6fb292-27e7-4b6b-ba93-0f5ae7008cd1"
        },
        "item": {
          "id": "a57fa413-04e1-4e6f-adc7-15a834030591",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5e8ada05-39e7-4fc3-9a2c-f14c88fce611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962fce45-8a17-4896-bdab-ca44a6fe7031",
        "cursor": {
          "ref": "5fe66962-2be5-4f07-a2ff-b104b7c8cf1c",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ed674c23-d04e-4509-b1d3-819bafa49ec2"
        },
        "item": {
          "id": "962fce45-8a17-4896-bdab-ca44a6fe7031",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1a92e193-bc43-4dbb-8bf8-450f96e827d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa1b17eb-946f-446f-b718-82ada61aca62",
        "cursor": {
          "ref": "705c21da-3aca-418d-8f51-0c3f67a5d54c",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "178aebed-efc4-47c2-b4a7-3fa4bf805118"
        },
        "item": {
          "id": "aa1b17eb-946f-446f-b718-82ada61aca62",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "bd7d1117-2a5d-47cf-aa97-a0963a5ebc7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84232253-1072-44bc-9a1a-f890dfabfadd",
        "cursor": {
          "ref": "3edb8b10-b567-4f01-92b4-51d240d99139",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2af036a5-1c68-4a67-a3bc-1346fffd52d9"
        },
        "item": {
          "id": "84232253-1072-44bc-9a1a-f890dfabfadd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d0f047e9-e47c-4271-bb79-4db4596fde75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2302c75a-67c6-4a0b-9c3c-5b5eae831163",
        "cursor": {
          "ref": "1a692691-8830-4079-aef7-4289bdb2b383",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bd59cdf0-0e65-4158-a0ef-de9b0025de83"
        },
        "item": {
          "id": "2302c75a-67c6-4a0b-9c3c-5b5eae831163",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5f83dae7-9217-470b-9b3c-4e172f7407f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "47e2cae1-e905-4835-b045-21fdd67d297e",
        "cursor": {
          "ref": "54ce3401-12fa-4e67-94dc-e32db7b223b9",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "51db565f-40c4-40cb-9efa-8cee3abfdb15"
        },
        "item": {
          "id": "47e2cae1-e905-4835-b045-21fdd67d297e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ff1c30dd-6941-4388-a601-c1d709dc59c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815ede48-fffc-465c-ac8d-77a91e8e64ef",
        "cursor": {
          "ref": "7b48ea44-f256-4157-b820-dbb8729bf466",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "870e52a9-bac4-4738-a6d3-397c98b60850"
        },
        "item": {
          "id": "815ede48-fffc-465c-ac8d-77a91e8e64ef",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bebac3c8-c4f2-428d-9b18-3e2e0fed616e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e39a569-2b7b-4802-861d-b2c4cb476436",
        "cursor": {
          "ref": "c7ca9769-fdbc-4d69-9ff6-86331afd8809",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1fa7a4e2-13d3-4ff7-9e5d-d51c85814fbb"
        },
        "item": {
          "id": "8e39a569-2b7b-4802-861d-b2c4cb476436",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "dd9f4819-fc25-473a-ad2b-2cee08288676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394139e2-63e0-47f0-8bf5-5018dfad32d9",
        "cursor": {
          "ref": "b21f6023-0b91-4dcc-997b-e4650a848b3e",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8c9e01ef-241d-4769-8335-fb2043bc14d6"
        },
        "item": {
          "id": "394139e2-63e0-47f0-8bf5-5018dfad32d9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "34f22901-aa88-4ffe-9906-4c0dfab84cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41bbc1e3-87e3-4c29-9f82-63e1d6e1042a",
        "cursor": {
          "ref": "4c3b3a48-10f9-4f8e-b2bf-6a3f6fe28f26",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1887ebad-30a0-4ef1-aed8-1203a1941ea5"
        },
        "item": {
          "id": "41bbc1e3-87e3-4c29-9f82-63e1d6e1042a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ff4e02d8-f593-4a41-9d43-c0db764748bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2326d7c4-d6e2-4f0f-835a-17961a260990",
        "cursor": {
          "ref": "b3601a06-c3e8-44cd-917e-255b4b4a3f1a",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "23f5abc9-e564-4247-afc2-1a7fab41f26a"
        },
        "item": {
          "id": "2326d7c4-d6e2-4f0f-835a-17961a260990",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e6dae20c-816b-447f-8b46-65f74b13e18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ab3fc4-15ef-4177-aa1a-fa772d6a6fc0",
        "cursor": {
          "ref": "b6e8883a-7218-4912-8bb9-d1e81c5cfd62",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bb46f735-570d-41c2-979e-d680dd55b96a"
        },
        "item": {
          "id": "10ab3fc4-15ef-4177-aa1a-fa772d6a6fc0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "da7f147f-cbe3-47d3-bbbb-68f5d1440c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "f43fe6c9-bf24-4bb1-98a5-3586ac67b57a",
        "cursor": {
          "ref": "71fcbf51-6eb1-4ca2-8607-58699e47d042",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d0b44103-ee84-435d-abbf-c22661d50605"
        },
        "item": {
          "id": "f43fe6c9-bf24-4bb1-98a5-3586ac67b57a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a54e77e8-2e7a-4c5f-b8c8-359e432fdf54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2f1b02-3373-428d-a43b-f9a9ce111d67",
        "cursor": {
          "ref": "f5000cb7-c54c-43af-b12f-4138d53beaec",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "94cc5d90-8825-4dd2-a1e7-3cd2d225e288"
        },
        "item": {
          "id": "ba2f1b02-3373-428d-a43b-f9a9ce111d67",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ce478583-67a9-4ca6-a605-864a2fb616af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a237d4-c308-428f-b87f-e500916fc864",
        "cursor": {
          "ref": "0342c5fc-e396-4499-a32f-7aca5dc68179",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ccaa2c43-c186-4327-bc11-862eea9cb6ef"
        },
        "item": {
          "id": "96a237d4-c308-428f-b87f-e500916fc864",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "29187844-7186-46f3-9981-adfe32378fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dea9680-beab-4a65-a05e-6d544a3d883d",
        "cursor": {
          "ref": "3ad93fee-d4e1-4d30-bbd4-b9de6073a9a6",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "10721c7f-e2b2-439b-afa2-84eadc96df16"
        },
        "item": {
          "id": "6dea9680-beab-4a65-a05e-6d544a3d883d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "cd09087a-787c-476c-a61a-b8e37e49e32a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796a58b7-9507-4167-8a7f-e194669cdc50",
        "cursor": {
          "ref": "571af84e-6926-4bd6-8391-3e1576788c4c",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a6515806-452f-49af-afdd-bd3440a53474"
        },
        "item": {
          "id": "796a58b7-9507-4167-8a7f-e194669cdc50",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c33e56d3-222f-489d-99ea-eac5f113f8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148b6255-f0dd-4a24-bac2-5b741e132eeb",
        "cursor": {
          "ref": "a002a204-bcdb-46a7-b679-1ec84317cd3e",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fdbb8b66-3342-49e4-98b0-1535f32a1429"
        },
        "item": {
          "id": "148b6255-f0dd-4a24-bac2-5b741e132eeb",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "586253a2-7eb5-431b-a236-fedfd4e96e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272159e0-bcb3-4141-a880-de2add59fbcb",
        "cursor": {
          "ref": "99545a8f-6046-4457-ae0e-f458391b274b",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0475ecb2-61b5-4693-9bfa-a8ffed50afd4"
        },
        "item": {
          "id": "272159e0-bcb3-4141-a880-de2add59fbcb",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ab5a9f74-7ccd-4a4f-b828-6b7041c97e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6917e1b3-1d49-4b23-9fd9-d4b71af2950b",
        "cursor": {
          "ref": "bbe48a11-996b-41f5-b59f-c014c709a2c7",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "09425c25-ed95-41e6-a384-7bc335bcc900"
        },
        "item": {
          "id": "6917e1b3-1d49-4b23-9fd9-d4b71af2950b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "09bfce67-7759-4786-a4fc-fcacef368bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2352386b-9012-4e52-a61e-c28a9b692b82",
        "cursor": {
          "ref": "a01d6aa9-40dd-4719-bd09-b88ef62f8e48",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6a155ad5-f1ba-4cf3-9c9e-6ea00929d5bf"
        },
        "item": {
          "id": "2352386b-9012-4e52-a61e-c28a9b692b82",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "fe9e895d-5575-489e-8ce4-be385262b9bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb85b3ff-064e-4045-9732-63ac3286f1b7",
        "cursor": {
          "ref": "a54c0e9e-7b26-4227-8b26-f876e23ba73c",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c5d471e6-d1a0-42ef-a9dd-c1d0f5e3b8d0"
        },
        "item": {
          "id": "cb85b3ff-064e-4045-9732-63ac3286f1b7",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e066f873-471c-46fa-96d6-53bf57f06a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8a438d-768e-49be-aba3-49139a2e15a8",
        "cursor": {
          "ref": "f5e75845-1b3a-42f7-9016-534bc7c28708",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b5afd18b-63c6-4417-8a45-c8625bcbeb7d"
        },
        "item": {
          "id": "3e8a438d-768e-49be-aba3-49139a2e15a8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "61614a46-2c95-4cff-8d99-e13133283c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5efd2a19-000a-4c81-97d4-82c4d9747e95",
        "cursor": {
          "ref": "e325dd95-3fd1-499b-b306-b9d0f3f31371",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d7b9ee8a-8f24-4c67-8bd0-de5b988ea426"
        },
        "item": {
          "id": "5efd2a19-000a-4c81-97d4-82c4d9747e95",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "10773667-66d3-447d-af82-5d894186ca21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ce17dc-bbbd-4579-8f8d-354426a7fab1",
        "cursor": {
          "ref": "1b46970e-b603-481f-83ec-8a526214a1cd",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4052dc01-04fc-40e9-bce3-d309bae0abe1"
        },
        "item": {
          "id": "38ce17dc-bbbd-4579-8f8d-354426a7fab1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "41f34d45-e01c-4fc5-97ac-db7050472d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf764bea-6bd5-4036-bb24-fd86373581ee",
        "cursor": {
          "ref": "5c3a7e3c-4741-4c9c-a439-652b177e45ad",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e913bd4c-526e-41a6-a26e-2adad0fa258c"
        },
        "item": {
          "id": "bf764bea-6bd5-4036-bb24-fd86373581ee",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "048b319d-1187-40c0-b03f-70d38fee1d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf967b5-b9c9-410d-811c-0ac1d629540e",
        "cursor": {
          "ref": "eadf99a5-f9a9-41d9-bfe4-4bedfc279eeb",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ca3fbc87-36da-4162-8393-5ed06d5ceedc"
        },
        "item": {
          "id": "bdf967b5-b9c9-410d-811c-0ac1d629540e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e0670813-3c6f-4909-9e33-a34f757b53a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96eee4b0-1e44-4a8b-a46f-9e5af1a5236d",
        "cursor": {
          "ref": "10d40304-a9fa-498d-ba91-5f6fd2f995fc",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1c6f4f00-5fc1-4550-828c-e038afda4f51"
        },
        "item": {
          "id": "96eee4b0-1e44-4a8b-a46f-9e5af1a5236d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "cfd2a993-f878-4781-95ae-e0c13f45a6ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05d17f1-ffe4-4993-b743-fdfdf990ea46",
        "cursor": {
          "ref": "e40d1492-1794-48e6-8491-75bfd995a41d",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "32469ea8-3ba1-45fc-b005-690e2320a5ae"
        },
        "item": {
          "id": "a05d17f1-ffe4-4993-b743-fdfdf990ea46",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6d5a666c-24f5-4f12-b2b1-cf11419304aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49f5ef4-05ed-4040-b987-aa711c2dbf19",
        "cursor": {
          "ref": "68e131fc-8a25-4d9b-9eff-9092ffe594cb",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "57184603-e5f0-4507-ab62-c6621dbd4e53"
        },
        "item": {
          "id": "f49f5ef4-05ed-4040-b987-aa711c2dbf19",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8f8b98da-df22-44de-a930-a1f7648561a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eda9d89-9f5b-4333-8640-d5650fc68eea",
        "cursor": {
          "ref": "45e585f4-6ded-455b-a0ed-44e426203c5c",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "37191070-8d2e-4871-9ac0-0f40867df0db"
        },
        "item": {
          "id": "5eda9d89-9f5b-4333-8640-d5650fc68eea",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "911b1682-6027-4431-9f4d-93f430bdc391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8592a2e2-02f5-416b-ac74-41217478cabe",
        "cursor": {
          "ref": "774d349f-722c-4016-aa9c-0603a51ca124",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a8baaa98-6cec-466e-969e-82946cd8c124"
        },
        "item": {
          "id": "8592a2e2-02f5-416b-ac74-41217478cabe",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3fb98f43-d5ae-4639-9ae4-49787bdaca16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018a0b2a-4b99-42d0-b2f0-7e97b73b9229",
        "cursor": {
          "ref": "a3c0b1ba-abfb-4a30-8757-0a04fef3622b",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "fa47d071-22e1-43fd-b3b1-f9405cb1c9e9"
        },
        "item": {
          "id": "018a0b2a-4b99-42d0-b2f0-7e97b73b9229",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e239d3b7-c59d-4d87-8963-4329ac0c1b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "318f4c3c-5db9-41c7-9a02-8bec00b1c7d1",
        "cursor": {
          "ref": "d4fa2fb1-e5bc-461c-9f03-ced31462cf84",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "426aaa0f-8093-4e55-93fe-5200b1b80499"
        },
        "item": {
          "id": "318f4c3c-5db9-41c7-9a02-8bec00b1c7d1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2250d1e4-a160-47dd-b866-e91cdc99dc4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38cbd268-5e90-489f-82ef-8b94cdcb48a8",
        "cursor": {
          "ref": "29912229-c13d-447f-902d-fbfa766b64da",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "06a24385-7bcc-4840-b7af-34d88f73e043"
        },
        "item": {
          "id": "38cbd268-5e90-489f-82ef-8b94cdcb48a8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2f30143a-6a9e-4968-8ae8-764561a05be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f486645e-9b49-430f-9486-64cfa44086c0",
        "cursor": {
          "ref": "7fb5575c-ddd7-4e47-8b4c-b06663ac81fe",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c36d1935-41ba-40d2-bd30-c6f87ef1011d"
        },
        "item": {
          "id": "f486645e-9b49-430f-9486-64cfa44086c0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f999afca-265e-40bd-bbff-e7261b9c10e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74008758-81d0-451b-b962-059166ad0fc3",
        "cursor": {
          "ref": "8b3a0b45-3c35-4eff-b3ca-3cdb44c9f0f1",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "368113ab-84d9-48a5-8096-723354b64a1f"
        },
        "item": {
          "id": "74008758-81d0-451b-b962-059166ad0fc3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "da5a0c47-bef7-4940-924c-5caf4ae8a37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cdcc5d2-f862-44bf-9edc-d82a8c6d0db5",
        "cursor": {
          "ref": "f457aa69-a68a-4498-8ed4-b4e0ae9f0121",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b300a6dc-660e-4508-b865-d4706489667c"
        },
        "item": {
          "id": "4cdcc5d2-f862-44bf-9edc-d82a8c6d0db5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d6f5fd13-2179-4d03-ad37-e3d15764b5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b974f223-d19a-4c5b-87d7-7beda28ebf1c",
        "cursor": {
          "ref": "4e92b728-096c-4f8a-98e2-4ad616d7df22",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "33122cf7-d603-4da4-a166-f4abd097919c"
        },
        "item": {
          "id": "b974f223-d19a-4c5b-87d7-7beda28ebf1c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9e41f61f-e434-4c61-aed9-be0f13950c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6412c77-2ce5-40ca-bde9-8205806b4030",
        "cursor": {
          "ref": "1ce0111f-3eb7-4e1e-8eff-f1202cd3e568",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cfc57376-7bda-4205-b9ba-3dec0b55330c"
        },
        "item": {
          "id": "c6412c77-2ce5-40ca-bde9-8205806b4030",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5c4f9b11-0cc9-44d4-98d9-218cce41e185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02595db-2562-4a74-8add-6c4c81965956",
        "cursor": {
          "ref": "099206d7-9892-4643-ad1d-4a6162753b67",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2f2745c9-457d-413e-a7d7-180a0659e548"
        },
        "item": {
          "id": "c02595db-2562-4a74-8add-6c4c81965956",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "80e55e79-5e30-4535-880e-1d2fd9c17cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30bf602c-b2a4-4f4e-b983-a20969deca8f",
        "cursor": {
          "ref": "6a6af089-abcf-4f87-b3e6-b180b88d66cd",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5f77a020-bfae-42c5-9c7a-86f3498e7b3f"
        },
        "item": {
          "id": "30bf602c-b2a4-4f4e-b983-a20969deca8f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "150adc21-4aa7-446f-9b41-ef30398776f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997e5989-a858-4d15-a8b4-07f503d0e9bd",
        "cursor": {
          "ref": "4a09edf9-e3a5-4886-977d-2fc941662cc3",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6ce8edc5-992b-4067-91c7-889b4663e097"
        },
        "item": {
          "id": "997e5989-a858-4d15-a8b4-07f503d0e9bd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "122aa2c3-89b6-43cb-a5a6-9d7f54053376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd2b9b3-2d6f-4a11-a0d3-30dc37c3a5bc",
        "cursor": {
          "ref": "84fde841-182c-4eba-9c00-355698fc5278",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e0d09473-4940-49b9-91ef-867f1d433dde"
        },
        "item": {
          "id": "0fd2b9b3-2d6f-4a11-a0d3-30dc37c3a5bc",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ccd97dfb-703b-434d-a825-21044537bedd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23619146-26d0-43e9-8746-425b684a994d",
        "cursor": {
          "ref": "91ac1690-ef85-4907-b390-13a832639093",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6dfcb337-6ed4-4bd0-9ee2-c733dcbc4371"
        },
        "item": {
          "id": "23619146-26d0-43e9-8746-425b684a994d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "714175d0-4193-4f70-81b0-57aea156ea3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc825bc-42c1-42a0-81f5-19b29fa68836",
        "cursor": {
          "ref": "dd462a38-6331-4c73-85f8-e976abcfbdc5",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a25e41c0-e12f-4c41-92f5-a4aa3c055b3f"
        },
        "item": {
          "id": "cfc825bc-42c1-42a0-81f5-19b29fa68836",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "148af40d-a36d-40b1-b5d4-30e298322184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efdadfe2-0ee4-4f97-8607-82a4db84046f",
        "cursor": {
          "ref": "2f61b483-f44c-45d8-8bad-d73cf4044307",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "136fe26d-1ca7-4650-97ff-aeae9f68eb5a"
        },
        "item": {
          "id": "efdadfe2-0ee4-4f97-8607-82a4db84046f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c60bc556-922e-4039-ada9-23e5dbae6c28",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 862
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "6dbd1e7f-ac04-49c5-982a-b4fdef4b3b21",
        "cursor": {
          "ref": "4c2073ec-cce5-43bb-b741-e0a458f4554b",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "13cd5ca8-e9b6-4e07-beeb-84864da32990"
        },
        "item": {
          "id": "6dbd1e7f-ac04-49c5-982a-b4fdef4b3b21",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "22a669ff-d484-49aa-8dbe-9d5f40dcb9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b231c1be-5750-4963-baed-8d73cfb1c7b7",
        "cursor": {
          "ref": "a5522dde-423d-4fa7-a5a6-f30da0f31304",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9a5227a6-918e-4531-8183-e1c7eb448f11"
        },
        "item": {
          "id": "b231c1be-5750-4963-baed-8d73cfb1c7b7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1f2123f1-97b4-4d81-bc4c-66d526a0404f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7962d9-7e46-4abc-9096-92ebc3e4d971",
        "cursor": {
          "ref": "1242209b-d2a3-4d10-aa26-471c653dbf62",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "736ab265-5d04-497c-a8b6-f1e3e3d82c8b"
        },
        "item": {
          "id": "7e7962d9-7e46-4abc-9096-92ebc3e4d971",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8018e061-dfe8-43f2-abac-1446d2d67548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6494ab18-e1b9-4870-8167-401e0ee02242",
        "cursor": {
          "ref": "e184bfa3-6acc-490b-bfcc-a187142bd76b",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f6579839-456c-4242-a126-75b5bb3d7de3"
        },
        "item": {
          "id": "6494ab18-e1b9-4870-8167-401e0ee02242",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5e0fdbc0-1f4c-4315-9674-05d0e3e21b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d11c542-5fec-4211-9321-de5d8a5d8675",
        "cursor": {
          "ref": "200c9dec-f3d5-4c1d-9d0c-d9009e8d2dd8",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "571f3696-25b8-41da-9a20-f0546de7d8e5"
        },
        "item": {
          "id": "3d11c542-5fec-4211-9321-de5d8a5d8675",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c3c25923-c716-439f-8176-589da80352e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0628857-0fee-40da-a7cd-d5e44bed5a24",
        "cursor": {
          "ref": "f5b27fce-74ad-4b9f-8602-8041aaf01c62",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "72019abf-1aa3-4815-b7b6-0a7bc849ffd7"
        },
        "item": {
          "id": "b0628857-0fee-40da-a7cd-d5e44bed5a24",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "501e9707-c15e-4a90-b48f-731b4e0b6f52",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 862
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "50029ed1-c381-40a3-951c-6e45dbbd9b79",
        "cursor": {
          "ref": "2afd229d-c23e-46d1-b950-e47c5e253386",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ab3b33ec-a28f-4786-88d9-eec958fb0cee"
        },
        "item": {
          "id": "50029ed1-c381-40a3-951c-6e45dbbd9b79",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "da5bf893-b3f7-4aa9-94db-43f7c250216b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11fef3c4-6530-4217-96aa-48dca6437fec",
        "cursor": {
          "ref": "37f91d09-ecb6-4eed-823c-15ea522ad542",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4a7dd3f0-df30-48a6-ab52-4df2793362b7"
        },
        "item": {
          "id": "11fef3c4-6530-4217-96aa-48dca6437fec",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0c5e6335-aaa3-4937-9732-a70521bb48c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c5ed15-0344-4b39-b1d7-bee2301cebcd",
        "cursor": {
          "ref": "e09f85c0-b756-45a4-a87c-88f06a0958c8",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "169d543b-e40f-4dc0-a467-350e27d8a0e2"
        },
        "item": {
          "id": "46c5ed15-0344-4b39-b1d7-bee2301cebcd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b086a960-3bd1-4764-b748-84823be01cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1722166-184c-4188-af60-5fca741b2fa3",
        "cursor": {
          "ref": "1a1831b0-82b6-4a3a-ac6f-1e535c32f94b",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8c383d99-0ea7-4039-919c-e014311e3c5e"
        },
        "item": {
          "id": "f1722166-184c-4188-af60-5fca741b2fa3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cbb92301-71ce-4f45-9008-0d90d0c97c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ce4058-f040-4c81-abd2-6d7ab9eab9d2",
        "cursor": {
          "ref": "4f531db5-e276-4e97-9ee1-aec5d489704d",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f3f98c9a-c2ef-44c4-9c5e-fd1e87c84445"
        },
        "item": {
          "id": "07ce4058-f040-4c81-abd2-6d7ab9eab9d2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f7128d4e-d23e-4dff-8a1c-769d6b2a28f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2186ea23-8c59-42c0-8625-00eb8bb696c2",
        "cursor": {
          "ref": "97185de4-b8ef-4407-8a95-9f0f8f0a1087",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "457610bb-032a-4549-833e-0675c896f13a"
        },
        "item": {
          "id": "2186ea23-8c59-42c0-8625-00eb8bb696c2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "89d88364-4be5-4c4f-978b-80f2268bceb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d035f814-a549-4e5e-a072-735a7a17e2b8",
        "cursor": {
          "ref": "867743a8-4046-4751-86b6-8a71dbc8e85e",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f8689a24-33ff-4b31-a755-5d428d5dc47f"
        },
        "item": {
          "id": "d035f814-a549-4e5e-a072-735a7a17e2b8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2d2ad45a-41ad-4ab4-b055-aaa49fd2855c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0bd5e2-a6ad-487b-aed1-37d7fe62cd5e",
        "cursor": {
          "ref": "d2ec9937-a7fa-427d-b405-a20e8e468fcb",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1ad4abc9-48ab-401b-8a86-f1890a738f07"
        },
        "item": {
          "id": "fa0bd5e2-a6ad-487b-aed1-37d7fe62cd5e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d553559a-4a6c-4833-89cd-c9f62923cbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "156ecf5f-e6f4-4d72-acf3-83f3a4c3413f",
        "cursor": {
          "ref": "fce9dfc3-f920-4d8c-b22a-8f6d46965165",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8e1f93a8-dfa6-4992-94b4-916f234264c8"
        },
        "item": {
          "id": "156ecf5f-e6f4-4d72-acf3-83f3a4c3413f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c6da914b-a48f-4dd0-a61d-daa1d7418f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "569696c7-5dae-465d-a3d9-e1062616cffd",
        "cursor": {
          "ref": "2ece0b86-283b-4600-8e84-68eba8e6ee01",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "535b7404-6750-42b8-94b0-23b8e8f60062"
        },
        "item": {
          "id": "569696c7-5dae-465d-a3d9-e1062616cffd",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "8e1ddd08-1382-4949-9a24-130234ec17bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "54fe2f5a-921a-4c40-8294-6011add0645a",
        "cursor": {
          "ref": "6dc7be96-590c-4de5-83a2-7bdbbe13472f",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "110ac603-c4fb-4b10-9464-d9b84705ca06"
        },
        "item": {
          "id": "54fe2f5a-921a-4c40-8294-6011add0645a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "eb5ea2c4-cce0-45d8-9788-2ebdeabe261f",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 860
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17d527d-bb66-4329-85af-568465489d2a",
        "cursor": {
          "ref": "be3ec23f-8d32-4f0a-bc83-2dff8032bc12",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4cfa569f-7e30-4be0-9096-0618d3b870ec"
        },
        "item": {
          "id": "d17d527d-bb66-4329-85af-568465489d2a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ffb48195-82e5-4e5d-afba-38e16155135a",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 861
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "336cfde5-4d3b-4f50-a036-8b632e95cd5a",
        "cursor": {
          "ref": "910a31ef-e254-4f62-8538-7a6b7fc527b3",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "07b8248c-bac3-4277-bf53-eb4a9c47232e"
        },
        "item": {
          "id": "336cfde5-4d3b-4f50-a036-8b632e95cd5a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "dfa65033-1d8d-41ce-b421-56164cf5808c",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 882
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "568538f6-7300-4cc9-abf7-369d60384090",
        "cursor": {
          "ref": "2cc66bbf-3aeb-4747-b1e1-5450240fee01",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d1bc1be3-36d6-43f9-9b21-6702030b94a1"
        },
        "item": {
          "id": "568538f6-7300-4cc9-abf7-369d60384090",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0fea8aae-1909-46ec-86cc-fe4e6c2c627d",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 852
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "af00d57d-45e6-43e0-ad4a-42e78d34441a",
        "cursor": {
          "ref": "54afa667-1f52-4db8-91e6-b6556e632922",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2e4c4689-5915-41bd-a02c-072a8b8964ab"
        },
        "item": {
          "id": "af00d57d-45e6-43e0-ad4a-42e78d34441a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6f0ace30-36da-4414-9587-139628ecc517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "1b6f6cf3-796f-47d8-8c2b-e0c1b6f306ba",
        "cursor": {
          "ref": "ede82aed-d72a-44b1-9886-d9f57fc34138",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fba21e9c-1b71-48bc-863e-377b40f07c8c"
        },
        "item": {
          "id": "1b6f6cf3-796f-47d8-8c2b-e0c1b6f306ba",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bd3c9c7b-9b64-436f-959d-6422d38d62ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6f6cf3-796f-47d8-8c2b-e0c1b6f306ba",
        "cursor": {
          "ref": "ede82aed-d72a-44b1-9886-d9f57fc34138",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fba21e9c-1b71-48bc-863e-377b40f07c8c"
        },
        "item": {
          "id": "1b6f6cf3-796f-47d8-8c2b-e0c1b6f306ba",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bd3c9c7b-9b64-436f-959d-6422d38d62ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7208774f-1c57-40e7-9ac6-69166a93c935",
        "cursor": {
          "ref": "135d7cf8-54ce-4bd2-b6e2-7b7f92657525",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "25953c3c-d218-492e-bb45-59dfda4286bc"
        },
        "item": {
          "id": "7208774f-1c57-40e7-9ac6-69166a93c935",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6721b874-ecb3-4010-a4f8-11228164d20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fff435b-c2f4-425b-b97f-20a5b7f014ef",
        "cursor": {
          "ref": "5cd469c5-9154-4243-82d4-1149743bf55e",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c41e16c7-809f-435e-882b-008abf54fe82"
        },
        "item": {
          "id": "1fff435b-c2f4-425b-b97f-20a5b7f014ef",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cc76c3fc-baa7-484f-b89d-bf4bf72c5c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d05836-a211-4e40-bbd8-9c9ff8fafa05",
        "cursor": {
          "ref": "8dc13c7e-4e9f-4486-9e57-e329efba9cb9",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "661071e8-d283-46c3-b334-9f3cd3add440"
        },
        "item": {
          "id": "84d05836-a211-4e40-bbd8-9c9ff8fafa05",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e70341f2-eeb5-416c-81a8-81b7f020abfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6512f2-e2a3-4910-95be-fd256ac42ed8",
        "cursor": {
          "ref": "7563e011-b124-4b88-87cc-5f8dd55c702e",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "71f7b9dd-0577-43c5-a354-f51518d1df5a"
        },
        "item": {
          "id": "df6512f2-e2a3-4910-95be-fd256ac42ed8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4f1d8394-bce8-4861-9ddb-75d35c44e8d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0059653-eeb2-48f6-822d-4a8597337959",
        "cursor": {
          "ref": "1ad43d07-0e05-458b-9f9c-c876a6ba1cb4",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "17822217-b0c0-4692-a83e-3d68c97d1ebb"
        },
        "item": {
          "id": "f0059653-eeb2-48f6-822d-4a8597337959",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "536592df-fa57-4778-ad62-0bfe5e88a576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d30cf9-14d5-4814-9c58-cb03a0218b56",
        "cursor": {
          "ref": "13a2250f-e47d-439a-b6d5-fec1a3b32797",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "45dde693-962a-4f44-a607-64a4f64e3852"
        },
        "item": {
          "id": "71d30cf9-14d5-4814-9c58-cb03a0218b56",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3d9dff6b-00b8-466d-9756-c8fa66c3d010",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "adb47e37-e7e2-43d0-a294-97b1c77653d8",
        "cursor": {
          "ref": "c1547177-5ade-4791-be5e-8d78dd54e60a",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "021d536b-b243-4e67-b563-53aeff1d8753"
        },
        "item": {
          "id": "adb47e37-e7e2-43d0-a294-97b1c77653d8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5f28e36b-a62b-4b95-8262-2ea9e9d2c163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5d2feb-b2ac-4657-a45c-bc04a9097073",
        "cursor": {
          "ref": "05c7ffeb-82c5-4ac3-abf9-ffc27842b920",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "37866abd-87f9-4946-819a-7a2c5ba1b1f8"
        },
        "item": {
          "id": "ff5d2feb-b2ac-4657-a45c-bc04a9097073",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "45c50630-d8f5-4bea-ab1e-59a3a998226d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a071d7-23cd-4190-8ab6-a7b9c063e91e",
        "cursor": {
          "ref": "61cb0d1e-1093-40e4-b095-b7c8a8810236",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0fd48993-76ef-461d-9fdc-1dcf6d757619"
        },
        "item": {
          "id": "80a071d7-23cd-4190-8ab6-a7b9c063e91e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1a0cd3ed-eb48-4088-be83-2c9aa963fbc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbaaa8af-30ed-45d9-8e8c-4508fef5df98",
        "cursor": {
          "ref": "ba3f69cc-4740-4037-92a8-ee00d89cb565",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3c259f7d-0fd1-410b-a0ed-d673d2628012"
        },
        "item": {
          "id": "dbaaa8af-30ed-45d9-8e8c-4508fef5df98",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b91a1ca6-266d-449b-92dc-83f1c77f4baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5411e95-8463-4d48-9626-3f9763666205",
        "cursor": {
          "ref": "751cdb80-dbc9-49bf-9e95-2be9ee117c48",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "caf277ed-15d6-419c-8281-c5dc460876c1"
        },
        "item": {
          "id": "a5411e95-8463-4d48-9626-3f9763666205",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fae0f46a-3063-45d0-82da-9d88f2fe3c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c0b419-94c6-4a8e-90ec-0071383e5ad3",
        "cursor": {
          "ref": "ccc7482a-f9be-4097-8a75-3e092c25e10a",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c0f62161-1849-40e4-971c-1147987bfc94"
        },
        "item": {
          "id": "b4c0b419-94c6-4a8e-90ec-0071383e5ad3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "97f72e36-1a3b-4330-bfb7-2287bc8c1902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6963e95e-3f35-4f10-ab01-d7fe7ef2177a",
        "cursor": {
          "ref": "de923591-a929-45ee-bded-06f97b8f3994",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e6dbd094-4e9a-49fc-9618-f3ba07a5ba9b"
        },
        "item": {
          "id": "6963e95e-3f35-4f10-ab01-d7fe7ef2177a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "df15b2be-a0d7-4397-b690-0875593e96c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7bb951-4eb8-4e01-a859-382f5872e1ec",
        "cursor": {
          "ref": "c0b792e6-1cd4-45ab-99c8-22c0ba702b86",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7f620f4b-5bce-462d-a862-12c015657ded"
        },
        "item": {
          "id": "6f7bb951-4eb8-4e01-a859-382f5872e1ec",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7bb61f4e-b8f2-432e-b82d-82b61e756bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e75fc3-b0b5-4352-ba11-569adcffe5de",
        "cursor": {
          "ref": "9cb1fa49-d4af-4461-942a-7fb9cf53c12e",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "dab3c3f7-8aa0-4a80-a272-5c15bb62d676"
        },
        "item": {
          "id": "86e75fc3-b0b5-4352-ba11-569adcffe5de",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4729cf7f-d073-4865-b9c3-31979cf129d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cceb4c1d-fa05-4417-a00f-d181f8d01370",
        "cursor": {
          "ref": "550dd168-6313-43bf-addd-c2d49d0700ff",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7fad9413-5b1f-4395-a437-24502cc8353a"
        },
        "item": {
          "id": "cceb4c1d-fa05-4417-a00f-d181f8d01370",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5f041b2f-a9f8-42c7-ade9-a079b3c4f1c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0961ba7-d720-4edf-8dba-dcca0fc86f93",
        "cursor": {
          "ref": "f6e762eb-53ee-4409-b386-4fd0f3d966ac",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b261109a-0aef-414e-9bd5-fdaf37d50149"
        },
        "item": {
          "id": "a0961ba7-d720-4edf-8dba-dcca0fc86f93",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bfdeb55e-8bea-4b6c-99dd-d79ec993110c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a918ad06-a396-4bb4-b02f-5c9a432a5d7a",
        "cursor": {
          "ref": "d7f57ad7-a89b-40a9-9b2d-b676ae55284c",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cf87c676-662b-4ddf-b264-c13b55f3dea4"
        },
        "item": {
          "id": "a918ad06-a396-4bb4-b02f-5c9a432a5d7a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "dd69fe6a-3665-4d8c-86fe-c8c731fd71b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28c253f-2ce1-430e-a205-126da9fd49ba",
        "cursor": {
          "ref": "9e34a56e-b747-49c9-8d81-1b69aba6e301",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a7a672a5-910c-4b8f-802c-d083ec440005"
        },
        "item": {
          "id": "c28c253f-2ce1-430e-a205-126da9fd49ba",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cec117bd-ccd6-4704-88b9-187c13ea25c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e424c72-3157-4dfc-9182-bf3c6ec9bd72",
        "cursor": {
          "ref": "9c8c9a10-bcc2-450b-8f12-3d670f2266ee",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2ead5ac6-2905-4b87-8789-67eef3091bb6"
        },
        "item": {
          "id": "0e424c72-3157-4dfc-9182-bf3c6ec9bd72",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "df3b40c7-e49f-4cc1-837e-06a879c75e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b86474-cf71-4d6e-9343-69fe6ee4bc90",
        "cursor": {
          "ref": "24b6a0aa-0dff-4f17-bfbd-088c3db555d3",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8971081e-6457-4784-af39-56d9a1420678"
        },
        "item": {
          "id": "13b86474-cf71-4d6e-9343-69fe6ee4bc90",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "37ca0ee2-d5c7-4bf0-813c-7952825eaa9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a93634-3541-4815-bf1a-eb8bd948b696",
        "cursor": {
          "ref": "5c52716c-ea23-44a9-92a3-34c03f2fc16a",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "220ac4fb-1158-49c8-9f49-7186ed31b2bb"
        },
        "item": {
          "id": "75a93634-3541-4815-bf1a-eb8bd948b696",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "adb2fc39-522c-4192-a22f-c43cda49ba7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530e2499-d90c-46fd-9ef3-b124d8f192d9",
        "cursor": {
          "ref": "8a2c34de-e617-494c-85fe-e1f49c0d3891",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d1ca2407-14f3-4fc1-9c72-af007ce9704c"
        },
        "item": {
          "id": "530e2499-d90c-46fd-9ef3-b124d8f192d9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4d3f8864-54d7-4e4d-b583-8ceb856df314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c42ece-65c1-49ad-998f-60934dfa6007",
        "cursor": {
          "ref": "3d46ba2f-3b06-441c-8f37-ac2b92464faf",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c08f93f1-7767-408c-8c6d-99f9f262b80c"
        },
        "item": {
          "id": "37c42ece-65c1-49ad-998f-60934dfa6007",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7ca43fd5-489b-4eb8-923e-bf0a36672db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84cc606e-82e0-471b-9e3e-e3539dcb787c",
        "cursor": {
          "ref": "59af80d9-f041-435e-9d5a-18bbbe3129f5",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "09d4fd1f-9f1b-4e88-ba59-8726e593d9bb"
        },
        "item": {
          "id": "84cc606e-82e0-471b-9e3e-e3539dcb787c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "75b438d2-6000-47c3-9c38-bb0b91aa1c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103072cf-d53d-409b-8389-4cca41bf0af1",
        "cursor": {
          "ref": "cf5297d1-f2d7-4a02-a1b2-b947cf39b3de",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "52e93a8f-7ddc-43b9-8fe3-190fa70ebe42"
        },
        "item": {
          "id": "103072cf-d53d-409b-8389-4cca41bf0af1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b1869ce5-fd1b-4eeb-821a-041dd3017574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7261c4ba-2026-4d9f-b813-1a57c41f4cdb",
        "cursor": {
          "ref": "a3066d14-cac8-4735-8b98-d570baf379a2",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d74fd80b-0730-4e95-b471-c11dd8a50cdb"
        },
        "item": {
          "id": "7261c4ba-2026-4d9f-b813-1a57c41f4cdb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0d4ff3b1-45a6-4496-bc1e-81e9250e6ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a8f8d7-ceb3-4ddb-adbb-1f0baee461c7",
        "cursor": {
          "ref": "5d8d3324-7b90-4d12-a4a8-d0d5ad895cf6",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4ad128a8-8f5d-473b-8d53-34ccea13f975"
        },
        "item": {
          "id": "09a8f8d7-ceb3-4ddb-adbb-1f0baee461c7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "84569e18-b1ef-4286-a55c-2934fe50f3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00643a3f-1917-4056-ac1c-d18b9adb9ef9",
        "cursor": {
          "ref": "16275bf3-9cd0-4aa1-810e-3f782068fd8a",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0c6261c2-acc3-4974-8750-bdb8056932f5"
        },
        "item": {
          "id": "00643a3f-1917-4056-ac1c-d18b9adb9ef9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b67c7276-d97b-430f-8f4f-debbf72cb1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429ea388-1ee2-4806-9d6f-818d09474868",
        "cursor": {
          "ref": "10eb4837-4496-4332-a032-4fcdc46e4a58",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a9514a7c-6586-46a4-a093-5e46ccc86fe0"
        },
        "item": {
          "id": "429ea388-1ee2-4806-9d6f-818d09474868",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "01234520-526d-49fb-a1c0-06db6857e6cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011e4f64-c382-486e-834f-53b46511cc9b",
        "cursor": {
          "ref": "57a98965-27c5-4476-bf91-f2a70fe7df1b",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "bf999e6a-40c2-4821-83e4-c6607c02d4a1"
        },
        "item": {
          "id": "011e4f64-c382-486e-834f-53b46511cc9b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "89cfaf67-c935-47a3-ae2d-8ca80f35230b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3340c4-5d6c-4418-aae8-141fcb22b997",
        "cursor": {
          "ref": "c877a833-9f2d-49dd-a721-f024d46697a1",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c17718b5-4773-4aa9-a220-81f98b525328"
        },
        "item": {
          "id": "3b3340c4-5d6c-4418-aae8-141fcb22b997",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "acddc405-cf16-4432-9245-e1c9c92ef2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "6924d4f1-1411-479a-8fb8-03b2951a34af",
        "cursor": {
          "ref": "6104c961-00d2-4b98-b92a-642cff0b9f5b",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8bff12b0-1639-4524-a18b-1162d02182db"
        },
        "item": {
          "id": "6924d4f1-1411-479a-8fb8-03b2951a34af",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "157d427a-9299-429c-acf8-80ae03a02757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "333dea4f-a4a0-4cd5-a4dc-e2e2518bdd82",
        "cursor": {
          "ref": "e1b9e603-90eb-4667-8385-23d1e3af7a61",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "01041407-e046-48b6-9703-9263a6516dd9"
        },
        "item": {
          "id": "333dea4f-a4a0-4cd5-a4dc-e2e2518bdd82",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4c9c3796-b5c1-401c-af3a-bf0c1112150f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333dea4f-a4a0-4cd5-a4dc-e2e2518bdd82",
        "cursor": {
          "ref": "e1b9e603-90eb-4667-8385-23d1e3af7a61",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "01041407-e046-48b6-9703-9263a6516dd9"
        },
        "item": {
          "id": "333dea4f-a4a0-4cd5-a4dc-e2e2518bdd82",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4c9c3796-b5c1-401c-af3a-bf0c1112150f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98746760-355e-4a5e-bd9c-10fb56950bac",
        "cursor": {
          "ref": "8b45e288-9070-4193-b1aa-113cb439718d",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0792809a-6424-467d-88c6-fa8262c8447b"
        },
        "item": {
          "id": "98746760-355e-4a5e-bd9c-10fb56950bac",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1cd41dd1-03dc-4877-aed7-f3ae2d639919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b311f5-6c50-4733-a0c7-174587baa7eb",
        "cursor": {
          "ref": "a4137fbd-3918-4b4d-a5c5-fb70757ab7a0",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a03c9d93-e1e7-4bc6-abb2-8fe68c778ffd"
        },
        "item": {
          "id": "c1b311f5-6c50-4733-a0c7-174587baa7eb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "28e1f505-97bb-47c3-aa5d-96365707a63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f2a3f7-3165-4170-a5c2-1ab8a16863bc",
        "cursor": {
          "ref": "c74e5f54-6cc6-4499-a673-bb896987fcc8",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "41141f55-5808-4498-aa5b-4e2adf0731d3"
        },
        "item": {
          "id": "88f2a3f7-3165-4170-a5c2-1ab8a16863bc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5531be05-576c-4598-b4e0-e69157ea121d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8894433-8bf7-44c0-9108-736ba0925dbe",
        "cursor": {
          "ref": "1b03cd53-48da-443d-a6f0-76bd74d3d468",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "373ed8a6-ec51-4a64-85b2-5751aec6a27d"
        },
        "item": {
          "id": "d8894433-8bf7-44c0-9108-736ba0925dbe",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "64411d4d-2f18-45ac-9d77-7a12ebd83c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736ea523-34f2-43b6-94a8-0bbb078e519d",
        "cursor": {
          "ref": "46260fec-a76a-4fbe-a337-8da348f58498",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "44414604-c13c-42c7-9db5-8ab28bb4a010"
        },
        "item": {
          "id": "736ea523-34f2-43b6-94a8-0bbb078e519d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6c2aeb58-d119-4c4b-b47e-d9fa42311950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3430fa6e-cd2b-47d4-9d61-ed246e2c93bc",
        "cursor": {
          "ref": "dd9784db-5dd6-4545-9154-dca91e6d303b",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a731697e-40d2-4159-b603-337888f244ee"
        },
        "item": {
          "id": "3430fa6e-cd2b-47d4-9d61-ed246e2c93bc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f728df2f-8d12-4ef7-b126-de60be08a9e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a502bc45-1a42-4fbe-a181-f92885fece79",
        "cursor": {
          "ref": "9cb51c3a-7568-4bc6-921d-21f50dbc724a",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a7321550-810d-445c-9f3e-591d9016705a"
        },
        "item": {
          "id": "a502bc45-1a42-4fbe-a181-f92885fece79",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "3f258b5b-8083-4b03-8f42-b674702bf02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2f6ab5-8715-4671-9f89-cd464d8a1cb5",
        "cursor": {
          "ref": "f2b3a20f-28a8-4437-8fef-9471b9b7c6c7",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "33397396-93b1-4200-bdde-41736f7408c7"
        },
        "item": {
          "id": "7c2f6ab5-8715-4671-9f89-cd464d8a1cb5",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1a9fc5ac-3c28-47a9-92f1-7738ab5161c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6b6052-6269-461c-8124-8898decafd88",
        "cursor": {
          "ref": "9f9a9063-aadb-4f03-9e6b-aba26936f1b1",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2dd0301f-cb6f-4901-a299-f7d77c91b26a"
        },
        "item": {
          "id": "6c6b6052-6269-461c-8124-8898decafd88",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a5a189b8-81ca-41a4-a91a-b31a9f32febd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6b003e-d5a6-4a5b-8c59-8c9c4f80e33c",
        "cursor": {
          "ref": "4810ddc5-9481-4719-bef3-5692db158b1e",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "62aa929d-e731-4bb7-9ebf-edcb7c5f888c"
        },
        "item": {
          "id": "7b6b003e-d5a6-4a5b-8c59-8c9c4f80e33c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9e823387-bf9c-495e-b863-2abf03072197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3dbc0c8-ac0d-4aea-a42a-8d416e2e0bb1",
        "cursor": {
          "ref": "60c0d41a-33cc-470a-8d71-2fb652d57afd",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "786eecf6-f9c1-48c2-9152-7fc1e0bc4d2a"
        },
        "item": {
          "id": "a3dbc0c8-ac0d-4aea-a42a-8d416e2e0bb1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "415a60b6-823b-4635-ad72-30b1e7f2fe39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13042d0-fc44-4a3d-8148-34469c548e43",
        "cursor": {
          "ref": "207d251c-7e01-4a1e-a36b-c966bf9a6429",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "31e66dc2-3a1d-4cc3-9cb8-800a9f236aaf"
        },
        "item": {
          "id": "a13042d0-fc44-4a3d-8148-34469c548e43",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a313c46f-4192-4169-9eb3-51e2cba5588f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa0a4d4-49ad-428b-afc8-0a601b2e1ca4",
        "cursor": {
          "ref": "45e4b6a6-8f04-49ce-a42e-5960b3ad24fc",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a5333118-1103-4b0a-bccf-a69cdcca8026"
        },
        "item": {
          "id": "2fa0a4d4-49ad-428b-afc8-0a601b2e1ca4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8540e3b0-e78c-41d0-8344-dd0232289a32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c24d55-0927-4f73-a98d-943796fe5df7",
        "cursor": {
          "ref": "ef248aa3-0b6e-44b8-9fb1-b65f6fdfb3b6",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "33927fb5-3f56-478b-a862-21834f66d4ab"
        },
        "item": {
          "id": "d4c24d55-0927-4f73-a98d-943796fe5df7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d66e4030-9d2d-482c-b08c-78ff673e7f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8a455c-e248-4eb1-90a7-ea5d050d9bb8",
        "cursor": {
          "ref": "8cabd0de-c99e-4dcb-9605-65c0ba80d079",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3b6e5af9-a26d-4f63-b4fb-0b2e06fec29f"
        },
        "item": {
          "id": "db8a455c-e248-4eb1-90a7-ea5d050d9bb8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f57677ce-dbbf-47fe-bda2-98bc3026c12a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3033d9f2-d79e-438f-91a1-91f862c2602b",
        "cursor": {
          "ref": "80a9c396-443f-43d9-ad70-f159df1b1c59",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fc9d0e9b-0cce-4e29-bcb7-1a3fdac7e3a7"
        },
        "item": {
          "id": "3033d9f2-d79e-438f-91a1-91f862c2602b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "58d04a25-a0e3-4178-ade6-beb2201390e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0f5d26-fa2b-4ac3-a393-d35ec92ba2fe",
        "cursor": {
          "ref": "936b6e77-d942-48a9-a5fe-2ed06f25b025",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6b9f589d-d933-4244-ad14-d58ba5771d80"
        },
        "item": {
          "id": "ab0f5d26-fa2b-4ac3-a393-d35ec92ba2fe",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "88ba08fb-2672-4101-bb12-13f065c9fa29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a69d481-4dac-42a8-9335-5f2b07c8a8ec",
        "cursor": {
          "ref": "1bf504d9-26a4-4c59-9153-e1b56d20e233",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ef1aeefb-37af-414f-8dda-2281ff03feaa"
        },
        "item": {
          "id": "8a69d481-4dac-42a8-9335-5f2b07c8a8ec",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "339e3c8e-1916-48a1-ac84-5ae7f77333a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf5faae-c0d4-488b-a94b-a83e4577b120",
        "cursor": {
          "ref": "bcce3858-ae74-4635-8f77-82f30e78c770",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b123bdfd-e2b2-4aaf-ad34-630778fec186"
        },
        "item": {
          "id": "fdf5faae-c0d4-488b-a94b-a83e4577b120",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "fa615b93-5bbe-45b9-ab69-a4f57edb3bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf50efe-b286-4871-9a77-96871a4f7ebf",
        "cursor": {
          "ref": "cc8ef553-e183-46d7-a120-dcffa78154da",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7c2a6d5e-a7ef-43aa-966b-6cbe0b2fee1f"
        },
        "item": {
          "id": "daf50efe-b286-4871-9a77-96871a4f7ebf",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e7108490-e51c-4e80-b4cd-cbcb549ea12a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb2d794-e093-4c34-8754-b5c84c71b89b",
        "cursor": {
          "ref": "58828592-a6d5-4a5c-bb37-f77d5e9e699c",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a8f0b239-a494-4a72-9a97-8558cd1a2ac4"
        },
        "item": {
          "id": "bcb2d794-e093-4c34-8754-b5c84c71b89b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "94350d0c-2bc3-45fb-b43a-0971df0c908c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "495e9913-14e4-4516-babd-2b90128a3e76",
        "cursor": {
          "ref": "b08086d1-df3f-4b1a-9517-4eb89e8509fa",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f1e186dc-3565-4281-b75e-7adbbd9cb75e"
        },
        "item": {
          "id": "495e9913-14e4-4516-babd-2b90128a3e76",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3f370803-35e9-4d59-8a6b-514d3a3c6f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9fb5c9-643b-4ae0-a562-a97039f281bc",
        "cursor": {
          "ref": "d589c30e-50aa-4151-bdf0-1379e0f494a6",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5307680f-5215-43d8-b768-6acb92dd3a24"
        },
        "item": {
          "id": "5a9fb5c9-643b-4ae0-a562-a97039f281bc",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0965d885-3d4d-4a7c-b19d-574fef57f509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27b60ed-49f6-497c-afd4-62f5b94b8d65",
        "cursor": {
          "ref": "5a9ea510-7db4-4c73-b9e7-0579232898bd",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3a650349-0453-49b1-b7e4-7028d8541571"
        },
        "item": {
          "id": "c27b60ed-49f6-497c-afd4-62f5b94b8d65",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c3ef1696-d67d-4447-8013-5a982c7c843a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01efa4d-250a-4f40-91c6-a17c3b7ccb73",
        "cursor": {
          "ref": "bdf8afe8-1618-4e44-8d13-934041a67f0e",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6ecef0c2-e565-4a99-ac52-f6d50efe9fea"
        },
        "item": {
          "id": "c01efa4d-250a-4f40-91c6-a17c3b7ccb73",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "756d885c-9571-481d-84b8-d46b765f63c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51916f4-cfd6-4216-aee2-643e1dd8f220",
        "cursor": {
          "ref": "042f2893-6c4b-4bc5-b055-fcfbf804768d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "65ab1bec-e94a-418a-b041-43359f886d9b"
        },
        "item": {
          "id": "d51916f4-cfd6-4216-aee2-643e1dd8f220",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "046cc1c6-59b4-4e3c-a6be-8cc88723bdd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3913b747-345d-497e-ae22-74f29032df19",
        "cursor": {
          "ref": "f49d16bb-1c1a-4ce4-9b0d-b15e63182969",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "be1e13c9-d5e6-4ee3-b799-0ab99d1fccc5"
        },
        "item": {
          "id": "3913b747-345d-497e-ae22-74f29032df19",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5f089beb-8f42-4012-9eb3-f8b616cfd2df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4dfed6-370c-43fa-8b76-67163fe79e30",
        "cursor": {
          "ref": "e10f616a-4add-4aec-82bf-f0a8cebcd038",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "67aa3b51-756a-4524-a93f-edb268df3270"
        },
        "item": {
          "id": "1f4dfed6-370c-43fa-8b76-67163fe79e30",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0a5709e2-bb74-48e7-9c31-2cbc237f850f",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "8ed5127e-e98a-4944-b0ce-332291b2aa2d",
        "cursor": {
          "ref": "822fd4d2-9a9b-483e-be7f-e7615ab1d69d",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9bec0197-0ea9-49a7-9428-4d98215e8d25"
        },
        "item": {
          "id": "8ed5127e-e98a-4944-b0ce-332291b2aa2d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ca501b65-0352-451c-9cce-f6eced3939c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0a93aa-2202-4afa-aa70-e533e8ecae86",
        "cursor": {
          "ref": "66b62d59-51dc-432f-94fb-86de47e41c95",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ffd1ccb9-274f-4a46-8728-fa8cf18d6881"
        },
        "item": {
          "id": "ff0a93aa-2202-4afa-aa70-e533e8ecae86",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "aaadb918-42c7-42e9-aa2a-a742d4543777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608334bf-eea3-4646-9157-8c6b5bfd5c5a",
        "cursor": {
          "ref": "33000452-6479-4d89-b656-d07012dacee8",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9950c92b-b8f7-4da3-be66-5a9296933b8f"
        },
        "item": {
          "id": "608334bf-eea3-4646-9157-8c6b5bfd5c5a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "57ed9d32-7b97-42ea-9bf6-c1ce1139a280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97769e18-6b9e-4963-921e-da6572764638",
        "cursor": {
          "ref": "3340e247-77a0-438f-8d7b-573ffcbf16a7",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "aec11359-8464-408c-bc3c-ff40e3f34340"
        },
        "item": {
          "id": "97769e18-6b9e-4963-921e-da6572764638",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4c2eaeab-855f-4911-89ea-edd73f9baa9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d589ffa7-1786-468d-80a9-b4d28091fcb9",
        "cursor": {
          "ref": "d6a29ebc-a93f-4ded-9c3d-47bb67301e2e",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f43b3f75-dba7-4129-b592-925f7630fe25"
        },
        "item": {
          "id": "d589ffa7-1786-468d-80a9-b4d28091fcb9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "330d08cd-c973-4d23-94d8-1872a5d3e292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede3d3d4-a0a8-4e35-af25-ecc4dceda177",
        "cursor": {
          "ref": "674c95e4-4af5-4e8d-98ac-6f49f3713201",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1d77773d-118a-42c8-a1f2-8d065e7cdf5b"
        },
        "item": {
          "id": "ede3d3d4-a0a8-4e35-af25-ecc4dceda177",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fb180937-f559-438c-8122-3a9111b6240e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafc53a8-9423-465d-b25b-0916615bd5fb",
        "cursor": {
          "ref": "cd219834-aafb-4c62-83e4-31bf2b6c9827",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a1aa252a-9a5c-4c42-9fff-9e0b5fc205fe"
        },
        "item": {
          "id": "cafc53a8-9423-465d-b25b-0916615bd5fb",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f424027c-b79b-4f2a-89b5-122f18c80f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a7122e-59a5-4ca1-acbb-45e9cbe02987",
        "cursor": {
          "ref": "ae6324ae-68e3-4fc5-87d9-e1e21d14b6e7",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "dabf1103-14d0-4a96-a42f-367b250e71a0"
        },
        "item": {
          "id": "f3a7122e-59a5-4ca1-acbb-45e9cbe02987",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "01f6de87-fcc8-4517-b9de-faaaa44c9927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95136ab-4190-4a90-b5a5-f04eeccd74fd",
        "cursor": {
          "ref": "c6ce56e2-3838-47e2-95ef-1c23b3ea3c14",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "19e95f03-1431-4ea4-b79b-8faa496559c7"
        },
        "item": {
          "id": "f95136ab-4190-4a90-b5a5-f04eeccd74fd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e8bae33b-6053-488e-8165-449e04970430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50876864-44ac-4aa5-8fcb-223f201285c9",
        "cursor": {
          "ref": "c0fcb45e-c858-4680-9bba-c3616e93601a",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c349e9b7-00fc-4895-8b21-fb4d6418d92a"
        },
        "item": {
          "id": "50876864-44ac-4aa5-8fcb-223f201285c9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "39024551-4735-4fa4-b7c3-69008de0c953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68301d8b-0804-4d2f-8132-b8b9544138c4",
        "cursor": {
          "ref": "a374b1b7-987d-4cca-8f32-086bf82c58af",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f2ab01cf-e4ba-4cce-bf0c-0f27487b0773"
        },
        "item": {
          "id": "68301d8b-0804-4d2f-8132-b8b9544138c4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3c86e815-dfb7-4254-9e0d-7758297cd5ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1833dc-044c-4d5b-a57e-a10ad46c1134",
        "cursor": {
          "ref": "5b2f5002-ec0c-488f-a0f3-adcb5749f035",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ef25eae7-faa6-4c88-b8b5-d0f976fdbb75"
        },
        "item": {
          "id": "6b1833dc-044c-4d5b-a57e-a10ad46c1134",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0deea690-c142-41ff-afc1-b8b863f944ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410dda19-959f-43dd-aef7-00deca29752c",
        "cursor": {
          "ref": "3f70eb99-9bdd-4234-8f58-b5f6f508f61b",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "80ebbfb6-1a0e-4f46-9bfd-30286a249602"
        },
        "item": {
          "id": "410dda19-959f-43dd-aef7-00deca29752c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cde813fa-0234-4456-8d2a-215fcbe13d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad998857-2fb7-4957-8d7a-d847b114273a",
        "cursor": {
          "ref": "7a41f874-f07f-4512-b0c3-2e09c61ccbf8",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "16e5cb75-885c-4fb3-86a6-84c8afc66da5"
        },
        "item": {
          "id": "ad998857-2fb7-4957-8d7a-d847b114273a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7606c30a-759c-4b56-954b-3d26b1829032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66588ad7-c375-48a0-a473-848c9e7f3a6c",
        "cursor": {
          "ref": "92c2deb8-d60b-434f-8837-1cd0359d1f27",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c653b4a8-5c0f-4286-a56a-50e3f16de33c"
        },
        "item": {
          "id": "66588ad7-c375-48a0-a473-848c9e7f3a6c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "cfb76e4a-731f-4f0b-988d-695a7380ee82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da6c357-50dc-4e24-81dd-977831c6d88b",
        "cursor": {
          "ref": "120cbf58-c3cd-4c57-b2b8-17a81c526f39",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e0aae50b-3f2b-49e4-b101-b88869884f7d"
        },
        "item": {
          "id": "1da6c357-50dc-4e24-81dd-977831c6d88b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a5b2edd0-12a6-4906-99e3-4f3f306b2ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23fbd4a2-1b86-4ece-ac87-1c996627bdf0",
        "cursor": {
          "ref": "2327059a-a77b-4548-a9e5-e7f96dad6fe4",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "605dcd9a-37b1-4a6b-ae7c-6b168e1faca0"
        },
        "item": {
          "id": "23fbd4a2-1b86-4ece-ac87-1c996627bdf0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "acec1b83-3064-422d-85ea-837bc4405ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d45160-dfe2-43fa-8f58-07f58959d6f0",
        "cursor": {
          "ref": "040bbace-caf3-443e-8a00-83c480f042c9",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e9efac7e-39df-4917-83b8-05f08ee28986"
        },
        "item": {
          "id": "15d45160-dfe2-43fa-8f58-07f58959d6f0",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "105685d4-bdb1-4e88-ad6f-7373c3145388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6d578f-714a-4cf2-9d5c-c1db376af655",
        "cursor": {
          "ref": "3e5d2bba-c27c-4910-a95a-b98fc83fe133",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "743617d1-bd68-46c9-a4f3-55d52eb685a4"
        },
        "item": {
          "id": "3b6d578f-714a-4cf2-9d5c-c1db376af655",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fb452afd-0b75-41e4-81bb-311a0e1c0f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceade71e-6feb-4cb9-843a-de0479766765",
        "cursor": {
          "ref": "c5c6d447-9c63-4047-91f0-9cb1c6b5863e",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "859d69b2-e77f-4ba0-9dc0-eb9ba3ca947a"
        },
        "item": {
          "id": "ceade71e-6feb-4cb9-843a-de0479766765",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b48d1fa0-633f-42bf-8393-c1104ce0b3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3469f5b0-de5a-4547-b2ed-77f8e144e4a7",
        "cursor": {
          "ref": "ba7bb666-c5fd-4e17-bfe1-4d08547d74c2",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "817b5273-d4c0-4951-bc47-6cdc4e3016ae"
        },
        "item": {
          "id": "3469f5b0-de5a-4547-b2ed-77f8e144e4a7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6f2e6b2e-6ef9-43c5-8775-a67805c60615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458b8781-abe5-474a-a321-b237245030fc",
        "cursor": {
          "ref": "cf84e447-a1c0-40c4-bdf8-8a8c5be27a91",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f6bdcdb2-63a8-4e57-9cad-818006cffad6"
        },
        "item": {
          "id": "458b8781-abe5-474a-a321-b237245030fc",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "04431046-8c5d-43ce-9c43-72fe2c024134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d40109-872c-47f8-a8aa-e5912af9e724",
        "cursor": {
          "ref": "5b440dec-7d91-4d7a-89a5-8edd2e2d268e",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f800ca28-9182-4cb5-9bae-6c1bb25916c7"
        },
        "item": {
          "id": "87d40109-872c-47f8-a8aa-e5912af9e724",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "158d3ac1-a909-46f7-8ad9-3b171e575b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e655395-13a0-45f6-a823-7a67e2666466",
        "cursor": {
          "ref": "d9a30503-c032-47f6-98e4-1aa835c288ae",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "dd91f27b-c031-4cc6-9bbd-55ffbf82daf8"
        },
        "item": {
          "id": "2e655395-13a0-45f6-a823-7a67e2666466",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "52efacc9-52dd-4df6-a907-6b350fa86418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aab24a0-7f8f-4b82-9cb2-4fb7a6318c76",
        "cursor": {
          "ref": "fe892490-33ff-45b7-9f0a-d633508b7de9",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ab23af66-6b4a-47b3-99c4-a99c57ea3ec0"
        },
        "item": {
          "id": "1aab24a0-7f8f-4b82-9cb2-4fb7a6318c76",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "369e6d5b-ff6a-4417-82cf-a0852abcb90c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ecff04-fa12-422b-a832-185b498fa61a",
        "cursor": {
          "ref": "ef003dd5-40a8-427e-9b34-043c6de67cd0",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4ede7762-fec0-4fbd-94d8-b522522d5f52"
        },
        "item": {
          "id": "08ecff04-fa12-422b-a832-185b498fa61a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "75ae4f65-f7c8-4bf7-b310-94e472213261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de4ddb7c-80c7-4829-92f5-906757ddaa7c",
        "cursor": {
          "ref": "0771bc45-69f6-4799-ae9d-9b1cb429979c",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9503c0b3-8f76-48e0-8752-688b69336aa2"
        },
        "item": {
          "id": "de4ddb7c-80c7-4829-92f5-906757ddaa7c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f3900cf9-710a-430b-87b1-3f92ce719d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0b9e71-c52a-4dbf-860f-8039e3c70dad",
        "cursor": {
          "ref": "e0c5367b-0a1d-467b-91ce-f099323a22dd",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7acd69c7-bca1-4c10-af5a-dc538ab578a7"
        },
        "item": {
          "id": "fd0b9e71-c52a-4dbf-860f-8039e3c70dad",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2a592709-71d5-431e-9347-244f567380f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573a0e9c-1854-4f6b-891c-81bf2ffa8025",
        "cursor": {
          "ref": "14d73b31-c3d6-4c71-9404-9acd74d9d2a0",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d8619d04-c74f-49bf-8044-37eaff9d066d"
        },
        "item": {
          "id": "573a0e9c-1854-4f6b-891c-81bf2ffa8025",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ad022724-bc3d-4ef7-8478-8bbd27fdc811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928854b1-f77c-4d5f-838c-252e7adf47ce",
        "cursor": {
          "ref": "5aab9446-b9df-4614-8252-27b7afce24f2",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "6268f113-8fbb-465f-92e7-45f9d12a055f"
        },
        "item": {
          "id": "928854b1-f77c-4d5f-838c-252e7adf47ce",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6e2c537e-2c3f-4d8b-95fd-fda0d119e2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9e33f2-2f29-4aa5-adc5-e9e2c33519d9",
        "cursor": {
          "ref": "9f3aeb34-b6bd-4e70-8c1c-8e326361809e",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d51efde4-8906-408d-81d6-a4a9c906bda7"
        },
        "item": {
          "id": "ae9e33f2-2f29-4aa5-adc5-e9e2c33519d9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d1b8dbcd-cc0a-42eb-9e9c-58f963c0c628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b53b6f6-f962-4d8a-b6ea-d48dcb103102",
        "cursor": {
          "ref": "fcc83def-5e22-40ad-b533-792b344a0efb",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "fbdbd7bb-6d62-4d31-8135-fd290bf6ace1"
        },
        "item": {
          "id": "2b53b6f6-f962-4d8a-b6ea-d48dcb103102",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f54e34cf-1c65-45b5-bae9-c331c2b83609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1a46c8-a182-4c43-9976-820f39e2b603",
        "cursor": {
          "ref": "2f33c0e0-7fc2-436f-bb90-b1e30cde89f7",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "41a258b8-c8e8-47a6-a50e-0a469ea464a4"
        },
        "item": {
          "id": "bc1a46c8-a182-4c43-9976-820f39e2b603",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1b67560e-c107-411a-813b-78d611b1f273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6983438b-51f8-48c9-a253-6c3273191b81",
        "cursor": {
          "ref": "0d8ceefc-a9b4-4ccc-89a7-708fbf1488dd",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4c972868-6605-4478-be73-a850b80aa7c2"
        },
        "item": {
          "id": "6983438b-51f8-48c9-a253-6c3273191b81",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "956f57e3-b531-45e8-a400-a9522c99dc62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e5bb1e-836c-41b4-aa63-10875cf06f9d",
        "cursor": {
          "ref": "1be4d49b-de3d-467b-b0d5-b324b76a74db",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "01a5d163-8831-4742-848b-827490379964"
        },
        "item": {
          "id": "87e5bb1e-836c-41b4-aa63-10875cf06f9d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3796a7e7-3125-4a6d-afa6-95956c25767d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d68785-49b8-4ef9-b88e-9514c1d62ffc",
        "cursor": {
          "ref": "11ca0594-2911-4b5a-97dd-4c2b1b9fb3dc",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "969a1bac-02f9-46a0-9ae1-87b90f30bd1d"
        },
        "item": {
          "id": "23d68785-49b8-4ef9-b88e-9514c1d62ffc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "38a46865-62aa-40fd-a5b6-ebb5182d076d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04a2629-9985-442c-b416-8eca65614b41",
        "cursor": {
          "ref": "f611c692-1d75-42c5-b2bf-61b79f3ce398",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2a6358e2-81e9-4ed3-9738-7f85f0787133"
        },
        "item": {
          "id": "a04a2629-9985-442c-b416-8eca65614b41",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4ca3c1e7-e2c3-4e5b-b53b-bc9bfa389e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8369d6b7-93bb-4f53-a658-d5bde19fde07",
        "cursor": {
          "ref": "986f3d2d-7091-482f-8e7a-189c9a9b0e84",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "55a1db54-0be3-4d98-9e33-6f5db7f57ba9"
        },
        "item": {
          "id": "8369d6b7-93bb-4f53-a658-d5bde19fde07",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5b3c7e8c-2df3-475b-81c9-c95265c21b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41cf44d9-87c4-45a6-9246-5b3a435df950",
        "cursor": {
          "ref": "c9776421-00c2-4242-9bb0-144515c17db5",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "25cd2332-1922-4834-bcdc-ca984b9c8eb2"
        },
        "item": {
          "id": "41cf44d9-87c4-45a6-9246-5b3a435df950",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a835ff90-c197-4d72-ad13-7dc688789185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d17b75-e5b6-4b38-9b46-7611c3405633",
        "cursor": {
          "ref": "047b5428-04af-4aa2-91a2-26a6e982d784",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5a1abd52-7017-4a74-a560-07fa90e36e52"
        },
        "item": {
          "id": "37d17b75-e5b6-4b38-9b46-7611c3405633",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7ef28e29-a9b2-42a2-8071-6ff5c7e3d154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78fdbfdf-0d64-43ce-9ba6-6f948ef1bf72",
        "cursor": {
          "ref": "09dd9291-67b6-4a3f-92e1-2782429e6646",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4a92dce2-f6c6-4935-af78-ed3ccc5aaf6f"
        },
        "item": {
          "id": "78fdbfdf-0d64-43ce-9ba6-6f948ef1bf72",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "57dfb5d0-1612-4432-ba48-720338b09549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c678d3-daab-473d-ad0c-b4dec313b8c2",
        "cursor": {
          "ref": "a1efaa42-ffeb-4a83-bc6b-ddf09d372ba8",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "aca2c91a-9d87-47e3-b195-779536b2c5a2"
        },
        "item": {
          "id": "c7c678d3-daab-473d-ad0c-b4dec313b8c2",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0458bb7e-d889-4588-af1d-5109d5bdce11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7301363-8d3a-4e9c-bb35-2557c14f23ac",
        "cursor": {
          "ref": "fb8f1f77-0a7b-4a46-8204-3bbd8ca2642e",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "efed85f8-3f32-4e03-9e81-af0760ace105"
        },
        "item": {
          "id": "e7301363-8d3a-4e9c-bb35-2557c14f23ac",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8aed35b4-2f83-4371-8d2a-ef9da2bd987d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0d6c9c-1505-4fa6-9656-a51ce61c4dfa",
        "cursor": {
          "ref": "c649946b-086a-4907-8433-918ab2d643b0",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ac65a750-9e81-43f2-8d2a-b10d0a957d81"
        },
        "item": {
          "id": "fc0d6c9c-1505-4fa6-9656-a51ce61c4dfa",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "fdd1990d-5628-44cb-8800-910e485796ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3782cc18-347e-43bf-b2ef-00b8f462a610",
        "cursor": {
          "ref": "19a8d1d4-73e0-496c-9854-b63cfe6be8f8",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "71ba636e-77bf-49a2-9d0d-380f6452e68c"
        },
        "item": {
          "id": "3782cc18-347e-43bf-b2ef-00b8f462a610",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b8acfcf2-053f-4cf3-9760-d8daa5936774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96f92e4-d10a-4ddd-bb42-8a18ffd3075f",
        "cursor": {
          "ref": "b87b74b1-4df0-466a-b2a1-56e9c46847c8",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "99de7433-b0b1-4785-bd24-9fbc0878be36"
        },
        "item": {
          "id": "f96f92e4-d10a-4ddd-bb42-8a18ffd3075f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7500f4a8-04c2-4587-b825-b268086d5143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a67073-f9fa-412e-bbda-b6748b5e148b",
        "cursor": {
          "ref": "7496c759-9b56-40a7-9efa-b9f273515c1f",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "86c0fbaf-9726-4231-987a-d02d075bc7e7"
        },
        "item": {
          "id": "a5a67073-f9fa-412e-bbda-b6748b5e148b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a10cef86-0cb1-4866-9361-d2f8a95a3abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8beddb8-24d9-4117-9c2a-d196c36ea0c4",
        "cursor": {
          "ref": "967cee98-38bc-4beb-99eb-c1cbc59f3124",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6f64e168-7372-478a-8ba9-a90266dcf20d"
        },
        "item": {
          "id": "a8beddb8-24d9-4117-9c2a-d196c36ea0c4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d576da4b-49cc-47af-90a0-28d6b177b515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce9ed80-37b7-441e-aa47-a302cc7d5de0",
        "cursor": {
          "ref": "8ae6e981-b362-4794-9e7f-36292d4c87fb",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "fd972c09-7552-42bb-80de-0f0b6ed575bb"
        },
        "item": {
          "id": "8ce9ed80-37b7-441e-aa47-a302cc7d5de0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "498a9cc0-3437-44b6-85a9-1e455a0de5c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f23cb0-802d-4237-9fc7-690dbbbfd6dd",
        "cursor": {
          "ref": "ccd8435c-9e06-4857-9d75-6919741d1c76",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a4a40f40-814b-4149-982d-0420d769923b"
        },
        "item": {
          "id": "67f23cb0-802d-4237-9fc7-690dbbbfd6dd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ffc4c625-66f0-47e1-a10a-021791344e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f1ed9f-1bdd-4dbf-af18-39ae1c2593b2",
        "cursor": {
          "ref": "085097da-3c41-4d24-8c8f-06e9656a3ad2",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f31814ca-15ba-4b5d-813b-aeeeef569d3f"
        },
        "item": {
          "id": "74f1ed9f-1bdd-4dbf-af18-39ae1c2593b2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b005353c-4e70-4cdf-8ee5-09ecedd0d4d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4498161-9912-4c32-bf05-427969449a3e",
        "cursor": {
          "ref": "1b95307e-3970-41b7-ab6d-a23605bfa91d",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b8c6b98b-08d8-4791-ad05-8b90af84a58f"
        },
        "item": {
          "id": "e4498161-9912-4c32-bf05-427969449a3e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "697926ab-c6d0-45aa-8685-81e23af67eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8849086-23c2-42a5-a6a1-bfb6a8f09083",
        "cursor": {
          "ref": "8fb8c625-2a47-4c74-8f48-e0d8d23b0851",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2338cf25-4bf6-4715-9d7b-0e3a4a904faf"
        },
        "item": {
          "id": "e8849086-23c2-42a5-a6a1-bfb6a8f09083",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4a238fde-36a2-4a09-8e90-e4a81a1ceff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4993b7d4-b225-4335-8d05-0dbc715ac9d3",
        "cursor": {
          "ref": "9d6a0a0b-5183-4228-8b20-93522c4728b1",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "830adaf3-840e-4314-82f8-32cf69469221"
        },
        "item": {
          "id": "4993b7d4-b225-4335-8d05-0dbc715ac9d3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ced8c7ad-77e7-41b3-93f2-2cd57088a837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b1432b-f4bd-4cf9-8308-4e45881e065e",
        "cursor": {
          "ref": "8c749e0c-5e44-49e1-b899-8bcbef085a74",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3bd524bc-56fa-403c-8617-a5a1ad80d7f3"
        },
        "item": {
          "id": "84b1432b-f4bd-4cf9-8308-4e45881e065e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6053f72f-8643-4ef8-ab6e-d6e2bf7560ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9009b6f0-319e-47b7-9176-2b735a817b15",
        "cursor": {
          "ref": "82301aa7-2295-4e3e-9cc0-37a1ef644b29",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6741b15e-372a-4873-b9a3-308de4e2f0a2"
        },
        "item": {
          "id": "9009b6f0-319e-47b7-9176-2b735a817b15",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "fc6c06a1-3058-46dd-b31d-471758d9145b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc483be2-f902-45e2-8cd0-c27f4aae2357",
        "cursor": {
          "ref": "eda2e6d5-5e83-43c7-bfcb-aa2c023eaaed",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c7992e48-38d6-408b-b90d-22f90ddad09c"
        },
        "item": {
          "id": "cc483be2-f902-45e2-8cd0-c27f4aae2357",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "cc36eac2-aac3-4ccd-9fd4-b986f0bf0a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba265d0e-1a30-4dc0-a17d-a7f0e2165cdb",
        "cursor": {
          "ref": "60062000-ff33-448b-a106-afeda47d0eac",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "405717a5-9ea9-4391-a90b-8256ee1845a7"
        },
        "item": {
          "id": "ba265d0e-1a30-4dc0-a17d-a7f0e2165cdb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f1aafe55-94bd-4e9f-83bd-26ca12a9b5b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2fcc55-3f57-4b16-8cec-f4a6f2bdcdb0",
        "cursor": {
          "ref": "571d168b-5fe6-4176-91a8-91ad131bcfbc",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9360190b-57c0-449d-939f-fd9039af01cf"
        },
        "item": {
          "id": "6c2fcc55-3f57-4b16-8cec-f4a6f2bdcdb0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8dcfe52a-dbf5-49f5-983c-dd4d48209d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0521b706-de86-4f64-b80d-548031eb53ce",
        "cursor": {
          "ref": "75fd986c-70d7-46a4-a4d4-e122b2f22dc9",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "603664c3-5b45-4a62-b501-04f1c8ef7657"
        },
        "item": {
          "id": "0521b706-de86-4f64-b80d-548031eb53ce",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3376fb81-bbe9-43d1-a2e9-1a0ed0783cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f90cac7-0e45-445d-b51d-a7cef5d3b402",
        "cursor": {
          "ref": "2dd29eeb-2bfd-43b6-9e17-0b7a27e7b534",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7f8c6303-6f27-4438-95de-cee0a35b8a47"
        },
        "item": {
          "id": "5f90cac7-0e45-445d-b51d-a7cef5d3b402",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "78fe01d7-bc58-4926-9b8c-9c23f4dbff41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3482b87-1200-41ca-b5ea-2593626a5b65",
        "cursor": {
          "ref": "afd3474c-9fc3-4a2f-a243-bcc325dbed49",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c8d5172a-1b42-40af-8187-30e0b1480e29"
        },
        "item": {
          "id": "a3482b87-1200-41ca-b5ea-2593626a5b65",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d7498b09-f217-42e1-a4f1-f5711e191ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee624d3-af63-4d04-b20d-e2688e97e37b",
        "cursor": {
          "ref": "ca9b5358-3748-4e0b-adc4-7a5095f5dbd2",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bdece5be-01cc-4c03-8a55-8e6e12c6be0f"
        },
        "item": {
          "id": "fee624d3-af63-4d04-b20d-e2688e97e37b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f2bbd8e8-45c6-4bfb-904e-0d1da643fa83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f08375-b5b8-40d2-b0d7-4fb7219fc78f",
        "cursor": {
          "ref": "fac83c0b-d2fd-4f55-920a-1211c2e8dd7f",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ddde3974-f8af-4952-9dad-1483978b3b7c"
        },
        "item": {
          "id": "e1f08375-b5b8-40d2-b0d7-4fb7219fc78f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4aeb72e5-3a90-482c-93bd-e0deda28c6c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c804b82-de5f-4aeb-9ee1-2a228ac1dbf9",
        "cursor": {
          "ref": "70af0786-a18c-445d-8c56-10e1a0313c0c",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "29848347-9d78-4e4c-a8ba-3e0d83c1d539"
        },
        "item": {
          "id": "3c804b82-de5f-4aeb-9ee1-2a228ac1dbf9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3b174b4d-51a5-4ce1-be6d-cc34ef351f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9d40ab-2c1a-48ec-8275-673dc4da94ad",
        "cursor": {
          "ref": "3a45e2f8-ccae-4358-bbd4-6409a50a214c",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b847c355-2318-4ffb-8614-7c005cacf658"
        },
        "item": {
          "id": "db9d40ab-2c1a-48ec-8275-673dc4da94ad",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "16fa5839-0f4e-4ccc-93e7-fd56f8131ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7afdcae3-9d95-4595-861f-2e804dafecae",
        "cursor": {
          "ref": "8839ba80-a80b-4532-a566-6c62bd19edb4",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4c3fb78d-0fdd-4320-8a12-2ff42747b49b"
        },
        "item": {
          "id": "7afdcae3-9d95-4595-861f-2e804dafecae",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3c983fbc-f66f-4b1d-b069-78698d7b0925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0978e80-3887-4f4d-83d8-fd5c0c9050d6",
        "cursor": {
          "ref": "945eed99-f427-45d4-a40a-297f182b5691",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "02a7e4b4-716e-4baf-8340-770211bf0c98"
        },
        "item": {
          "id": "d0978e80-3887-4f4d-83d8-fd5c0c9050d6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "82402148-4e04-4603-9a41-c8a6d7c32f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b95241-b85f-4fc2-8b70-ff2034f86639",
        "cursor": {
          "ref": "b0ce185f-4eba-43b3-9af3-34a22b4954cb",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0310d7a9-a27b-47d5-9425-7fd2cfe55815"
        },
        "item": {
          "id": "99b95241-b85f-4fc2-8b70-ff2034f86639",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c87be91a-5c9e-4e69-9833-a39e43a5bda6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4771d27d-7b87-40ee-8635-b90f8d497e54",
        "cursor": {
          "ref": "4810adb3-b262-4fc3-8f98-80e250a4d620",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ccdacb01-3ad0-4501-b083-dbf7ae2295bc"
        },
        "item": {
          "id": "4771d27d-7b87-40ee-8635-b90f8d497e54",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "bc752b22-86b7-45b0-bdc4-ea06e554361d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 47,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87512585-e9ea-497a-8bad-5332f895369e",
        "cursor": {
          "ref": "183c908f-fb3b-4dd3-a5f7-0353ede5edec",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d6c6d4d8-9d3f-4687-b43d-12b442d8257e"
        },
        "item": {
          "id": "87512585-e9ea-497a-8bad-5332f895369e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d01747b7-d35a-4d38-970e-e4dcad6f0d88",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be030d2-6eb2-470e-9eec-d45b94b35093",
        "cursor": {
          "ref": "805f14d4-75fc-4d9c-bb6a-9f3a26ef15b5",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8a0b95bf-3cab-491a-a084-3abb9a17fe1c"
        },
        "item": {
          "id": "0be030d2-6eb2-470e-9eec-d45b94b35093",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7d0b69b2-3472-4f5a-8c72-db170e1d87bc",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb889499-d9ca-40b5-8a93-bb486df91e70",
        "cursor": {
          "ref": "771f3085-587c-427c-8ed4-b2feb82e562d",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a8288140-34e8-43e8-a9c2-fd7d0d85ea87"
        },
        "item": {
          "id": "bb889499-d9ca-40b5-8a93-bb486df91e70",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8941e77d-fe90-4404-aeb1-67f62fd7e70f",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b419d774-d93f-443d-bf18-39df756e3950",
        "cursor": {
          "ref": "fcddc1a6-dec3-49be-a436-f5320083e3f1",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "18d2ca67-b50c-4b9f-af1c-566f06a9c6b3"
        },
        "item": {
          "id": "b419d774-d93f-443d-bf18-39df756e3950",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "67b96c0b-03b9-4eeb-9f60-19bbbd18001f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b419d774-d93f-443d-bf18-39df756e3950",
        "cursor": {
          "ref": "fcddc1a6-dec3-49be-a436-f5320083e3f1",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "18d2ca67-b50c-4b9f-af1c-566f06a9c6b3"
        },
        "item": {
          "id": "b419d774-d93f-443d-bf18-39df756e3950",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "67b96c0b-03b9-4eeb-9f60-19bbbd18001f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b419d774-d93f-443d-bf18-39df756e3950",
        "cursor": {
          "ref": "fcddc1a6-dec3-49be-a436-f5320083e3f1",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "18d2ca67-b50c-4b9f-af1c-566f06a9c6b3"
        },
        "item": {
          "id": "b419d774-d93f-443d-bf18-39df756e3950",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "67b96c0b-03b9-4eeb-9f60-19bbbd18001f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ca574f-81a6-46bb-bbb6-b227e70f471b",
        "cursor": {
          "ref": "827c870d-8597-44a5-a446-fd8988716e8e",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "50500a99-15be-4da7-94b6-969754196838"
        },
        "item": {
          "id": "a2ca574f-81a6-46bb-bbb6-b227e70f471b",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "b6e5b34e-7128-40af-a923-0dce545d4a38",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dabecc-52e1-462b-906c-46d04e568bda",
        "cursor": {
          "ref": "fa6e23e1-302e-4bdd-9c27-48255b48b89a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ae625bd1-0e23-4a11-996e-a3e832510525"
        },
        "item": {
          "id": "d9dabecc-52e1-462b-906c-46d04e568bda",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5f63b6fc-aeba-4710-bcb7-9c73d3447970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d9dabecc-52e1-462b-906c-46d04e568bda",
        "cursor": {
          "ref": "fa6e23e1-302e-4bdd-9c27-48255b48b89a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ae625bd1-0e23-4a11-996e-a3e832510525"
        },
        "item": {
          "id": "d9dabecc-52e1-462b-906c-46d04e568bda",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5f63b6fc-aeba-4710-bcb7-9c73d3447970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "60eb5fde-b0f7-455e-ad87-6453390af636",
        "cursor": {
          "ref": "463e54e7-f7af-482c-be20-613081c0c392",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f10da688-fff1-4ca8-9b76-8e84e32d3633"
        },
        "item": {
          "id": "60eb5fde-b0f7-455e-ad87-6453390af636",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "8596c5a1-b9c3-4a43-821f-488a0ed71f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "2b4368b6-e08d-4c8b-809c-808142c58457",
        "cursor": {
          "ref": "a95a457f-5e54-4e88-81e3-de80ca3fd9d2",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "94499550-0c06-4f47-baed-e87378e83130"
        },
        "item": {
          "id": "2b4368b6-e08d-4c8b-809c-808142c58457",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6c69039f-3589-4646-865a-dd42b5feec67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "2b4368b6-e08d-4c8b-809c-808142c58457",
        "cursor": {
          "ref": "a95a457f-5e54-4e88-81e3-de80ca3fd9d2",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "94499550-0c06-4f47-baed-e87378e83130"
        },
        "item": {
          "id": "2b4368b6-e08d-4c8b-809c-808142c58457",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6c69039f-3589-4646-865a-dd42b5feec67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "e48e7630-da98-41e5-bfa5-4f7e57abb43f",
        "cursor": {
          "ref": "ca025ef8-e1fd-4d3d-8173-add678cae40f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4a8a99a9-36f6-4c47-bb5d-b647f4b781b6"
        },
        "item": {
          "id": "e48e7630-da98-41e5-bfa5-4f7e57abb43f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "a2888711-c2da-431f-aa6a-fc2d44ee6872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}