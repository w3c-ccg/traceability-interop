{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "eb0b55b2-54dc-4e58-9151-160084edb369",
        "name": "Clear Cache",
        "item": [
          {
            "id": "51fb9511-50cb-4c69-bd20-6e049ad28cba",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1b8739ec-00cc-4350-b911-a628c9badcbb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2d209750-6c13-4402-80b5-4f3a623fd409"
                }
              }
            ]
          },
          {
            "id": "cf7ed5e1-eb69-4619-b586-181b88094e4f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "42a6b7aa-e044-41f2-b522-c45111489a83",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d5375b99-db84-4bea-aa90-99047f605f39"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "209fdf1c-422c-48da-8a66-8b978a1df336",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8af7b3bf-06ba-4f0e-a3d7-e3c27a0dab83",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4456f2fe-dda0-4a4d-ad63-7a9f8230f646",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d840291b-b665-4d1f-8d50-2a76caff04ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9319efc9-6323-4229-943b-760a935f3539"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f9b256ec-66e4-4db3-a6f9-ca8ff7753d4d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d43f3be1-188a-4dd9-b61b-1cebbd223a3b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "73a3521b-cd96-477a-8360-fa7a4a6f347f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "673f0e4b-7b9e-42eb-870b-beac6ff23cc8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fdf8c09a-df02-4dfd-bdbe-2b91d3dfb506",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "aa95d4f4-99d6-4cc5-9e75-3ac7be4cb0f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "acf086f3-0f8e-42af-b052-4595c1bac648",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "602952fb-c8e0-40f5-b4c2-d8d9d8ae27c3"
            }
          }
        ]
      },
      {
        "id": "8a83f810-f49f-4a33-b0d6-51b6886c6864",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c2ab9d2e-32d5-41ee-8925-7b55fd032f72",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc95604d-9b87-4d38-a9eb-3831cda2bb2f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4b74482c-3845-4ed3-a831-f9e34c728095",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e369207-bee8-468c-8a44-29a3e3c0b051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "030be91e-2555-4fca-b240-60ae2f2d2186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea9c53f-b926-4f23-a567-5c0adda15bc2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeab3410-5fe2-4abb-bd9b-86a0347f1c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbaebae5-f26d-416b-8edc-cd6c2d2e040d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e218a6-db93-4ed2-ad5b-b1d4eab5e871",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037f60b9-8aac-4c9b-a22a-583cb65d0593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6329800-188c-45ff-a85e-075accec5730"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "30a76ded-97eb-4bd6-8a1e-de291a716e19",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c2380499-e05b-459b-8e70-d535a32974e6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521ec976-7137-409e-a5cb-5c6e2e9efc73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c69365b-7622-4fe6-acf0-9270d237edb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720fd585-c2f9-4336-9eda-ee57ac3d5c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1431831-ffb6-415a-b475-23fe85b6a138"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "050c040d-9605-415f-ae44-30acc0fa89c6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "43953aa1-4070-4f20-bcc7-dee2eb59a674",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b124fa0-8467-47cc-91ce-8b61c49f6261",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2daa2926-a2b8-4dc3-9d14-353a2b62190e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec49278e-4327-4e24-9073-068459cbcfe7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "0066dbf4-2fd5-4d88-9aac-fd8c07897c58"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4da46e85-23f6-4d10-b76f-c9d99949d33a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "382f6e8e-e8aa-4884-9cdb-51906c94ba0f"
            }
          }
        ]
      },
      {
        "id": "60a28d67-7241-43cd-928c-612768035692",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2d1ed951-a4d2-40cd-a6b3-637ac2450d99",
            "name": "Negative Testing",
            "item": [
              {
                "id": "46acdf64-4fb8-400a-bc5a-108b8c8ab7a4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1a1491a5-c736-4cdb-b80d-f68724f271ae",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289c05d7-a173-4bcb-b7ff-5969dc60dc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba1c972-3ed0-42d7-8c5b-f25fe3ec7db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efb5047-7bc5-4ffe-b7c3-0fe0ee91f906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3deb117-7d15-4d4e-8761-e99b29894c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4226e6ae-9f4a-4e73-910f-13d945fad21f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5e94f0-a346-4617-8dbc-17b00be87a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ba49318-82c8-4a04-af26-0e2ccca04555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36965677-8d17-492e-bf84-187dd1fe63d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ac4f6a8-7bbb-4a99-a8dc-f739ca42df97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7fc8769-0fd0-4701-be9d-2cb99a379990",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7ad412-c61a-4635-a58a-a723da8ada4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a173c3-de3d-4448-a884-1a26f8b3f5af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d8679d-78a1-4485-9f21-30ef02260519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6423be4e-1016-43e5-8b7e-26659554c6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56bb9707-5946-424d-9e07-5c765b0e5101",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de847ee2-bab6-4b36-8b70-d5dd761a7369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab713d3-c303-43c3-9939-73cc89871bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0877fb92-41ba-4838-ba95-94bc6708e91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27e381af-2868-4a72-b140-d1d111c97099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f02d5d-d4fd-41b9-b587-c7fa49b2caeb",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d595c800-f289-4bd7-8aac-0719cb5371b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9560b11-1f88-4165-b85d-ea6abd772e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6672a5f-0766-4858-986e-a85695beae82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02d48877-fc1b-42f6-9759-f84cff82e63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8799acda-0c4c-43ad-bbac-ea1bbf12fd66",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f441be5f-7861-413c-b2db-56ab6e27c2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973dbfde-ba3a-4b44-abf7-441e257fe3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798ef92f-ef08-4fab-a487-e63f28eb0e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d2f9da7-a27b-4eb5-87bd-344bd6726c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bb6729-45e8-4816-8aff-4990159be04f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3be12d0-4820-4402-a428-b781322bd0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cd3cfad-61e1-4626-96a6-b2c6b0db2afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2221ba92-9ebb-47e0-886a-4bed30adfaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad7f9705-98ba-4d2f-816e-06bae3bd51df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c64efbc-fd5d-4c84-9b0b-f8628536f30b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f5a2da-cb42-4e77-baaf-781a06f6b792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7483dcf5-7b87-4ef4-9ede-047671f4b072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8ece4f-0758-422e-be53-8e41167f8ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0102d7c-44bd-4e34-8c85-9bcd7b07997d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea87728-0917-4512-8ae9-fac32a9275c4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750dd06f-96cb-48ec-8f4f-2048d781b548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "161d991b-c5f7-4d6d-89d8-a81d6d7bd757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a299211-4036-4c2f-a94a-49131b2e82a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6468122-be3e-4e0c-9120-a225fbe1bf81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a35ae2-a1f5-4b8a-9a8f-a89bca8d155b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6504e13a-a30f-4048-9142-247be452be27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f0c48a-39d0-4bef-9985-41afcbc91aec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5adb8f-0736-420d-8e6f-f831e314f200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c65acbb-3251-459d-8695-e5176874299d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd16838a-44b8-4b65-af19-485b6486c355",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f2fc86-9897-4ccc-b96f-ba78615353e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4399a75-3bc4-4fea-a33b-f929d6e452c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e99b92-f0dd-490b-8283-dceebde09cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f804002a-9bfa-438f-81e6-11b12ea9522d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e7403f-5a19-445b-8d60-8ea6d0c72407",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb55bc95-9407-4419-bcef-62be786e3ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8081590-4c64-4837-a2ee-4198bd2b6da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c3d6d2-810c-4d22-80b1-1f696beb6e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2a6a20a-a2dc-4117-8972-dc2de4a4495d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d748060f-0404-4fd9-9382-d4c1acc3167d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6501b9-6b3d-45e5-b6bb-5f1aa81609ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "758483f8-77ab-4bbf-89dc-56b9f95a57a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb2e82e-c992-4f5e-81ca-aced8d194f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d341d984-a77c-42a4-975c-59a9ccc9329c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f2d775-5252-48c9-9918-0afed3f3beeb",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90020df-a3f1-416a-b86d-f76967db5002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6519909-70e4-4bc1-a3ae-966285238c16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f42bb53-2ed9-46d8-90a6-cd802c506c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3181f8bc-09e3-4274-9284-699427de1ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1d91b7-695c-4988-9b39-4de58add02bd",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f496c3-533e-4c5d-b250-1d207faf5350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd6d8ca-b08e-4aa8-843a-6f96ea6081e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1ab2d7-f394-497c-a207-fb34bfcf8545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30587438-3271-44a7-bdcb-49a2ecf77742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f93a47d-4b79-4444-817a-df8cf11fed5b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb6ce92-336e-4842-b981-ca1b946f1504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ac331c-543f-4ca9-8781-847af9170936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8e3bcf-026d-446a-8c92-500131d91b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44b85f1d-78e0-4978-afd7-b978c27ec7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc77474-8b46-45ed-91c6-018cdaa67ea6",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75e100f-d911-4aed-aee8-3ad06a6a3ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "179dd561-b284-49c7-9e78-4bd70dd8abfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0030317-7e07-4307-97cf-c484881c5b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78392a64-5b4d-4b0b-a196-3b754ac747c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e4e102-57b4-4c79-83cf-6d3f09d90d4d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538d245c-b5ca-4e04-ad1b-f463d7eabda5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90d5da4c-df69-43eb-8b10-2c5119b086b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee06b10-3876-436b-881a-a9633c1f5151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2359818-4b29-4e7a-b9af-355319396659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703f3326-45e2-4d31-9f8a-849c2ba308b7",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84541f3b-c423-4536-b3b8-baf2dfe1588e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a71ee40a-4c47-4bd3-903d-dc6a37afe786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697e0bfd-16b9-4fb0-afe1-abb033cecb5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7adca8b0-ba80-4c50-9e97-d9b4ce7191d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960883bc-8f74-477a-bb6f-eb04ab76e82e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3bac57-54b0-4013-85d6-0312190fcaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a95d3f-db1c-4e15-a7dd-a6e79af8d055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac7214f-1ae4-453b-9980-0656540f8e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5c32fe6-1f2e-49aa-8976-d1d4cd13667a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb924d8-628c-4ed1-859f-175e7243405d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20717e91-bd0a-4400-8416-5a5dc8ebc66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbbd8fc7-3bfd-4227-bce6-099db85acd67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44d2345-4360-40cd-b846-628ed8a9cdee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6be615d-e46d-4d96-8c65-055e790d9f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d094cb21-2a19-4189-bcff-837911e7e2f9",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a51e53-50e1-4618-a251-848406bf6f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ed57d3-b3fc-47f6-9431-1dcb61e5ba08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d1d36a-84ea-41eb-8b4e-d513966a2def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d679fa4-f682-4cbe-a62b-596dcc74f8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02f9085-5a4d-46ad-8295-7a7d7175f59d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb4c6e3-bd7d-46f1-bdca-2d565f9db364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0690f67b-9a12-4f67-9a10-af5edfb66ad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7c001e-1c17-41ca-802d-8ff8d4daf447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b52c5e39-2a1a-48b1-bc28-e3254ddf8781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600112db-cc55-4180-be87-02077a030fe5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0d5497-c35b-480d-b151-4d63c121a1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ab0ee5-8fec-42fb-8374-bf3017857529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d87c91-4fb7-4e7a-ad1c-0868f8d006ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fec3a12d-b183-4656-a9ab-3b9450c0adad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2374c7-8162-4880-adb0-32052ec282c7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb57d98-7fda-4597-bb77-686e2e40de94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b1afd0e-70bb-4fd9-8ff9-e4af80117124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f138c5-fd6e-4146-9ead-45dd760b6abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8044a7e-1981-48ee-b92c-e7d12e244c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a383022-11db-4762-a3a5-ac525fccf41f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62ed6fd-1640-4ede-849f-efa84b7a73b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc6b5db-761b-4a65-b613-d5cc2659b3c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2a4c0a-5650-4c01-91cc-b27c6f7db3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb1e14c4-b72c-4267-8e7a-101ea34ad102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800945ec-0b2d-47d3-93d8-40215b964df0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee50e9e-83e9-483d-b491-e23f0f8521e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb2c59b-165e-4705-b9ab-99b073514357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684fc778-d8b3-4811-84bf-51a398a4c617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "93e07bc7-61c1-48d4-9ae2-c317f979a1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36411582-023b-4fa9-a2cf-fefe0ed97646",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "981bdd0c-e50b-4f8c-8361-bdf18590f578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d85426-7297-4cc1-ada4-2bfa28e743d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685f5be9-9255-49e7-87f1-3950f77493d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bd649de-67be-4dbf-8e4d-73012c2f654a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add7e062-7341-4955-8cfb-bb7c9c130827",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b214385-239c-4a30-b8ec-522cca5398cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d67290c2-6561-4bae-b51a-687acdbe502b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22c887f-a267-4c35-bca2-7aaa4b8f9ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5791ea55-1233-4cf3-826a-81d94e2c7cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81332510-b2dc-4938-8841-d986cbd6c26d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040973c0-b37a-4a51-950f-638f57a7c442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63fb3dc-0a88-480a-ba55-ab6f53a91acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d4f048-68f8-48b9-a5fb-28d57ea8249a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b48d8867-9884-40e4-8931-1e2698acb196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a99ac94c-dee6-4466-b6cb-cfcb696815c7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfe3a97-904e-43bb-a7b9-ebff12fa2c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e6447d-66a9-4059-be95-2c9c2c119bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb16579d-e9e4-46cd-a97e-d22e2b6faf99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eecf6b15-9922-4f95-b463-ad9bde0ade56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563ba620-f500-44f4-aaba-c743a02939bf",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4cc7d7-7386-40e8-8a82-becb9ca6e948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66446c32-faee-43e9-bbc0-7f21e11768cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769094e5-cadb-4c65-87e4-4ecf8a40ddf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "548120fb-3dcf-4290-b28a-97c58de95d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "094063c7-02bd-4240-8537-05aa36374451",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5257eae0-1dfd-4788-85a3-4548c135487f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ecc97f7-da13-479b-a429-f497bc5cb8fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed889bf2-9f77-413c-a4c7-fc9308bf87ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f547a6-79cc-4136-9bf0-269a2b89704b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a031c646-640b-4645-8dae-ee34d8572744",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c75fbe-2e48-4051-921a-0cb591835af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a1d46d-9f73-48b8-8a96-4e87a1b2a1a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7cb9c6-b49d-427d-8931-b8f9e6e20752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dd63323-dfbb-425d-a3c6-71714d491439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54233d1a-e43f-49d6-896d-143cb28fae25",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4825b7e7-56eb-4e65-a087-15f9a2388a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa6b190-be51-40b3-ba72-e01f3018f14f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f409d2d8-a5a4-4fd1-b0f5-b99b07f04dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d0c0e77e-100e-4eeb-a742-cd58123a596d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29818af3-8c7a-45e6-b757-b362ba1dcaee",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "befd7954-d58c-4e6e-bdd6-fb8e8fcb21bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "315f6ff5-f769-4e04-940e-8f1752c86e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01b1325-a49a-44b9-97a6-2b9d31ed81f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e8a4ae-d4f1-4e15-ac19-12570cebfaf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0fe623-c748-454d-a48b-ca54824471f2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1ca192-951d-48dd-a5a7-13fce1a0e644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "991da041-9758-4584-bf8a-9b8fc550f90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be95cb9-21c6-4c9c-aff1-7f5e9ee50b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4058feb-bf10-4f3d-b85f-dc53018a286f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00067bf-c58a-445a-b559-b1496de62905",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47e6a58-ae3b-47e7-8842-40ee44a03ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68db40a5-9e3b-4655-af1e-b685e37cdbd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7292e280-16e2-4553-b809-bc1a3d6251f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d77dd6b6-d1e3-4b21-8166-1e2e4da5923c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3db5cd1-1c0f-4ae1-b223-797de4f8e788",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "873f9cf1-cf9d-456f-abfd-603692722661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11141100-27f7-42d4-876d-f33016e388ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b61c841-d913-4e8d-9a22-326e4e637b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a73b9b5a-4e7f-4542-bb85-bc8d5b1d8758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33bff147-e6f9-4853-bee9-3843cb592d22",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198c0b46-2519-401d-b2ad-a47e40165f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f528f892-544e-4b02-93a4-64c7c907e9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a81e4b-9a87-470e-a408-594d5ea64d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2482aaee-5955-450c-9de3-02ddb2d0ffb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56659f19-13f4-4de1-856b-b294d224d5e7",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "275f1c55-edf4-4f0c-8871-9be9b34a7e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fa075e3-4823-46f1-81e9-49304b2d5320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77c8df5-8dbe-4aad-bfbe-39d6a74bdca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a640a2c1-460d-409f-978e-cb690369c4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967fd759-8e04-4d59-8650-548082515e79",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03b58d4-0dd2-4e70-bdf5-c9c83b5a7d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6e67694-6e01-483c-9e15-1e2b559fda67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d7b2cc-4411-471e-9173-81ae54f7bb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c683458c-eacf-476e-8af0-0aabd1d60e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f64488-ce96-4f5b-acf4-2b18ad8e5032",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73169eab-2e95-4fca-9e47-ce23818b89d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1687d5-31bd-48f6-a738-680392f53726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7eb41b7-a5b1-4616-88de-9bc0072f1181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "96a222e3-e1f1-4e47-84e1-5f3af317c299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4747ae75-425c-4fff-b05b-6182190a490e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5acf3e-30d3-4d60-8183-0a6980f8cde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea13f24-2b79-49ee-a74b-14a73b0b12bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c938496b-69fd-4cca-ac45-128ea8ad61e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5973ec47-5e4a-4ce9-a51c-fc47895e6a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c21496e-6af9-4231-97c6-e01dff9e57d2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b93b84d-2721-4681-aa17-f207804bbf98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac18c06c-0cf8-462f-8fdd-3496c835a3c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8528aac8-73cf-4754-bb0d-0bf5fa8e937e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1993023c-60fb-452e-bfe4-8ec3d8fa3367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d419ae0a-9244-4f69-bb59-d94776246ed8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1f0408-f43b-4e20-99e8-d666d7e6d571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0123d3b8-4bc7-4c02-b6ee-501ea0d8057e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36806d96-ef70-4700-be2a-f20cb0988c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecb64532-1c64-4c47-a484-b687895152ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd54e91-d88d-4e15-8ffe-c6d2f662ba3d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49745b48-2400-49de-82fd-38e2c0d964c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4969d612-c01d-4ac9-86b3-cb098775e5fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4baee6-8990-4714-8cd1-85b5eb088861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "430f177e-c7cd-4bb0-900e-7630664f7ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be03817b-ee01-40a1-bf81-5ab0d02ec366",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd38e4f-f855-4bc8-aa46-62bb1ab78634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b8f52f1-c41d-451d-9753-76f9e312e6c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7039c7-0377-456b-a518-3de5abf6923a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d51f1af2-d3d1-4bc9-957f-bd533b2d6dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2886413a-4c8d-436c-9f73-ca3fba060380",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6938d85c-4bfb-4b2d-b18b-685d006ce4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b370788-3722-4f6c-bd65-eaadc7b9d61e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c78d30a-4ed6-4f11-9467-f60589cb8eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29d24901-0e2e-4a27-af80-9176237207db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caaefa7b-4b3f-4c9b-bde7-5c0d38a07362",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381e2602-884d-4e40-820f-1d40898c512b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da12f310-6bb3-45d9-ba10-b610b08ca26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa052b1c-86a4-4772-8b1f-1ce99741f9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0be195c0-8190-4acf-b5af-cc6acd1d3d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59809ee-8ab9-4054-893f-6a413892262f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dae2d9a-60d9-400c-b649-4413a5299712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b153eaac-337d-48cd-80d0-4885bedaea5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cdd2ff2-2598-4380-aa08-d034fdad5a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed57ade5-755e-477c-9e39-521b7e20ac38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e23776-27e7-4e3e-b8d6-b64caad441c2",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b26288-b28a-4721-ad9f-ec3963903cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c25a6cbe-c77a-4db1-bebf-fd3f466f7ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4bdfbb3-4b70-4cd7-8b41-1a5789e71e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7132422-8e68-4dd3-b631-37272d306d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a089c52-3cfd-48dd-b468-2612b47b7b95",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "592b398d-226e-4874-a0f1-292dfb53a001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4fee6e-5ea7-4029-93fb-06a01ed7db80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feefa34f-cffa-420a-8af6-b7ea85584ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a77e4f3c-c657-4937-90ab-77b6e10f501d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b78c451-4854-4443-bfd9-d87187691fa9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c788052-5afc-44df-b44b-723fe27ff93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4079a2eb-e22b-4c53-b4c4-a693005d6e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7559aacc-b034-463b-bb49-bbeb15dffbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b71f0481-17e7-4bbc-9efb-4afcb96ebacd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dbad7cd-fa74-4c31-8194-b9313bb61cfe",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb50f4e4-05f8-4519-8673-eab49f04c141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a0eafb0-d9f4-4085-8565-5ca96d8e6b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd7487a-abb6-40f6-bbf5-5ae4ca602706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a40b34a1-d54e-4aaf-bb20-4f35e6a8dc30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f42698-dc7c-43a4-86cf-2705a1176841",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a3f2de-56f8-49f2-b8ef-e3cd8fa6ef37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8efb344-3818-490c-8349-c4445de30a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f509d4-2708-4607-b585-94efb9b054bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3d1629b7-25eb-409d-8031-815f78c26852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59140dfc-d500-4b0d-87e0-03e5ead67ef6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bea945-87ff-48ce-8780-c1519adf6dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab768bff-8889-40da-aed7-251cf33c1a87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b94bc16-fc87-4df6-b233-a133ae82a61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "80fb0d93-5811-46cc-8c74-5eb304b6ca10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894ce8f2-ba13-402d-9450-8bc598fb37a4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7877ec98-631c-4265-bdc6-73db632ce8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf140131-37e2-4c1c-bf68-0b05919256ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d1494f-9e56-46b6-95d7-5ec8353af06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6262f8bb-7e1a-44e7-8efe-15166e2da943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b9675b1-3449-4262-9180-fd25d2d2ac91",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fdd14c8-560d-4cbe-8be3-50dfa71a505f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa73293-5482-4ad4-b364-5db0932a05d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f03e211-d039-4bb4-8155-bfa7f7803e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8065180d-02e8-40f7-8cfa-ec7c3964a5d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268b20f1-bb64-4966-9a63-30f96c82946b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0c7a31-6764-4da1-bdad-8a2a0bd166ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5bea5a1-f88a-4f4d-ae4a-8de6e111f700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed62c58c-399d-4f0d-a9d9-8b6bc156cbfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6be4361-75b5-489f-bad7-76fb03f50170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2dd1ec0-73a1-4bd4-ad34-8083e19abf56",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0608c74f-9c9f-4989-a3af-3151563fd138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08d439d0-8cc6-4eda-aa7c-b2e699598486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0773ff5-7c5f-4c33-938e-25e1af23f3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d95297b-f954-4781-9db3-8c761f32f36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b271c07b-51c9-44c7-8ae8-09af159e2ba0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9bdf97-ac43-4682-9363-68198001f0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27adbba1-ad2b-4e2c-9823-dee6906829c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f454e212-80e5-496c-b301-92e3bdf6de89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9498db9a-c22f-40d3-990b-bcdd46351b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8f5647-0bda-4f36-b0c4-1fea98386c03",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d59bd9-6f1e-4d53-94b0-187da7b593ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdf7349a-9629-429e-a910-55d00c2ce45c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb25a4c-e769-4cfd-ad74-27a418cd8f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e30d4817-9918-42e6-9bf6-7fcfc75a80ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb29e41b-41ed-4783-8a81-d97844ca3f8f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dec192a-e1ef-4e79-8e3f-fbf4d8f038ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b86c08b9-e926-4de5-ad9e-f1f9076fbc58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3683ab54-0253-4d67-8579-f530af582522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "721e3a93-dab7-4971-8668-c56bc5c2b017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6192f0d-91ad-442a-8f84-70468c319821",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "001fb2f0-f098-4095-828b-5c349106ff8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ca32e7e-93d0-430f-b746-03e4c776f001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd710c44-73f3-4a41-b072-8cbed4584619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7051ff3b-63ee-404c-930e-bc21c27aae82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0671777-743b-499e-acb4-d4812820a324",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63afb60c-f6ed-45c8-b067-e025b037f76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5677dc29-b48d-4d0f-95e3-12e047a149df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d708e281-81ed-424c-be88-d8f0833cd507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce9df39e-83aa-48c8-a0bf-527b995c7ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3b266f-6fc6-4efc-822e-db369e5da039",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8325894c-8bf9-4de9-8de8-310f8aa3b99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b45e38a-55b0-4047-8395-f0eb18ea1ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff32a1b9-7763-4a5e-9c96-6d3822d4d200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3a9963f3-4719-4774-8df3-e34bc9206ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3d8a60-c9b9-4416-a60e-ddd508a8c2f8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bb3c6a-5a39-4b61-98f7-aebe3b2bcd21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ea4e90-8a2f-4322-84b8-46d52a30deed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17299960-ca79-4a3d-a208-7e60256a1e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b9ed377-cb39-4060-8235-2a5585203413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b8660c-7316-4516-9a75-5538ff60f947",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf7a352-20b4-4969-aab7-7942acd39c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "288669b5-3fb5-4e0f-91d4-a8f309a575e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da9345c-56c5-43eb-98fb-2e320e01f504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3819e1b9-da88-43ca-9d48-590793f5a73a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa807d8b-abfe-40ee-9841-085c93e67628",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52588ac-87fe-4e42-bdd5-877d50f62d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39781e7f-1a80-405a-b158-8a57c4ab7397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8bbc69-f7e3-4769-8677-58587c3d9db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "acba054b-2b8f-4c79-9b12-b8af875b2069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27863670-2f97-410d-a10c-4da4836d0344",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92e9dad-152e-4717-98c3-e7c959a7547f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da81ac73-5d24-43a8-a562-f9a5f4542c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba30359-0ea4-4afc-b722-57d8a20886e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "59d3d75b-2477-477f-8b34-ed4027f7e25d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a90a76e-d620-4fda-a9e0-dbd32df55091",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5313a7b8-382c-4dce-835d-e97547ecbe2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e9508da-8aa9-4f53-9987-55cdda4d9b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499557c7-ca60-42e0-bbdb-c9a5c9110050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b307c11-51fa-46fd-94ba-63a1d422d8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ae8a02-1ba8-4266-a745-ed422c8bbdb4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d95695-c83f-4687-bada-01f3875670c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a4ec4f-8a86-42f4-80d1-0e28a9eda568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242d7952-3886-4861-b1b4-cf633a3beae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8911b2cf-4ac3-4d76-9280-765fc9af13c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1565277f-5045-4a78-8d52-085297463ace",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1039ad12-e0da-4c6f-b09b-46f9a490998c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36dcd6a2-a601-43b3-9598-65ba3dc03819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3830b6-bdbc-4eab-bde0-96059863d18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91f4a469-472d-453e-8e45-c1ab8a3bc15b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c60ad4f-5d7b-4e21-88c0-ee1b6ccb1695",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9899bb36-a413-44a9-a599-112d5365319f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a834aab-c64d-4f5e-95e6-f27847c10150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b05973e-67dd-468e-9755-5a3fa6cfa668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a236fc48-5d56-405b-a20f-fa8b37de5720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275d9af4-67af-4c2b-9fc2-40c33c12fe34",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e69584-31b8-4f96-901e-9c7f7e350113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c32dda79-e078-48e7-8c9e-d3c8a9025927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1734e599-5b20-41df-ba9d-1fe97b549f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b435c0-2a2f-4863-ac04-747b1a2b3337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de98b2d-a481-4672-8aaa-9401f4f6155b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14422558-8274-4298-9437-0645eca27125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddfe6d19-4c8b-48b2-929c-be2d58b7611c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e71b38-13c3-410f-9c82-c95767ffbf01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "111107c1-f7fb-401d-a6f2-23dce1424a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70eccd41-4bca-4116-a316-21995540b8e1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6613528c-a4b6-4fd0-a25a-a92225d698a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fca0e00-1008-414b-abe4-78402e172b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d2bdaa-b5dc-428f-9400-c253df8fce05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7116079d-4948-4742-9404-301504e0bd8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05e76e3-9af4-4bef-a341-8547e92b4f63",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5430ea84-8f57-43e0-b2d6-72c7037eea3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e4e07f-d18b-4c43-ad4e-4f0a1c49c1b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb37433-805d-42c4-bec1-40a2197f3b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6099336a-c72c-4a58-90c9-59a24cced914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4af32e-3e00-4a0e-acb5-b3747e277d38",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912c8cff-8d19-45ff-9db1-8383cd2ff900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff0754f-ee8f-4643-ae03-2010fb7a7ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e08903d-c57e-44cc-a73d-95b0a5347f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d53c6b4-078c-4cc2-963d-05e800c01a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97013497-cedf-4a69-a4bf-44d352517e95",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "416afb77-292e-4b11-af5b-ef609794a867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5975ed0-2d62-4fef-bd64-a0b9a88622e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07084faa-af6b-46c8-892b-3c3aba1edd27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad2d2cc-47f5-48b4-b31c-aab34549caa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "affc840b-899e-40fe-af6d-736b30dc3eb2",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fa9fe5-5d79-4692-b1b9-26278160ea5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f032be07-23d7-422f-9175-8e35325db6df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5daf54a8-5bd0-40e9-bfdc-39bdb9705c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c6c33bd-7dbd-4003-9e19-a598ea05a884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d9b78b-4f67-46e2-9aab-98e283e06f3a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94eb89ca-3767-40af-a3dd-b008f3e00ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b88c76-0687-46cd-9069-ea225eb8d88a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e0635a-e8b8-4bcd-ba86-77b16fb3c469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4abc07d7-ba59-4df5-9461-3ffc4b694398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f73928f-4a64-41cb-b6cb-4e4d25589e7f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89380dd5-75b8-4f91-8b49-3ab251c4f9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf1df36-f732-4394-8c56-ae1e9a9d1f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1df284-0134-4fd3-a33a-90a536b24fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f6eb545-c01b-43b9-ac7c-54356831c021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe0c643-5411-407d-a6d6-cbe027bedef9",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14b70ad-2cfa-4743-9321-f460f3471766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07021086-a5ce-4f3e-b8cb-14cc5da56be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c677db-75c5-4266-b471-b210ef85fa4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c090e4-f46c-457f-8e02-5e8fe2018c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859ad23d-dcdf-4ad3-a991-1034631b99f7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00873a32-f50e-486d-9fb6-f66a45fabefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a96aaac3-38aa-4be9-a696-6c4e04c13d28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5370e3-05fe-492b-ae9d-920251497231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f039a7-8583-4ceb-bd55-e0328ab889b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea4f02f-5e44-492b-9c83-72067b57c3ca",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b43cc7-3e4d-4b14-988c-8b545d240270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aed9c635-6480-4d25-9715-9173e6993573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e8a8f3-b810-4d13-b0fd-bb938cf3362b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "74cf5ab6-e216-4cda-95fe-0f63022e8245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf8f4d2-646e-4f9d-aedd-29132095f1dc",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ae2dfb-5add-4103-9ac6-606ed5f405ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39176a9c-676a-47d8-aff6-a4162a69b036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7885e87-f181-4363-9b82-94a7323a936e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb291e55-34b7-4e34-b211-42a6d7910ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c96d75-7e03-4025-8b2d-fb93cdfec679",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543f423e-bd92-422b-a3fb-7c8b0363705a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a53c893-2afc-4ff0-9284-0fe140bbf9f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fef08f-dad3-4bb1-9768-857fcfe34091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4d4a7d9-d78f-4b86-a235-f83bccdfce89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea228f5-3cdc-4d72-b356-fc70ad924b70",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c24fc2-5bb5-4ca2-89d7-bde7873f8002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781985e1-5381-4ccf-9707-eb60158d2ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9040746d-69d0-49b3-b80e-6d977562d0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "94c0c302-079b-493d-af4f-ffff6cf26d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77cba1a8-3338-4a32-a25d-57d1ccfa4b7d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef617da3-7980-4427-b459-591fafe43522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e783333-58a2-4616-8f0d-9269d6053baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdea0e6a-d3ee-412d-ae31-51d7e791d43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae28f39-bacf-4adb-ac70-6508817ced67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7921b754-7af3-4102-89fc-988ed772d7c1",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e404e4b6-67b1-4d37-9ba9-e9c0e26b632c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "220e2af5-132e-4435-832d-628fab526cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff83909-436d-42c8-afba-3f0fc369cb25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "edb49113-c167-4c31-8ffb-ec338fd84218"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5721eafe-b511-4837-9682-a9ffc72a4b2d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fbe3e3b2-a8ca-463a-ad63-3dbe1a34833b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ec1b35-47c8-42f5-81fb-4f5c3266501a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b99440e-de48-4380-a622-07ae8f8ad219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046e83f2-8d34-437a-86fb-5460be41883e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d6024c1-1537-491f-bdbc-93b6eb704ec8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f25ed1b-5940-4560-8950-4454f1e7db40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c54e69fc-0599-478e-89ed-353bcc89aa47"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d30b2426-791a-4be4-b4d0-d0d3ce389e76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a734dda2-e233-4a97-bd85-4251901093ed"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5819d9d4-5eab-44d5-9008-29d47264ebdd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8c677c20-52b8-4e53-a0ab-41ed7b2d5114"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "48d0e058-862b-42ca-bc6c-a3ad420c825f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4b2f34e-55b0-4b4d-9dda-498f48b4f76d"
                }
              }
            ]
          },
          {
            "id": "890cb103-01b6-4c95-aefe-e45799fbd2af",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9a21ac38-ea87-40f4-bd55-4008de589efa",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "9294339a-1ea9-402f-a411-a686557ce43a",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "791296e3-50c8-4608-9c96-5ece334fa614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "128b182c-d291-4537-bc0b-0d601db019a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feaa8ed4-2316-4c0c-9c50-878b89f85a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92bd4740-c990-4069-b8d3-9989faa8435c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db6f0bb0-6906-417f-9533-18dbe43120ab",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02061334-1024-45e2-a408-3578aa2712b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "88d45f0f-0668-4af8-97ec-1ddbc06dadd9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4172a72-b511-4645-ac00-8934ce36ab95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5a791d2f-246c-4240-b70b-995394e07b3b"
                    }
                  }
                ]
              },
              {
                "id": "095cfb3f-fc46-429d-8bc0-85274e62ce7e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "06221be8-4ff9-4908-94e0-8f78dc26e90a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9f811a4e-b5ad-44d1-973c-00da2ea29d0e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f03a436-101f-4955-8739-324c9437d756",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b6726f15-931e-4247-bb30-571f23e74608"
                    }
                  }
                ]
              },
              {
                "id": "2a0f08bf-aaf7-4b70-a997-e4dc80f9aed4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11a3d335-bfd7-4e5d-b1cb-d6f3eb88f4b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0eeb4995-93d1-4eeb-9fbe-b05fa7b2e64a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d78246ba-dbff-4c6e-b8b9-e1d2cec16318",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "adf3f1d3-a645-48e8-b89f-fac11949b334"
                    }
                  }
                ]
              },
              {
                "id": "246c44b0-1e5f-4216-ab13-594cdf9db7be",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "51910473-5b6b-493c-97c8-b3a5bf1aef6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e3507a57-e2dc-4970-85f6-b53bae099c1e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd1572b4-8698-4032-a387-91c47645bc01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "25d1cf83-17a5-4161-a9ae-ecc9a9d82eac"
                    }
                  }
                ]
              },
              {
                "id": "677abb90-f65d-43bf-91d2-d1b540145337",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2faf1750-3f6d-4def-bff7-4d381aefa5b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70683d5a-d71a-4760-a409-9b1ab2fa9ffe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d328da1e-5a25-4fd0-bd15-548600c9dc3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "04a21228-2580-4f05-b120-7368905ee0b4"
                    }
                  }
                ]
              },
              {
                "id": "2130c787-7524-4ad7-afe8-980a401ff502",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ec2a437-03c9-4a6b-8568-258fb18fb6f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6c2f9b8-845f-4ec8-9891-88ce0a786b13"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1ecaf70-033a-4e47-bdde-24eafcac70c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0be772eb-54a5-4401-804d-2ce4728f5f5b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "110adee4-9e78-48d5-9af3-1a289de8a258",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4792ad10-3640-4c66-a355-c3c273c18e4f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "91925706-b79a-48d2-a9c0-26bfc9bac343",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c0af712c-3461-4ac8-b8c0-4bba0e0a4293"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b0fe502a-4e75-4715-b0eb-796608a07452",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f4d10612-ed43-4ff8-83ff-cdb6ee02d8b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea82d75b-c317-4f8e-ad91-49c4b85fff70",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f47d7011-50ea-4d83-8d13-51d741ad915f"
            }
          }
        ]
      },
      {
        "id": "33a34665-a763-464a-9bd3-b7093a88348b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f7605b30-4d6a-4a4a-b594-9628aebb68b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "190e49be-528d-4d2d-9983-d8433906ea70",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c6b5ea2a-2e83-4c50-810b-e2568b97b213",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eafeb36-87f3-45e4-8337-80a66bc2e2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdeb3a40-07f8-4c44-b164-59e67b8da190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3224c3-f67b-412b-8f14-9efc2851b820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dea829a5-deef-4af9-8eed-9d1a661732e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1596c745-139f-4800-9b65-95d5cba3db10",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d29b754-e879-4318-892e-d1d794e79e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c1d1442-8dc0-4ca8-910a-529bbef54e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f53ab62-9969-4032-8eab-c5c26a4a604b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4eac26a4-ae6e-4d0c-a237-067517403235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a757ad7-011a-4ac7-a464-843c6da75d18",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb696644-0b34-4683-b702-242a3b5fa4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283863b5-ff94-42b7-8655-4eb24cc94dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05ec083-1026-4eb4-9e61-84b4ed7105c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1972caa7-82ba-400a-b326-914a7f0370ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19031faf-c772-444c-b638-b8835daedcaf",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e52bd5b-15ba-4cc2-87d6-ca1c4c427aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef62864-9054-47c0-a3c3-932e392bb01b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd97031c-12fb-4960-a409-479da446b1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1303aeda-bd88-4f4d-8f15-22c4a156824a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1c4d5b-941a-457a-8e97-62575a7a879e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81396a70-8291-4ad5-8032-d4232cdff40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eebe4717-1100-4eb8-8a2e-9738a379940d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ce6370-296f-43a4-b0fc-458a64f08fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c951869-c3ea-4126-9765-0c9d4879ad8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc73e99-c9df-436f-9eb7-3f7d58a87ded",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6da192-43d9-4852-869e-ae5aebc09a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d600a453-bcce-4310-be72-373d3fc2ea5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad46b52-550c-4c19-89e1-f11b52179ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd6a8f58-fd64-4034-95b9-fc5c4ff7a0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96875932-c732-43ba-bd50-0f1217dcc863",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be485b95-10fe-4857-b8f9-dcf29cf690cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4a60277-b859-461d-8b1d-91f8f55aac24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efec40d-6e08-42ea-af11-d963e86e2ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8efb823-2a50-454c-beab-cfc1b2c2fb91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad35cbef-e829-4efe-bdec-5bba28f0dec7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb382cf9-6f8e-48b9-8c82-385178142ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb0c266-144d-4a4e-8385-7847f700dd00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5529ff2a-3412-4d3d-b528-6babf620aa19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "207e5b78-9fad-448b-b335-a983c914288e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a14bfcf-710e-4eee-8271-a85000818c34",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389a15f4-76c1-4f5f-8107-8a1ec8baf0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d01751a-266e-4f1c-aac6-df51a48a8c1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c2cf6e-cd23-4031-9537-9f46b0f4d77b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf8e1d7d-b9bd-4bb7-a1dc-55393706019e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce70f3d5-8d3d-4a2f-b0d7-5e6ecf715d16",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d967c1c3-79e2-4c7a-bb9e-e6ff48611489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b8451f-799d-4cba-ae55-bf8e8ab4f4b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7294c2-142e-4af3-8c34-40e05d07432c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf6d560a-ce69-4737-b437-8709bc710f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7568d116-1284-400b-bb66-5f122e5a4246",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0085a16-9cdf-44ca-baf9-2693f55d4f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70429b9a-f8e2-4921-b1ee-e84ec7a4eecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfde3c43-7f1f-417e-a6a4-94f30b88f8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc44800-79ed-47a3-9442-e775230d9a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4236587f-e60a-476c-a9c5-6e459b63c86d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e79b88-45fb-4ccf-85bf-319370a55e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f694666-ffec-4444-b0f7-6b16da64ea00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8f044b-2d11-4d21-b29b-40771895b2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed84c6b7-4613-42b3-8965-174e5136c311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8e7cd4-a976-464d-ae43-d6f434329344",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f1a913-d19d-4fca-b772-b3cc7933a01d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "697ba325-df03-47ed-bd45-2c4f92e22442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27348fdf-5b77-4a4b-8899-525cff5b713d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f129bf6f-a9f5-43d3-af42-9fd74b42ec20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5bf642-f1e2-4721-9cd4-1e9c9a34d387",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4439c32d-e674-4a2a-940b-05a88e667dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c6ffcd-0a31-463e-b0bb-a0df12532000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be718b70-aa7f-4afe-be6a-c541a2fd94f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e8176ae-fb95-4bdc-ba88-1829955d5243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577d6b68-ed4a-48e5-99b2-b36ce44a2bde",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c345293-fde4-4e7a-b500-f2f50a394dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e089ba-8c41-407a-b360-f71100218c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7c8f21-a637-438b-8342-4a05c5896486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ec15e0-f113-4a58-bcf5-18332088b07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823fcd94-0e59-40f5-a7b3-d5d5e26d8c02",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3672a00d-0ff0-4149-b62b-4edce8f61e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9285d124-8229-4cd7-b090-b533bccba357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6ea247-241a-4904-be38-35187b5e1148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "62784214-10ce-4de3-94ca-d0ca0f3ac75a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5276fb-2e28-4094-ae42-15f9bd86fe1c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e802d1f-2698-49f3-8904-11d72a573779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63be0cd0-f39f-41dd-ba1f-3a3a8d2d671d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0cf164-80ca-470e-930e-ed78872580b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "23221dd9-4422-4e53-97e0-ae0c9d7ffa04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee68ea66-4293-4233-a836-9e87f2f61132",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a94695e-f89c-48cc-8633-68358c7bbb77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2ffb88-92e4-4892-92f6-2b6fe8ba74f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4882e58-d8e8-421b-bf9a-88a716a115d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3924d732-1c50-472c-9d94-13c5a8b549ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374a7409-5c0e-4552-bbcf-06b4d2947e02",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c39d0ce-7df5-4f84-8df1-db1524353d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b5e2f8d-9479-4ccc-bcef-a5e7a57f7292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2550b3a-5bb1-4a9a-a5dc-02cea2c68cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4439c152-7e99-4cab-95aa-36174242ae3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d602650-bbd1-4df7-ada5-059daca0c261",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cacf808-cc1f-4184-ad1b-f9c02fbb956a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d12ad01-a28b-4d7d-a54b-f53fe66ae741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb7bb4f-9f94-4e4f-8b4d-fe31bca56d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdbfbb9a-c8f3-4540-ab8a-b3b29efe34b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad00cf3-04ae-4e20-94ab-5297776c3cc7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b38384-14c6-42bd-abbd-5f0cbdb59e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a8d6907-55b0-4540-85fe-3e350f18b347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e5bcf3-303b-4db3-bce3-dc5ac25d8291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc2008bb-28f6-4baf-95f4-4844bf8a7058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b74167c-4aeb-4ba9-8908-2002287f4180",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ce2fbc-9dcc-48bd-a102-0c9ccc1c775b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a16f51e-08af-41dc-80b2-db27f00d5ffb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a854558-63eb-43cb-8fec-80c392532ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2f4b45-b391-442d-bf7b-0d1403e403c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c68f676-9367-4db2-b595-4b417c2b4d96",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "228910ca-2d36-4bf8-9080-b44da59870e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ac8b8f3-302a-44dd-972a-3abb57ffab3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89582b53-ad9d-49b1-9845-4c5c3252c6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f66c9212-29a6-41e8-b1ee-7530e198c95b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6ff17a-c02a-4bfa-b1af-72d29bbc9ce0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c83454-a36f-4fbb-99dc-dc1fc9f24193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c351738-6723-48b7-969b-61c39200046f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19496686-ce66-428a-9a87-7f2f7bcc8f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8161a9f9-5202-4573-983c-5de3675563eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fd2e3b-9b56-4994-bf5e-e0fd694531d1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e46113-c1e3-49c9-9938-856774111098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "384bdedc-fad5-4c6f-afbc-ce85dd62097b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ec2194-67b8-4913-872e-6b3d572aed1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "566cfaf6-55db-4948-b192-5af93862f072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce66d04-62bb-458e-91a8-ed846b4a044d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7202d3e5-2af4-4995-b9a2-c4f22ad21eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd10d12-1247-42d9-b71b-9ca104d7ae91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10238533-1cbe-4a0c-bc2f-3f311fa93733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29a344fd-b2d8-4b71-a63f-98628bc0c149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ad35fb-5a6a-4f0c-bfdd-7738a788d04c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44004c07-0bb4-4591-99c1-c4558d7f06b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f74cbc1e-4d81-4c95-a549-6e8efb7919e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5178021a-07cd-4d5f-a7ad-ab10baf5b911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8e18ab0-18d8-42c4-aed6-1396133b8a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef716880-bea3-4811-8467-cf9e44690b54",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47eb221b-6642-4ea1-985e-119121fe3a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0492eb-45b9-497f-8fe8-fcd31f48dfde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e69ede05-a2e2-4ace-ae74-93f254de295e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c283ddc9-ca5d-4c8e-98e6-04c18366c9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bddf4846-c8df-43fb-ac7d-26474bff8364",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfdb2a9f-76a6-4b4e-a29e-48940202ed71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beae1a3e-69b5-408b-9dbe-18206ff960a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e253ec4-0af4-4ac9-aec9-89ed52ad5dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10148822-905d-45ed-8ec8-c1f3bdd305dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14147a40-29ab-4318-a648-c84280fce779",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72397a7b-0f55-4abe-9688-ba9cdafc9d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0bfe7da-0193-4925-960d-80fb2eabc829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea3ee24-2389-4674-91f5-87bda5182691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "025697ba-4ddf-46d9-a696-e4799d49a4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652337be-2d56-4072-b41e-b17ea445a1a0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d1037c-9474-4d4e-9fd4-153c5db0ac0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b6c64d-38b3-443a-976c-97fa2cbaeecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f731ad4-1e6a-4e41-8655-0d5c708f9523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb64e6f-b3b3-486d-a299-7ca842c7afed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca70acc-4073-49ad-9141-24da4d970588",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "770cc412-89f7-40ee-b6b6-a393fdec2782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6db21255-6093-449e-bfa7-f953d3a837de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460e2cac-2159-49d4-99e5-33590fc75c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d0be02e-726c-4ae5-b43b-d2df3c5410d6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b6712f22-f1f4-4e84-b474-ffef0b9c957e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e6ea18c-6d66-40e3-87f5-4c5ec216c9d0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3107e7b-073c-4454-86ca-ef94642a4386",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d6de03a8-7a69-4b02-ada5-0b925af183b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "209874b1-06b6-4c15-841c-b85801e74670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d56218f4-7280-443f-be42-e7c44da1bf16"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ac01d2b-759b-4f6b-b5fd-c0886b6b0501",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1df51d0-6cb0-4e59-a9d0-d8c16d08d890"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e25bde24-fe65-4d09-8d9b-7597053e7f3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31c29f7f-6600-4717-bfaa-fec54962d31d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7117c419-20e9-46e6-8d17-75c947cdac6c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "63ff6d3d-b04d-4f06-b851-bc3299477976"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ecf88f6-0975-41d4-8593-770039e5a89d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72ec1a8b-ec5c-4a59-8d94-1a9e36d7a6bd"
            }
          }
        ]
      },
      {
        "id": "078b041e-f67c-4da3-90b9-34ee6be64dbf",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "6debf31f-73a1-404d-abab-5058dd313085",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d10435fd-5a5c-4c6a-8516-65f5823e2161",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cbc9e3ea-0572-4af5-a047-39578c7a136f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07c5c79-340d-45d3-99bc-67767da4b036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283f63b9-2194-496a-84f1-5904c00d462a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0279c828-0ec5-46c9-83dd-dd8cf1f62fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "980e1775-0e7e-4dc2-9af6-9520aa207297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f587b1-0680-4795-9979-6f31f3e3c6d2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a517537-17e2-4fcd-8d46-e79598f4737c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e15bedf0-e4ac-4191-8b46-0ae152a4735a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6892ee49-261b-4075-b024-26cfbf292f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ff4826c-65ed-4c22-850e-b4a6b953df64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082e6a93-6a34-42d2-9aa2-023139449ca7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1ad447-d29e-4480-8cea-4631cc529a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54b4945a-bdc6-4351-a220-2e9bc23d38be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89e2e6b-0e21-4f41-b406-cde663fc2f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53aefc37-9841-4cbf-95a4-8a996f2b7d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0ad9cf-1c61-465e-b006-f8eb9a27eb12",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21125683-3c7e-439b-aa1c-182b19a9f361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fca9ad03-d1e0-407e-9e0c-a4bff6ca5f6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5a3ab4-4f6c-4cf2-98a9-83d855ef4f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e8982c-1195-49ec-8380-daad14afeac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b92f89-f5ef-4b86-a8bc-91dda4016531",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c95dacf-5bb5-4d89-9d6a-dad8f819fcc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b486c4e4-16c9-4205-bb72-00ab1940aa9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562652a8-52cc-42fd-9f39-383eea883c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ad33fe6-69c0-4c7f-b3b9-344f990962cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a8264c-4e88-4317-8ab5-17333cda0dea",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8adcf4a1-2609-434e-9667-3dd52382f508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4c5645-740c-4d4e-a2ac-db864a3f595e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6d8a13-5959-4717-bfe3-d122f02195a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36bbbddd-e116-4b15-8dd9-3419b774467a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3e3293-7806-4cc4-b835-dd26889eab7f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ae0d96-71c9-4699-9630-eec8debea03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4f5c3e4-91d2-4930-bb25-aace7ae7e929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a4b66a-81b2-4f0d-b57c-8329c50056ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "302c01f6-adda-4112-861e-d57d5e5057b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b368bf77-2f2f-41ea-8f83-ec0f669c001b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e233e6b-cd54-43ca-92d9-f5458d5c2dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92423f2e-0e80-4142-acd3-5661358ee4b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2854e51-61ee-4837-83f8-ff221812a232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a988e73-c74f-4ea4-8269-e4a9a5bbdc04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa62a9b2-6a00-49dc-b6bb-7d3668161de3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7987c893-7bfc-40bf-9124-3af56916a27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45cbdb51-7912-414b-9c8b-809fb17ef1d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c872846-7d7d-4d58-81aa-49fb8417c2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b67f878a-d4c2-4976-b201-391792815f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8344c5b-5159-4d1b-a750-576cdaf7073c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed18bc42-c206-40bf-a537-feab08509fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "682e7b23-d151-45ce-bbef-2c833fa43eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8cb0dd3-af64-4ece-94da-ba4b580ccca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7d36af7-18b7-4d00-b264-b2a112cdf54f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35e49aa-93d8-4756-bc2b-0765fb14a2c0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b9f7bf-860d-4e20-910a-9a8251b06967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab0bf6dc-9cdf-4d5f-b826-0f659a38562e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de96b5f4-2df6-4f85-9fe9-5122858c0244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1da2f344-eeb2-49ae-8d7b-a070b96d5675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d614d56-e3e0-456a-8928-60d4e46539ce",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db56b431-6b5c-4bd2-be2f-b57dcd0d8a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edea3e05-100c-41c1-a3c1-6a5f1c376db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c7a799-7497-4885-a75e-3fed0299d8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6b2d6fa9-09c7-483e-8ec9-19e5d97daff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8333387e-124e-4935-86c9-6521022f9cd6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd84897-1500-4fb5-a1fb-40433eb72b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289d860d-e804-43ae-bbdc-29c416c15fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0017e8a9-d0fc-4b60-9f01-e78981d838db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "508b1bbf-679f-4bf5-8903-80a48d8b64b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3c820a-93b3-4189-a45f-ef01988ade55",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8371049a-fe08-45d5-9e51-2c13c7c6d5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb1755e-557c-4894-9e2d-e31680b22c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172c4fb0-de60-40c0-a183-5abef5bf8124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec5e8ec5-4349-4ac0-bfe4-47a941622114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc9f18f-6e58-4164-a798-ebb36400f074",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2c4810-8856-40b1-9707-414978f4860a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd89005b-f3ee-47a6-8cdc-70e790ae4748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b60aa8-972f-4e96-ba8e-3a97a98b7c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "46c95fdd-209a-4710-a859-8824a00537af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5294050-7f20-4a47-98e6-0e4737bf26d3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d12f93-bb7e-40dc-bebe-2b3c759ac6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1b4f4f2-7415-4d71-8fc2-845b167598b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636442c6-be0a-46f7-988f-f59a507c8a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2bc0610-24b2-4d10-9f50-fc2a61723ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f7c0a7-56d8-4949-baef-6ee746ca15f9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937e2150-fcca-4b48-9fac-55898756d369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfced0f1-0918-40e2-a8d7-5d09207432ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2737af3-4971-4553-9e1e-184b5c2971d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d22a316e-bd1f-46fb-a0e1-d1380d6b2262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49fd9ba-ed30-4277-bc35-df29d616da38",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61e19b8-301c-49f6-911b-19b695c0242b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6868d48e-223c-414a-bf70-d909dcaeed21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1fdc24-6a48-42a5-995c-0b664428375c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "384b90e2-acdb-4044-a1ee-e542d5eab749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc28d86a-0ab0-4fe9-a1bc-34b89ddfb2bf",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb99788-802b-4e8d-a8eb-27692395cd90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e3e2a4-2854-422e-9c67-c610eb8a381b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1c1ce7-6732-4070-bd03-01675237ade9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c746d1cc-093e-4ecc-b0dc-3fc094113aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5026de36-6114-4805-99b9-c00c6feab316",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "688c9e81-23e5-4f52-bd32-e11adbcba003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c22448-8827-46b4-9c0c-8acb2b085244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce1fe6d-e866-466f-b00d-72dec2c8afc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c23b1916-1bef-4cb6-b623-c72ad8ecb8a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f052730f-99a6-4d5a-ad9e-8c545cf2da02",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537f572b-3ca9-4078-9e30-3c27e2ca373b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e84e595-9d06-4877-beef-c86d80f8d251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93123836-323b-46c2-9087-0f070c82d7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a89503-a4d0-4ed3-955d-1ab6efd44744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000215d8-ce66-428c-ab18-355879e6d562",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9504c29-e996-40c4-973d-ce559e71afd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1cf6115-6ce1-41ee-8911-cce14a0d04f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0c73b4-9fb0-4e17-b18c-5136413afe6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ffe2395-12fe-445e-ba03-e0c28b6fb2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a3b4df-67be-439c-8a7c-8f26a2585a24",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f35b16-f2a4-4a0b-9a5b-ac4b5a425ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28555135-92c2-4a84-b7c5-ca40b459ec98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23a218c-a3cd-4f97-b5cf-20f0911343ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2c6b545-1bc8-47b7-991a-8c9e9e22c4a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7017c7ad-b5f8-4f27-b8da-264103ffc565",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c8a9f4-596e-4ebe-84ca-ff180800b319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8bf53cb-6233-4af3-855e-6e2dbf0a1dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8918c32b-db25-4fa1-942d-ae734d82d5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b334290-9e0f-4080-a88f-65a24b21ba36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1970ff0b-820c-4e47-8e9b-6065ae48daa5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a384d8-7b47-41dc-a424-937c7074eb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e668265-09f0-40bf-a75c-9d4113870dfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad87e5fc-dee0-468e-abb0-5ecf6403343a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "472cb5ff-425e-4b0e-b10e-aef2921fcd0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed51de9-276e-4fff-bc8f-dc256e6c3aa5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a77e90-65dd-49a7-935a-97099d5b1ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c716d7-9277-42d8-b2a7-87e77c07cfe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4f5352-e6f1-4647-9789-b0d2f3e51361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe7a1b95-59de-411b-8391-6ec3434364fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c378d8f9-e0b7-4694-af14-63e789f16df0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06450b97-6b28-4839-b4d8-1e88662ea605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28084e9f-7438-47d1-b393-dae9c2142a2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987c785f-8675-4a97-9a2a-7ad559f5cb5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d9d822b-5b99-449c-ab03-df87c2e3b954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd89a899-f9ed-4497-94e9-e60f0eed09bf",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d62cc9-b272-4126-a88e-ed0770b27ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87928378-ab1a-467e-842b-87ac0059c3ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9d07ef-93e2-46c1-84c6-4a24ad3b7494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e23133e6-9dbb-42ac-89e3-c6a886901094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd0ea344-e61d-407d-afaf-046b4ca30e14",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6b3a76-91d2-4e2d-a4b5-2a24f9ea35db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddaf383f-dfa4-4a99-b64d-8568b4cd4646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc12a4ec-971e-4379-b301-756efa979677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e19b2027-2e7e-40ff-bacd-70a8a42943a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eae3e20-f3b9-49d3-af64-720a52320aef",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cfaec0-9231-4707-86ec-072a34898110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4811bf43-170a-4b4f-b7d2-d85a91fcc3fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae91aa5b-2b82-4bef-b56d-b5e991c79bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9509c50-5510-4a48-8d1b-2d7c15366002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57edc18-fb60-45be-8a67-17d192d8f086",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0910a4-298f-4ced-9be3-d271f35bd358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e19f6d-dfc2-4820-9256-2b3ed4be3807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac53d2d-8799-4a5c-be4d-44a3bc31cebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d474b3fd-3f71-4fcb-8735-d3a93ef1d73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3808ee0c-c546-4c43-9cf8-c589b3efb816",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc72d194-e059-4f03-ab13-b58c02be2298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f30569d7-7d51-4f49-81e7-c2e85867b5f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac06ec32-7c26-4cbf-be0a-1af12954b20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2eb96c4-5ebe-4cb0-b012-9ca430fa87a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f7399b-28f2-415d-81ec-4552b5326581",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60371071-fd01-4f0f-9ad7-e2db7a1c7a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c2fe3e1-fa05-46bc-ae7c-bfbf1cfa372c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa9a8b1-ebfe-4726-ae23-02f0ad34b086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b8a4d4c-2e57-4710-96bc-83e177237949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a51ea25-9a0f-45eb-8787-2a1603bf58dc",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cca7a52-dc0f-44c4-be33-2755f9f8073a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eedac5fe-70a3-4a85-bd6a-519b1b427f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb6b0a6-39b8-45c3-86ea-3261235be727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e4d3856-b879-4fae-a908-01b7b02656d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60ccf04-58f8-4ed0-9e55-9ba14fd30dd6",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6126a73b-6ad5-4982-abd8-f0393d5f867d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d323d5e-0a45-4931-8e1e-10b4330612cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c936f323-9def-4de6-b516-258a22343386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f518e5e-8c95-4844-b807-056d502b2851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d49aba0-3a66-4c8e-9cb3-7dde425eceff",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8b003e-053a-4a4d-9b85-5892c5ee9f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ae1f2bd-5c21-4405-8295-92166204401d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69270ad6-0a9b-4760-9fd5-a513cde92ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f14a20-26ea-4736-a394-f89fd79bbea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66eca94-2919-4c8a-a8dd-46a19ae83283",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c3ee88-76d0-4aed-8930-5432195a813b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d4d837c-59b0-4f36-8acd-47299fbc7e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "595c5fe5-79ac-48fd-a4bf-3e0219048bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "834fcf83-375b-40de-9231-692bfc5dd493"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d4a3a4c9-b05f-4c49-b50a-1926e094e67b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de958937-f22d-4255-b677-1167e9f6c673",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e31c856-c767-4faa-86b4-c6fd19552a86",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "563cecce-d8d6-47d2-a863-c18100d80509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "058ff18e-c58b-4be6-be69-72bb8c6ff286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a678eae-af84-4429-b986-457a62c958c8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d45c29e-8f81-4fd5-832a-3eea21c5672e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73b2f675-084c-455f-aa48-3b5e5f9490d9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0871f57b-9603-4dc2-8aa4-0093701e94a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6857a39-ab39-4c83-bd1b-8a374de12c9b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2fcc1ce8-ae6d-4892-9dad-9e67f1974699",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "51734ca2-ac49-4acc-b26f-24c5ecce71e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e2cf3f4-07f8-4449-b8ea-c278f2989b23",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "537681bd-f882-4451-ba7d-a89d6c7d5faf"
            }
          }
        ]
      },
      {
        "id": "98bbb67d-7f9a-43eb-b35c-34974e691f82",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8fce8a2e-4a83-44e1-9758-6338132ff243",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9099da0c-45b5-4e50-b12d-a7c7afc506c7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d8b7421b-9353-4e04-8337-bfb2d7622dfe",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9f9a8c-fef2-43bb-9859-d30c79feb547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6f8f48-3575-4918-b974-f9fe08bbc41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca45bed2-2bf9-467c-a818-55b71aaca3e3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "112fb946-d4e1-4da2-bd64-280e10e10144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f08f1562-0245-418a-99b2-826b501c3879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a8c1c2-65d1-4588-8e8e-fe609598cdaa",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa302014-e816-46fb-b23f-c0074daf27a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d57f0f6-96fc-4401-bedf-e4250d3e6499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c55b7d17-daa7-489c-a37f-c417bca46344",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3994b680-ec61-486c-955d-0f0cd22394ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eb7dc8b-61dd-446b-888f-8a128c91c438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754ca006-b0c6-43f3-9837-caa9ee0eded7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c7036e-7c3c-414c-bcb5-f551fa263b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c60a990b-f393-4014-a330-435b65dc1401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6618fdcc-0250-47e6-bfe3-e8783ea705f9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e16d66-a594-450c-831b-4e350e552d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d17a57fb-c9e6-4796-96d4-caa64c7ad796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573ea41a-721a-4fee-9b79-502b5f549375",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1b1d34-472f-4705-a8ab-d9249ba91938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1db3b25a-9303-42a6-a753-5b18fa5b3977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbe7886-4f8e-4966-9bc6-4ab8ad9427e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "474609d8-5779-476f-9d92-e52b3179edc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5972df-b632-4036-9bdb-de097556d8c9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55eda8e-a872-45ca-97e3-9b478fbe6a4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98272d9a-c204-4f80-ac02-37cc0b98bf0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d634b887-550c-4180-9ea1-44f5e9225535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3648f53-52e8-4797-8c20-c614d875115f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f409dc-8986-42c2-b16d-0317c08200bf",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52120a1e-9a2b-4ee1-9253-be2d88f81f7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98100ebe-4dad-4d61-8d62-d4ba5878fd1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f14a8be-3e72-4945-a086-8d6a1d0f57d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2334ffd-f19b-45d2-a1ed-c27513dedfae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42bf2ac8-a75b-4db5-a74b-ab79a5516b11",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68af96fe-348b-4076-a6c2-e0f04f1a03ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d310737-e89b-4ab0-858b-2eb49297fd12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8819f8-4b5e-4d92-a8d7-9d5359a0b968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d211ff32-0ef1-4709-9a3a-0bd76b0d7220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842dc4cc-2993-426f-ad17-ffd1d04992ea",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4793d766-f64a-4650-8138-2ce85cb4b18f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44f0b37-ccb8-4aaa-a4bb-bf501807fa4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "597fb8c2-c158-436f-adb1-c93548b65935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec2984f4-2d20-4d2e-a4a9-10d2895f476b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e48dcb-c00e-4efb-b626-4c0467fbdf95",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c214b3a7-a162-4b7b-942e-6db13ff41375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "037ec69d-a97c-4c9c-b7db-9a2dcdfd1b8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5497f1ee-7dab-46df-99b6-7da6e8f31987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33174814-2658-4700-b5b1-8c5f8b1991a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c066da-e400-46d1-8646-4057d3e82469",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8de5e5-ac26-44e4-a954-ee2eb96435b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23026bd9-c527-4e6f-80b9-3ead4a3a7f69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec897613-a2fe-4e2c-979a-47088432abee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ad705eb-cb45-4130-8461-532d5b03ee2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3462b98d-f93c-4a07-89d6-67d0839b6905",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e502596-d230-4d5c-be19-c950604e6d8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8039df85-d745-483d-8ff4-9a9464413402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbd1a37-9276-4238-9917-41caf2fac602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db32a50-603f-41d3-9632-71b203cef42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801795b7-4159-4fb5-aeef-532c6bed9edf",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83c4242-0ded-45cd-9b32-4ce4e3c7ff77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1f1822a-6d03-4fbb-88be-ddcd4af6fde4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07adc359-c5c8-4aa7-900e-700b475aa8d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d131ae71-89b7-4e43-88ab-f09b73a2aeb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ff477b-e53b-41a3-a098-90db0a274dfb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c8e50b-6dd6-4316-b8ac-dff91154fc2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26bb4754-5f73-4eef-b392-a2bbfa95e509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "760e741e-3586-47eb-9f16-24861cb7ce0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a98768-d6e7-4586-ac8c-2cd90fadcbe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacf02fe-2793-4109-b3f3-cf34ff6e59e0",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1e33ec-5bc4-4455-87e7-30b02881b0d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "498d039b-4213-4799-8ddb-cc09999423d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27517cb8-31f0-46ed-b953-0c200b608b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e8efd2-2de4-48c5-940d-a818027bb0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2a53f7-4330-44a7-b6e3-8229f9376c3c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28fb0ba4-e1ca-4eb7-a1e1-4c6cb6ad422d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "389ba113-6505-437f-a032-6b90e21a176f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a3229d-a2c5-49b6-be85-cf06f6c163e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e435aa63-9963-4638-9b41-719f2b170d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c945114-9ab7-4b10-842e-f7c8bbfee9d6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1ac4c0-85a5-4b66-957d-f4708fc73f9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4172984-be21-4717-a701-56161ee3c423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d439435a-9050-4a55-a6d7-7b32cd96ba56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8970a3f-0cc1-43f2-bdf1-8d8bc7ea052e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8160e0fd-8bef-4288-87bf-e42aa3b79949",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db53443-d4a8-4dbf-82ea-b7df557624ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692ef90e-fe1f-48c9-bdf4-4a6e2e6c68b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9680502-b2e8-4285-af53-9e0d96bc32c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954b604d-6237-4f4c-85fc-df5a989a571a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389e6874-7783-4cc5-98c4-f6feb44efca5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d77a1c0-79f5-45ef-8921-461159265043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b129b04-f65a-4492-846c-ed5cc45e0198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "330a7823-9a00-4adf-ab35-96e91c3ebded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b36b0028-121c-4f32-8760-f633aa39b670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80ed3b2-d0c4-4d46-b9b1-1f608c498586",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86644cc4-57dc-4055-9f24-37831991d4b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e63534da-98e0-4c76-9f5d-097c4bb29143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d7cd57-211a-4b46-98c3-d24f0ae40156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8cdf576-2db8-4e5f-8e11-f51a3fe6a9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb32a8fa-33fb-44ca-aa97-383facdd544b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84730076-65e8-4623-afb9-f1a6c3c0f576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "263a44f6-0109-4b5d-8f57-e3073114a9d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e650a60-2a02-4738-8cb8-78aa8aea59da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "870c7683-21ab-4e1d-9380-05687783f1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb1346b-1478-47fd-bbec-29c908bcfa42",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1a8330-0aca-434d-b3b5-bc5aea3ed7fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "220001d9-a40c-4ed7-8fa0-b92f405e5b8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef63504e-1102-4494-93f4-9d42d2af51ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba89fe7-0848-47c8-a063-4c814c347711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf828b2-964f-4b73-84b3-2987a00313db",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5b1a1c-2abf-4c26-b63d-f6ddf5169ffd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f2c5318-9f90-4253-ad94-777b0406105d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c341afe0-0c0d-4c8c-a8a4-5211e38876c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd4d4f84-fd1a-4e8d-93be-21a3d7bed207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d4b3a1-29f9-42e7-a45e-25ab57e385ad",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb80e109-0681-4928-8438-f2354362c032",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "792b03c2-9eca-4eae-97ee-e6e17cc9f75a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6096e5b4-2751-400d-8600-2e288f9ddf4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47667040-245e-48ae-b318-d2f6821662fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b166d0a-ef0d-4be0-aecb-2cd081bac13e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a309fc8-56df-47fd-823f-c82389779bcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed1ef211-70d3-4c73-a103-83226c507edf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57af7b65-1854-4d4a-9a84-5235b7b20554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faa54587-a949-49d8-b7f5-6e09dc2b6c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bca8c59-97e1-4cca-b9e9-5232b07121bf",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12791a86-7812-4c9f-b9b2-9e39d387afbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20cea352-ed0b-46bd-adf3-972918a964d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57da2a15-918b-4004-be6d-2a7dce612bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2061893-5938-4e4e-b85b-dab5d007d1f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387269f3-fde3-4e53-964c-aa5924975270",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe431ca-e7a7-4108-8ad7-486be2ffae93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e6a7bfe-af15-476d-9ad0-62fa6bd6b80b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7f3d81-4fb0-42ea-a11a-5983609fe279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d224f85-8737-47d6-af74-8dd072e46cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf8faf1-279a-4385-a2e7-1e7afb7a9007",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5775d8df-a6c5-4503-8774-ad98ba86b88b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7147a140-0d71-43fb-bd5b-d675726ec67a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84125a9-3c55-4900-bf52-db74f4adf087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b33c2443-1922-4b92-bd25-2bda5d51922f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12af333-460b-40ef-8577-a5fbf95170f0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ca6614-4255-479e-bbb8-d60acc4d0563",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b2bcc6a-f261-44a2-9676-c7e71b933c16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f0336a-e03e-449a-a2b6-a320259eb53a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "206bbe16-875f-48ab-942c-6a689c72e249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9103669a-197f-489f-98bc-845c0803ff29",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827b4432-b996-4886-b27b-275ad0389947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e8650c1-c4eb-45de-a07d-fa843013f832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "543d90e0-848a-48cf-b2c0-91d482f67ece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443ad976-52d5-4cae-9a2b-835e74b2b63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147cb96b-c1b7-4c78-a2a3-b911840abf3a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea3927e-b644-4228-ad69-f5793db516bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4ac4b98-3e6c-4ee4-8f56-5bdcbcbcd00e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2707feff-cd8f-4a73-9c60-9e9ba31e088c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ae627bf-37e4-4efa-b7e2-75d54d7b6601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f17b5b-3473-43c5-9322-8502b2bbe2c9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46b77d2-5055-484e-9b97-7e6ba3d95359",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9e1ae9b-b368-4527-b433-241f110f9251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1992ab24-bcbd-4a84-b1ba-0c13280c4e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81a79cb8-0bb5-4bab-ba82-4e482bb75970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb7cf62-340a-4047-9588-d937af3bd059",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e66d52-121a-4e04-8885-ed938472466c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5130054c-1b98-403e-a4a7-62775ad35ac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11f2691-8d6d-4195-aa6d-22fa629bde5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d865910-2a50-4c06-9c7f-cecba912a19b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac890619-53ef-4c5d-af76-15de8eb0e40f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1debac-42a2-4486-9c73-ae85739db9be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3932152-3f6e-4413-8d40-55600013cf96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbd4c74-237f-4d79-bfb1-5a8212ecded2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d74e621-4746-4cae-9801-ca01281faad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51321f6b-53c1-4c6e-81fe-38f2ff76327e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bedc4fa-2be4-4018-aaee-13245eb8bd87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1cbb589-a612-4621-8c89-568c27e88721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acac3b8f-bd53-40fe-aa85-c854f4ac4184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efd4967c-07b7-4368-9140-7b29908c02ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb22f4c0-e405-4c17-937d-c5330bb0531d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1358094-b5b2-4c32-be80-decccee41617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a2875f-8f43-45eb-9c48-d7f7189c1fb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91f3460-c93e-4133-bf68-51d830d3c253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c635f70-2123-4d31-8dfc-a7ddffb2a644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1edc8b5a-4581-4e37-8fd1-15cecf871a17",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a083b1b-9bc9-4c15-82e8-1f79910cb72a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af65338-1d31-4441-97e1-2b03b42e1616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61e796f-d136-47ba-b2b2-8a9be118e355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e8cae2-f88f-4407-ac52-2c7b57875f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdeb3cee-9e42-403a-b87c-defb882790ff",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882ffd47-e8fe-49d3-960a-0cb5b7ffac05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d827a1e1-4743-4f02-a61d-bed0ead3d880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f896ac-ac87-45ed-8387-9ede09c8d2df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a455caf-bd19-4120-add8-09a7b1b9cadf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb315110-7fb1-491b-a80b-204eb3e0490d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11bdf095-43b3-46de-8d98-0a8ed356ef4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e109fdb-e542-476a-8079-2c203ac51077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e1b8e4-66e1-47fa-848a-e2f9bb1fc269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac649cf-b387-4fe9-8b0e-d08e744042d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d12aaf-f3eb-4dc3-9594-b642a7351273",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff11753b-74f4-414d-a013-9765baae8de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf9b1ef-67d8-485d-806f-99ea4f46ac42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc12ba2d-6a96-4590-b047-6ae2214c9c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d47dbf-cacc-440c-8359-81a1f7c11dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae7a033-feb8-41a3-855b-da75ff93f56d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813b8c91-ec35-4a6e-b370-11bb8a07a79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9335bcf0-00bd-4b84-8842-1bb76383400a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f3da48-b9cc-4ddf-b1d2-ba9999f09a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3631aa47-9057-4110-be9d-9cd1f7a2ecd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e683f1c-0c02-48df-b7af-d45b6f6d6b7c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a867ef-d753-4d97-870a-6d9b9f2df107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8239a53-432a-4a86-b7c5-e702c59af40b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de9be09-bff3-4d30-b6b8-adf2275e6956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb42f2ef-8c11-4757-be0e-9d120526ca5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857cdc0c-a043-4024-ab22-899e1813b805",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401438e6-f302-4754-84fa-dacf1cb750df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e09ad5d5-799e-409e-8dcb-8d6a9ab7441a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de110f1-c249-4b38-ad9c-16dfe1922be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e72a19f3-ca74-4b3d-92df-cb55312b6030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81b02d7-b7c9-4390-9e4d-8ff86f8aed62",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6aa4fdc-0878-448b-ae3c-4f935a26591a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "219b6570-3cd6-4f5c-b116-43d435e99bca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3b772a-e548-49d1-b38a-8443593579bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a9527c-023e-48b7-82af-4fcea4b0620d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48045590-a99f-40b5-9c41-5cb940d3d64d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea37c650-053f-4ad8-b643-51364ff0f749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29047024-e92c-44c8-ba09-a9799bbe1b5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75730426-b279-4743-a364-b1ddd7a19520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c904fc2b-1edc-4bca-a5b5-739bf359e7f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c252cd5c-3cee-4067-86d8-cb1bf853fc3d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7decf94-2e6a-4af5-bab8-48f0a0d80838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72dd225-21ef-4f20-b035-d6c08c694ae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4135f898-7afc-4eb4-8886-821de697ce1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb20ee2-9508-41b8-a7a3-065d58c14d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a577b5f-c68f-4f61-8e16-7cfb369fe8b0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef6ee49-d270-4039-9ab7-55edec8e9ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "787fc4f7-485a-4d4a-88d5-2d7891e40ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0186806d-b445-4619-9de9-047847b1f933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7c9ed30-95d4-4ab7-8aeb-17990e6ca703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749dadd9-6b62-463a-bc4d-86cc6d06fe95",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d53939-b06a-472f-9bd0-209f294b7fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d4d484-9d01-46d1-abc4-fb5f6568788d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2591bb07-6414-41cd-9c15-a1ea5556bf28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb355707-8d57-4d28-bcb0-44cc38bd34a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29495d3-e04f-41dc-b6de-29705b144eb3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8d9a4b-54c3-4713-9192-e99f6c64d0b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa4ebca-94ef-419f-be6e-3ec2299174fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea4b463-9e6e-49bd-93da-f57174614a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c51b7cb-404b-4ef2-ba6e-25bc7a46db04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4647777-6fef-491c-ad28-4afac3e7b739",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164a6e5e-d7a6-4b4a-b92f-109fac72f214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e8925b-97ce-40df-9f9b-d11490594874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ca0c85-aa18-4693-91e0-e85711355333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e32267-e489-4763-8952-8eee55f1d9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c43da8-ab8a-4101-9a05-f8cec4b5c925",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea52dcf-9f68-449e-bcf9-e09dab102e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee85b27-1a49-4ae6-a884-2f24a0312ff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "295fb4c5-6170-417c-bd6d-fcaa0feba0a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5dbba04-5ade-49e3-9585-e17ca604f031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b127102-be02-4430-827f-bd9da1925492",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad39fc6e-5f40-4b9d-b061-cb95e3a11382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7baa32-f740-445e-833f-47a89100e8f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed22f8d3-30d6-483e-a869-5e3b15a22ead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "868ea7c4-2446-42b1-b83b-44a32e35810e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5745752-f372-44f3-acae-cb08554fd54e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c844be-bbe7-42d5-8c3d-252aacad6ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc9971ff-fa2d-403e-8ec8-29a5982853ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880345e9-5aa1-4670-8cd9-f490fdfe5762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1db5bf2-30da-4b2f-85fa-dd70571129a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7bd035-976e-41cd-870d-707a15e0fa12",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a41d87-0616-44af-81c2-fab1d280af87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee0a44c8-5683-4311-a3f0-3beac0e78a3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc63c7a-013c-4fb4-a3a2-af82d8717ae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2293683c-0819-49b7-825a-62d1e134e9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e79b73-f8b9-40f7-9826-4e3e39443b3e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e9735a-f34e-47a4-9993-c7756cf41754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ca6d9f-04db-4391-8f1c-6c590cc552da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33050283-3a17-4126-8fe6-0e916c2b6b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc4a817c-b07c-4ed1-b398-052c978cc6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5cd586-885a-4306-9454-302f2930d299",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94277cc9-806b-4972-8b98-1d6798c5c961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "017a4632-406e-4f95-803a-3cbd73d1c1d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a9891b-82cb-4795-ba72-5c5119a595b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f220e5-6184-402c-895b-9c69232ef639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0f592b-dff6-44a8-b1c4-51fe94ee6fc3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f6be94-f87b-46c2-b41a-7477c5e61005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0227f955-ddd5-4235-ba32-2c30365baeb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3140ad33-ef8d-4571-bdd8-cdf3f7ab1fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd76bea4-0409-4c7b-8ac8-443452ee7e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113e5ef9-3ae8-4f20-8a3f-a73d0dab2abb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0fe880-2252-4718-904e-8575bfc6efc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc52129-e009-4cf0-bc63-80c34b3569bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb82a7fc-6001-440b-80a9-4b78b72f419c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f5bac7a-5f61-4d7f-aaed-76f936a8b344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4912cda0-696c-4f54-80aa-89b846c00eb1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985c151b-a21d-4941-8a2d-145f04126c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c693252d-68d8-40fe-b2bf-a5de6d0b2234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb356b6-23c8-4261-9454-83dd36d66eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2099976c-c5ef-4c87-a41f-36f43d5f8ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26962e2-ea60-48ca-a646-06e1b3342c57",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e363ac77-7719-4523-a077-652634179991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b64de760-5e89-48da-bd79-7e99a85852db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a8a68a-ad8f-4ed9-bcee-ae2a4a52f06f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8753fdf0-b131-45bb-ae3c-19f75945f273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08075ffe-c86d-440b-9994-ff5608a7546a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4578a77d-b198-4c49-a617-cc3505a4f31b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837ac0be-4649-445a-bab2-c39e16db8033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85932126-4bde-4cee-96f7-e38bff8480e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdae7698-c6d1-4163-9b16-0b3312c9ee59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c825f4f-5862-48f6-a68e-77b4e8dd63ff",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e3f5cd-b91a-4941-9d86-aa28626eee1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24ff1c78-2ba5-4f1d-aa98-b5d6598dd53d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60c9ef1-9147-4e7e-8ac4-83c11908385a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0a179b-68b4-4917-b96c-f9ff5996a3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0b0a2a-0a35-4a49-90f9-04c9381dabab",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a512439f-a526-49f8-bcd9-4ffdd61da6f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf4180f4-4f1a-4671-a5ab-e543d1dba7bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "338e64f4-36ea-4668-b8e0-ceb8664029ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a97dc48-f262-4fc6-b794-8c519e07c9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152a8860-7b0e-47c0-add4-e799cff2c13e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b49f9c-248d-44fe-baf1-b2dd5529415d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "830fe870-56db-4e85-93a4-130fcb5458ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0646bd9-74d5-4bbc-9292-48c50cc9937b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7772e9cb-9d49-4d25-96b1-1c338be053fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86b6593-8acb-40cf-a0df-ab4b0d0ca37c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9163740-9fad-49df-86b5-2c1bc847c5d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d6a5efe-ac2d-4011-8b31-d6e8d0a6d275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1a63e8-9e80-44ce-84e2-7ab7c8f1f085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d82dd59-247d-4e6f-9f62-1427517ccbe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d12fad5-e87b-45b1-a70c-171903fffc5f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf55132-7389-4050-b024-867cf98453aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12d8399a-7865-40a7-90cd-9f66d389cd04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6677d310-e2b0-49e5-857b-8c222c5379cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba540e08-3f16-44ac-abe0-6c26c60db2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a469dec-3b86-489a-9e5c-8bb1fe31616b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1a0f56-f3b5-4b3d-abde-c29126c058e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02e3a497-bbd5-4e5a-8a6c-f96933c8da06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "427fa770-5643-4bf1-8b2b-66ad39757a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b28dc215-450f-4175-b176-1fb3e2ecb713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4009de03-a83e-499b-bf89-26d47f8e4f5f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc87aa0-2be9-4330-ba9b-7c8f8b11be8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d01b5c6-0b8f-4401-bef7-6d4fc5aa628e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7960bf7c-b4fb-4d1b-a8e1-cf6133400fcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c1cc0d-4dfe-4ed4-99e7-2d0bdc316fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1762bba7-cb82-4a32-ae3b-9e48a083fed5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026cf52d-ac14-47e6-a35c-4ed09b125e0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d23041fa-e3bc-4e4b-87b2-8e112dba3231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f462c147-c459-4427-8d2b-ed59167ac4b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4689aefe-e0f5-4d89-ad89-bbfd5b17967d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d647921e-fc2f-4fb7-a398-d999735b3905",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead90ff4-330f-4125-9428-be10e10432b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1be604cc-e196-4695-9a81-ba09b22c5d38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd1f35f-d78f-4d86-afe1-b85e7fd78269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e141257-aa0c-4ea7-aa11-062ae0b3c327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0fc0ce-0adb-47e2-9374-c8c4f1a65824",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ec5b50-0842-42e7-8b02-35b002a01139",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cffc7b33-f595-4867-a457-932696916b0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf68f69-6126-4fd1-8396-264a8536e797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6906b115-f031-4a42-9099-d1cbda2672cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db36b19d-d9cb-4161-a839-f948ae87bf7d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472bebff-be6e-4c27-ad89-9f0dd7a2ebd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03890ff5-890b-44a0-aee6-09c43115fff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19874f2-25c5-4b6b-97c0-87055c27a996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87fb7cd6-079d-4812-bb4d-bcce21b8d811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265b58d2-0e31-4b1c-a8f6-f230eb3b2f41",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007f0edf-2d99-40f8-a65f-a27051a92f4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "271b6d26-efd4-46bc-960a-65b718c24f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae8e2c6-1861-434d-ac77-88ebc606beb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07e5d8c-7f49-4b3b-a2e2-66ebd1f67ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d31eb2-eba8-434f-885c-e0746795ae7d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c464ea5-0ae6-42a1-9fbd-94c51f62282a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c3abed8-d00b-4543-906b-78548c1bee2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49edacd8-2108-4c19-a829-f202bb3e705a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "138151d8-f2bc-40f9-a905-f64615227f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57d4414-c697-41fb-ac16-bc43a4553612",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b489d161-b9d8-4ec8-a756-cf18361d9fa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "504ad06f-e109-478c-94da-5ee7ad21f8f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8496e3b-0422-4b07-98cb-71d05d1f4b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881610c5-4eb2-4af0-94cf-b81351722a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36febf10-43ff-4656-bc73-1b287c0710d0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35a353e-e1e4-4b73-814f-07a1ae57ade7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9272258-692d-4e73-b48a-376b1e6580c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ebf133f-a247-4382-9cd9-9293b2a26174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "919fe560-fd66-4ef9-9738-90355b5c0e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ff3c69-aad5-43a9-9ade-3810d2e0255a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60aa3e9d-5329-413e-9b99-d857ba1effb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4920931-b5f3-4b89-aab7-557bde10eb10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9905f7c-c851-405a-a521-838dc7f46c90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de2bc4d4-7ed5-434e-b2d8-867ea5428f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4717a6-f077-46d3-99e1-e3df8fd6fe17",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e6903f-948c-4c7d-b50d-d7c7d0df0f30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f577551a-728b-4d2e-ab1b-e5a650a1a874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ef95e9-7f91-4064-9bab-e28f02aa211a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b02d73fa-9406-4651-b49e-3c0b8ce21a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c262b1e-80cb-4ece-b3f9-ecc80f6d5aa1",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c937e7b-589c-4f06-bfe9-4b6419a13319",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90b31c14-fbd5-4e99-89b2-dc73fb47a6cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c5fb18-9b84-4754-bced-c01044423971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c9fc7e4-3513-41e5-ae32-a104f1729d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04457628-7c32-4a86-8b81-d17dc7350326",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bff8368-873d-4724-9fa7-81ad266aa8fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8064d56-c873-4ec0-9095-9bb68ae66319"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4187b8e-cd06-402c-a4f5-8327a93f41f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0624215a-c038-4e29-9971-de3f40d2cc82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62810efe-96e6-4a5e-8458-874f9d3d7318",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2494333c-0d03-4695-b15e-42942d34034c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "519bb89f-a02e-4ac0-9e24-dea074da7f39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaba609d-c4a8-4aaf-bf4c-566ae8512c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5883f448-8f35-4756-85b8-0281d97d7886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba42afa6-42fd-43a8-9f99-b7ba12d6e2db",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e352d2ed-b969-4a3d-b984-e4b9fe12a222",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34b1c090-54bc-4c20-b455-b2f6c20a67a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90944364-a107-4baf-81d1-df8ddf5d9e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07855101-9a9b-4df0-b5b5-466408c2c831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d269194f-7b49-49e8-a5a1-9d920e3faea5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b2ffae-c194-4444-be97-d6452f0106cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "289e49f3-3386-4a3b-a462-9e0b9355a33d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f327126f-8bf1-4f4b-a699-e41cd29c6a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "677a1935-b4a3-4a31-af31-f74e6a205cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59caf87a-8c28-49f1-aa29-d6b521e7b0bb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b5524f-161f-4f70-936c-7f6e7e5b00d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45c78dab-f83c-4f82-93c0-2662a90a2bae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "776e09c9-a936-4f66-886e-a4d9a25cfa47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244e002b-aa48-42e6-9223-2d759981f3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850aadc5-86d2-47c0-81de-42f425ae04d8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114aaed4-5374-415c-983d-45e970079ebd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebd7d8b2-6925-4e0e-a871-1d6ef4b5f799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca163661-849d-4173-bf74-4d01a781f9d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8a9976e-2d8e-44ae-8cb8-7ac1baaca85d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a558a448-627f-4f1e-91ff-02085be1abf3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b1ee9b-1c70-4183-b67c-5b64568a4b91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75e4aaba-c977-4fbf-9a39-31ae18bfc0c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06758cec-8169-4fdd-a56f-e9f59343258d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4112ce1-f2a7-4d2b-8d80-bde03f887f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e554bd88-398c-4d35-83e4-fd7b9c9c1848",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34f067a-0493-4e83-a45a-7ac8f0a9ad94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bd76c1a-b340-4efa-bac1-f63451507009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0167bb89-3e64-4618-9ee0-92e62d31d5d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71bbe8e1-463b-4f79-a8eb-174025a629dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4393e46-848a-4003-9589-7f1495470b3a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970a9ae5-f531-4dca-b805-1012e4c3414b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b052fd9f-7ad1-4714-801b-3893d5f5ea5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8a72bd-dd85-4ea3-bb2b-f511499b5c91",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "655f851d-88bc-471a-9bf9-ddd65d620f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98cdb641-aeb8-4187-bf26-2527e75692c8",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7828c566-a9c6-4574-ae52-aaf19369fbf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cdc7802-e5ee-487c-8c95-9631505e80df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89571b71-f1e4-40dd-9d7f-52df4a66792d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98ede4cf-6057-46fd-8473-aafa1bcbe4ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329a3ee1-7b05-412a-bd6a-e9eaa3745787",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94c022c-359d-41e5-8430-81ea4f6d492e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb225efc-8505-44b7-ae7a-92db1b117c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88eee1c8-9c20-4963-b7f1-c4f980d4920d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93756fa-de20-4ada-9a08-ab7406299382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb63e57-4748-43f7-a8eb-140926c4dc5b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed565872-ad29-427d-9be6-000983ef4638",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "206cc962-58d7-4094-95f4-04eb7c8744f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9ad679-cea0-4a94-9a94-9e567734e150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edcefc8c-7184-4b62-9df8-d4d7f71b3ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ba7c63-adec-43da-8292-6af0f290d4f6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbc700e-a2d5-4662-b891-48abf94a271c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ac657fa-a338-468c-946c-6af3a307e7a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e069b0-3cc0-4eb9-b8d9-9c4f1617d05c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487e5649-32a7-408e-9a78-9eb052bb36f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14091c2d-6260-4b7c-840a-9538f34104f2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3542ff73-660b-408e-a6f9-33d04b1fc84c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a32d3e6d-9803-4c9f-b5ba-5c85f8ab80fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5551a6-2397-4aca-aba6-d18642eab786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c85dff-b375-4486-9be4-72cd398a24de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24a0cf7-8da9-43ae-ae01-fc4f758dbd7e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef32abf-58fc-493b-8ea2-060d841d83d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "605ba243-9130-4637-a9c4-0c961843aeea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2644c362-b79d-4d04-a1ba-3ef65340177b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3280252-eae6-4375-8eb8-d86c66154a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5b0c10-d721-409c-876e-9ae7e0110107",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2e1d48-5b60-46f7-9c44-97908037558b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "679b4980-578f-4ca1-aa37-336a7ee039bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3786cba-bc09-40af-9651-2da5dec6e7ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ecb0c7-3b63-445f-8d1b-f80c94a78d5d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24759202-5342-44bc-9245-82a43d92b00c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8302f985-ab1f-4550-b1cf-664039791e70"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d36c0b2a-e85f-4126-8258-dc2f92cd4be7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "67ff8b48-140e-4435-a285-4d7fe9af1f9f"
                    }
                  }
                ]
              },
              {
                "id": "c0716a2c-a0f5-4a47-b9c2-31bc5f30c6ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1369c1cc-22a1-41cd-9017-519c2ee8e794",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eae723d-67d7-40ee-97ae-fffa88415767",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a0734c21-cbc8-4f30-aa49-ce4594e126b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa27811-11d1-462c-905c-5e5d76352219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b5d1fd7-fd48-44f1-8c89-c5d789a119c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91956793-158b-4310-9f56-699081cf184a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a82ce04f-e663-40d0-b623-40bbf57deeee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bbb1840-1ef1-439b-9bd8-ee2437f9e1bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2cd6d3c-5962-4422-a93d-16de94392e4c"
                    }
                  }
                ]
              },
              {
                "id": "660b4d48-db74-4f2a-9a46-2af2e9f68bbc",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d1f2ad26-35e1-4bcb-89d5-f024c02a0a9f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3aa0e79-32d4-4e41-9df3-22d8b3f14d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "27764f4f-9b17-456d-9338-029589952182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfebb51-0fa0-4057-8aaf-0f6695952cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d793f734-0f69-45f9-af97-4213957e28a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "da8dda7d-a0c7-41e1-872d-4d7be9a1c344",
            "name": "Positive Testing",
            "item": [
              {
                "id": "63965b9d-ad47-4cd0-bb67-0607cc324466",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efc4e651-337d-4170-b109-207d87af0d2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "73a61afb-e045-44de-aaeb-88942ffc1c8a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b3ec0fd-005e-45f0-9769-14bfe1761ed4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28f9593b-fde1-472c-960e-039dd16756cf"
                    }
                  }
                ]
              },
              {
                "id": "389ccf5c-4de8-423c-9b4b-8263ac717d35",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c843e784-85ad-4d9a-8c26-b5aa32c48631",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "40aa66b0-9e27-4ee8-b8ca-9bb4028b3b66"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "617e14d8-98d7-4ac9-bb44-8ef28d223180",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a90cc8bb-2f44-4a9f-a850-527e7542e9bb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d73def36-fc85-4e38-8f1d-b40a8ae8af61",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "70144755-a24c-4536-bd26-0fdecd6d89a2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e50f1ed-43e6-499a-827c-d0cafc460784",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "751e3d73-2b46-434d-b01a-341f59c646a8"
            }
          }
        ]
      },
      {
        "id": "2798924c-143f-4459-a9b4-e8e4d88218f9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b6addc3f-51e8-4e8b-8f46-fb58d8da0214",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9bd34c46-8f73-46f6-8891-4d60999aac31",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c54c7bbf-4c9a-4a15-b3fc-5397463af496",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07407d60-e1f3-45a7-850f-ea952f993a67",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5bed840b-104b-4690-b4f4-2cc27620a814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7223265-5486-4201-90c1-bee5db9184ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a7c4019-0c65-4e7a-8522-7f0a18e26fd8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5d098ca-e779-4ca3-ad14-f3cfa798a2fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1ef0403-ef82-405f-981e-fcd113d62c63"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "569d479b-52f9-4021-b072-b9b0c16a9980",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "524c2dbf-ced4-417b-97de-2a2e1a0cb8c5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0fefbaff-482f-479f-a259-164348b2fddf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d0f892b3-fc97-41b8-b0d5-3fee024aea0b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "686e0e21-9ce4-4af3-85fd-fa9b7fba98a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5ae3551-c740-4189-91ed-983da2f274e8"
            }
          }
        ]
      },
      {
        "id": "e9926de7-ca53-4cf4-a9f1-75f6cc5290b0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "844673ae-e46d-46b2-a4af-33628d9d849a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0dfd8e42-bec2-43a1-b832-4d5101281c3d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "01a4c60b-b5c3-4cd6-9b83-e32db7993055",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b633e87-8ba0-41d2-9a4c-2adb1b6ddbde",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f26260c1-6bc3-468a-8614-a0a6be96ffd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "321c1318-35fb-4dca-8c16-f7084f563ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2104f97c-73f8-4f2c-8bdd-8a34d4884986"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f662c81-f17b-4cf7-ba1f-690ba9f8548c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd723d30-a41e-45c8-b127-34b076d923c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e346b60-669c-477f-9b5d-2d77498975ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34d5f931-f618-4dc5-bc54-042b33861529"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2d84c39e-fc81-4533-9b34-d2d050e093d8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "64f56d88-c55f-492a-add5-f071b07c5ec4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7167bb58-2232-4590-846b-a213c0146d5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c7fa477f-cc74-43db-b5cd-9721b6af10c8"
            }
          }
        ]
      },
      {
        "id": "d9a25f30-a1e7-4f84-b109-1d2b1c0c5a05",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7a945d32-211a-45b0-a041-58ab876795a9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e3eb7174-77e1-4aba-aa23-e367e71b7deb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee8092f7-e778-4251-9fb9-80d73a558772",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8113fad-dbb8-42e7-a974-90aaa5a4049b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29b24297-a0bd-477b-8afd-030150b5fe57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98958e61-347d-4cb7-8f3a-48060e53ea8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b9b976f-e615-4ab8-969b-19fc50d32ca9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d8a97b3-48fa-4ee8-bd00-d7368b7a4924",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39907a12-fe7e-43c8-a670-607e629dc09e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5dc18b85-02fc-4eba-ba21-e434a4a2fd44",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4906d85-76a7-4a1e-9db7-f0cb80b99cb5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c178a968-2de2-43e9-ad79-a984f035c794",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4b672201-b25a-4ccb-9d02-7e514b91119a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec5bd6fe-6dff-4f98-b667-9be55a77e0df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19c374cf-d7e7-41a5-b6f5-4225cdff9e90"
            }
          }
        ]
      },
      {
        "id": "12589a21-139e-4791-9683-2764a06d9fe8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3970e827-1cfb-44a6-b7b4-9dd21a11ac2e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3979bafd-ec09-4110-896e-5a0f140bdad9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d349ef52-fd8f-45f9-a1b4-0edaadabd35d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa7c8e7c-d109-4e91-9b6f-9bb014470025",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6eb7323b-79ab-4e03-a3d7-eaaa13deb42a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 115.62105263157895,
      "responseMin": 5,
      "responseMax": 796,
      "responseSd": 77.30507061475083,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1705624610295,
      "completed": 1705624652729
    },
    "executions": [
      {
        "id": "51fb9511-50cb-4c69-bd20-6e049ad28cba",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "faa0dd57-6343-495e-b219-4958323f930e",
          "httpRequestId": "86030877-7bd0-44d5-979c-f2d7b4f3e391"
        },
        "item": {
          "id": "51fb9511-50cb-4c69-bd20-6e049ad28cba",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "642e967c-b157-4993-a4fb-72a615b5219a",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 0
        }
      },
      {
        "id": "cf7ed5e1-eb69-4619-b586-181b88094e4f",
        "cursor": {
          "ref": "7108ea8b-006a-4211-a1d5-5bc7a8b35c07",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "69d3ba57-fe4e-4a7a-b483-b642e4cf2e36"
        },
        "item": {
          "id": "cf7ed5e1-eb69-4619-b586-181b88094e4f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "133c7164-059e-43fd-8f17-516c7de207d2",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "4456f2fe-dda0-4a4d-ad63-7a9f8230f646",
        "cursor": {
          "ref": "71ca7290-ef2c-4446-8315-5adacaa58aac",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "affe218c-8025-4bce-8470-8e54b75d71d5"
        },
        "item": {
          "id": "4456f2fe-dda0-4a4d-ad63-7a9f8230f646",
          "name": "did_json"
        },
        "response": {
          "id": "462a3ed8-b456-4b7b-9077-cb2d9e3cf7c4",
          "status": "OK",
          "code": 200,
          "responseTime": 531,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b74482c-3845-4ed3-a831-f9e34c728095",
        "cursor": {
          "ref": "5b03799d-a352-497b-808b-9ab964e521c8",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "583462ab-3dcf-40db-8ed8-f3c3f28db7b9"
        },
        "item": {
          "id": "4b74482c-3845-4ed3-a831-f9e34c728095",
          "name": "did:invalid"
        },
        "response": {
          "id": "28f71e5a-5628-4863-90d0-45cc73ba88c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b74482c-3845-4ed3-a831-f9e34c728095",
        "cursor": {
          "ref": "5b03799d-a352-497b-808b-9ab964e521c8",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "583462ab-3dcf-40db-8ed8-f3c3f28db7b9"
        },
        "item": {
          "id": "4b74482c-3845-4ed3-a831-f9e34c728095",
          "name": "did:invalid"
        },
        "response": {
          "id": "28f71e5a-5628-4863-90d0-45cc73ba88c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea9c53f-b926-4f23-a567-5c0adda15bc2",
        "cursor": {
          "ref": "9b6829b1-ccd3-44eb-969f-dea53d0a3552",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b957c0fc-9883-4d84-858a-f5d604c52944"
        },
        "item": {
          "id": "7ea9c53f-b926-4f23-a567-5c0adda15bc2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "26291cc6-7fd8-46e4-ab15-61ff063a6fb0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 150,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e218a6-db93-4ed2-ad5b-b1d4eab5e871",
        "cursor": {
          "ref": "6ac6e91e-2ea9-48f9-9fcf-4ccd442a13b2",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "65076215-5f98-4548-bb24-6e066d5fd225"
        },
        "item": {
          "id": "70e218a6-db93-4ed2-ad5b-b1d4eab5e871",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "48022bfa-b12d-412c-9a02-fdce01056dfd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 91,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2380499-e05b-459b-8e70-d535a32974e6",
        "cursor": {
          "ref": "996d0fad-bd40-480e-b644-c4d33457e37e",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f6859bc3-ae4b-4ba8-955c-84154d5f75e2"
        },
        "item": {
          "id": "c2380499-e05b-459b-8e70-d535a32974e6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cff24311-e776-4d67-8f0f-4fbfd28a74dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43953aa1-4070-4f20-bcc7-dee2eb59a674",
        "cursor": {
          "ref": "185b4e4d-8224-484c-8472-e96662128e2d",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2b904bed-f90a-4afb-8a49-1dbe3a483a31"
        },
        "item": {
          "id": "43953aa1-4070-4f20-bcc7-dee2eb59a674",
          "name": "identifiers"
        },
        "response": {
          "id": "dcb826af-b27b-4196-a27c-0db880e7ce32",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1491a5-c736-4cdb-b80d-f68724f271ae",
        "cursor": {
          "ref": "217a9b00-9145-45e2-8b19-7c31fa64d2a1",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "956e38e0-603b-4069-a032-04e891051765"
        },
        "item": {
          "id": "1a1491a5-c736-4cdb-b80d-f68724f271ae",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "335b8696-3aa7-490b-81b9-c8960b9d71b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4226e6ae-9f4a-4e73-910f-13d945fad21f",
        "cursor": {
          "ref": "d50a5e3f-298f-414e-bd58-93cd29c0361a",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ed694711-de67-4d59-995f-aff3f9bb4e7e"
        },
        "item": {
          "id": "4226e6ae-9f4a-4e73-910f-13d945fad21f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3fb36a35-fa40-42e4-a50a-c6761eb4ca98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7fc8769-0fd0-4701-be9d-2cb99a379990",
        "cursor": {
          "ref": "fd1dc211-8b0b-40b4-baba-07ea7ba11592",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a349697c-4062-471c-b0a9-689381f3465c"
        },
        "item": {
          "id": "b7fc8769-0fd0-4701-be9d-2cb99a379990",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "bc584699-f875-4951-897b-a5a0ef3c7be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56bb9707-5946-424d-9e07-5c765b0e5101",
        "cursor": {
          "ref": "45bde07c-e355-4372-8b13-635b60d08d9e",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "27409175-5075-47f9-b298-db318ceda79b"
        },
        "item": {
          "id": "56bb9707-5946-424d-9e07-5c765b0e5101",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "de2d463a-9ecb-43fb-9682-82977512c5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f02d5d-d4fd-41b9-b587-c7fa49b2caeb",
        "cursor": {
          "ref": "8ceba919-b8ab-4a70-b0c4-cd7eaeaa94db",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1183238a-dc28-4bfc-8629-4b56d73aba1a"
        },
        "item": {
          "id": "82f02d5d-d4fd-41b9-b587-c7fa49b2caeb",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bc963090-7e2d-4622-af03-c5aa879ef4db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8799acda-0c4c-43ad-bbac-ea1bbf12fd66",
        "cursor": {
          "ref": "4b091f83-ff57-44c0-b829-28882e7fcf72",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "53c12b0f-b809-46a4-92ec-e16871ba296e"
        },
        "item": {
          "id": "8799acda-0c4c-43ad-bbac-ea1bbf12fd66",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "55b76995-d47f-4602-b91e-824deaa339a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bb6729-45e8-4816-8aff-4990159be04f",
        "cursor": {
          "ref": "8410a9c7-9d01-4d68-9ace-29ffeecf907f",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8a8d4b91-b3d0-4f86-8983-377ab70299ad"
        },
        "item": {
          "id": "55bb6729-45e8-4816-8aff-4990159be04f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "42a66699-c65b-43c3-9f2e-969b0bb095c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c64efbc-fd5d-4c84-9b0b-f8628536f30b",
        "cursor": {
          "ref": "80a4e74d-bc2c-4b2b-81db-3777c8f455ed",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d9c92d7e-0629-4e8d-8342-ebaa8c265c15"
        },
        "item": {
          "id": "8c64efbc-fd5d-4c84-9b0b-f8628536f30b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "72af6868-10af-49bc-919b-50698cacc30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea87728-0917-4512-8ae9-fac32a9275c4",
        "cursor": {
          "ref": "a7f0850a-b901-499a-a73a-aa5d83ca8441",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5320f162-a017-4019-b95b-c888075c03b1"
        },
        "item": {
          "id": "6ea87728-0917-4512-8ae9-fac32a9275c4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ae8039e3-5656-4995-ba41-90a46b788469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a35ae2-a1f5-4b8a-9a8f-a89bca8d155b",
        "cursor": {
          "ref": "9bcead07-788d-4603-88ac-ef30b1f7b730",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b37455b6-92af-418b-84e2-0e2f5182b29d"
        },
        "item": {
          "id": "87a35ae2-a1f5-4b8a-9a8f-a89bca8d155b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "520f1dad-084a-4ea8-9688-0e18902af227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd16838a-44b8-4b65-af19-485b6486c355",
        "cursor": {
          "ref": "6bdf1b5d-2b4e-46e5-b4f4-5439b9458a27",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ab144b22-15d3-4732-b590-e60f597ef1eb"
        },
        "item": {
          "id": "fd16838a-44b8-4b65-af19-485b6486c355",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b8e5fbff-c940-45ae-a909-6601f8999db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e7403f-5a19-445b-8d60-8ea6d0c72407",
        "cursor": {
          "ref": "c60bf85c-4e0d-4095-bf12-7f2fde225dd9",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "37a274c1-623d-43a1-9e7b-8772d6d6cb5f"
        },
        "item": {
          "id": "51e7403f-5a19-445b-8d60-8ea6d0c72407",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2e04cc97-9ed8-4096-8082-77a939fdf4f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d748060f-0404-4fd9-9382-d4c1acc3167d",
        "cursor": {
          "ref": "5e2641f5-3c06-48a7-b67b-f6b821e7f2f9",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "90aa31c2-31ec-4611-a1c0-d1bfdb9c69cc"
        },
        "item": {
          "id": "d748060f-0404-4fd9-9382-d4c1acc3167d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7882cfb9-49c0-43f6-bd70-325cd62d0135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f2d775-5252-48c9-9918-0afed3f3beeb",
        "cursor": {
          "ref": "afbb2b06-a315-4b6c-870d-6b4286181674",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8bb9a1f3-6a6e-4c40-ad52-47bf8482e645"
        },
        "item": {
          "id": "08f2d775-5252-48c9-9918-0afed3f3beeb",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "75c6474b-bb01-4c7b-b30d-5febbbad8e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1d91b7-695c-4988-9b39-4de58add02bd",
        "cursor": {
          "ref": "d474b168-c2a3-48cb-9e15-be390e0e197c",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "fce9ae34-f06a-44a2-b822-bd21016c78a6"
        },
        "item": {
          "id": "7a1d91b7-695c-4988-9b39-4de58add02bd",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4c73144b-966f-4568-9816-eb7b86d115ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f93a47d-4b79-4444-817a-df8cf11fed5b",
        "cursor": {
          "ref": "d6997271-479d-4e79-9c0a-1f91e1820480",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "79d8e77a-aca4-4315-b36c-4db38a6d0eda"
        },
        "item": {
          "id": "4f93a47d-4b79-4444-817a-df8cf11fed5b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "31562543-7d06-4fc1-b700-f48e1f432cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc77474-8b46-45ed-91c6-018cdaa67ea6",
        "cursor": {
          "ref": "2a51587f-5b5d-4d09-bd29-d3c49f553168",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "be32625c-a7e7-449d-b34f-5edb34e5dd7a"
        },
        "item": {
          "id": "fbc77474-8b46-45ed-91c6-018cdaa67ea6",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "856f2809-ceb7-4d34-90b1-479ba3d25368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e4e102-57b4-4c79-83cf-6d3f09d90d4d",
        "cursor": {
          "ref": "d2d869d9-08bf-4d80-bb91-29ee859c0765",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "903184c0-ea09-4234-9033-098a2cb8eb35"
        },
        "item": {
          "id": "c8e4e102-57b4-4c79-83cf-6d3f09d90d4d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d3db40d6-89a4-43ef-9832-d48e4b3cf323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703f3326-45e2-4d31-9f8a-849c2ba308b7",
        "cursor": {
          "ref": "be010d56-79d7-453a-ad46-7b469cbecf92",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "919ae955-5cef-4778-ad90-661804c46a3c"
        },
        "item": {
          "id": "703f3326-45e2-4d31-9f8a-849c2ba308b7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c42324db-ac8b-4bb8-baa8-64159f1fb242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960883bc-8f74-477a-bb6f-eb04ab76e82e",
        "cursor": {
          "ref": "c5f6a267-c812-4dc9-9bd8-6228b8e45151",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1bed3797-93a1-44a1-b720-df689faab54d"
        },
        "item": {
          "id": "960883bc-8f74-477a-bb6f-eb04ab76e82e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dcaa2466-aad3-45fe-988b-18a8333d6e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb924d8-628c-4ed1-859f-175e7243405d",
        "cursor": {
          "ref": "a69d67b8-5443-4890-836e-c8616d493811",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "03f65e24-4ea5-4a28-ad8e-0cf89e57a9c7"
        },
        "item": {
          "id": "6bb924d8-628c-4ed1-859f-175e7243405d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1c654b07-c15c-4f2f-86e0-9ea1c8194cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d094cb21-2a19-4189-bcff-837911e7e2f9",
        "cursor": {
          "ref": "0f3ebe8b-8c1d-4efb-b2e8-55bcf5987098",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6e833e7e-9595-4247-9284-0c7942cb155d"
        },
        "item": {
          "id": "d094cb21-2a19-4189-bcff-837911e7e2f9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7136d30a-18d0-4dc7-a808-7f4713d77fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02f9085-5a4d-46ad-8295-7a7d7175f59d",
        "cursor": {
          "ref": "37331b07-b8df-479c-aab1-d50dc7f22f1f",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "14ccd604-5cab-400b-8824-e9307a95eca5"
        },
        "item": {
          "id": "f02f9085-5a4d-46ad-8295-7a7d7175f59d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5acf7fb4-6435-45ee-95a5-ad08f4545579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600112db-cc55-4180-be87-02077a030fe5",
        "cursor": {
          "ref": "6b8f1ef6-16cd-4d53-8b07-feea6798f472",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "36b0d31b-924a-43e3-9897-b96bdd763a5d"
        },
        "item": {
          "id": "600112db-cc55-4180-be87-02077a030fe5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1cdbafdf-8a52-482f-813d-8c25309adf26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2374c7-8162-4880-adb0-32052ec282c7",
        "cursor": {
          "ref": "add5b93a-50cc-4458-9199-7fc341d9fce1",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "238e08c1-aacf-4883-a376-7113700aa27e"
        },
        "item": {
          "id": "3c2374c7-8162-4880-adb0-32052ec282c7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1f801182-8066-43b2-ae8a-80438379fc67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a383022-11db-4762-a3a5-ac525fccf41f",
        "cursor": {
          "ref": "80a5db59-1b02-4516-bf73-2f1ab9400902",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "da92215f-84c3-4582-ae00-7b5a5c6acea0"
        },
        "item": {
          "id": "5a383022-11db-4762-a3a5-ac525fccf41f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c446876c-6a0b-4fb5-b58e-9f2b3b6163ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800945ec-0b2d-47d3-93d8-40215b964df0",
        "cursor": {
          "ref": "57776e4f-4aad-46aa-9635-320c2bb928d3",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "611fe6a6-97a2-41a2-ab38-16201b63c09a"
        },
        "item": {
          "id": "800945ec-0b2d-47d3-93d8-40215b964df0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "39d4d6fd-e5e8-4772-b27d-4ddbb2fe58b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36411582-023b-4fa9-a2cf-fefe0ed97646",
        "cursor": {
          "ref": "238c384c-19ed-40b7-b4e2-0c9d680b416a",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "cebeab18-44b5-49e9-bf5e-ca3c690d39a6"
        },
        "item": {
          "id": "36411582-023b-4fa9-a2cf-fefe0ed97646",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "550ae15c-cf66-41a4-9bef-2f67cbe8266f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add7e062-7341-4955-8cfb-bb7c9c130827",
        "cursor": {
          "ref": "9d146ce3-9629-488b-ab6a-c8e9a35822ef",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "31b37131-a5ac-4138-a544-d343f2eec770"
        },
        "item": {
          "id": "add7e062-7341-4955-8cfb-bb7c9c130827",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7dc43e16-36d9-4dea-aa1b-cd437efc3796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81332510-b2dc-4938-8841-d986cbd6c26d",
        "cursor": {
          "ref": "99d7e2e7-a5db-4ff9-8365-fabae80c8b76",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fd25427a-124d-458f-957e-f0e2f86772f0"
        },
        "item": {
          "id": "81332510-b2dc-4938-8841-d986cbd6c26d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2ae2db62-4262-4f05-9bc4-b7a1f3df37b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a99ac94c-dee6-4466-b6cb-cfcb696815c7",
        "cursor": {
          "ref": "3ecdf0b0-ef7a-4fe0-acc8-d37bdaf47dcc",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5c005a76-f48d-432a-8e66-240a2df309f1"
        },
        "item": {
          "id": "a99ac94c-dee6-4466-b6cb-cfcb696815c7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fdf3f185-2c97-434b-8c90-10cf1c394fac",
          "status": "Created",
          "code": 201,
          "responseTime": 796,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "563ba620-f500-44f4-aaba-c743a02939bf",
        "cursor": {
          "ref": "71223266-020a-40b8-9da8-7afa20234018",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ee9789c4-ec41-47a4-95bd-8c4d53467403"
        },
        "item": {
          "id": "563ba620-f500-44f4-aaba-c743a02939bf",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bfe733f0-d388-4afe-9dd2-4f7db44bbaa9",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "094063c7-02bd-4240-8537-05aa36374451",
        "cursor": {
          "ref": "8225dff0-09da-4e36-8951-43749fddef06",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f55d4579-d069-49a6-a760-f7707b83a31e"
        },
        "item": {
          "id": "094063c7-02bd-4240-8537-05aa36374451",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "bd390f16-4af6-4079-8d58-66ba2d1e95f2",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a031c646-640b-4645-8dae-ee34d8572744",
        "cursor": {
          "ref": "4087ee68-426a-4cbd-8908-3a1d809d1c45",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e7449551-b215-4896-bfcf-83313335adc7"
        },
        "item": {
          "id": "a031c646-640b-4645-8dae-ee34d8572744",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8d7a22ee-1d6b-40ab-b706-cda0bd761c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54233d1a-e43f-49d6-896d-143cb28fae25",
        "cursor": {
          "ref": "bc895553-76c3-464c-9cd8-eced0195e76f",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "18b81578-a39c-4198-a38a-553957b35cb3"
        },
        "item": {
          "id": "54233d1a-e43f-49d6-896d-143cb28fae25",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cdad9327-7bcf-4129-8dfc-8b43e062cd58",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "29818af3-8c7a-45e6-b757-b362ba1dcaee",
        "cursor": {
          "ref": "bc56dd3f-fb13-4540-9b8e-237f8b84d4b1",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3f223c88-82a6-4d00-8000-6a88639ba66f"
        },
        "item": {
          "id": "29818af3-8c7a-45e6-b757-b362ba1dcaee",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "df969ca2-f7a7-4ed4-a49e-8087adaf8a48",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "bb0fe623-c748-454d-a48b-ca54824471f2",
        "cursor": {
          "ref": "7cbecc35-e594-4c2e-b9e1-f7154539c80a",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8ea9bc05-2804-421b-985d-40e96c0da83b"
        },
        "item": {
          "id": "bb0fe623-c748-454d-a48b-ca54824471f2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8a8daab2-1539-417f-89bf-db51fa0447c9",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c00067bf-c58a-445a-b559-b1496de62905",
        "cursor": {
          "ref": "1aa91989-ee79-4c01-89cd-cdbc5fd85bb5",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "db4f0ea8-9255-4655-9cf2-3ce397e6f6a7"
        },
        "item": {
          "id": "c00067bf-c58a-445a-b559-b1496de62905",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d2cf3a6d-f2a4-46e5-b9a1-a9c81b55eb5f",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f3db5cd1-1c0f-4ae1-b223-797de4f8e788",
        "cursor": {
          "ref": "81e2f679-844e-49b2-ae19-54cad29458f3",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "75144814-f5d7-478f-9ad1-1caea3a089e9"
        },
        "item": {
          "id": "f3db5cd1-1c0f-4ae1-b223-797de4f8e788",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8823dfe5-48f9-4430-a99b-5d5ef1915437",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "33bff147-e6f9-4853-bee9-3843cb592d22",
        "cursor": {
          "ref": "5c5bd053-9d05-4549-a61e-a114ca05d45e",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3ee0b29c-1cf3-4e89-9903-c8cc7173b7ca"
        },
        "item": {
          "id": "33bff147-e6f9-4853-bee9-3843cb592d22",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f3a046bf-f326-42ca-98f9-5bda83db8901",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "56659f19-13f4-4de1-856b-b294d224d5e7",
        "cursor": {
          "ref": "77d31d6a-f771-477c-a0a3-dba5e504d952",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "16b19087-d101-49ec-ba9e-801a6771e44a"
        },
        "item": {
          "id": "56659f19-13f4-4de1-856b-b294d224d5e7",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8fbf8d1b-7a37-4b4e-9a4d-aa76df88714f",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "967fd759-8e04-4d59-8650-548082515e79",
        "cursor": {
          "ref": "eca2bcf3-a001-4c06-b863-8dd007a4ca4e",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b683775a-8a26-4feb-8492-9e9600a176d3"
        },
        "item": {
          "id": "967fd759-8e04-4d59-8650-548082515e79",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4ad283e2-8f37-43ea-8b70-90870214c9f9",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "32f64488-ce96-4f5b-acf4-2b18ad8e5032",
        "cursor": {
          "ref": "90270574-c9f6-441f-9d33-eb0776c53caa",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9ce1f704-9746-410a-b330-559ddc629a9f"
        },
        "item": {
          "id": "32f64488-ce96-4f5b-acf4-2b18ad8e5032",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4fd9ad6d-f1b8-4ece-a60a-1e2713dc6385",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4747ae75-425c-4fff-b05b-6182190a490e",
        "cursor": {
          "ref": "cc3b6cfb-af4c-4d84-b29a-3c875ee329d6",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2d2c42ba-8b90-48e0-b6bc-d4a683633735"
        },
        "item": {
          "id": "4747ae75-425c-4fff-b05b-6182190a490e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7365a49c-e659-4663-af6b-db8e215f2286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c21496e-6af9-4231-97c6-e01dff9e57d2",
        "cursor": {
          "ref": "3ad83f88-52c7-4b86-8972-2c76001656fc",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "41e3db43-e0db-44ec-adeb-3343ce6fb9a3"
        },
        "item": {
          "id": "2c21496e-6af9-4231-97c6-e01dff9e57d2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3ffe4294-d4b3-4c04-9da3-230bd02b6ebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d419ae0a-9244-4f69-bb59-d94776246ed8",
        "cursor": {
          "ref": "dee532de-816e-4c72-9152-1ac728667abe",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b4620d2b-a3e9-41bf-bf1d-6af91ad0af8f"
        },
        "item": {
          "id": "d419ae0a-9244-4f69-bb59-d94776246ed8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7da8f8e3-3122-4101-a4db-3b5ae0f45237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd54e91-d88d-4e15-8ffe-c6d2f662ba3d",
        "cursor": {
          "ref": "0a3496dd-6951-4211-af8a-e0758a0398e8",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e632b091-205e-4938-8196-9ec37f0882f3"
        },
        "item": {
          "id": "1bd54e91-d88d-4e15-8ffe-c6d2f662ba3d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a358f23d-3034-4009-b2d6-ed6b820985de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be03817b-ee01-40a1-bf81-5ab0d02ec366",
        "cursor": {
          "ref": "9fc852be-ab2b-430e-8eed-c58cbede576f",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ee7cd89d-d127-4bda-afe8-54cf1b832f03"
        },
        "item": {
          "id": "be03817b-ee01-40a1-bf81-5ab0d02ec366",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9285a80c-c254-45f8-a053-a81301db1fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2886413a-4c8d-436c-9f73-ca3fba060380",
        "cursor": {
          "ref": "4b6df294-faf5-4105-9325-1ff6f410c76a",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "59603638-94e6-4d7d-968f-cc1e07eb4704"
        },
        "item": {
          "id": "2886413a-4c8d-436c-9f73-ca3fba060380",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2fb4279a-240f-459e-8e20-813f21013094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caaefa7b-4b3f-4c9b-bde7-5c0d38a07362",
        "cursor": {
          "ref": "352bed5a-c128-465c-9126-6415bfd3322a",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1a4af075-672d-4f30-910d-e9de90c69176"
        },
        "item": {
          "id": "caaefa7b-4b3f-4c9b-bde7-5c0d38a07362",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5a69abf8-9617-42f8-aabc-b409b223ae4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59809ee-8ab9-4054-893f-6a413892262f",
        "cursor": {
          "ref": "050e188c-94f8-48b7-9b23-bdac4c22bbad",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "72282c34-6f75-44ae-b7fc-65fe9c1d90a2"
        },
        "item": {
          "id": "b59809ee-8ab9-4054-893f-6a413892262f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e5ae5d9e-b69b-4511-b97d-3961f1a030df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e23776-27e7-4e3e-b8d6-b64caad441c2",
        "cursor": {
          "ref": "e7f2e8d2-fd8e-43d9-a989-0008345c2018",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ec2053f7-184b-42e2-b8b0-79cd5149a43f"
        },
        "item": {
          "id": "45e23776-27e7-4e3e-b8d6-b64caad441c2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3eb39d9a-c885-47cb-9891-5060a918f598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a089c52-3cfd-48dd-b468-2612b47b7b95",
        "cursor": {
          "ref": "c09dd578-215c-4bd4-93b5-f6cc1078c9e1",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f3349cf2-4b3b-4206-a831-5e6f57cb6976"
        },
        "item": {
          "id": "3a089c52-3cfd-48dd-b468-2612b47b7b95",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "67f28397-c4d1-4315-9b11-2f02e2b9bd68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b78c451-4854-4443-bfd9-d87187691fa9",
        "cursor": {
          "ref": "b66b9a89-5f25-441e-b005-82abb2a94e93",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "20518fb1-12c3-47d6-9456-c686bfd8bd5f"
        },
        "item": {
          "id": "1b78c451-4854-4443-bfd9-d87187691fa9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4b73b6d5-5cf7-47f2-9b2a-177309fb1976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dbad7cd-fa74-4c31-8194-b9313bb61cfe",
        "cursor": {
          "ref": "c304d506-1a3f-4e6e-adc5-0680240a217d",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1d2e3b34-304b-45ca-9029-71de44564d88"
        },
        "item": {
          "id": "8dbad7cd-fa74-4c31-8194-b9313bb61cfe",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "892afe53-48d1-4a2a-b43f-41540616d16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f42698-dc7c-43a4-86cf-2705a1176841",
        "cursor": {
          "ref": "a0d1a4d6-8275-4e0d-b657-598405d48094",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ca3b2364-daab-43fc-89de-b81b40a264f5"
        },
        "item": {
          "id": "e1f42698-dc7c-43a4-86cf-2705a1176841",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ed05e707-b701-4339-92c5-0f4b4b11b5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59140dfc-d500-4b0d-87e0-03e5ead67ef6",
        "cursor": {
          "ref": "1f9e364c-281a-4932-9abe-23648fa7159e",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3ca57c5b-6b2a-43fe-8dea-e8a2bfa03d6b"
        },
        "item": {
          "id": "59140dfc-d500-4b0d-87e0-03e5ead67ef6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4ba4474a-e231-4768-8dec-1a3fdcea9611",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "894ce8f2-ba13-402d-9450-8bc598fb37a4",
        "cursor": {
          "ref": "126415fb-4fe3-40a4-8068-b5457ad4f0fe",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5985d4f2-c959-48bf-948c-bb6158151b88"
        },
        "item": {
          "id": "894ce8f2-ba13-402d-9450-8bc598fb37a4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ee786c30-e20b-48ea-8e03-423d21147073",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "1b9675b1-3449-4262-9180-fd25d2d2ac91",
        "cursor": {
          "ref": "9478a888-2564-47a7-bc81-3e7e3c7f331a",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1a1062b2-b01a-473c-b77e-b9d949cdaccd"
        },
        "item": {
          "id": "1b9675b1-3449-4262-9180-fd25d2d2ac91",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "22fcff01-9af2-4634-a3c5-eb46408ab6f0",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "268b20f1-bb64-4966-9a63-30f96c82946b",
        "cursor": {
          "ref": "a084a2f0-3c5b-42fa-a5be-24b75777f754",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ee1275bf-3bbc-4dff-828d-0a9cecdc4a8c"
        },
        "item": {
          "id": "268b20f1-bb64-4966-9a63-30f96c82946b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9cc9e2ba-d4ad-4871-bb28-d1db1dfbc8e7",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "e2dd1ec0-73a1-4bd4-ad34-8083e19abf56",
        "cursor": {
          "ref": "363408cf-b9cc-4856-9123-6b283a634973",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1e1b33a8-f82a-468a-b5bd-053889945f74"
        },
        "item": {
          "id": "e2dd1ec0-73a1-4bd4-ad34-8083e19abf56",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c51463ee-01d7-48ae-8012-7109eb1b3a35",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b271c07b-51c9-44c7-8ae8-09af159e2ba0",
        "cursor": {
          "ref": "fb05f621-5112-48e5-bf15-11f340a44fb9",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "09372725-141e-4e83-9365-f54311f1758a"
        },
        "item": {
          "id": "b271c07b-51c9-44c7-8ae8-09af159e2ba0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "57a516c1-a7d2-42b7-94db-1591fa15e00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8f5647-0bda-4f36-b0c4-1fea98386c03",
        "cursor": {
          "ref": "fc0c17f0-46c4-4479-893d-1116bdf850a8",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0618262b-8583-4446-917c-8aa2efed2848"
        },
        "item": {
          "id": "0d8f5647-0bda-4f36-b0c4-1fea98386c03",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "61a2076a-e096-4fdd-b049-812e8481ee59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb29e41b-41ed-4783-8a81-d97844ca3f8f",
        "cursor": {
          "ref": "b6f4d1ee-fc04-45b8-88d1-a4c78f65fb1b",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "533eec64-b8a1-4e09-ab7e-cf4b8869d95c"
        },
        "item": {
          "id": "eb29e41b-41ed-4783-8a81-d97844ca3f8f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5e1718fd-0036-40ad-84df-dae78ce703f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6192f0d-91ad-442a-8f84-70468c319821",
        "cursor": {
          "ref": "ccd45fac-eb0c-4a6a-b86e-6895a1ee515b",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3613dce3-a150-40b5-9ea6-5c154c5d96b4"
        },
        "item": {
          "id": "b6192f0d-91ad-442a-8f84-70468c319821",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4dc85aab-c349-4ec5-b4bf-f78bc7bd353a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0671777-743b-499e-acb4-d4812820a324",
        "cursor": {
          "ref": "195a96db-7bb8-4def-b82c-8349bf670e18",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "cef7647a-e3eb-4202-ab6e-73ccdccd37cb"
        },
        "item": {
          "id": "a0671777-743b-499e-acb4-d4812820a324",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1bbfad93-6c0a-45f7-89de-f06742067c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3b266f-6fc6-4efc-822e-db369e5da039",
        "cursor": {
          "ref": "5a9a204e-5998-46ba-878f-56a62572dbeb",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "be80681d-ecda-47b2-a729-d8a468a7f96d"
        },
        "item": {
          "id": "ed3b266f-6fc6-4efc-822e-db369e5da039",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b44c0b67-9e4f-4090-ac1b-fe562e9da192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3d8a60-c9b9-4416-a60e-ddd508a8c2f8",
        "cursor": {
          "ref": "da72bb2c-2ed7-48d8-ab6f-01ea983672ff",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fad2b7e8-4ae7-4652-8dd7-62d3962bf1f7"
        },
        "item": {
          "id": "5a3d8a60-c9b9-4416-a60e-ddd508a8c2f8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "187091f0-9f09-4a64-ac4c-5b7602958e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b8660c-7316-4516-9a75-5538ff60f947",
        "cursor": {
          "ref": "18b049ea-1410-4dde-94e2-076a675bbe2a",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "423111bb-9971-4659-ac69-225d0dbafd93"
        },
        "item": {
          "id": "51b8660c-7316-4516-9a75-5538ff60f947",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "96897472-88f3-4169-8723-05fa4c684a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa807d8b-abfe-40ee-9841-085c93e67628",
        "cursor": {
          "ref": "26f30dca-e41c-4daa-8d5d-7adbf864e80b",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3e682e6e-0b7a-4181-832e-cf6113772337"
        },
        "item": {
          "id": "aa807d8b-abfe-40ee-9841-085c93e67628",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f4ec3a22-4ed9-4df6-a6e7-1542352aa92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27863670-2f97-410d-a10c-4da4836d0344",
        "cursor": {
          "ref": "ed43b694-eda4-4351-9383-ec5616890dd5",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3d6ed07a-12cb-483e-9648-1bd58f1cad3f"
        },
        "item": {
          "id": "27863670-2f97-410d-a10c-4da4836d0344",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "540e9f8e-e813-4743-b71f-b7f0dfbc5c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a90a76e-d620-4fda-a9e0-dbd32df55091",
        "cursor": {
          "ref": "3ec2c033-0297-4581-8e99-68bc14ccba7a",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0bde3bbb-860b-49ce-9825-f83e662a5cbf"
        },
        "item": {
          "id": "7a90a76e-d620-4fda-a9e0-dbd32df55091",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f98d1e0b-502b-4bd8-83a7-bff241314ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8ae8a02-1ba8-4266-a745-ed422c8bbdb4",
        "cursor": {
          "ref": "33059d44-11b4-4edd-a4b3-cf14c5b31daf",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d9f18433-c617-46a9-bf6b-c0df22f2867b"
        },
        "item": {
          "id": "a8ae8a02-1ba8-4266-a745-ed422c8bbdb4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "30ba40a2-2634-458e-b261-b765b078c1f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1565277f-5045-4a78-8d52-085297463ace",
        "cursor": {
          "ref": "aeb27f19-f885-4fda-9389-261b87728246",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "43966eaf-3b75-4773-9c80-8bb7f3859869"
        },
        "item": {
          "id": "1565277f-5045-4a78-8d52-085297463ace",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f36c2ca9-c352-4a70-b393-088c25ffcd18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c60ad4f-5d7b-4e21-88c0-ee1b6ccb1695",
        "cursor": {
          "ref": "5df7e328-265b-4776-9e87-aea0bd3f57a3",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f2ac91fc-10c3-4aa9-8679-eeba67e7f591"
        },
        "item": {
          "id": "1c60ad4f-5d7b-4e21-88c0-ee1b6ccb1695",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "28c48ab9-bcda-46bc-98bc-7f3c7bc89872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275d9af4-67af-4c2b-9fc2-40c33c12fe34",
        "cursor": {
          "ref": "0f1d7761-611b-4fed-8bc3-47ebb9a1f509",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0a97f3a5-27e9-4102-b5a0-33758dc85f8b"
        },
        "item": {
          "id": "275d9af4-67af-4c2b-9fc2-40c33c12fe34",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1cea0874-8e8d-46a1-85bd-3f9a08039d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de98b2d-a481-4672-8aaa-9401f4f6155b",
        "cursor": {
          "ref": "1c9a1b9d-9977-4d4e-9291-8c42b1c114a8",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8ef056fe-5030-47fc-8f79-40b9b3b84001"
        },
        "item": {
          "id": "5de98b2d-a481-4672-8aaa-9401f4f6155b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "81734f1b-5b18-4df5-940c-740cc74f87a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70eccd41-4bca-4116-a316-21995540b8e1",
        "cursor": {
          "ref": "6822c213-5af0-42ed-860f-c4613499d1cf",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3506fd94-95b2-4a83-81d3-d13d0f0e6f14"
        },
        "item": {
          "id": "70eccd41-4bca-4116-a316-21995540b8e1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c25bbe42-9f6c-4902-877a-f52893b81553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05e76e3-9af4-4bef-a341-8547e92b4f63",
        "cursor": {
          "ref": "6563aa22-c7b2-4ea7-8f67-42182d4dc76b",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "22343cf9-ea50-4fac-be83-c8e244522f45"
        },
        "item": {
          "id": "b05e76e3-9af4-4bef-a341-8547e92b4f63",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9cb1eb96-e242-4395-9643-a81fa4400f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4af32e-3e00-4a0e-acb5-b3747e277d38",
        "cursor": {
          "ref": "1e68a6ed-def1-4d52-8929-af74d26ffe36",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "04fcafa2-e74a-4d7d-9896-f872aec0f4ee"
        },
        "item": {
          "id": "bb4af32e-3e00-4a0e-acb5-b3747e277d38",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "28fe878e-e8b5-452b-8523-6b8e1f3491f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97013497-cedf-4a69-a4bf-44d352517e95",
        "cursor": {
          "ref": "351aae6a-27f2-4bf0-a9e3-db3b3d9947a3",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7f625904-1a56-4a1e-880e-7765e6880388"
        },
        "item": {
          "id": "97013497-cedf-4a69-a4bf-44d352517e95",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "41380f6f-b21a-4e2f-bd80-e6c9615efe61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "affc840b-899e-40fe-af6d-736b30dc3eb2",
        "cursor": {
          "ref": "225c697c-51fe-4209-8e39-95277eb66a00",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c8123274-83ab-4130-8fe8-d4b0585032ff"
        },
        "item": {
          "id": "affc840b-899e-40fe-af6d-736b30dc3eb2",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "30add2a9-cc74-47cd-8f67-28debdccce3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d9b78b-4f67-46e2-9aab-98e283e06f3a",
        "cursor": {
          "ref": "f775e288-7936-423a-a25d-52e2e0f37ce4",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ef3de43e-9b43-4580-998a-951c34af82f0"
        },
        "item": {
          "id": "11d9b78b-4f67-46e2-9aab-98e283e06f3a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d8c705d4-6189-48f9-a6da-afc3bf40c2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f73928f-4a64-41cb-b6cb-4e4d25589e7f",
        "cursor": {
          "ref": "04ab2120-83c5-414d-a603-0c655833bbfa",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "fdcffd36-9f90-41a9-8168-5d85214588a9"
        },
        "item": {
          "id": "4f73928f-4a64-41cb-b6cb-4e4d25589e7f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d08a2425-16d7-4a28-b3f5-097441f1582e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe0c643-5411-407d-a6d6-cbe027bedef9",
        "cursor": {
          "ref": "0c13cb01-6a42-47a1-a392-f4c9865a4fbb",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e4e62a37-1f96-463b-9bf5-f866610d680f"
        },
        "item": {
          "id": "8fe0c643-5411-407d-a6d6-cbe027bedef9",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c4770876-7625-4d53-99ec-bd3af4bcdacf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859ad23d-dcdf-4ad3-a991-1034631b99f7",
        "cursor": {
          "ref": "452f9c8a-633d-4def-ba88-d2f4834bb59e",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ada2e702-c903-4da8-916f-cc8d6f0b3754"
        },
        "item": {
          "id": "859ad23d-dcdf-4ad3-a991-1034631b99f7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fc8964d6-07b0-4b7f-b11e-967a572a976f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea4f02f-5e44-492b-9c83-72067b57c3ca",
        "cursor": {
          "ref": "f92968b3-8918-49f7-b9a7-102c34f082e3",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1df4f0e8-9e25-4279-953c-1fc6c2df17f9"
        },
        "item": {
          "id": "1ea4f02f-5e44-492b-9c83-72067b57c3ca",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "eb0560ca-40e3-45ce-afad-944a89b41158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf8f4d2-646e-4f9d-aedd-29132095f1dc",
        "cursor": {
          "ref": "95b7f19a-483c-4cf2-8c39-75322197d383",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a8343cf3-389d-4c4f-be66-32668b8628f0"
        },
        "item": {
          "id": "fdf8f4d2-646e-4f9d-aedd-29132095f1dc",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "572dba33-fc83-411c-9bcf-f2dcbaf1ffff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c96d75-7e03-4025-8b2d-fb93cdfec679",
        "cursor": {
          "ref": "ba4ba95e-eaea-4d68-a538-35326acf0b23",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e7b3f97c-2f39-417e-9cf5-61baa7fc07fc"
        },
        "item": {
          "id": "d4c96d75-7e03-4025-8b2d-fb93cdfec679",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "013e67a4-dc3b-46c8-8723-65d897ed5eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea228f5-3cdc-4d72-b356-fc70ad924b70",
        "cursor": {
          "ref": "172a5a02-e881-4b0a-9591-c79c4d2daf81",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7820f97b-16f2-43f9-80a3-3aac77fb3529"
        },
        "item": {
          "id": "bea228f5-3cdc-4d72-b356-fc70ad924b70",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c6018f3c-6d98-4a95-98dd-83c296c88577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77cba1a8-3338-4a32-a25d-57d1ccfa4b7d",
        "cursor": {
          "ref": "4f1dec11-c502-4535-ae3d-cf0f5b5e765a",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bccdf9f0-c3e2-4bbb-934c-e1a5a8fb47f9"
        },
        "item": {
          "id": "77cba1a8-3338-4a32-a25d-57d1ccfa4b7d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "660042fc-0580-4e34-8d86-3ca31ed68e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7921b754-7af3-4102-89fc-988ed772d7c1",
        "cursor": {
          "ref": "964eb319-2042-4fe1-b8eb-4b998c94321c",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "20fbae4f-f9a5-4ee3-aa65-7817cb2b9a6f"
        },
        "item": {
          "id": "7921b754-7af3-4102-89fc-988ed772d7c1",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a0cb2c0f-755e-45f8-a3a0-8f810f867a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe3e3b2-a8ca-463a-ad63-3dbe1a34833b",
        "cursor": {
          "ref": "4d3a944f-fe29-4e2f-8fb8-2016f8347d55",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c78ddc5c-e98b-4193-a895-b434e8edc79b"
        },
        "item": {
          "id": "fbe3e3b2-a8ca-463a-ad63-3dbe1a34833b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c3fa3c3d-787c-42cc-914a-095447fdbd02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9294339a-1ea9-402f-a411-a686557ce43a",
        "cursor": {
          "ref": "a161cacc-40e4-4b14-b2d8-cb0af1171b29",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "04af82af-9117-4bed-9a46-7c5b5d3e7acf"
        },
        "item": {
          "id": "9294339a-1ea9-402f-a411-a686557ce43a",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "efd89141-508f-4021-b469-b843f6fb4e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "db6f0bb0-6906-417f-9533-18dbe43120ab",
        "cursor": {
          "ref": "05875018-cf78-4637-8e60-b7efeccf6505",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "006a12ac-ce65-4b03-a5af-c81aa60e9e87"
        },
        "item": {
          "id": "db6f0bb0-6906-417f-9533-18dbe43120ab",
          "name": "credentials_issue"
        },
        "response": {
          "id": "54fb4aa0-8669-4b6f-8ad0-2a14f3e975b5",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "095cfb3f-fc46-429d-8bc0-85274e62ce7e",
        "cursor": {
          "ref": "97da5b3f-9496-4889-843e-4e85afeb5d68",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "0b9c37cc-e5c7-4092-b1f6-9d26141a51d5"
        },
        "item": {
          "id": "095cfb3f-fc46-429d-8bc0-85274e62ce7e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8622df8a-53c8-433b-90e7-802305791816",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0f08bf-aaf7-4b70-a997-e4dc80f9aed4",
        "cursor": {
          "ref": "28acc4bf-64be-46a4-9035-c866c4937f41",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "dfe06af6-c36e-4ee1-b749-1467dc36e566"
        },
        "item": {
          "id": "2a0f08bf-aaf7-4b70-a997-e4dc80f9aed4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "536154ad-fd59-4324-ab16-f1c9c70578fa",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "246c44b0-1e5f-4216-ab13-594cdf9db7be",
        "cursor": {
          "ref": "57a1e949-734e-4e58-95f4-84c7909a3896",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5e378417-89b5-41c9-a018-9034d4dc2f1c"
        },
        "item": {
          "id": "246c44b0-1e5f-4216-ab13-594cdf9db7be",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "190534b7-8425-4e28-8dcc-3faf04fcc493",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "677abb90-f65d-43bf-91d2-d1b540145337",
        "cursor": {
          "ref": "f484f3a1-5504-47ed-8ffe-a77b994d190f",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "58589a70-ec38-4054-b1de-85c26bdccd3d"
        },
        "item": {
          "id": "677abb90-f65d-43bf-91d2-d1b540145337",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3b52dc93-e2ff-47f7-acaa-87f811c99045",
          "status": "Created",
          "code": 201,
          "responseTime": 450,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-19T00:37:09.675Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-19T00:37:09.675Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2130c787-7524-4ad7-afe8-980a401ff502",
        "cursor": {
          "ref": "7abbe4d3-9ebc-462d-ac36-2a83fc53ac15",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "620be22c-192c-4809-9194-12c06c483eba"
        },
        "item": {
          "id": "2130c787-7524-4ad7-afe8-980a401ff502",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c5fffb63-5989-4f03-9ce8-0f6fc29ccce8",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b5ea2a-2e83-4c50-810b-e2568b97b213",
        "cursor": {
          "ref": "3c09de2e-7dc9-4ed3-88bd-8e2e4117837c",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5be4927d-4154-4b98-9400-d83cd86c73d8"
        },
        "item": {
          "id": "c6b5ea2a-2e83-4c50-810b-e2568b97b213",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "086ce01f-43fc-4112-ac5a-01a4b82f130d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1596c745-139f-4800-9b65-95d5cba3db10",
        "cursor": {
          "ref": "466b6050-c9a9-44b9-9bce-21c9196ab0ae",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1b2892db-3104-477f-9377-8e81c080f986"
        },
        "item": {
          "id": "1596c745-139f-4800-9b65-95d5cba3db10",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "93dbc1d5-9023-4c52-8094-60e337cdb103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a757ad7-011a-4ac7-a464-843c6da75d18",
        "cursor": {
          "ref": "c7c2cce2-b688-46ea-9ca4-8eab5f08a0cc",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e4c3c59f-c7b1-47e1-a017-50afa3ae9a96"
        },
        "item": {
          "id": "6a757ad7-011a-4ac7-a464-843c6da75d18",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "080109d5-c70e-4741-a7ac-067d2ffd69bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19031faf-c772-444c-b638-b8835daedcaf",
        "cursor": {
          "ref": "90b52cce-b760-4f80-b416-2e85d214a341",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0e9fca88-ee17-49fd-babd-8d2105ff7ef9"
        },
        "item": {
          "id": "19031faf-c772-444c-b638-b8835daedcaf",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "700c16b8-63f7-47e4-a86f-170f2bbf9ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1c4d5b-941a-457a-8e97-62575a7a879e",
        "cursor": {
          "ref": "82c33b1f-93b6-4f9c-8f48-47be4285743d",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d3d2e885-947a-4893-92ee-d89f83e49e51"
        },
        "item": {
          "id": "df1c4d5b-941a-457a-8e97-62575a7a879e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b8f96734-d300-40c5-8e71-87e6672bfedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc73e99-c9df-436f-9eb7-3f7d58a87ded",
        "cursor": {
          "ref": "6ef5a4e4-7dcf-4c9a-b90d-e76939682662",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ddd187a3-9d63-4c7b-824c-6b69263c4cfa"
        },
        "item": {
          "id": "8fc73e99-c9df-436f-9eb7-3f7d58a87ded",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2c6ada7f-a6ea-4280-8703-3a6af6702adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96875932-c732-43ba-bd50-0f1217dcc863",
        "cursor": {
          "ref": "861b05f5-8d56-4c6b-808e-ee08e64795f2",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a4e8eb49-e179-4577-b4e4-c963e19682cb"
        },
        "item": {
          "id": "96875932-c732-43ba-bd50-0f1217dcc863",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c9022930-c5f6-437d-984b-07e98736d268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad35cbef-e829-4efe-bdec-5bba28f0dec7",
        "cursor": {
          "ref": "779fefb7-d0cf-43d9-8232-6c2abb29c8b2",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "430964c9-4cb6-467e-b3b0-1e8a576dc959"
        },
        "item": {
          "id": "ad35cbef-e829-4efe-bdec-5bba28f0dec7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0e9718d5-798e-4148-9e8b-89a312b11184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a14bfcf-710e-4eee-8271-a85000818c34",
        "cursor": {
          "ref": "503faa7b-c527-4de3-bf9b-79b900911fca",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "28b05dce-1d6d-4748-90a3-9df17cbd8ada"
        },
        "item": {
          "id": "3a14bfcf-710e-4eee-8271-a85000818c34",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bd3ae35d-a829-4870-aea2-40227c3ab8b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce70f3d5-8d3d-4a2f-b0d7-5e6ecf715d16",
        "cursor": {
          "ref": "e71af0bf-1f75-430b-9e53-05f1c537353b",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "29256904-6fba-4720-a3a3-583c92fdcabc"
        },
        "item": {
          "id": "ce70f3d5-8d3d-4a2f-b0d7-5e6ecf715d16",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "26ed2de6-99af-4707-86de-c0fe785bd3b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7568d116-1284-400b-bb66-5f122e5a4246",
        "cursor": {
          "ref": "8f20d315-5416-4bcf-b614-63ad79587199",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bf62f787-29cb-4b84-b988-dd5a860da48c"
        },
        "item": {
          "id": "7568d116-1284-400b-bb66-5f122e5a4246",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "db4b3768-f2c4-4781-8a76-f17eaaca330a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4236587f-e60a-476c-a9c5-6e459b63c86d",
        "cursor": {
          "ref": "7bb5d93f-0732-4cb6-867c-906acbcbb9f6",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d1ce670f-44e3-4d94-ae68-228a0c5ade6c"
        },
        "item": {
          "id": "4236587f-e60a-476c-a9c5-6e459b63c86d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3c7cf8d4-3afc-4871-b705-bd94fa090175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8e7cd4-a976-464d-ae43-d6f434329344",
        "cursor": {
          "ref": "1e7a53e4-e97e-4b9f-8728-70f661a2d131",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "fedb37fd-ef63-427c-a5ca-5f1d094fc7a2"
        },
        "item": {
          "id": "da8e7cd4-a976-464d-ae43-d6f434329344",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fb8fbbe0-3e13-4904-8870-082f661b4e9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 148,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "bc5bf642-f1e2-4721-9cd4-1e9c9a34d387",
        "cursor": {
          "ref": "11a0a10e-b2c5-4de3-9660-5a9052761738",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "804e921a-be30-4deb-a3f4-86224eddd096"
        },
        "item": {
          "id": "bc5bf642-f1e2-4721-9cd4-1e9c9a34d387",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8b5f6a4a-8aa6-40e8-8b28-c2a2909a1a29",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 154,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "577d6b68-ed4a-48e5-99b2-b36ce44a2bde",
        "cursor": {
          "ref": "b0b92686-f973-41d2-acf9-e550149e0991",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "30c50ed2-9081-460e-acad-0242e46f0b55"
        },
        "item": {
          "id": "577d6b68-ed4a-48e5-99b2-b36ce44a2bde",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "817e971d-403d-458e-9d05-ddb56f6f3df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823fcd94-0e59-40f5-a7b3-d5d5e26d8c02",
        "cursor": {
          "ref": "d141ea23-75e1-4787-94a6-93870eaa593e",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "de61ee96-2c52-427f-9a25-52e81f84a045"
        },
        "item": {
          "id": "823fcd94-0e59-40f5-a7b3-d5d5e26d8c02",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "60987747-9c19-4d13-ab13-a41522a7da76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5276fb-2e28-4094-ae42-15f9bd86fe1c",
        "cursor": {
          "ref": "78b2e037-beed-4dd8-95c5-b3508a40daab",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e1e532f0-026e-4c3a-b93b-9cdf1a15f038"
        },
        "item": {
          "id": "2a5276fb-2e28-4094-ae42-15f9bd86fe1c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cd6340b1-e846-472a-81b5-53b0f4cb5907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee68ea66-4293-4233-a836-9e87f2f61132",
        "cursor": {
          "ref": "c9b3a201-a376-4ecb-a492-4969acd421ed",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5673d38f-5484-42e2-a2fb-d251500ebbd0"
        },
        "item": {
          "id": "ee68ea66-4293-4233-a836-9e87f2f61132",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4967a281-f8c4-4b72-99a7-08218442ccaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374a7409-5c0e-4552-bbcf-06b4d2947e02",
        "cursor": {
          "ref": "00bfb252-ac88-4d73-bfb0-361ab16ab195",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b28bb81b-9e97-4152-8264-365e2c86fe1a"
        },
        "item": {
          "id": "374a7409-5c0e-4552-bbcf-06b4d2947e02",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0cf3dd9d-900a-46f1-b68e-9c12fac2f58d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d602650-bbd1-4df7-ada5-059daca0c261",
        "cursor": {
          "ref": "72af8bec-a354-45af-b8fd-3470b6730a02",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c83031a7-2bf2-48bf-9359-811cbb1b86b5"
        },
        "item": {
          "id": "6d602650-bbd1-4df7-ada5-059daca0c261",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b1cb56fa-57f1-4956-8fc2-f425407f2e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad00cf3-04ae-4e20-94ab-5297776c3cc7",
        "cursor": {
          "ref": "3f0d58a9-8683-4db6-8912-1fc54d15d705",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8989e258-3ff9-444b-8cfa-65f9831949d8"
        },
        "item": {
          "id": "fad00cf3-04ae-4e20-94ab-5297776c3cc7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "aecd01ce-f105-465a-9940-a053c00e1360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b74167c-4aeb-4ba9-8908-2002287f4180",
        "cursor": {
          "ref": "287c7cb9-5c3c-4552-86e8-d69de1c78ce6",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4209687e-f853-49bb-a762-9169670a962f"
        },
        "item": {
          "id": "3b74167c-4aeb-4ba9-8908-2002287f4180",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7b988214-0d9a-47b0-a602-316d986364b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c68f676-9367-4db2-b595-4b417c2b4d96",
        "cursor": {
          "ref": "a93c5129-caae-4ad9-a56e-41c1a0954831",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8ffaa954-d2f3-4841-91fa-b76d1f80e3d2"
        },
        "item": {
          "id": "3c68f676-9367-4db2-b595-4b417c2b4d96",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "676a4ba5-5937-4f07-9100-712790e69ab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6ff17a-c02a-4bfa-b1af-72d29bbc9ce0",
        "cursor": {
          "ref": "09bdfd92-bac7-4d06-92e1-4339aaea953f",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0c0b521e-bbab-4a87-ba1d-184f73bc65bf"
        },
        "item": {
          "id": "3f6ff17a-c02a-4bfa-b1af-72d29bbc9ce0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "00cd0ef2-ad2a-4a95-9372-96b7efa9b6bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9fd2e3b-9b56-4994-bf5e-e0fd694531d1",
        "cursor": {
          "ref": "83332b7d-6631-4f8a-a6d9-ae918b616061",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e2bdbbec-33f2-4e60-93a4-593188cf94fe"
        },
        "item": {
          "id": "b9fd2e3b-9b56-4994-bf5e-e0fd694531d1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f36638b6-86e8-4b9b-92e6-41c230ebba28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce66d04-62bb-458e-91a8-ed846b4a044d",
        "cursor": {
          "ref": "7f810862-63f8-4ee3-85bc-1802e40d01f6",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "05c39643-035f-4d2c-8901-cce17826e957"
        },
        "item": {
          "id": "8ce66d04-62bb-458e-91a8-ed846b4a044d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3dd6374e-5c71-4fb4-a3cd-942147c23813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ad35fb-5a6a-4f0c-bfdd-7738a788d04c",
        "cursor": {
          "ref": "c2c2a7a4-f2a4-4b03-8109-39a7c3dd445a",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "8d9b6629-c507-4450-82cd-ba645de86fad"
        },
        "item": {
          "id": "04ad35fb-5a6a-4f0c-bfdd-7738a788d04c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e89ae9d2-952a-4da6-a24c-767cb2094aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef716880-bea3-4811-8467-cf9e44690b54",
        "cursor": {
          "ref": "85f9f5a0-9e2a-4728-b168-8f87a20de598",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "caa8c3ef-def9-44c0-b829-889c24b436be"
        },
        "item": {
          "id": "ef716880-bea3-4811-8467-cf9e44690b54",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c4025ed6-9bff-47a3-a93e-5ca4919dda20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bddf4846-c8df-43fb-ac7d-26474bff8364",
        "cursor": {
          "ref": "9bfc4ad0-d725-4e3b-b8d7-b36dcbeaed78",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "81bc1848-3ff7-48a7-a622-a8f8a761f323"
        },
        "item": {
          "id": "bddf4846-c8df-43fb-ac7d-26474bff8364",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "542de493-84f8-4f90-b557-bc050c9ec653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14147a40-29ab-4318-a648-c84280fce779",
        "cursor": {
          "ref": "b1dd48dc-fd9d-4e86-a5c3-b7ed46d1d4ba",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6d7f31aa-5aaa-48c6-a57e-8f970e1fabde"
        },
        "item": {
          "id": "14147a40-29ab-4318-a648-c84280fce779",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6897d2b9-6abf-496a-af19-c3c33bcabffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652337be-2d56-4072-b41e-b17ea445a1a0",
        "cursor": {
          "ref": "657e6455-d3dd-418e-9d10-d4c69bf2f52a",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "73661167-52d2-4d86-9345-5ab82a9afb9c"
        },
        "item": {
          "id": "652337be-2d56-4072-b41e-b17ea445a1a0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9dec1404-cf30-4cb5-a0eb-691aa255d3a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca70acc-4073-49ad-9141-24da4d970588",
        "cursor": {
          "ref": "94a7c59d-a025-4a5c-8cc5-dcb362fb6361",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a66d9fbd-ce2f-48b6-a02c-8261986a8a6d"
        },
        "item": {
          "id": "dca70acc-4073-49ad-9141-24da4d970588",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "05603f9e-22c8-4710-bf51-44ac1d3f2316",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 130,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "4e6ea18c-6d66-40e3-87f5-4c5ec216c9d0",
        "cursor": {
          "ref": "b075d7db-2ba0-4259-807a-c8c073c4f9cb",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8ffdddde-e253-4981-b466-745ba3c15ffa"
        },
        "item": {
          "id": "4e6ea18c-6d66-40e3-87f5-4c5ec216c9d0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "66c59626-8c0d-49fa-837b-410364be75c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc9e3ea-0572-4af5-a047-39578c7a136f",
        "cursor": {
          "ref": "7c09ac34-b35a-4211-980b-1c9c056a932e",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6f62ca5e-8e00-4ace-80f0-354f0b84c2d2"
        },
        "item": {
          "id": "cbc9e3ea-0572-4af5-a047-39578c7a136f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1ae5f5c3-9ebf-48bc-b6f2-9fa5ca10a3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f587b1-0680-4795-9979-6f31f3e3c6d2",
        "cursor": {
          "ref": "7520b709-b15f-4e06-88e8-95f9aef03039",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6008c550-5f8b-4f34-a26c-65782e129d71"
        },
        "item": {
          "id": "39f587b1-0680-4795-9979-6f31f3e3c6d2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "57ead651-bf83-433e-979c-97acacb26ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082e6a93-6a34-42d2-9aa2-023139449ca7",
        "cursor": {
          "ref": "0784335f-a750-4c11-ab61-b57086558494",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "433c14d4-8254-4af2-a280-d156e32bf192"
        },
        "item": {
          "id": "082e6a93-6a34-42d2-9aa2-023139449ca7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6f34ab8b-3139-40ab-a33a-8013db895d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0ad9cf-1c61-465e-b006-f8eb9a27eb12",
        "cursor": {
          "ref": "d346aae1-ddad-4ddc-96db-50795ca1f81f",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a6811667-2235-45ec-9906-2b31bae0d269"
        },
        "item": {
          "id": "ff0ad9cf-1c61-465e-b006-f8eb9a27eb12",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "07d27aa2-0645-42d9-a459-ccaa01080179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b92f89-f5ef-4b86-a8bc-91dda4016531",
        "cursor": {
          "ref": "71542add-eb35-4528-b2b7-d820f7e9e9f4",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "12f4d0d7-1d13-4a9e-ab31-bf28be497551"
        },
        "item": {
          "id": "a0b92f89-f5ef-4b86-a8bc-91dda4016531",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4805ceb1-0a8b-486e-a953-bab90b88d97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a8264c-4e88-4317-8ab5-17333cda0dea",
        "cursor": {
          "ref": "a57f0444-524d-4bf2-81e8-ce72832bddb3",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b2560137-0c61-40a3-bba7-571a39120224"
        },
        "item": {
          "id": "a5a8264c-4e88-4317-8ab5-17333cda0dea",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c0499da4-7346-4b34-a6fb-86fff5039664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3e3293-7806-4cc4-b835-dd26889eab7f",
        "cursor": {
          "ref": "08e047bf-f4dd-4026-adba-f957a1fe8a8a",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5cdf743a-ec48-4353-9c6c-294fe8473f5c"
        },
        "item": {
          "id": "ef3e3293-7806-4cc4-b835-dd26889eab7f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "95fe2d6f-2d96-4589-8f25-2a18ddb41aa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b368bf77-2f2f-41ea-8f83-ec0f669c001b",
        "cursor": {
          "ref": "4486f198-d684-411a-a6d9-dae30e272eab",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "df8a4528-f427-4229-b628-0bb7fadd78a2"
        },
        "item": {
          "id": "b368bf77-2f2f-41ea-8f83-ec0f669c001b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cd9a163e-e962-47b6-8dc5-2d2758a36921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa62a9b2-6a00-49dc-b6bb-7d3668161de3",
        "cursor": {
          "ref": "ddabd863-76cd-45e2-9840-278569d7b898",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4b259ca5-8d4c-4d13-9837-e52a0b20bea4"
        },
        "item": {
          "id": "fa62a9b2-6a00-49dc-b6bb-7d3668161de3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ea061fe2-22a4-42d4-a589-67c59d0665b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8344c5b-5159-4d1b-a750-576cdaf7073c",
        "cursor": {
          "ref": "3568e53f-d6c7-4aa4-b0d5-2dfe37b6f00a",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f6366b1f-93e0-425e-aada-b0a04e1d8ab9"
        },
        "item": {
          "id": "f8344c5b-5159-4d1b-a750-576cdaf7073c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0bfa4c05-4a49-4127-910c-f361c79ba317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a35e49aa-93d8-4756-bc2b-0765fb14a2c0",
        "cursor": {
          "ref": "31f02137-3dc1-4c3c-ba1a-0674481cf859",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "268619f2-0947-4977-abdf-7b84fa79f3c5"
        },
        "item": {
          "id": "a35e49aa-93d8-4756-bc2b-0765fb14a2c0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e7095573-0988-4992-85c9-e11165826fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d614d56-e3e0-456a-8928-60d4e46539ce",
        "cursor": {
          "ref": "be61c753-7744-4667-a926-7fc027f0320b",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "615119bb-7cfc-490e-87dc-37d9c9d48274"
        },
        "item": {
          "id": "4d614d56-e3e0-456a-8928-60d4e46539ce",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f295c7dc-9e6d-4e91-bf7a-9de6f94c420c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8333387e-124e-4935-86c9-6521022f9cd6",
        "cursor": {
          "ref": "b1ece14f-89af-4428-a3cb-be4819b10c58",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fe3d8b29-6251-4425-b8b7-52babba7e19e"
        },
        "item": {
          "id": "8333387e-124e-4935-86c9-6521022f9cd6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4dd7d3a3-3744-4939-9abd-8eb398ff21de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3c820a-93b3-4189-a45f-ef01988ade55",
        "cursor": {
          "ref": "c934f155-e9a7-4ce9-8e27-95f58e4e0705",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3b1c97b6-d381-40f8-964c-4c4eb585db0c"
        },
        "item": {
          "id": "ec3c820a-93b3-4189-a45f-ef01988ade55",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b7bc9d42-355e-417a-b4ae-1120be57dd04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 157,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "6fc9f18f-6e58-4164-a798-ebb36400f074",
        "cursor": {
          "ref": "a4f428ca-5265-4a68-b6ce-4cd4c798b03b",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4252972d-9f45-42c0-8833-ae9887a9f611"
        },
        "item": {
          "id": "6fc9f18f-6e58-4164-a798-ebb36400f074",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7bbf550f-7b70-49d5-994c-1fdccda67c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5294050-7f20-4a47-98e6-0e4737bf26d3",
        "cursor": {
          "ref": "c0fafb62-245f-45ed-914c-eda48aa41c4c",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b263370b-7bcf-4729-83ec-36ce104d2232"
        },
        "item": {
          "id": "a5294050-7f20-4a47-98e6-0e4737bf26d3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4ff20339-0a33-475d-8f9d-28eabf907d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f7c0a7-56d8-4949-baef-6ee746ca15f9",
        "cursor": {
          "ref": "70137325-b405-4c08-a807-ae6412cc64a8",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "79f515b5-2374-4c0f-b36e-f1d220cb6c29"
        },
        "item": {
          "id": "93f7c0a7-56d8-4949-baef-6ee746ca15f9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3df010f9-3c8c-4376-ae2e-308ab8773866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49fd9ba-ed30-4277-bc35-df29d616da38",
        "cursor": {
          "ref": "cc31ba12-3e42-438c-94f3-77445ed4a4b9",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "86c532a1-16f4-44f5-b5aa-5665c17484f4"
        },
        "item": {
          "id": "c49fd9ba-ed30-4277-bc35-df29d616da38",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c830850a-abd7-4713-a176-1c050490fedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc28d86a-0ab0-4fe9-a1bc-34b89ddfb2bf",
        "cursor": {
          "ref": "cc790a4b-c31f-4638-b5e9-14524730d7dc",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4ebfa3f9-76a6-4dba-8122-b21379ef3c13"
        },
        "item": {
          "id": "dc28d86a-0ab0-4fe9-a1bc-34b89ddfb2bf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bd60c886-3466-4936-8a53-a1ab981339c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5026de36-6114-4805-99b9-c00c6feab316",
        "cursor": {
          "ref": "06c19b9f-c11c-4783-89b0-538166d4eb8f",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "796ab4f7-fdf0-4483-a26b-6de42f5d1d47"
        },
        "item": {
          "id": "5026de36-6114-4805-99b9-c00c6feab316",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "90263fdb-149c-4800-97ea-81e66c4a498b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f052730f-99a6-4d5a-ad9e-8c545cf2da02",
        "cursor": {
          "ref": "da5ac00c-fa4a-44f7-82a9-d093fc06791a",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0205ede5-ad7c-47f7-a0ab-858fab15ccc6"
        },
        "item": {
          "id": "f052730f-99a6-4d5a-ad9e-8c545cf2da02",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9a1b4494-6be2-497e-8713-4250b1e38ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000215d8-ce66-428c-ab18-355879e6d562",
        "cursor": {
          "ref": "47217347-c8b5-4ca5-8793-e20bf5137a8f",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "573494e7-9bc7-468c-9716-9cbc4ded12fd"
        },
        "item": {
          "id": "000215d8-ce66-428c-ab18-355879e6d562",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b6ab520c-e4d5-45b7-9eb9-7f5051a820c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a3b4df-67be-439c-8a7c-8f26a2585a24",
        "cursor": {
          "ref": "04b5466e-fecd-4bf4-92cb-d0cd32ccd2df",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "97c27fe9-a5a5-45f1-b132-a428bdf34fde"
        },
        "item": {
          "id": "97a3b4df-67be-439c-8a7c-8f26a2585a24",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e3b955a1-b518-434a-8230-574292648ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7017c7ad-b5f8-4f27-b8da-264103ffc565",
        "cursor": {
          "ref": "1d8c3dfc-2c8f-47f6-930e-45b8200d1f20",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3a00a57f-862e-48f4-a2fb-841dc2654f10"
        },
        "item": {
          "id": "7017c7ad-b5f8-4f27-b8da-264103ffc565",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "afcedf6d-d77c-40f6-bc40-5754056cc363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1970ff0b-820c-4e47-8e9b-6065ae48daa5",
        "cursor": {
          "ref": "8b279751-ba64-4afd-acac-b029378b0dfb",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "de49d9a5-75c7-4a6a-8f9a-7425be6f15f3"
        },
        "item": {
          "id": "1970ff0b-820c-4e47-8e9b-6065ae48daa5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8b5f22f8-7224-4e03-b4bc-db1348274b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed51de9-276e-4fff-bc8f-dc256e6c3aa5",
        "cursor": {
          "ref": "0cc0851d-f28e-4093-81c8-1039f7869938",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "070039e9-8fdf-4988-916f-b942cc5090af"
        },
        "item": {
          "id": "3ed51de9-276e-4fff-bc8f-dc256e6c3aa5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e3d0cc31-c190-4e9e-97b7-1b095bfadb97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c378d8f9-e0b7-4694-af14-63e789f16df0",
        "cursor": {
          "ref": "fd37b000-c12b-4368-8e45-705df116644e",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c2041669-9db1-4b3d-945a-25af495e9343"
        },
        "item": {
          "id": "c378d8f9-e0b7-4694-af14-63e789f16df0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6fb6f674-1406-485d-8760-35a950916ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd89a899-f9ed-4497-94e9-e60f0eed09bf",
        "cursor": {
          "ref": "33a463e2-cc3e-44c2-9403-f57c3cf7145c",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "840dcede-0855-4f31-b282-6d754178a3f3"
        },
        "item": {
          "id": "fd89a899-f9ed-4497-94e9-e60f0eed09bf",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "44d18496-bbdd-4dc0-ae49-bb589fc767be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0ea344-e61d-407d-afaf-046b4ca30e14",
        "cursor": {
          "ref": "71f3a3ca-135e-46a3-b07b-264e4547125f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "422d5c96-8014-474c-8922-6786cd66a6df"
        },
        "item": {
          "id": "cd0ea344-e61d-407d-afaf-046b4ca30e14",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c6ca8c1f-16bc-4ef2-9dc0-605f4d4a86a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eae3e20-f3b9-49d3-af64-720a52320aef",
        "cursor": {
          "ref": "9bee5899-0ad0-46c6-959d-16d9a0d143e1",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9ce98be3-ac42-4395-9708-5b9638551379"
        },
        "item": {
          "id": "5eae3e20-f3b9-49d3-af64-720a52320aef",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c0df1480-4387-4b78-857a-78565f9cf712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57edc18-fb60-45be-8a67-17d192d8f086",
        "cursor": {
          "ref": "b283cc8d-7eb2-4b41-8a1f-30591cea71d5",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "850ee894-05ca-4951-9908-2324d691bf96"
        },
        "item": {
          "id": "d57edc18-fb60-45be-8a67-17d192d8f086",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3ce772a3-7de3-41ce-9fae-a72f61d40704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3808ee0c-c546-4c43-9cf8-c589b3efb816",
        "cursor": {
          "ref": "1dc8ab21-5d96-46b6-a239-506a0ec5d3a5",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "47f9e75b-ca1d-4e73-a131-89b3115ed173"
        },
        "item": {
          "id": "3808ee0c-c546-4c43-9cf8-c589b3efb816",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "438dcb86-4bc9-41c8-865f-7b747b01b240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f7399b-28f2-415d-81ec-4552b5326581",
        "cursor": {
          "ref": "3aec9a91-043e-4e46-87e0-84605098dd4b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "38537c0e-bc9b-494a-a17b-d43ab38e4ab9"
        },
        "item": {
          "id": "83f7399b-28f2-415d-81ec-4552b5326581",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b62c4a39-45a9-4e84-b3db-25f49bde78b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a51ea25-9a0f-45eb-8787-2a1603bf58dc",
        "cursor": {
          "ref": "bc7cb502-da75-4a0b-a15b-4dff3726b7e9",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b1b98862-183b-4425-901d-941728cde85a"
        },
        "item": {
          "id": "9a51ea25-9a0f-45eb-8787-2a1603bf58dc",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0cf224e1-994f-4e0b-8d36-30db9d12cbcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60ccf04-58f8-4ed0-9e55-9ba14fd30dd6",
        "cursor": {
          "ref": "dd72944f-2f2e-4513-9233-90654d6a2e80",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5b3e823f-d2d5-4e57-a40d-42e590e149f8"
        },
        "item": {
          "id": "c60ccf04-58f8-4ed0-9e55-9ba14fd30dd6",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7914d27f-39ed-47af-8a15-54db952229ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d49aba0-3a66-4c8e-9cb3-7dde425eceff",
        "cursor": {
          "ref": "0add4391-93a1-4bc8-8eb6-55ff253c6944",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e2892a88-6d1f-40c3-886f-7587bad8d731"
        },
        "item": {
          "id": "4d49aba0-3a66-4c8e-9cb3-7dde425eceff",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a9c45e91-48b0-4666-8565-bc42a87cf660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66eca94-2919-4c8a-a8dd-46a19ae83283",
        "cursor": {
          "ref": "e70d2261-53bd-4597-92b3-e12d06aaf178",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "38dd27c8-28cb-4615-980b-6eb0e61cd7b6"
        },
        "item": {
          "id": "f66eca94-2919-4c8a-a8dd-46a19ae83283",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a190e195-2c58-416d-8fe2-c743cab73f46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de958937-f22d-4255-b677-1167e9f6c673",
        "cursor": {
          "ref": "e052d605-2c5a-4e22-be63-76ab40751826",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1dd890e5-a68e-4c06-9405-9bfa833df2b7"
        },
        "item": {
          "id": "de958937-f22d-4255-b677-1167e9f6c673",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9faf0078-6ad3-4257-881f-3a2e078b7477",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b7421b-9353-4e04-8337-bfb2d7622dfe",
        "cursor": {
          "ref": "6ad25823-585e-4b90-9a42-cbbbc0c711d4",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "43e62a77-159b-4690-96f6-cfa343953b84"
        },
        "item": {
          "id": "d8b7421b-9353-4e04-8337-bfb2d7622dfe",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9bcd3611-a1e4-4d9e-9640-42ac7de65f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca45bed2-2bf9-467c-a818-55b71aaca3e3",
        "cursor": {
          "ref": "f19af219-b62c-45e3-8140-5c42396fa23a",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1e1dc08f-8e9d-4f8f-a508-67928e2fb765"
        },
        "item": {
          "id": "ca45bed2-2bf9-467c-a818-55b71aaca3e3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "593321c4-2863-457b-8178-21a9bf851c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a8c1c2-65d1-4588-8e8e-fe609598cdaa",
        "cursor": {
          "ref": "fa849ee5-8ddd-409f-954d-1ffa6a4296de",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b9518ae5-b3d8-4356-a18c-5232024c4db6"
        },
        "item": {
          "id": "77a8c1c2-65d1-4588-8e8e-fe609598cdaa",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f7fc27a4-b246-419a-af49-10886bc731d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c55b7d17-daa7-489c-a37f-c417bca46344",
        "cursor": {
          "ref": "56ee975d-76a1-4083-b6de-2cc8cd71dc08",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e1bc2fef-1e97-466d-901a-ef2e549f77d6"
        },
        "item": {
          "id": "c55b7d17-daa7-489c-a37f-c417bca46344",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "06fed13b-916b-48d0-baf0-fbad98594cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754ca006-b0c6-43f3-9837-caa9ee0eded7",
        "cursor": {
          "ref": "92249366-3dcd-4b64-a839-93cfd911a24b",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "707f6ec2-fb3c-46ed-85c5-1a0d6c4fad03"
        },
        "item": {
          "id": "754ca006-b0c6-43f3-9837-caa9ee0eded7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "15df9017-df2a-4345-9207-db5a043ddc67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6618fdcc-0250-47e6-bfe3-e8783ea705f9",
        "cursor": {
          "ref": "f1dacc77-316d-41b2-83ba-f0eae2c801e1",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "502e067c-d392-4b6c-a135-7d6a4fa3027f"
        },
        "item": {
          "id": "6618fdcc-0250-47e6-bfe3-e8783ea705f9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3eced015-ecc8-4e4c-8187-ed17e0c267c1",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "573ea41a-721a-4fee-9b79-502b5f549375",
        "cursor": {
          "ref": "ed1a52bd-b199-48b7-a25d-90fafdbc8f09",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "209b15d3-5212-4ee8-ac02-ed0086ca4853"
        },
        "item": {
          "id": "573ea41a-721a-4fee-9b79-502b5f549375",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f753499f-1c24-4294-83f0-140bfec0ab23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5972df-b632-4036-9bdb-de097556d8c9",
        "cursor": {
          "ref": "1356a490-2ba5-4fa8-9ab2-4d397a414eed",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "76fb3e98-d958-4498-9bf6-015a6dc7baaa"
        },
        "item": {
          "id": "ad5972df-b632-4036-9bdb-de097556d8c9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fd6e0654-4675-4c17-b267-ba73ce690c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f409dc-8986-42c2-b16d-0317c08200bf",
        "cursor": {
          "ref": "e7961375-f53d-4d95-aec3-e5348d2f5269",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "bbeba542-bbe3-49ac-847c-6f636627f70f"
        },
        "item": {
          "id": "01f409dc-8986-42c2-b16d-0317c08200bf",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cea1774a-0b37-49e3-b318-21af7f5d56cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42bf2ac8-a75b-4db5-a74b-ab79a5516b11",
        "cursor": {
          "ref": "f0e3b8ed-e1c7-4ba2-8f89-e7ff4e69a0e4",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bfd6bb08-0959-46bc-805b-8a778677fde4"
        },
        "item": {
          "id": "42bf2ac8-a75b-4db5-a74b-ab79a5516b11",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a7cbf825-66db-4510-82d1-086941c6d0d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842dc4cc-2993-426f-ad17-ffd1d04992ea",
        "cursor": {
          "ref": "1dc1518f-9d89-4c93-a5af-c58885bcfbc8",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8d653af6-4283-4c3a-8f3c-ef1c1c7ea3d1"
        },
        "item": {
          "id": "842dc4cc-2993-426f-ad17-ffd1d04992ea",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "463767a1-a16a-44df-955e-24c872027a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e48dcb-c00e-4efb-b626-4c0467fbdf95",
        "cursor": {
          "ref": "b3d52f4e-3dea-498e-9180-5acb7dedb802",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2dbbad2d-0da5-4250-a4c8-215c4507beba"
        },
        "item": {
          "id": "56e48dcb-c00e-4efb-b626-4c0467fbdf95",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "908f53d2-4044-4c15-bc59-b03e5fc2dbdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c066da-e400-46d1-8646-4057d3e82469",
        "cursor": {
          "ref": "b5870bfd-f9a8-4399-94d7-b9fa3fe2ec33",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a4760c94-8aff-4ecd-868b-9775f77ad0dd"
        },
        "item": {
          "id": "f6c066da-e400-46d1-8646-4057d3e82469",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9a355053-61ba-4f02-b6c6-e621b6c0b037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3462b98d-f93c-4a07-89d6-67d0839b6905",
        "cursor": {
          "ref": "0990e2ff-cc33-4801-a31b-a9f00f2e4ee7",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "064c29d0-c6e6-44aa-bcaa-0b6287d4c82e"
        },
        "item": {
          "id": "3462b98d-f93c-4a07-89d6-67d0839b6905",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c86a023c-4ee1-49dd-a398-ec4cfafb68a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801795b7-4159-4fb5-aeef-532c6bed9edf",
        "cursor": {
          "ref": "2b8c317c-30c3-4896-bec1-1b946397f77d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c78b6695-316e-41b5-9932-78dfc6d37ab6"
        },
        "item": {
          "id": "801795b7-4159-4fb5-aeef-532c6bed9edf",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5cb2b6fc-e80b-4074-ac9a-ba5c8630032f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ff477b-e53b-41a3-a098-90db0a274dfb",
        "cursor": {
          "ref": "c6548b42-d154-42d2-bdef-25dfae4cf046",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9b4fc60a-755b-41b2-8759-13b5e085123d"
        },
        "item": {
          "id": "15ff477b-e53b-41a3-a098-90db0a274dfb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "428f2255-8be0-435a-ae70-e6ede5fd36c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cacf02fe-2793-4109-b3f3-cf34ff6e59e0",
        "cursor": {
          "ref": "ccd17d0c-bdc7-4a9d-82c7-12b065a4f62a",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "10241c60-cfa5-4f8d-bf1a-4cf989cb4b00"
        },
        "item": {
          "id": "cacf02fe-2793-4109-b3f3-cf34ff6e59e0",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b18b808b-14a5-4f25-a598-859a0ddc9983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2a53f7-4330-44a7-b6e3-8229f9376c3c",
        "cursor": {
          "ref": "4fb34355-f12e-4d8a-bbd6-0dc9030d4e12",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cfb70e2c-b4bd-4319-a589-d60432aca317"
        },
        "item": {
          "id": "1f2a53f7-4330-44a7-b6e3-8229f9376c3c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4753e3d1-7a66-4841-9494-300c23b7e956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c945114-9ab7-4b10-842e-f7c8bbfee9d6",
        "cursor": {
          "ref": "9ee7d282-3c7f-44ec-9246-f6d128c66701",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ece4c45f-674f-4a8c-a0b4-14f1cf0c25e6"
        },
        "item": {
          "id": "7c945114-9ab7-4b10-842e-f7c8bbfee9d6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "86a863f3-ee02-473e-a020-1cc86d5d930e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8160e0fd-8bef-4288-87bf-e42aa3b79949",
        "cursor": {
          "ref": "161a25f9-179e-441e-ab60-f1ad36313fdd",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8f138d24-546a-4ec9-9f00-23fa1c25253d"
        },
        "item": {
          "id": "8160e0fd-8bef-4288-87bf-e42aa3b79949",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "08ba3c22-8316-45f8-bea9-6e7b9d934b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389e6874-7783-4cc5-98c4-f6feb44efca5",
        "cursor": {
          "ref": "c88346cb-69e0-4bbb-8531-11e76ae99d48",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0d1b40da-1456-4693-a93f-a1e4100d9eb6"
        },
        "item": {
          "id": "389e6874-7783-4cc5-98c4-f6feb44efca5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c8d20b20-6651-4883-bf1a-1ff03766b2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80ed3b2-d0c4-4d46-b9b1-1f608c498586",
        "cursor": {
          "ref": "a8ec7831-4387-4a32-ac59-1fe84c5316e3",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "75711e39-4909-4e01-8255-6f3e2a5ee1a4"
        },
        "item": {
          "id": "d80ed3b2-d0c4-4d46-b9b1-1f608c498586",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7bbbfa95-94b2-458a-8bc7-13d268b750ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb32a8fa-33fb-44ca-aa97-383facdd544b",
        "cursor": {
          "ref": "d4fede77-131f-4260-8684-8b5fabddc312",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "994dd045-edf8-40e3-8b3a-35b32807f823"
        },
        "item": {
          "id": "bb32a8fa-33fb-44ca-aa97-383facdd544b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "054bb79b-224e-48f3-bacf-d7dad30507c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb1346b-1478-47fd-bbec-29c908bcfa42",
        "cursor": {
          "ref": "12341eb7-6d4c-44a9-8103-d81575305b32",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "336d276a-6fc7-4acb-998d-e8adb6926465"
        },
        "item": {
          "id": "ecb1346b-1478-47fd-bbec-29c908bcfa42",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ba1cd2a1-73c0-4ce9-b695-105a0ba579d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf828b2-964f-4b73-84b3-2987a00313db",
        "cursor": {
          "ref": "12a7d99a-e070-4b2b-b912-45a07d59ef8d",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "16707d5f-cce3-4023-8ee8-daf10b0b2c4c"
        },
        "item": {
          "id": "9cf828b2-964f-4b73-84b3-2987a00313db",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "476bf40d-e8fb-48ac-96d2-d24e93eec274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d4b3a1-29f9-42e7-a45e-25ab57e385ad",
        "cursor": {
          "ref": "febe77d9-7bed-4ebf-bf38-f9b7eb068353",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2fe09d1e-005f-405a-a826-7af8726cdf6c"
        },
        "item": {
          "id": "d4d4b3a1-29f9-42e7-a45e-25ab57e385ad",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f8944886-5bd7-4d18-8509-ce96b8adbe36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b166d0a-ef0d-4be0-aecb-2cd081bac13e",
        "cursor": {
          "ref": "7e099a85-d6ac-4006-aca0-79c21a6a5311",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "76968d6b-9b31-4578-9e4e-50c8b70677c9"
        },
        "item": {
          "id": "5b166d0a-ef0d-4be0-aecb-2cd081bac13e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "33986b1e-4489-493f-afc4-15fef96a10e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bca8c59-97e1-4cca-b9e9-5232b07121bf",
        "cursor": {
          "ref": "a8148f88-8ff9-42fa-9b01-38fc4fb776c1",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "de368637-be8e-4c92-9b3a-467709fa4c37"
        },
        "item": {
          "id": "1bca8c59-97e1-4cca-b9e9-5232b07121bf",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a2f32c09-d45d-46fe-b006-a663482d96fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387269f3-fde3-4e53-964c-aa5924975270",
        "cursor": {
          "ref": "e6d4b8e2-a1f9-41a0-8cd4-6d20d4b94cc7",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b58dbc75-0cf7-4d08-9d38-1bba184b3d36"
        },
        "item": {
          "id": "387269f3-fde3-4e53-964c-aa5924975270",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1fa36b9c-497f-426b-9848-0f9e4fbe1805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf8faf1-279a-4385-a2e7-1e7afb7a9007",
        "cursor": {
          "ref": "43243538-0660-4c8f-8627-cd6dce8e3040",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d8efea3a-7a2d-4938-af1d-f402ae71461b"
        },
        "item": {
          "id": "4cf8faf1-279a-4385-a2e7-1e7afb7a9007",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e0ff590d-556f-49d8-91c6-8640f1f9bb46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c12af333-460b-40ef-8577-a5fbf95170f0",
        "cursor": {
          "ref": "235dec0a-8c4b-4628-84a5-415c1317288c",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3eb18b38-a225-43e3-a1ae-465f3a1e069a"
        },
        "item": {
          "id": "c12af333-460b-40ef-8577-a5fbf95170f0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "98fd02ff-c2a9-4bca-9522-0118feb2e762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9103669a-197f-489f-98bc-845c0803ff29",
        "cursor": {
          "ref": "8c83a59e-5454-4e92-af98-1c8f4f40f1f2",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b44089ac-272a-40f1-8820-8fa2825ad635"
        },
        "item": {
          "id": "9103669a-197f-489f-98bc-845c0803ff29",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ae35c785-ac66-46c7-b7fa-2a47d12bda49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147cb96b-c1b7-4c78-a2a3-b911840abf3a",
        "cursor": {
          "ref": "799150e2-eb12-4840-9105-02af53caaaba",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e4a5ac4d-672d-49f1-b432-6ebd70a4f670"
        },
        "item": {
          "id": "147cb96b-c1b7-4c78-a2a3-b911840abf3a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2534b294-e837-4919-871b-c0d63976c90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f17b5b-3473-43c5-9322-8502b2bbe2c9",
        "cursor": {
          "ref": "c4eba6b0-e47f-4353-a97e-43fa0c00a289",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "423a0600-520d-4362-959a-58ebbf543553"
        },
        "item": {
          "id": "96f17b5b-3473-43c5-9322-8502b2bbe2c9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1a7c3790-5873-4adf-9a84-4c0bbd6b1bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb7cf62-340a-4047-9588-d937af3bd059",
        "cursor": {
          "ref": "5fba942f-7ab4-4ea5-9acd-86c7d0691951",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "cd24d4fb-07d3-4861-8178-01204fb1a604"
        },
        "item": {
          "id": "deb7cf62-340a-4047-9588-d937af3bd059",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "cebc03c6-b692-45e0-b8c0-dfaf0c3368ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac890619-53ef-4c5d-af76-15de8eb0e40f",
        "cursor": {
          "ref": "4f98506c-bee6-4775-997a-cc3b12f89255",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8371d420-8f48-4e09-8b8e-933dccf4d35e"
        },
        "item": {
          "id": "ac890619-53ef-4c5d-af76-15de8eb0e40f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f2a1c1e2-8e02-41ca-b0a8-9184f4201404",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "51321f6b-53c1-4c6e-81fe-38f2ff76327e",
        "cursor": {
          "ref": "b035a63d-0956-4d46-b433-edde0ff549e7",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "345803d0-bb00-43eb-b562-cdaa64659a17"
        },
        "item": {
          "id": "51321f6b-53c1-4c6e-81fe-38f2ff76327e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a320c6d6-e823-4f11-a718-bdb3d8b3a70b",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "fb22f4c0-e405-4c17-937d-c5330bb0531d",
        "cursor": {
          "ref": "e54493fa-a5a3-4927-a435-fab11d9d39e9",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "69ee1d79-3b9a-4269-b428-ee77d2ce18d5"
        },
        "item": {
          "id": "fb22f4c0-e405-4c17-937d-c5330bb0531d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "960155ae-9b1d-4537-8c70-ba6037c3df2b",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "1edc8b5a-4581-4e37-8fd1-15cecf871a17",
        "cursor": {
          "ref": "dbfccf77-215d-43d9-b8ea-d677aa909bc9",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f14a5c3b-33f3-404e-9bb9-fc2a34c13b6e"
        },
        "item": {
          "id": "1edc8b5a-4581-4e37-8fd1-15cecf871a17",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d0baa6a6-354d-4367-b06a-bdca43ae5bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdeb3cee-9e42-403a-b87c-defb882790ff",
        "cursor": {
          "ref": "adebb001-6c34-4af1-a298-4c589edfb295",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "311b9850-8028-4d3a-833d-841e00b4ecb0"
        },
        "item": {
          "id": "cdeb3cee-9e42-403a-b87c-defb882790ff",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "45c5bdaa-36b9-44ef-a448-fa3d45b311ad",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "eb315110-7fb1-491b-a80b-204eb3e0490d",
        "cursor": {
          "ref": "d5cee17a-c5bf-4841-af76-d4e4093acfaa",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "50bbe8c4-0c6c-4c49-8b1e-2591a81e5f86"
        },
        "item": {
          "id": "eb315110-7fb1-491b-a80b-204eb3e0490d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c24235b1-e5b3-4a9f-925d-58df88ca6734",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "62d12aaf-f3eb-4dc3-9594-b642a7351273",
        "cursor": {
          "ref": "e17986c0-42ad-42d6-bf0b-20996494861a",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "96d9b18e-e019-402d-8933-99d3f9a42d2c"
        },
        "item": {
          "id": "62d12aaf-f3eb-4dc3-9594-b642a7351273",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "153d16e6-e534-4a45-b6ac-53799d25a9dc",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "7ae7a033-feb8-41a3-855b-da75ff93f56d",
        "cursor": {
          "ref": "173d315b-c472-471e-ba3e-0041e8fb7eef",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3fd06eb2-56be-4fae-8243-1fb173612335"
        },
        "item": {
          "id": "7ae7a033-feb8-41a3-855b-da75ff93f56d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "616d6dd4-b792-48ed-a7c2-4b47240dc036",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "3e683f1c-0c02-48df-b7af-d45b6f6d6b7c",
        "cursor": {
          "ref": "5a57c4c5-df1f-479c-b0fa-48c39d24a29a",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a317399f-ccaa-46fd-9699-1b9eda64967b"
        },
        "item": {
          "id": "3e683f1c-0c02-48df-b7af-d45b6f6d6b7c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0f800390-f509-4d2b-8b16-f85651614d2b",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "857cdc0c-a043-4024-ab22-899e1813b805",
        "cursor": {
          "ref": "93759f0d-1c1d-40cf-b27f-c8d74459a81d",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "03acbb94-5a03-4ac6-a623-c0aa01db41a0"
        },
        "item": {
          "id": "857cdc0c-a043-4024-ab22-899e1813b805",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5d69c1a1-b97a-400b-b4b2-13a8c8e2d2ba",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "a81b02d7-b7c9-4390-9e4d-8ff86f8aed62",
        "cursor": {
          "ref": "3f153ea9-0654-4b92-ad0e-356f82c943a0",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7b464fe0-38f2-4664-a58e-f3a9f0849b45"
        },
        "item": {
          "id": "a81b02d7-b7c9-4390-9e4d-8ff86f8aed62",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a3098eb1-73b7-47f9-9856-42a1789f2adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48045590-a99f-40b5-9c41-5cb940d3d64d",
        "cursor": {
          "ref": "03c53362-c0bc-43ee-a757-381c60ab6964",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a82876a5-d3c6-453f-be37-7db15302a44c"
        },
        "item": {
          "id": "48045590-a99f-40b5-9c41-5cb940d3d64d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f4c739e0-4313-4c55-b701-b6ede4e636ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c252cd5c-3cee-4067-86d8-cb1bf853fc3d",
        "cursor": {
          "ref": "0360dd4a-6d2f-49c3-9052-bf12d7c6808f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9ba2a964-1355-4be9-90a6-9bbdd89ffc09"
        },
        "item": {
          "id": "c252cd5c-3cee-4067-86d8-cb1bf853fc3d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "405d9eed-89aa-4315-99cd-5fe2ecbafed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a577b5f-c68f-4f61-8e16-7cfb369fe8b0",
        "cursor": {
          "ref": "120a1bfe-5c8c-4795-a47e-bd4d6dea8064",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "00101e20-a053-416f-a1a9-60d8db903fad"
        },
        "item": {
          "id": "2a577b5f-c68f-4f61-8e16-7cfb369fe8b0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0196fce3-4083-468b-b2ae-566e28351bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "749dadd9-6b62-463a-bc4d-86cc6d06fe95",
        "cursor": {
          "ref": "23ddd99b-23ba-4542-8682-116f62c97b11",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f720f856-a712-4bf9-8392-b5f75d2e125c"
        },
        "item": {
          "id": "749dadd9-6b62-463a-bc4d-86cc6d06fe95",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0632d9c0-5142-4c89-96d5-cae3db28736e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29495d3-e04f-41dc-b6de-29705b144eb3",
        "cursor": {
          "ref": "d5895422-4464-4c9d-ab0a-87c4155b158b",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1dd3572f-5863-4d81-aa0f-a7a547b17bb1"
        },
        "item": {
          "id": "e29495d3-e04f-41dc-b6de-29705b144eb3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "320eb360-b90b-4ef7-b729-dfbdcb33eb93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4647777-6fef-491c-ad28-4afac3e7b739",
        "cursor": {
          "ref": "8aae35d3-4966-40bd-a797-979053ba7a29",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "25dce14a-e9a9-411d-893e-90216d0b847b"
        },
        "item": {
          "id": "a4647777-6fef-491c-ad28-4afac3e7b739",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "284bd318-f291-4aae-971d-b5a921be9fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c43da8-ab8a-4101-9a05-f8cec4b5c925",
        "cursor": {
          "ref": "0245f62d-719c-42ec-b002-d67d331efa68",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5f87e7e1-2690-441b-9103-74d29c006906"
        },
        "item": {
          "id": "97c43da8-ab8a-4101-9a05-f8cec4b5c925",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "70b960ff-f947-4a4d-800b-6047458de17a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b127102-be02-4430-827f-bd9da1925492",
        "cursor": {
          "ref": "be11d0c3-56f0-4843-ae0e-690e88cdf4cd",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6e168538-c34f-4759-9dc8-b8d1557e4f8c"
        },
        "item": {
          "id": "8b127102-be02-4430-827f-bd9da1925492",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4a61e87d-13bf-4177-8cbd-b2e11a91a93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5745752-f372-44f3-acae-cb08554fd54e",
        "cursor": {
          "ref": "e6132a38-1803-46df-984b-421dd8095324",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a86bbbb1-5881-458b-8cf8-09c5bf5cf934"
        },
        "item": {
          "id": "b5745752-f372-44f3-acae-cb08554fd54e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d97cca11-6997-4226-9a17-3afd14e6b28f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7bd035-976e-41cd-870d-707a15e0fa12",
        "cursor": {
          "ref": "325adac0-593d-4fdf-8e44-22e5699c7ac8",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b3a62f0b-093e-4d42-a6e5-672d7870ffa6"
        },
        "item": {
          "id": "ab7bd035-976e-41cd-870d-707a15e0fa12",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "36dfa145-bfdb-4ac5-925a-a1dbfc1d3cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e79b73-f8b9-40f7-9826-4e3e39443b3e",
        "cursor": {
          "ref": "1541bac6-409c-431a-881c-e15989289e25",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1053da68-686c-4b12-9214-a88f5f29c081"
        },
        "item": {
          "id": "14e79b73-f8b9-40f7-9826-4e3e39443b3e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1df200aa-5953-454b-b3e9-a39dfb0f0404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5cd586-885a-4306-9454-302f2930d299",
        "cursor": {
          "ref": "4c09a216-e89b-428c-ae89-18305bd41291",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8ffb4274-4574-4ad4-9a2b-329b61d55a89"
        },
        "item": {
          "id": "bb5cd586-885a-4306-9454-302f2930d299",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bfceeeec-ecaa-4256-a390-652bbc39c4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0f592b-dff6-44a8-b1c4-51fe94ee6fc3",
        "cursor": {
          "ref": "16f64546-6590-4020-8f46-98c2dcd5a5f4",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "db56f852-6b6d-467a-a412-cd63c92f875b"
        },
        "item": {
          "id": "1b0f592b-dff6-44a8-b1c4-51fe94ee6fc3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a843eae0-0614-47f6-9791-bae3e8b636da",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "113e5ef9-3ae8-4f20-8a3f-a73d0dab2abb",
        "cursor": {
          "ref": "e7ce2fac-0c7e-431e-8381-a5d1b2618ef7",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d4586223-848b-479b-8112-3efb02350087"
        },
        "item": {
          "id": "113e5ef9-3ae8-4f20-8a3f-a73d0dab2abb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "185fea53-e9c8-4d89-9fa9-013ca33e40e4",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "4912cda0-696c-4f54-80aa-89b846c00eb1",
        "cursor": {
          "ref": "ea40c31d-52e0-4fc8-9783-dd154e5780c2",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "873ae596-6169-4310-8e1c-770afa10280b"
        },
        "item": {
          "id": "4912cda0-696c-4f54-80aa-89b846c00eb1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2cda0011-b8a4-4002-be22-b4264e714e71",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c26962e2-ea60-48ca-a646-06e1b3342c57",
        "cursor": {
          "ref": "cce8fdb7-1c75-485c-99bf-977f08a5772f",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "af041659-2d0c-4667-bb7a-98ee28150611"
        },
        "item": {
          "id": "c26962e2-ea60-48ca-a646-06e1b3342c57",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "49476a49-7dbc-4ace-9020-c514a1655ab6",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "08075ffe-c86d-440b-9994-ff5608a7546a",
        "cursor": {
          "ref": "3315e64f-bf5a-4bdc-a663-22efb057a8a0",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2252ccf5-1582-4795-b27f-03167a28d829"
        },
        "item": {
          "id": "08075ffe-c86d-440b-9994-ff5608a7546a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5c849607-df3b-4d0a-9cc9-e8d8aa965163",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "0c825f4f-5862-48f6-a68e-77b4e8dd63ff",
        "cursor": {
          "ref": "7c39de52-c494-483b-9b24-2789f1080943",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a7cdf003-7dcd-424a-81a8-1cafa6c59b16"
        },
        "item": {
          "id": "0c825f4f-5862-48f6-a68e-77b4e8dd63ff",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c783a49b-a8d2-4d5c-83ae-cb8e74aab94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0b0a2a-0a35-4a49-90f9-04c9381dabab",
        "cursor": {
          "ref": "a21c3425-38bd-4dc6-a9e2-97fe710ab3b8",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "678f6dbd-626f-4cbe-a659-3aa97ca82577"
        },
        "item": {
          "id": "fe0b0a2a-0a35-4a49-90f9-04c9381dabab",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "11e26257-306e-41ec-94c2-92ca62af6df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152a8860-7b0e-47c0-add4-e799cff2c13e",
        "cursor": {
          "ref": "26312845-f8eb-4fd6-a6e7-ad988c678d47",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "284c1873-5eed-4ae2-ac11-5c5d18a2786e"
        },
        "item": {
          "id": "152a8860-7b0e-47c0-add4-e799cff2c13e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ac5b95bc-c858-47eb-bbaf-1f4920f24607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86b6593-8acb-40cf-a0df-ab4b0d0ca37c",
        "cursor": {
          "ref": "fc6d23e7-beac-46f4-819a-555678e16d4b",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "07fbf356-1ef2-4966-8cef-9ef1368dd912"
        },
        "item": {
          "id": "f86b6593-8acb-40cf-a0df-ab4b0d0ca37c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "92309437-a0d7-4c35-addf-b094fb0ea854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d12fad5-e87b-45b1-a70c-171903fffc5f",
        "cursor": {
          "ref": "6ef8bcac-a6ec-4829-8edd-d19c4435391a",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "51f91392-91dc-43f5-aa00-512d0a680f26"
        },
        "item": {
          "id": "3d12fad5-e87b-45b1-a70c-171903fffc5f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "afd42664-af23-4539-a4ef-f9da0d8269e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a469dec-3b86-489a-9e5c-8bb1fe31616b",
        "cursor": {
          "ref": "5b7b59d7-e934-42ed-bcbc-09f82b2d431f",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6df36a65-cac9-4b2b-a568-90e072f54762"
        },
        "item": {
          "id": "3a469dec-3b86-489a-9e5c-8bb1fe31616b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8e258432-c985-4d29-b10e-f07e0cc85931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4009de03-a83e-499b-bf89-26d47f8e4f5f",
        "cursor": {
          "ref": "62f58fe8-4747-482b-9223-f5271f7b9ba3",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f6e5adb9-fe80-47ae-a80c-87b6c6085ebb"
        },
        "item": {
          "id": "4009de03-a83e-499b-bf89-26d47f8e4f5f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "76fa2b99-0962-492e-9421-e5501cf647dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1762bba7-cb82-4a32-ae3b-9e48a083fed5",
        "cursor": {
          "ref": "c5794e85-20e3-43ab-a36e-9adcf01f3ce3",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "47e27a69-1615-4eae-a7b0-c13f4d429c00"
        },
        "item": {
          "id": "1762bba7-cb82-4a32-ae3b-9e48a083fed5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "447b2527-da0b-402a-addf-2f687af2bc55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d647921e-fc2f-4fb7-a398-d999735b3905",
        "cursor": {
          "ref": "4adc7cd3-54c4-4d72-810d-3df32f333a0c",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "318339fe-435c-4fec-ae8a-a59f82e75e4d"
        },
        "item": {
          "id": "d647921e-fc2f-4fb7-a398-d999735b3905",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8b9b33ae-5646-4e31-870a-c5f83162dfe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0fc0ce-0adb-47e2-9374-c8c4f1a65824",
        "cursor": {
          "ref": "e2f7c9a3-0208-4082-8c1f-c596af825f27",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "83400da9-fb2e-4119-a75c-887df7e171cd"
        },
        "item": {
          "id": "6c0fc0ce-0adb-47e2-9374-c8c4f1a65824",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "725b8224-ba8b-42c2-bf8d-0bd4cccccecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db36b19d-d9cb-4161-a839-f948ae87bf7d",
        "cursor": {
          "ref": "14bb44d3-6cbd-4f0e-a5f4-03174fd8b468",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ddfcdd10-9acc-49a5-b430-70cab2f6d57b"
        },
        "item": {
          "id": "db36b19d-d9cb-4161-a839-f948ae87bf7d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4cfcc4d9-ad35-4ba6-85e2-1436fa3af8a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265b58d2-0e31-4b1c-a8f6-f230eb3b2f41",
        "cursor": {
          "ref": "77ed76cc-074f-4033-89a8-59146d9f128a",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "2aa882c7-1cba-40d0-9946-dd91b9043779"
        },
        "item": {
          "id": "265b58d2-0e31-4b1c-a8f6-f230eb3b2f41",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "262db41c-b8cd-48b0-a9c9-7b6d932297b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d31eb2-eba8-434f-885c-e0746795ae7d",
        "cursor": {
          "ref": "89d1d870-5e13-44c1-873c-ab73b0534bda",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "53ef9518-b33e-4713-8f9c-e382d2d2609b"
        },
        "item": {
          "id": "87d31eb2-eba8-434f-885c-e0746795ae7d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e658e713-3ead-4449-8c12-22af15c74400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57d4414-c697-41fb-ac16-bc43a4553612",
        "cursor": {
          "ref": "197ba442-f03f-4d68-b3e6-086326f04334",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "97693312-8655-47be-ab39-5c9bc4b8c9cb"
        },
        "item": {
          "id": "a57d4414-c697-41fb-ac16-bc43a4553612",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2eb044ad-219c-4aa8-ad75-f16c3be4f501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36febf10-43ff-4656-bc73-1b287c0710d0",
        "cursor": {
          "ref": "499cfdc0-b6e2-478c-9404-0863054558f1",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d42eaf40-5321-4fa5-b6e6-bed43335ce6b"
        },
        "item": {
          "id": "36febf10-43ff-4656-bc73-1b287c0710d0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "94460242-8c2f-4d3b-8e65-6b0f2bab5e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ff3c69-aad5-43a9-9ade-3810d2e0255a",
        "cursor": {
          "ref": "8c197537-9144-4a43-bfa0-b3fec158cd7d",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8625cad2-455f-4058-8ab5-3d019d7be625"
        },
        "item": {
          "id": "87ff3c69-aad5-43a9-9ade-3810d2e0255a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "92767d18-e828-4c9d-b589-aa523f986065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4717a6-f077-46d3-99e1-e3df8fd6fe17",
        "cursor": {
          "ref": "79fb73bd-8b24-436c-add1-4207c1885109",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "6f8a1c0a-d24e-4685-9f67-301caf0a27ce"
        },
        "item": {
          "id": "8a4717a6-f077-46d3-99e1-e3df8fd6fe17",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5bac6646-e961-44d9-93df-5c70709846eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c262b1e-80cb-4ece-b3f9-ecc80f6d5aa1",
        "cursor": {
          "ref": "da0d9626-4ac8-44c0-883f-49338604b9b3",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "91889713-d744-4aba-bbe7-c8379cab415d"
        },
        "item": {
          "id": "6c262b1e-80cb-4ece-b3f9-ecc80f6d5aa1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "199452ce-3bd8-485d-85e7-b4b32ff0fcb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04457628-7c32-4a86-8b81-d17dc7350326",
        "cursor": {
          "ref": "260f7b3c-8a84-44c3-ae2a-82e1ba0f983d",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "56873038-93a0-4d06-a23f-6910a4d985f6"
        },
        "item": {
          "id": "04457628-7c32-4a86-8b81-d17dc7350326",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2c8b2ac6-ca5e-4c9a-bcec-11537a2a9be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62810efe-96e6-4a5e-8458-874f9d3d7318",
        "cursor": {
          "ref": "d88fe935-d9cf-4997-80fc-d5b0603d2ea7",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "4a2047ac-8091-4b6d-b961-92d15907e7ac"
        },
        "item": {
          "id": "62810efe-96e6-4a5e-8458-874f9d3d7318",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "20f7e847-3a7c-43c0-83ea-202d856e64e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba42afa6-42fd-43a8-9f99-b7ba12d6e2db",
        "cursor": {
          "ref": "2e5f8325-30c8-4639-998f-a86b1b8681df",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "e59fd338-e5ac-4aec-95d2-b0002567b924"
        },
        "item": {
          "id": "ba42afa6-42fd-43a8-9f99-b7ba12d6e2db",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9ca3df4f-80a5-4cf4-a232-1cc11c14f5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d269194f-7b49-49e8-a5a1-9d920e3faea5",
        "cursor": {
          "ref": "64456fd1-de09-46d1-8776-ea4e537da5cd",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "0568c71e-d84e-437a-80f4-7f9f61f6f539"
        },
        "item": {
          "id": "d269194f-7b49-49e8-a5a1-9d920e3faea5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9de908d1-74ee-42c0-88c9-6624b352dfdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59caf87a-8c28-49f1-aa29-d6b521e7b0bb",
        "cursor": {
          "ref": "ad201912-f096-4f14-be6b-af8f8684fdcd",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "8d2f1bc9-6a5e-4abd-9f38-ed856a998fb2"
        },
        "item": {
          "id": "59caf87a-8c28-49f1-aa29-d6b521e7b0bb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7ddac097-dee4-4bfb-bc3b-8e7355f4c1ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850aadc5-86d2-47c0-81de-42f425ae04d8",
        "cursor": {
          "ref": "6731665b-4ee3-48e8-81d3-77602dbbb027",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "53ba3b60-5696-4039-b5c4-0eca9de04d6e"
        },
        "item": {
          "id": "850aadc5-86d2-47c0-81de-42f425ae04d8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3431ae01-94b1-49a9-9884-64bdc1446c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a558a448-627f-4f1e-91ff-02085be1abf3",
        "cursor": {
          "ref": "3731b74c-b729-41f1-90c5-e881d84d7ac6",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b53a480a-dbb9-4676-b5d5-38ea157cbc96"
        },
        "item": {
          "id": "a558a448-627f-4f1e-91ff-02085be1abf3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0267c534-1e63-42eb-83c6-ae4c3e4660cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e554bd88-398c-4d35-83e4-fd7b9c9c1848",
        "cursor": {
          "ref": "4ac876c5-5439-452b-abd1-91bc66063ae8",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a506a06a-8dd9-4740-b581-f4e00af73b96"
        },
        "item": {
          "id": "e554bd88-398c-4d35-83e4-fd7b9c9c1848",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c2e61c33-e323-4849-8201-b52b8bcd8c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4393e46-848a-4003-9589-7f1495470b3a",
        "cursor": {
          "ref": "d2baf356-0dfc-4518-a622-11415d8ed1f6",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "69963242-a923-456f-9fa8-82924fca09a3"
        },
        "item": {
          "id": "b4393e46-848a-4003-9589-7f1495470b3a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "10761b2d-2d58-46b0-a0f9-fa491577e852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98cdb641-aeb8-4187-bf26-2527e75692c8",
        "cursor": {
          "ref": "55d7aae8-7dc9-4ab0-a123-aa2e279584fa",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "9eccd8c7-533b-42af-8005-65b73632b059"
        },
        "item": {
          "id": "98cdb641-aeb8-4187-bf26-2527e75692c8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0279f604-c8cd-4bb6-aad8-c8c503eb3104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329a3ee1-7b05-412a-bd6a-e9eaa3745787",
        "cursor": {
          "ref": "5baf8a2d-aacb-4acc-a0bd-ad5d541d2a9a",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "4093dd2c-488d-4d13-902c-0777ad0a8b06"
        },
        "item": {
          "id": "329a3ee1-7b05-412a-bd6a-e9eaa3745787",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "90ffcece-cfcd-4271-9cc8-6a671dddac06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb63e57-4748-43f7-a8eb-140926c4dc5b",
        "cursor": {
          "ref": "72746a10-9fae-4be6-8064-11492d731903",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "147ff46f-a42c-4db2-a476-ae42337d1306"
        },
        "item": {
          "id": "dbb63e57-4748-43f7-a8eb-140926c4dc5b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "54211b50-15a8-4438-8a9c-461b29468247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ba7c63-adec-43da-8292-6af0f290d4f6",
        "cursor": {
          "ref": "a28a80a8-4df5-4934-b4a6-a8714c10945b",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "0f805a74-ff27-4865-b493-98b23bd37495"
        },
        "item": {
          "id": "84ba7c63-adec-43da-8292-6af0f290d4f6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6bcde126-e00f-4e13-9ab1-9310b3665ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14091c2d-6260-4b7c-840a-9538f34104f2",
        "cursor": {
          "ref": "e571ffea-287d-442b-9b88-f912bc5f0160",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "76dbe35e-e0fe-4921-a386-d48ab60c502b"
        },
        "item": {
          "id": "14091c2d-6260-4b7c-840a-9538f34104f2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "db3d61ab-38c6-486f-b5c7-2d304e1c001a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24a0cf7-8da9-43ae-ae01-fc4f758dbd7e",
        "cursor": {
          "ref": "b29d737d-adc5-447d-a0dc-6c62a205e6aa",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "3d07a746-f558-452f-a73a-c3241f12c157"
        },
        "item": {
          "id": "d24a0cf7-8da9-43ae-ae01-fc4f758dbd7e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1e546f25-7866-4918-b151-c4a00b650fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5b0c10-d721-409c-876e-9ae7e0110107",
        "cursor": {
          "ref": "2e24b994-f39c-4635-aaef-f98e3a31913d",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e36e2d6f-78e8-41d9-97c9-1c879f310925"
        },
        "item": {
          "id": "3a5b0c10-d721-409c-876e-9ae7e0110107",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a2b87666-50fd-4598-9891-a01a25fc01e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1369c1cc-22a1-41cd-9017-519c2ee8e794",
        "cursor": {
          "ref": "de9180ee-8ced-4b17-9a31-64f335b5dc27",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "5b0d66d4-0761-4237-be0b-2017e6d866d0"
        },
        "item": {
          "id": "1369c1cc-22a1-41cd-9017-519c2ee8e794",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "476996a6-6d0c-451d-b5ff-f4a36a80f444",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f2ad26-35e1-4bcb-89d5-f024c02a0a9f",
        "cursor": {
          "ref": "6cbc13aa-6c79-42fa-a5c0-32f8e04f86c9",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2a936f8b-def2-4781-b0c4-ca299cdf74bd"
        },
        "item": {
          "id": "d1f2ad26-35e1-4bcb-89d5-f024c02a0a9f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2a0e8666-f4ab-4c2d-ae49-e318f9033723",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "63965b9d-ad47-4cd0-bb67-0607cc324466",
        "cursor": {
          "ref": "713ce479-5f6a-4dba-98c9-81a2cba4630f",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "27cea089-81d7-404b-9be5-5287df166bcc"
        },
        "item": {
          "id": "63965b9d-ad47-4cd0-bb67-0607cc324466",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c269b7b8-3e67-4dfc-a833-231f92edbec8",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "389ccf5c-4de8-423c-9b4b-8263ac717d35",
        "cursor": {
          "ref": "67c5138a-483d-4b33-8fd9-b148aef40b88",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2115581e-65a4-4eb0-820a-bc6812916496"
        },
        "item": {
          "id": "389ccf5c-4de8-423c-9b4b-8263ac717d35",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "04f9d340-8aaa-49b3-86d6-0bb586acfacb",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c54c7bbf-4c9a-4a15-b3fc-5397463af496",
        "cursor": {
          "ref": "b5cb8fa3-137c-4077-b962-208b0a2023d3",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "fec9326a-981d-420c-bc2e-c7b34619f464"
        },
        "item": {
          "id": "c54c7bbf-4c9a-4a15-b3fc-5397463af496",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "af364dc8-4604-4397-a622-fd307f55df88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c54c7bbf-4c9a-4a15-b3fc-5397463af496",
        "cursor": {
          "ref": "b5cb8fa3-137c-4077-b962-208b0a2023d3",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "fec9326a-981d-420c-bc2e-c7b34619f464"
        },
        "item": {
          "id": "c54c7bbf-4c9a-4a15-b3fc-5397463af496",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "af364dc8-4604-4397-a622-fd307f55df88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a4c60b-b5c3-4cd6-9b83-e32db7993055",
        "cursor": {
          "ref": "26a69060-9930-4df5-ac2d-f056c4e3a296",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "7899be44-84aa-461b-85db-7de13be26c59"
        },
        "item": {
          "id": "01a4c60b-b5c3-4cd6-9b83-e32db7993055",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "abbbc7dd-b2cf-4a5f-8740-20ce7bd9b312",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8092f7-e778-4251-9fb9-80d73a558772",
        "cursor": {
          "ref": "c76d6858-0e69-4747-9ae3-71421648d6fd",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "900b068c-4c7a-487d-a6bf-ac59d70f1a30"
        },
        "item": {
          "id": "ee8092f7-e778-4251-9fb9-80d73a558772",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4defc6f5-fd36-43e4-89e8-5bd671d73519",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}