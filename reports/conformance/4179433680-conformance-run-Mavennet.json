{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "60bc74c9-cd95-4cb7-8388-bf1f31f2807e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "67d35e56-c2af-4f9a-bd5f-4eb3cdd49968",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "831df824-4ca9-4945-9c71-3f834186384a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1e93e008-d710-4e8d-b497-974781faf2ac"
                }
              }
            ]
          },
          {
            "id": "f635187e-1e98-431e-9736-94dca47e432a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6fb13fa4-6539-4581-bba5-9396e911509a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2fc77d30-845f-4ef0-a03a-4d887c4204b6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8edc6b50-9b2e-4407-a25d-f365c8c0e890",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "74a6dc6d-67b4-49c8-b1fb-1331029e3ac5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "14e3352a-f7bf-4b1b-8e24-89f4a48feff6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e356b3cd-025a-45b6-80e6-eaa703941616",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d69f8164-63f1-4e1f-917f-7509e979b79b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "571c4605-f19a-4f53-931e-ee2b67f20755",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "adab8fa0-eaa2-467e-bf3f-a2576f1083c9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6a6e6ee0-51af-4c08-b905-68687bb788ea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2555c6fa-cf65-41ae-a7d1-b5eacc8724f6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bdf71a32-fd52-4552-b691-536915177f12",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b75f186c-efe9-45f0-8d1a-fa8c9b88a6fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e628f76b-0c23-44a1-807e-1276aaf6d3e2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06cd610d-959c-4243-944e-325c94dbf95f"
            }
          }
        ]
      },
      {
        "id": "97ff9a83-5f64-41ca-8f14-f164d4ae27ef",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "20c05e05-c008-4671-ac37-13b24f0c392d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c77b1350-dab8-4363-a632-7ac340674e70",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fe0bd2ef-37a9-4e3c-a695-9a0205361cf5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8d7e27-2173-4c26-a135-55d78d9c9f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dca5d703-f9b6-45bb-9bae-989bc8c4c57b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f46d7690-aaf1-44a6-b405-a8d30be1733e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f32d95-9fde-4009-8ead-2f66b073b1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03ba77b3-b4fc-46c0-87f3-dccc069375ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b647f0-fc42-4c5c-bbc6-f2e99d9bd205",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85ae3d4-f6ef-49ad-8e40-f55abc0e2761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef630e64-9bd7-4e3d-b57c-2bddabd8d918"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5e575d52-1ec0-4138-a29d-a1575915619c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f0a5e25f-2ff9-482d-b9ec-975d45295a8a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd39406-3857-4bf9-b637-5a0606991ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fc02bb8-f4fe-4d30-b2d7-92700cab854c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35532342-3e68-4f4e-8787-9bf9714b4e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd31c36-ce93-41e0-ae99-dfd37942d992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b2c090-c0bc-4262-adaf-994ca3c4797d",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bc404b-d916-43eb-b61d-b8a38cf02ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f78dabfe-5cf7-42ed-9b22-fae0cc3dc470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360f083e-a3a3-45e6-a4b9-43d605512909",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "60759ed8-9ce6-4944-bf34-46f426bd502e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bee953c2-cf15-4b7e-b11b-b6df97127edb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ea0ed53a-440e-4414-b8b7-787a47231881",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f4ff44b-fe47-43d1-ac48-534a9298d0b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ef80d9f6-65c8-439b-90e0-79408eb814bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d87b7029-fbff-4f21-a151-01a70f459732",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c3b244e4-a0c0-4e77-90b7-6af885cf0292"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51dff638-0a5b-4d9b-8f59-73a981355cd3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d10164d5-1dfa-4ee6-800d-9377fa10a6ff"
            }
          }
        ]
      },
      {
        "id": "fe37bad4-ba08-472c-a056-c54ffc06bb90",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "add03579-44d7-4f43-bb9d-c838cc77fd9a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a85d3d1-02f0-47cc-ae50-67705ed69ea7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b7659804-4e4c-4093-a6e3-2b1350976a0e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77fdc22-3f17-4b30-b01d-c9854b713ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "703f1451-c189-4335-843a-7c290c5d8c8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c96d0b4-d994-45d9-a109-fc1b24d12af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "305f408b-3e80-426a-8b48-bc84e9a243d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d1c4dce-ddaf-489d-aeb1-dccf5e923ef3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5b0d6d-6705-4b01-a194-818af2c82694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b9c9bf8-6079-49aa-b238-54013801f073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ce79df-7375-49f5-93d0-bd2e932f829c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57e145c7-c353-4055-8225-e76629921149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24fc52f7-2d76-4ee8-85d4-62fcb9614489",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "157b9448-d323-4220-886a-8b13dc744fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e40b66c8-c390-4f73-8dac-19346945a639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e66651-5e80-4e51-944c-1934f0b0cb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e019d2c2-45e2-476b-80ce-e85546b723d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86b0938-3531-44f5-aad9-d65f697ff4b9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f11c59-3b2e-4165-b802-09a4e813b3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d7069da-8c5d-4616-80d9-6086f4d0b14f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ce08a1-1e8c-40ef-ad81-ffb67f8f44bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d686579-6c15-4ed4-be2b-441b551c31f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e84f33-b8ec-48fc-8428-77f41f0cbe01",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66a8b11-1bab-4122-bb64-c011049cb8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09071333-161b-455f-862a-3673e5b51f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f892845b-353f-4d16-9e80-0383e8acf20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f510b8f-637f-4e57-bcfa-d9ad4479eb50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591d62ba-ef65-414d-9ba2-45e78c0481ab",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fb971d-8de3-435b-9d0b-e01b0457ab31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd8d24f-9d39-4d37-b300-2516903ea695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6e1d42-85d3-483c-8c3d-f925b069cc4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ff1f18c-e372-462a-940d-91bb9a11aa21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3613d35a-3e3c-492e-b02d-2a8ed4b059be",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25023a4c-8fe2-4993-901b-98346b8b018f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40758cb0-afcb-4e14-9be2-46280266c21d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36ee5e6-e68c-4dd8-b7d9-bdb5d30a79e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0fe3f193-f648-410c-a67e-7902410de6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2292997-0ed6-41b1-9287-127d80ef28f5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99858a06-7b34-4b18-a178-51b34e95ebcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad54fdc4-fdc3-4d45-a391-a1f992c3b99f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca8c71d-f8fe-4abf-ad6d-9b9613e3f39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4bb036f-dced-451f-a7ee-3f79701283e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a3fe38-67ef-42dd-812d-d1b719da2fbc",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b8a7f6-711b-4a5a-bb47-a7419e2d93c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2470b43-ef4c-4fb6-8e2b-54bc8fac6a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fff99aa-efe2-4093-908a-2390e88c28b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a4ddf3e-bbf0-4272-bd50-4c754efb8e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf59b7a0-fcd7-460a-9742-82c2d8a9d728",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9dab12-3edf-45fd-88b0-8fd26c378b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ed6608-83ec-4d25-b370-b0f75bdec6dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "381e36f5-3239-422b-8f3d-94bdf637a21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e82a2fef-3a3e-437f-ab85-8b8bd9d51497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87b2055-30c0-4740-8869-6238fa4c66ab",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7032be81-0fe7-458d-98e1-e4a20ab045cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f48d7265-4899-43ca-a1eb-d20218613b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f506f00a-f61a-49b5-9d19-11bfe82028b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f2ef0f3-2841-4d25-a929-cadac2ee0fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8266e1-db85-40eb-9884-7385d51dc45b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a4baa9-25eb-4d46-b19b-8126bbff3a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a1dc87-3b48-4243-a523-d2580c86f6b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415eb755-7800-4f8e-8ee7-1c32bf21ba1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4bc30c7-85c6-4943-a4b3-a6045f0a40f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c60ebcb-82fd-43b5-8695-d3527c424716",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5dba203-5064-47c1-925f-bdcba4254803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62dd5017-9da3-4a8f-80fd-6a444f063632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33353f58-2627-404f-93b4-43eba4949909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "6279a022-3060-41ab-a3d5-c61e270821ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf84d9de-131c-4ebd-bb37-73259388960b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b92ba11-2763-44dd-935c-885ded8c7c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aca3f18-3940-4790-95a1-1e23823d6d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0dd86f-5917-4bf5-b0e0-460bbd7358c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1c27c0b-4a2f-4026-a850-edcfc28fad49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02fd40a-12a3-4ac6-934a-3856203640df",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5051158-b4f3-460b-b9d8-e9546f3bf1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b285df8d-6476-449e-b300-2db961da931c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0828619b-e1c9-4712-afa0-737a7571eb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e757a07f-028b-442d-982c-1367cadce6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f886df4-ae23-438d-a7fc-707f9fa0aaeb",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e21048-e469-4909-bbfe-de193febe987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d866c32c-66a3-4b44-b3e0-417b0cde36ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc800c7-5c33-46d8-91d5-4a159826588c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bec9c4f-0475-47e7-8edf-f495df3f5703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d32bc3-c015-4e5e-b3d6-9ceb57386ecc",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b9da5d-f3e5-4a1c-a937-575fc3fed960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c414f1-f17f-4320-852b-e39ff95f5b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c63bce-5963-44c7-bb50-e01d16b18355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "293bd4bc-7036-4caf-ba96-b438b008e613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04af734c-cca3-47af-9675-222b4a15f6e7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19304160-b2b1-413f-b56d-ac82f97ee74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8484f975-1ddf-4d85-8a38-d814c5b651f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7513c9-8810-4b40-9673-026d9744e202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c174244-c3f9-4299-94b0-82aa6ba84c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cda62a-c90e-4198-a89a-b0d0281657f6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f236ff-4d67-4cec-b583-a907dd05f274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e6aa34c-2fe1-4436-a374-79af3115842e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04083e93-afd2-423b-9a53-06a34f54de01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d53dd5-1bd5-4b04-a2b0-e3e9c8394e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32a6127-5a80-4bee-b943-17801997e64a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2518d529-21c4-466b-bf1b-5ab7229f9305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7eed9bf-e211-44ca-88d3-e8fe58ae7284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb25704-6560-49c1-ac29-33fadc1d7be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "149c07af-7b3d-4f4d-aeb5-fc380648831d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c05db9b-f02c-4438-8394-d1333f6389eb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc84350f-e3ea-4127-892f-5a8cf32ff37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce40976-3762-43d0-9ea7-ebf02112a769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79a990c-b1bc-4b39-98de-35a1359b3a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86c93613-9b97-4bff-91c7-1d7338a6ae9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec244df3-5474-4db7-bd1e-aee49e669674",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1862309d-5359-4d4f-b1d1-5152eb70c84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b58ed6-ee33-40c9-a643-da98a02f0595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f65e3f-f30e-441e-a004-db43652b4ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f4e9aa8-8664-43f1-9e45-6b0a542f221c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a623b30e-68a3-4377-8b99-8086f66001ea",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7594ef0b-7d2f-4da8-a9e8-3446c9bf5f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "854408bb-787f-46df-8534-34556ae12ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c3ec60-d557-4473-ac89-b4a234dd94b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d280ac71-6040-47f2-94f9-ce8fa9af5fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38afe04-2e63-413c-8e81-edf9c8f79bf4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a1b51d-6284-4879-856e-c6955c69eb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5301399-c028-46f2-a274-e0c8541234fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e0344a-6fc6-45f4-8a7e-fe85b3581d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58e2a8e4-9365-4a58-a8fa-44093e85d1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15efeaae-36fe-4b5a-826b-30770ff88362",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed282a03-a4b7-4a3c-9d09-3b10e9e5821d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bdbc5bd-3b0f-44d1-8889-85a77c2a6201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6599fdb6-a928-47fd-b94c-ca35c0243b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "44826929-1875-43c4-8ce9-6f82d16779ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52f6120-6720-43d1-ba5e-496ea8f5bce8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695e71b3-1625-4d15-a12b-7de36c34640e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae50e438-92e4-4bf8-819a-33c63832e4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70be06d0-dbf3-4282-92e7-1204f2ef3972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c33c899f-401b-4a62-89d7-6d202d934455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bbddd4-b586-40bd-aa16-8935c9d13aee",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefc0c2d-1bb2-4164-a08c-36438493fce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a65f49f9-b0e7-47e0-8e31-4e9f6e38d3fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c7ae73-73eb-479e-bc09-7a06aed8e0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac924b5-d0bd-4e58-a858-6cab1bb72df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e93d124a-51c5-41f9-adaf-9445ea176e18",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f865ade4-5e32-4b61-8ecd-5f8178a7e478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c27319b-7ec6-48bc-834d-640f05a0c35c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68b29f4-4a8b-4d03-a6f2-68bad0ccdf8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5db7b9c-54d7-47c8-9243-f5bb3f8f8d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe6bf56-ecf8-4516-9e98-043948636483",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee30009-6baa-44dd-a7ce-752577fc9ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14c754d-cc79-4147-96f8-e5f8dbca1ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "602f066e-9e8b-428e-9b7c-c4b8e6e51562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b291f2f7-f736-4d66-bab0-51c9bd59b98a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944d6482-067c-42c4-9a3b-99681973e0fa",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e081f39-eb00-4da0-b418-762bfb0e80f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6434700b-cca3-4eb6-a76d-76e62f3e1505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3fc569-79c4-4c3e-b98f-96b735a9df51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c76d18b2-ec77-4e6c-b1b9-49ba53dc9fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92dc8e0a-a212-4c18-baf5-1f71ec9f0fd2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e39eb7-a315-4744-a773-a19555e6da12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db131316-3b38-4009-9552-68f95209b12a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d2fa45-623e-437c-9a6f-8e46fbdc5e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "643f8b6f-ca50-4fe3-8cc7-76b0639cfbe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0167cbe8-603c-4297-8bcf-003c9cac1847",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c548f481-ea75-4d5b-853c-c208c6364be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12fe9459-5cc3-43ee-801b-1f29e1e4d5e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e91b2d4-a10b-430c-a51e-ccdf65329e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "46ec048f-c402-4808-ac2d-c15f97468a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693652d2-9c3f-4f3e-ac13-02fca9eff238",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc23869-779b-4cf5-a915-711349f59f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b40d92e0-cf9f-4926-aa96-4838eaf5ba84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71042bb0-b226-440d-96f1-b6431f4b3c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d15112d9-e4a6-4a74-ab2a-41fbb7740de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9376cd-95fa-4583-bbb5-6442bb481e80",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cba3c71-a9e4-412f-98c8-033c613b8b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c12d7c4-e52e-414e-8e94-9eadd2c7d2c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac915262-55ed-4c33-a660-285166a324ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5a0c5cc-1c7f-4bff-b851-a222b94b74a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc7630d-b05f-4e73-8b4f-72072265f1b9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f43f72-0492-4b8d-9046-a3d693a8dfa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3e9a8e5-767a-410f-8231-4dbb749f01f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32f4d7e-169a-4bcd-bdfa-b338de998b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c471af5b-2331-40da-8ae8-12194ee00200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc26c391-bd9c-4f81-907a-d681462a6ea7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc111bf-2e16-4d4f-9955-125175e68e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad06eab5-b399-4026-bc91-3cc57b4c8d76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb3b953-e577-410a-8e44-cb8d73a672f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "349235e9-fa21-4111-b431-59f66de4555f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7101f7c8-25f2-4835-a3ce-3ae5ab46425e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fd721d-6575-4572-b4bb-17d2fdd0fa42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3551549a-cc44-469a-8b52-67df84a7ee99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e6f06b-ea70-432d-8d74-c544412d242c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fcdbcb11-1954-4ec7-a50d-c981170447b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706951a9-82f1-4c64-92d5-fb4ee8812678",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c032d9-92aa-434e-8c85-0261c3b9dc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8e7a19b-f88e-45e9-87e7-8a9857125cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82579c60-5b05-4a52-bdb6-29286fee3780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "181fa158-f18a-4deb-87f5-ee8eb2f439ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aae698c-d006-4990-9a68-01d584f9534a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3b0672-57de-4380-9ad7-97a3ac86d97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f916dcf8-e26f-4245-8968-8a8644c86b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6930badd-1093-41a2-88c6-2909f14a75aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "43730369-499d-48fe-af10-1a8182631e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63bef126-9dc9-4351-94b6-b821a3a1dc7b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c792ba4-8935-4056-a5f7-7201d8566c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "533a5d2f-1ad9-4dcf-9c1e-e9c8310fed83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3034d9-e0c4-49f8-9c0d-c1c6e1ffb207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e14a8ea-c395-4038-83e5-08b940772ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4cceb4d-ae0d-4917-83ed-a8bda1c59316",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6723d758-b93f-451f-a4d7-4698be21b884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f081f405-c6aa-4441-8ac7-c54e1c90425e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5b7242-6bc4-4ba6-9e36-9b3c35d73aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bf1a9d6-59b3-4b2d-8b70-3e820fc734b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762e11dc-c446-40f5-8a57-06b414eb6c7e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df60ab7-821d-46ac-9e2f-8d4abe8361f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11cdfe73-dd62-43ef-a575-405a53ceeea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2564d790-61bf-426f-8be9-0e10e440b2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "abf6e67e-5c34-4a00-bed1-8cdddfafeb4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce2fd7d-74ac-40dd-9adf-d0baa7ae580b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88add937-274a-415f-984e-d499d232d291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad5bcb0-db54-4f83-8906-08ee59b4da5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cee2431-69b8-4560-ac4b-cd38aa709d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e04dfe3f-d6ab-423d-a105-0d8c46942faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ba2aaf-d782-4caf-8983-d308187709af",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27639fc8-1469-432f-8fab-e1f294108510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17bdd80a-5d6a-4f42-852b-60ded0540273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a754ea-2b28-4003-919b-4cfbab89be42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d1f6658-7155-4159-bad8-b9746b9a6d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab9d56b-bde9-43d8-b6f7-372049368d98",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52fa9a81-bb8e-4c61-bf5f-cb684f876abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326a7e81-cbd4-4bc3-b49b-c0243ae626ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979e2a09-65e6-4532-a371-67bc03d1bdf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f764b65f-a656-4340-8219-fde7db3e0f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267b1da9-6e0c-4b29-bbc3-b9f9b0d5a4d8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fecbc04-348b-40eb-81b9-45f434aa1e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea236761-179f-416f-8a8c-2e38edae19fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601e890d-21e5-4eae-beec-66e674c6a196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2826e5f9-1b85-45cc-819f-f32d3a4fde46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927a3d19-6de1-4d59-85a2-431645c9aec5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb26995-97af-4f88-9aec-cf4495e8e853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99d5549e-0484-4c02-9c24-9ebb4236a0d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6901d8a-39e2-4988-b5ee-2ea7a5e5838e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e077640-646d-4311-85e5-53a799f5d142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd482464-30a4-4df4-bb48-7975f23413ae",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4b5f7d-264b-44d1-a0e8-fd3683984eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4a4701b-5e89-475b-8545-4bebd004c2ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63d1696-2d8c-4a16-b474-728de4cddfdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c252dc5-86ac-457a-950b-c6831bc2f80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae47b9ee-db46-4253-8b7e-c74d64e9cc55",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c10e371-ac8d-4ec2-82cb-a40bda7cdc04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "548cf2be-1351-4b7d-83f1-c21ef4cf8430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d60d1e8-c2f8-499e-b52f-e7f6e0a854e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a72eba2f-1b2d-422c-a5a1-ecd9141822b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c605737-3575-4d62-ac4c-196f959bea0a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e8e4b4-f18a-4cc2-8853-92374a5161d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7767b23-ce4a-47fa-946c-70e9f70e5eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f264b14-25fe-4aab-866a-145b9808dc89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2cce95c-0240-4001-9459-f5be1f4787a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6563a3f-9529-47ed-8c03-6f88c315c23a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87a6b42-e897-4911-bfba-c4a7c4160717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12c75d0d-61ab-44f3-878f-3f5f3baef81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475b1525-2cc9-485b-b097-808f74e0a5e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64eef0a0-15ba-4830-a22c-b4e24e55bb5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b70b91-7df7-4a2c-8083-e742acff9b10",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db5bd66-9709-40ad-acac-389674518e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a340db49-926c-4fa5-adf2-0903eafdf965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25063919-5c75-4fd9-aa38-7d5e4d517bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "050aff56-fd21-481d-bd60-04cad209fa98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed94726b-23e8-4d81-9055-735ac3977951",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179c9e57-f271-4f29-89aa-7eb7ccc6cc04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59475e9d-9601-4b84-b988-4613c2cb6b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ee7ed0-3f7d-4221-905f-d49aa8979eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9aa3902-3028-44a5-bdaf-6fc8489f1e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb45ebed-3004-43d7-a3c5-69a6cdd7d041",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae260ad5-89f8-4114-b88a-dd16f06878d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6f432c-776f-4be7-8927-8f4693ff1632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347ee760-454c-4c98-b29e-de57f007f3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab623bf-cdc1-4120-8084-a974f8a51a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3877ee-4792-40ad-8d17-d3a0123a15a2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b63174-c65e-467e-a1d5-45b07aed2ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caa69351-69d4-4b5b-9793-71c55b029e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff31c34-2c04-4d6b-b54c-bc8cbc300362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c367dbad-f6dd-49e9-99af-93de1e949483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45764365-dcde-4c5e-85c2-7ab8d6870ae1",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1a760e-2d5b-4dfd-86bb-47c8596f8814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b41e93-7991-4185-be89-8947815ec0a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aca1400-a878-44fd-9cb8-58b21c8b66ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "264f00dd-bc41-47e4-9d5d-5b7623be2627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2a0e45-a80d-44f0-8db7-aec66f7179cc",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d58df7-4350-4e2b-a8da-07163728f5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b27994-628a-46f2-bff4-56c0b2eb637e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d791b7b0-bf4f-492c-96d8-c133b9e36f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "cba38de6-d50c-4968-84b6-4b9b37e49e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd7bbd2-b210-4bcf-82b0-79d5e4396e02",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abcada5-f289-4fb0-9eb5-d47ee9461819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7f2ae0e-b6f6-4b62-8cf6-0a10caeec8e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9276a903-815f-423b-9598-f472a8445974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7772c07b-b0ff-4d6b-93a0-43c778de5563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011c39d5-d983-47e4-b0b1-fa0baf468cd0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd35d4b-0677-4fb1-8da6-bdd0c5083f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721bd7c2-7315-4e67-a384-c7fcbf8852ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfa526d-edb9-48dc-9cfa-fd5a47e500a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5429cc71-75fe-415b-a4ca-48d24c6c7a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43935f57-71c6-4684-ba62-6231591887ca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5acd121-e39b-4455-905a-c349ad531fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25641db8-7a95-4a7c-b5fc-5c5fd10c40f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4165d6e8-4d62-4aa4-b033-2cb41736cc1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e222a462-dcf5-40a6-8de5-b0ae93c43c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4e704d-b5b4-4997-8f80-e22652fc2035",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef07355-5536-40cb-b24d-3be0036ad0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f874a24-b101-420b-a1be-65a5f6bbf9c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2e24ab-79a2-4b9f-8cd9-d862ba453bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9775253-1272-4ebc-9738-18c96f96f994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83365c2a-c00d-464b-be7c-9edb5382d841",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb36d7dd-3740-4217-a50e-6421b5356c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a2829f-8a39-4ae5-b0c0-0aba8e3e6517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47e08d8-29b9-40b7-b5e6-52884484bef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8245716a-bcf2-42b1-b475-197c46d70cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a28ab4-652b-44d9-b038-656d273550dc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670cc4cf-913b-4e3f-b375-055aee888a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "763501d3-4bfb-4893-9ccb-f3b571bd576f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd60853-f4d2-479d-8308-987916742310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3af279d4-4273-425d-b9f3-003a6f30dfb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3c7ec4-3008-4e6b-a329-767b7716b074",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75292f3e-21ca-46de-9703-d59cafbd9880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade3426d-cdcb-4a78-8a26-47aee5ec08fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ffda8a-f418-49fe-ad73-22ef9eede280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6773cdef-0cf7-4b0d-a1d2-1562817e3dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05953c64-673d-40cd-9e32-227c1f0c0525",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7597f67f-0337-4186-b76e-c3885b4e3344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f9ebd8-0bcb-422a-aab4-8e3d0da87022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0adc7691-3d17-43b1-8dba-b6238cc3cab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ff20f9-ad70-4ca6-8637-856d48db2d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd770e3-1dc8-49b4-be65-243a32d433ae",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83ce1f2-cc71-4668-b3c9-c5027f9c4ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12720eda-276d-458c-be06-95a20aa317ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973128ed-9aea-4f39-905d-c097cd65002d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a61fbbd1-dfef-47a2-93a7-0d1822ddb964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9accdd-a3b9-4083-aeaf-e95c9048d8c7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c42a62-8968-4c90-b8ac-e15eb33acd48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d6d23b4-f935-46fb-99f6-932c6017b1d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a04fbcf0-5fd7-4290-965d-a0671416b959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7794b4b-e89c-4864-9ed8-34728f548969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a356813-f4df-42c0-8555-72cdf047815b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce96eba-6bff-4e7d-b0bf-7af5601fb039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5083a07f-9fc8-4de6-84f8-c47a6a33e0bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e59299-face-4684-9a2e-b4a3794a7528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3d646c-6714-4c2c-950b-d4f977751b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7158286b-d1f1-4707-8b36-e3188ccc959b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade6a995-31d7-44de-8594-252a8e9b4687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc352a6-7623-4dd8-b9a0-1ea2264f75d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b208239-7897-4fdf-9890-5229cc0bdf9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9385ef5-3ab5-4709-bee9-0ad1ca28bd0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78343891-9cff-462a-aadb-387fc841c65d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df55c59b-3478-46a0-b8d4-0fd7673868de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f92eb99-5298-471c-927e-cee2ce5b0768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce8a504-ec59-4921-a1e2-ef3cad5c5b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "13557fcb-983b-4342-b892-7ad8bee53238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9569f9f7-cb01-4cd0-8e51-98264611d0af",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3b4a0c-8bf5-4e99-8012-b85409cf9a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5b8a12-ed8a-466f-a910-ba866f1ef09a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b7c727-6b6f-4ffb-b7fc-dcba615573ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb62371f-b46f-423a-99a7-26f3a68fe07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827a29cd-aab6-4e07-9460-f7deead28e7d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d896f0-5e85-4cb5-97ca-419ca8b16cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4589f9-f51a-457a-8c77-35cd228c3794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb15bfd-735e-4e84-8f1b-f5411bdea7f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b61da617-11bd-4ace-be20-6ca0f4ec072b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcfb91e-4fc0-441c-a9de-7ae75be94a80",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e3db42-0cc6-4b9b-a184-7c4265f7c754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f9f052-693f-4fb0-9104-8577f9d60707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774f6f8e-7dec-40a9-a304-384a28fc9d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c92c8c5-0c1b-49f5-8ac0-4a10ddf65186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414a79e7-68bd-4ba7-bc9d-0abe19f0ca27",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9f1a41-afaa-463a-818a-39792700a74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "449b1b23-1c63-490a-8418-35a57e245834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3980e5-978a-4392-8c03-7187c45fa17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "70103b49-f38d-44bb-bf4d-989af4e6da2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f2d3c1-5d09-4bf0-a0a7-50bc2935bc46",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f218fb-4308-4cad-ab1a-e79c11c30956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d22bad-1ee8-404a-a597-ae37534f920b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532d27f1-cd47-4164-9c0f-4d22fe13ad18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd105c36-5301-4057-a581-9115dff2e161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c8189d-ee27-46f9-bebc-db00f9729be2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "153d364d-ff2a-4fb3-a4fd-6e92fb977ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f5566a-a707-48f6-93f7-1810ee2c1925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a167d3-fc04-40a6-a635-cfb148c6bc35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "346c97c2-fb43-4926-927c-0996cc980f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a449702f-3737-437d-9f0c-e73eee413649",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b7e54e-9a6e-42ee-8ae3-8bf407b9e00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66dab947-ed5a-41de-84e8-d0065270a850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a056597-9cff-43c1-aefe-e4af2474f95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "14d43b7b-25e1-4a1f-a638-950df1437999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95563edd-cb3f-4d44-b71d-7b323f0e2d58",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8054f6b3-9f33-48da-8740-9412bb152473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8b3a07-6ce4-4420-be85-250c7dbeac4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a542814c-48c2-47d6-a73e-4842065ca676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "405a2d98-0e23-409e-beda-21cf32b88710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832a2f73-4d34-453c-9f8a-42b07c269631",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2707f6-960a-4df1-b56c-68b08e8256c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe7969e7-1577-4a46-9107-1bad1a70f6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a63368-7aed-4a42-9715-30d68e175c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "164ec238-11b6-4747-9c8b-2bdb48fcca43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6405508-e746-4d44-be39-61ec96dee2dd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35214fe9-093e-4870-95aa-55e7ee3a78cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2edc9867-4bfc-4440-b5de-3785aad148f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2aa6087-5435-4851-92d1-501cff463785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "031ef72a-dbf9-4461-a4e9-f9a3bbaffd99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39beda85-d3e7-4621-8294-2402803df9c1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b30299-dcc4-4e06-a0c4-50bf74d0e00d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "657bf218-342b-4f65-8b22-9007f07383f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34bd8dc-5011-4af8-bc12-0ef13c9cd34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59058d92-3bf2-4753-b55d-74f9eef6fc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc298862-e597-452d-bf1a-02f43fdf1fb2",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86908e0c-a823-49f9-86c0-4180f58bb541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fbb6db5-8a0a-4dd1-a76b-69e5404dfe26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b86b096-ab68-4ca8-b3ea-bd6829693f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d38da7e-ce60-4ac6-9cb0-bf457ebdafde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ed1eee-39b2-43c2-8954-5ebc618123f7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26869b7-bb03-42cc-98f7-8b42bfc49cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1231b8ab-9ab1-4d8e-9c3b-efbd6d18bc78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b792793-6ffb-423f-861b-22ccb9b44c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83f7e38f-41a1-4c50-a6f2-7c616e0dbc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4e128e-6a8c-472d-b8d0-56c10dd2c63b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a05087-59e9-482b-a270-9c9d97f1924f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e8efe2d-e8cf-4c82-92c3-f354c4f6005d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07440c89-efbf-4d3a-9ccc-da6111e15275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd8c982d-d2b7-4ac5-a816-c8ff2f04838d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f5262b-1526-4680-9083-808a3896a433",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d886f8c-162d-4bab-bb1f-82efe7f62395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e2665f5-c91b-498a-81fe-41d82eb98cb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10cf9e4-71fc-423b-89ee-90f8d1daaa16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb38519-d641-4e1e-9909-f0312a785835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92a0882-07de-44de-904b-5f38e6e3c873",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9938df-d0c9-4f4d-b5bb-af293438fe14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e28b793-d870-432a-b8ab-20869cae04ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddad825-0d16-4582-a818-af0b6782ee4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eba4f370-fc8e-44ca-a5e9-404628883be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6d28eb-83a4-4ffe-95fc-d6a0fc4f6da4",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a02ba3-f261-4d60-9172-93a5192ee8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13edb01d-21b2-4bb8-a4fb-c089c998dcf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948a161f-dba5-45d1-86f0-54cef4cd69cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4fd209d-ebd2-49a3-b7ac-6bce126f0b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5400352c-6af4-49e0-90de-3b7096f12c8a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97106e4-aab5-45c3-8369-f16fb32fd7e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69cbc4b0-9e56-4eca-9d7b-4e54b6e615f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1033a7dd-71b3-497e-b05d-ad8af1a42164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b355107-ccb8-4318-a54c-4a5853d33ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91fe3f3a-c69c-4e2f-a874-475b7718f446",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b8862f-b31e-4423-9ef9-0cc22f9ea1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824c0b5c-a353-436d-9155-79c79e40db0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e0d2a9-b18a-4bb9-bd16-3ccab28cb457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a681cd4b-c136-4c00-a9d4-c44b9e1b69ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f4ecf7-89e6-4545-9013-682bce6ae206",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81136758-dc84-4137-9d7c-3f4cfaaffc0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f191f7-3ff2-42d2-98e3-5b9cb861838e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10140292-1009-48eb-9a56-11286fff1529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "732f7ce5-1ee3-479c-9a6b-321750cbc508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555e72e3-36f6-4c22-a446-38b24962e2fd",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fab9b2f-9e2e-47c9-8a0f-ee5d6e637aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2898985c-976a-4e23-8b4d-e95c51d5d26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f2e91d-8cea-4556-9aa0-4e3b7218596c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "33ec6417-eb09-40ea-8276-e768f18c6a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7dfa38-1983-4c41-b033-94ac994b7ef1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5489e8-22f6-4052-8ce1-e91b6a296e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecd92fea-7d24-4fd6-bd64-d403f70f95c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17525fb0-b21e-45ff-b2d2-940a70d20a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b3a2fa9-1b31-462a-88df-f1e110e13bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680288bc-66ea-400d-aa07-8c2e650972b0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d350f4d-ec6b-48d3-9800-19f34d762cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4d8232dc-261e-43f1-8b5d-b9300555a4c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b559c1e-0718-4b28-9acc-5ea0122c3d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f895f3b1-9ad2-4ea3-9ef9-14965b592a84"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "160acebc-4cd0-49f7-9018-6b0ac1a907d1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "733f3b67-5e46-4555-a260-b13032ea9014",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6651be53-ad52-42f0-a9d7-e2dade4dbd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ee32661-be78-4736-9781-a19c0b753511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c858f2-4b40-438e-95c2-3c5919483e9b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8b6585b5-2977-4bcc-9b0e-0f5f3b3e6d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc4c38e-a503-4d1b-a02f-88a4570f896b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254b578b-b294-4826-8277-dbcb74387338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6df82ce0-5725-4914-aff8-78f9b9c6d5a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c9abf5-51b8-4314-9a65-b6a4bedeca70",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "e7d9bcbb-ce6f-49d1-9a06-c1923509184e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9cc4b80-80a0-4d67-b59e-b277f73b30cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee8044f7-d5b3-416e-a9c5-84e7c0294df9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e30f22db-639b-4362-8b4f-ba33e1cf4aaa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1324e626-8523-4ab7-99f5-c6f81815b43a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a8929e7c-94d6-489f-a9d6-8ddc03c60093",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e60e0e0d-dbf1-462e-bc91-272a4bdf8c9f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bc4472a4-44df-445e-92bc-af5bbc99678c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e485df5-afec-4dfb-95cc-2dbdbe771da2"
                }
              }
            ]
          },
          {
            "id": "fbd9133f-4b19-4179-873e-39a72c437f49",
            "name": "Positive Testing",
            "item": [
              {
                "id": "12f04a33-3546-4354-899d-6a25e15d1c13",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8bba02e-331a-493c-8aa9-ae13393c3097",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "700fb691-e696-4ad7-a333-55a85d039779"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d56983ba-36ed-439e-a9b5-f9b6e0a035aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "934d1abe-8a7b-4cb6-b326-4577130e8631"
                    }
                  }
                ]
              },
              {
                "id": "6ab64619-e809-41c9-be33-6441eefea4bb",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1345ecfa-c0fd-416a-bff6-3ecff5cc0b8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7420049e-a7d9-4643-b35e-5113883ecd36"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d18e68b-bba8-47d7-88bb-8e89db336706",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e62a4d5a-cc95-4026-832a-1b7c96dc3246"
                    }
                  }
                ]
              },
              {
                "id": "14f186eb-f7c6-4b22-a5f9-f9ec98a3eef4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b95e1f7-7034-4087-b724-ca11f6ec1c04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "07ce93e0-0ed0-4028-b8ca-a057ac532580"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94f1f5ba-3457-4ceb-8cde-3fc4750d1e82",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5cf4630d-1213-4691-9bbc-85cee5dcea81"
                    }
                  }
                ]
              },
              {
                "id": "df0de78f-cf7e-4e1b-a969-fe471bf972e3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fa2b5fc-df87-444f-83b1-855375387184",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc819811-e513-40e4-8411-0de4f954baba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f215cf0b-8f99-4c37-b335-e25695b7b4b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "29da5784-a0d0-4a90-881d-4b4b3b06ac8b"
                    }
                  }
                ]
              },
              {
                "id": "0c9211a8-d673-4305-bc49-6b66fd73abda",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83784cc3-8936-4ab6-8148-2d54832fc3ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c5909d22-05df-46ef-a15f-5838412ad4f7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16696e87-9e70-4056-9f66-9ff70ae76f58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "17dd7b22-6cbc-4bdf-ab4d-fdea5dd30e2c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1a65cf3d-a102-4c03-a240-3b14fa3de32d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "800f0825-e1b8-4f8c-856c-1b0cfcaa8565"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b76c8879-9dbb-4454-a66e-717fb8b72779",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4c3dcf02-fc2d-42c3-9771-4a7d81846360"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc8bf7d2-a081-4533-8ac3-188827d13b30",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5f1c5dab-c14e-4c5f-8d91-1ef0e8b5e729"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "168c9801-bd72-4fb8-a6c4-570292243ba0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "277c6b17-0448-44c8-ae71-99962fffabf6"
            }
          }
        ]
      },
      {
        "id": "b6d91a98-8087-4b18-a156-f77f0c52441f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7440a46b-32b0-4bf4-b541-5fdc6bb10ff4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11dfa361-d5a0-4f56-b194-0170d391905a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6f25865a-ef8b-40c4-9330-919dad90b906",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd09f858-5c83-4bc8-b8bd-9665c252ec00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "577c7b62-6f5a-4a64-8600-5d1371e269ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01816198-9f1e-4993-8d46-fbf7f2769f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a50179b9-2f92-44a9-a7e9-42e3e1469f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5311326f-1115-42f3-8f9c-0908f7ddd8fc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b138bfd-d88e-40f7-88b9-934af3258eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65022f1-47df-4b33-b463-fc5272deeadf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d06c5a3-deb7-4dc4-af46-12cd26095b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c175cdf-f9ef-41c4-b913-9b5247d5b6a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda5ee00-3e14-4e8c-8785-9d1df8a73541",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "333e3646-9bd1-4337-85a9-e9c4c0fa4b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d799a6-c465-434c-a038-7c3a8a031b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306b9a10-a742-47b5-b379-92f45e51bcaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bd99bdb-65ae-4e4a-bcdd-e2ad06433989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc89b958-c213-4df7-bfab-dcf597b544e4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e6c3e2-660d-4b50-a71b-c06949d691a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e3b1297-68fc-433d-bfa1-eb1dae1fc914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba759abb-6aa3-484d-8c9b-311d93c9e0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7aae8df5-ccfd-4e22-badd-a54b4b868a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4864f931-620d-4325-b877-5fe1f43178b4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee56f0f6-ecdf-47dd-a05b-fd6f6bdc368f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "706bb494-0021-4b52-98c9-830ceb64a02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d94f34-6e44-47b7-92ef-c8052f848498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d28046cd-547a-45b4-8f84-7aebedce9d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68c1c77-c4c3-4669-b64c-e709dce972f3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1ff531-ac4f-4d81-9a31-1ac1225f2da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e527155e-ac47-4d78-81ba-ecae8dad6415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4dd7b3-5b08-4d9f-85e3-7fddf2d25d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "94f5d7a9-1b89-4790-a2c4-3e12b27c000d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6535bcd9-7312-4068-b8de-4416ecef26dc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0e3b22-f4d2-485b-adbd-29b388222296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480bb6b2-6fe3-4dcb-82eb-f4a75a486a89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe6a371-a11d-4f90-b3cd-7c07070a8912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "be64ce7b-1f5e-4afe-be62-93f73995f483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504c4687-1e39-4c8e-bd71-6a7384d5bf82",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff00433-e0b6-43fd-823d-71993d43d0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "059cbccd-c460-45b8-817b-e18306556a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6047cf-ede6-4d5a-82d9-f6d9237c6643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8aa5799-48a1-4da8-bb4a-fba98d7ef9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17557cd2-ec25-47bd-9dca-bd0e616554f1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fecc08dc-ed82-4ab1-a060-9b88bdcc5d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eee7776-88e9-4e21-b76e-b6fe337ba255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1822db28-5eff-402a-be7e-c853ff5fb04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7681e2b7-4a3b-4aec-a948-69805017894e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102da3d6-92d4-454b-9642-6b032a82987c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1f2dcf-125a-4800-93ca-8ad09074b203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996c3f53-7d9b-4533-8088-e6d9d1aaf417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb21de9-2a32-4656-8c5b-2e93c79a2e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "548fdf31-6018-41da-bb4f-98c7c7ddbcb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff3d153-b8c0-4796-a45a-904d2bb86280",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d66b84-de88-47cf-92b6-8aa4630e056a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a551ce21-0961-4e3c-b621-f462754987db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f28a6fd-a95e-47af-886c-dbfa7df0df37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d76f4cff-858a-46b3-80e9-3ad0d5c13c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90133caa-fba3-40a5-a5f9-29ba774ced48",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1893274c-fb07-4e8d-b349-dced2b019a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02b53800-fedb-4579-b057-1b4e068042d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98bcaafd-b94f-410c-9393-65f641b7b8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "436315ad-5e72-402f-97ea-6c77c98231fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a62036-1d9a-4e57-ab4b-8c943077ca89",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c93be64-875d-4ef7-9c81-f39e179bc0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c0714aa-df9e-48bc-95eb-ace772d5dddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e29d8a-6645-446d-a1a7-cba961a6809f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6251814c-ae4d-4fac-ac4a-b11bc69ab1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2dc04fe-6def-40fd-8d44-5c4ea9f538dd",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c3d868-5912-47e6-9c93-4d6ae8a92645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a13baeb-d4b7-4a5a-a9de-2c93bbe9df66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694e7683-681a-4162-a051-2021df5513ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "66161505-824d-4d97-b27e-0b600eb70a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e523602-e2af-4bc4-b987-344f93c37321",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c27ab51-5d44-44e2-9ee0-acfcc5c5cfba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49904abf-49ed-4b07-b3e6-b177f1bd4fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ddebe4-34fa-4ee7-bbd8-7d39f4b04061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd42720-4f99-42c4-919c-4cfc67ea2844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e1df42-578b-4fcd-a4d1-ce9864a27e20",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbd7b22-117e-4752-8e64-7f011c01edca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ee02995-5ff2-4afe-9328-3eebae0f70b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3cdf5bd-4c35-42bf-a387-9536d96bf174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e6f04f4-f038-4503-a2b6-a9e449a373d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5183d16a-dbd0-4719-b74b-a9e2b35d40cb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "160a734f-f698-4854-a39e-6a8629f1625c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15e8ce6d-181d-44e3-ac7a-10f839dce959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6006963b-7684-4ed0-9e20-e0dd549910bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "41dc76a2-ce32-4e1c-87a5-fcff5f55df72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbdf3af-d4ae-4f3e-a1c9-08f0fb491340",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "600455b7-a66b-4aa0-8188-4f14a22dd333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a1d0d6-1af0-4d8c-80e2-024cba81cb39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3804e476-fc75-488b-b090-f0fbb21c1aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "61b4a628-2e60-449d-b679-f75d48444aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a91877-fce8-438a-9660-0257d769a2b9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e9646b-038a-4488-ad4e-0884e37f1f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4c6edf-da5d-432f-a644-2cd452173d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efa3556-08b8-4585-a97e-73f4cfd11dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfdeb550-bcd6-433a-a852-2d74645daa1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268126a9-36d8-48df-9857-58370ec106dd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b68375-19fe-4810-ae9f-a186a58800e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68d0569-a04c-4a07-b1b4-afc2161a4b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd24a193-a978-4d28-9d83-e39098eff752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5acbd035-3432-41d4-b435-be7c63585731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fdd6745-cd08-4efa-bd6f-185dc3d576f8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010e58f3-01a1-44a8-9761-b86d53290563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25418f9e-26fe-44bf-90e2-80463651a1e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3c7a7e-d0a2-462e-acf7-88a618dd30f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "633baf74-0a9b-42a5-80ff-06ac36d25792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5b0004-dc5b-43e7-8af2-4fe2725bbb3d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c355fe5e-c4e4-4d80-acf1-05f3011dc050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a738c6a4-2713-47e6-8d40-6317f7926467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1adc32-7abc-43ec-9dc5-e4623588c19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "142d03f7-3fc9-4af8-9f6c-336b049e4c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b885f06-affa-436a-95dd-8874ddd55c90",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e36ed31-5780-4e90-b769-fb91d85210b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bbe9aed-edb9-41d4-8795-bfc1eef28169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f6f2b0-8569-4974-9950-f0cf6e96054e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f084a6-ec91-48fd-b67a-9e36a9913e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16cbac03-bd7c-4e81-9b35-5b229b460bf3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "856629b0-392a-4c07-8621-df5bc2af3dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f9fe10e-a41d-4e64-b28c-ebe661562e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e657ae9-f182-4d5d-926c-61fe95a5bb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1394a4-af29-490c-a7a7-e065ffb3d875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49506cc-d899-4344-8735-a38fee3394a5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09c72c6-4198-47d2-a82b-5773c2134ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f57638f-f002-4230-8263-707b23e88464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5cf941-fdb7-4100-a717-afb4a0725334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "669acbc9-bb83-4941-a175-fb4aa0d13e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c049a7-b335-4e93-b39f-8fd7b387870c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e391111-dc39-4c1b-bb30-0e3b5012f365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95b33d27-398e-4d34-b076-7939d3e1e459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32daca7e-face-43f7-ada9-69ad9154619e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d96814fa-ac77-4241-b911-d13cb66bfd44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7395112b-c913-4be2-85bb-f5705a8228ec",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ad21f6-24ca-449c-b69b-2a1eca45adb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894763bd-0e07-4cbf-b3c9-cc91c1043daf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd4f8cf-93e1-4e80-bc49-e42a14cbe912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca6a4642-4a95-460f-9a61-49d3b643de97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d0c7e6-a4c7-4148-8fb4-a77a555d7bf5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b9a82c-6ed1-416e-a23c-1f51b23b3233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b084802f-dee4-4bd6-84a8-328010b70b88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db508a46-33f5-443f-8337-f2f3e14f94fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e96360b-8113-4eea-9836-b178dede56c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76fb9996-799a-4265-87c9-7ca85a9c7f1d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c575e8f7-291f-457b-b1dd-2f76fc088727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee26f890-33e2-4326-9e3e-d9e9986c2a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d481e9-c81e-41d6-855c-c32bed8ee533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8f07a49-e263-44b4-bd7b-18a29cdcdae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2e3700-3574-49d6-a645-4cbd0e068395",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "694194c9-2947-486c-8918-1163464cee36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6d60555-9ef4-4b63-bc79-67d76f8530e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3119bd1-836c-48d5-9fe9-c82c121cdabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "423cbec8-32d7-47c7-bfc8-f34120ab0ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e1205b-9ee8-45a9-9d1d-8e47bfae4331",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c25af3-45cf-4805-8e21-5423cd262825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3471b7a0-504d-4c11-8416-d1084374583b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2f2d73-06dd-41c6-b215-fccbd70e58e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eda35aa5-84d2-43a3-a1b0-7079eac0fd76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9e5344-3b8c-4255-a7a4-87ef05523181",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a873a82-6cf3-42bb-9b64-3a3485ce6525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c10a568d-ad40-4bf6-a850-2a6cd3cee235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5156958c-cc22-4aca-87c1-93e5f160a4bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14f0ade6-0ba6-4ffc-a5a8-2b8e4ac8b937"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "32211537-d921-4cd6-9961-8c12fb8198a5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "066ec9d4-3d32-4b1d-9636-24b253e5ea29",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9822076-4d29-4411-866e-1f84132554fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "905f25ea-60d5-4a5a-8718-12327f1fd36f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b408ef-1f4e-4b96-ba18-d18f926a027f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "733c3f0e-24d7-4dd7-a7b3-bbece18ac094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d6e8b0-7c2b-47af-9a8b-75275bdf053e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bcf1759-db8c-4f1f-a2de-35635170eabc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c40dcb23-dbcb-4bf5-9781-a729c3dc6a3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4036dc-03ed-43a4-b0f1-00b9bddb4b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60b0aa32-cd17-4f13-9a09-4b7282991f9c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cf53ff7-d936-4318-aa82-13e52fcaab9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7ea6cc0-f667-4de2-b82d-e348458ab504"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ffe3131-ef25-41fb-8702-e7c3300a8189",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb1ee2ed-f8de-42f7-b84c-44d3b798a0ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83ee3ce3-6570-4f31-a10a-2c021034797f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "af79741b-c5df-4923-a1d0-636a38a5b95c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad163fad-539e-48f2-b989-06b948aead07",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a224f217-019c-4260-9c80-883b5347b0ca"
            }
          }
        ]
      },
      {
        "id": "174b2165-b7e9-4e11-b4d8-df8382122eef",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6609f13e-0926-4138-828b-0aa5bcb333be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f8bc5ce5-757c-44b8-8b56-1d355f700297",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6ff1a021-0493-4f31-82d0-70029662255e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d65c8a-8ea9-4264-a51e-91fa3c03d44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88baa7cd-11eb-43c0-a399-96846a7e6e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c931f18d-5cdc-483c-a7e8-97a2970541f7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d948e72e-c4de-4f5d-a99c-92a486237d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530e8541-1186-4c10-9415-2848147d676c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f98c48-d724-47bb-864b-73e7750f563f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2568e3-8050-4ac0-afaa-0758fc461ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "082ab0e3-891c-4d1e-b406-1bc781abee70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11edf574-8263-410b-b059-980141dad143",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db9ca98-12c4-4205-bb39-e4dc6c5e592d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab9241b3-4882-4657-aabd-520261b39f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ed8125-4562-4709-9af4-0997d46098a0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ea50ca-856c-4030-9fef-17bf7a31fb32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93bac708-91d0-407e-9f85-cf7b4a34825b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af585144-724d-44ab-a759-13df1a3a6a33",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243df74f-f567-445a-8587-a784847ff72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247b036c-a72a-4ccc-b84e-5fad1b876f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc7cba2-ba8a-4d02-ab9a-5194f5275132",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119daf7e-a514-48a0-8e83-b6d25f3054ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6748577a-cff0-44f3-9eb5-2f47177c2728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71191ba2-46ef-4c6c-8206-18da07c0a817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be04135b-b9c3-4b03-a7d1-7bc24477aa1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a858fd7-3856-48a8-9249-ea92a01ce2d7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f7786d-2b2e-43ba-920c-2916175e682f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c5943ef-5e87-472e-a055-8e8b0c87e1cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac93cf74-ed00-49bc-a7e4-6e93010c4a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deda6368-bc3a-46c7-a981-53c33bf9a813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05aa4707-36f7-44dd-8813-70223ec2bc82",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324d6289-332d-4112-bce3-70139add9373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66972451-20a8-4ed3-a8ef-51fef0dfad79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df1043d-cbe4-4248-aaf4-c3878dfe93ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07f4ebf9-c1fd-4a98-bb22-c81f1a31327c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a2edc7-d439-4abf-9cb0-6000d26b1411",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473846c3-7737-4efc-b34f-0c6f8792be95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b72faf1-c333-4a13-9eb2-64d34574aae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce5a494-73e1-43a7-980d-f723d374c70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb1e598-924c-4dcd-8b81-cad344aca8da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396e3990-a262-49ce-a6bf-f3e0b575e9eb",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a1b910-920d-425d-8833-8dd6580960a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b397348-efff-4811-832d-68d03f197085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad47d8b-70ac-4e9e-af01-6dc9b79078b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd5a7201-e8cb-4142-a238-a9607547d40c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2779b3c-85fe-47e6-be20-547a8d321cd5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda8ebd3-c684-4edb-8e03-1f475bee81a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb6e77f5-0324-4456-8d33-b7f4bef45cf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "723bc208-c95a-4e82-91ce-e7fcdfa526ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e40ddbea-4399-46a8-890d-18c6dda6e9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446778b1-3504-4fc1-b7b8-eabe9c764c66",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fe85bb-bcf1-4b03-b317-96a6d5103fc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7816c6f5-c6c3-4b9c-b00a-bcfbc9365469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6574d1ad-dbcd-4c6e-801e-78c0c4550873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de444fa-df74-4fd4-b989-b18204da1254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46bd058-2834-46c8-9d03-b83547a52938",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb247492-f991-4c92-aa0c-9b30714fb011",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87f376a2-89fa-4d8c-b501-fce4eba3da15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cf37e1-0b98-4a9c-b514-d56e3d030794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71585a17-a70b-4d58-8ff0-f7546593ec9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6170d7-c83a-4243-80e7-c0ce8cb83f03",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "000851df-b5b8-4ebb-ad5f-b8c294d9be91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0e31c5d-d669-4c16-816d-6525062b67ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983c042d-a095-4eb9-b02c-173316e9e67c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10be5a43-0602-4b57-b3ed-b52226c35764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd853bf-77fe-4ac6-850c-ebb51ec0fc85",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0efea6-3d90-423b-880d-d6fd177280e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36989841-3a7f-4654-b1fe-9d7308dc498d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d23d322-5aa2-4e33-8791-7acb43742a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2a2ddf-4f2c-4721-9c49-5a6e32151020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af112664-8394-4aa1-aac0-f6efd1e5e9da",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea721946-f176-42fb-ab61-0b6f60be8619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb7b714-c975-4b1c-b101-fa5404432813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69acee6a-bac2-42b8-996c-5ec3ee76e260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5feb7608-90ba-4d90-84ff-fc5569678944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6d324d-5c81-4d0e-bfc4-1f6b371ea44a",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b4d0fe-b562-4e16-87d1-99e1273d2a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ff78834-8c21-4fc5-93c2-aa3afd59bb42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "791948a5-7603-46a5-98e0-efeaa48fca8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acb4fdb0-8c0a-4483-ad3d-e314302dbd73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419d532b-cff0-4f65-bcea-9899c03f3478",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92f2bd4-990a-4638-b263-19681910d4d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf5c831-e20b-4e20-b2c5-daf3564e62a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ccd04e-3e48-4c71-9a61-8194caf5f794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e02bf0e3-6458-4288-a3cd-c7092093e58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839ddfba-337d-4551-8531-43c19d38fbd1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10f6e9e-1da4-46e4-874d-d716ef2cc94d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1a466a-9c61-43dd-b64f-7adf8f4ba693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a45bc2-e184-4a59-b933-452ac21c302d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b64869fb-a3f2-49a3-9190-fef70c33ec32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2425a2b6-ad73-4a2f-a036-20aba7c31801",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d775e2de-dd7b-4fdd-9017-7b42bdff018f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14aec33c-66a8-4326-a9df-604facb3b26a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6938c5-dc72-43fe-b7bb-e381e52f397f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0447516-f472-4ee8-a955-fbfcea7f52dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc5ed4b-78c4-496e-9cde-b598ce2d24f7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd339b72-e22b-4675-8d77-78ac16818110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e9c11e4-3885-4458-a3bf-d0e71b45d7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "505bee2a-3bb0-4521-bf9f-bf8e18995fdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e024d42-c350-4546-a48d-bdce901e6669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b83293-ae81-49b1-b3bc-f2c00a05209d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20dfd41-d28a-497a-87c7-188f7f807c2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3912d5a-367f-423f-b933-6ed1ae2186b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b717447f-61f7-4d0e-ac29-8381a6516549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f027812b-e578-408b-924e-ad944082d993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb83ec2-d30a-48ac-9689-d964da5f2d7f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de0603c-6661-46cf-adb3-741f6654091d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b641a4e-fb77-4355-80dd-529745fb342e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce849256-d0da-4b72-9263-9ba9f4c8731c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a59177ad-8141-4545-9647-6f0b21af6913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6abf9b24-1884-43b1-9185-876f40ec1b30",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07a808d-453e-410a-88f6-12c9c2e574af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e7829b6-f9ec-46e7-b91a-2b8c66695080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a42365a-6170-4d9b-97bb-e9229400ebc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a563408-6b95-4343-91dc-b9a4fcaf48b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26dd37df-5d85-4c43-a8ff-59d23d7d0f58",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdabc852-a97e-4af8-919c-776e0a59e05e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "485901d4-540c-443b-a990-bfc48e0e1836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b33583-686e-4ae4-a6d9-ed12f8c956f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d799f710-a290-4bac-9920-106024deffd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3a61b5-32a1-4592-bcb6-d1c5775e33f9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bfbd64-419a-4253-889c-32bc886841be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dd3693b-670a-43a0-9cef-269be11bdfde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c14ccb-2f13-496f-b11e-08e6f2fe3e6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca856999-9609-4667-9d22-3f2942b48284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc0ac18-d00d-44cf-b346-53fb896b5ee0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5050d9-3148-4939-a605-4f70a43878ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce625dc9-1b7d-4225-862e-8f4247c56782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce20380-b66b-48fb-b0df-5fb6ab08a75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a541c53-7b55-4196-877a-77fe961038ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4181a0ec-747c-44eb-b346-136b423f6ee5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76541fec-b27d-4a94-a8f6-7509a4523453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2fd72ab-423b-4b0d-9fff-672941e86451"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd08938-075e-4b55-9a0b-7bab36bda56a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925bd984-001a-4b8e-bdfc-694885f1838b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bdb5b0-2617-4c1b-916e-a99fee14f3fa",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af892b0-899e-4403-a550-dd9378d9eeab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1898744-522d-4525-8dcf-15ba9d56e4ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62131478-f133-49d0-b060-40622adddbd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cafcc2d-c9c3-4c80-ac05-51819d4e19f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1006f92-260a-41f2-86d1-a4e506f614de",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1570e04f-ccc7-46af-b6a9-5252b67d763b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21619a11-817d-40ef-8bb2-55853b610509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fefc18-db2d-4803-bccf-fd16ef272e71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f0f25b-0276-454c-b95c-f8d3cfef783c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08357472-8727-4cfb-9c7a-bd5b8fd7babe",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa78ada-18b1-4b87-8989-ba833c8d4cd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c4bd9a8-fdfb-4561-a282-04f4b6459a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55f33d5-0a3e-4f55-8cc9-099e838dffdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5e35b06-b70e-452a-bf05-29ddd31bed16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fec75ae-85e0-4ba2-92f5-b2bfa38f1a40",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4985b9-e007-4a85-95a7-33ed5ce2b3ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "936d71d0-b536-4180-85ae-2476cfac969a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bba56d8-eaea-45f4-a635-5b8335163c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9adb2eec-8112-4968-8d69-e95e4d764cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e21308f-1909-4b62-9f50-2965458883f2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d882e4-088a-463f-8a63-83e682878bdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab07c31f-f14b-4d16-80e0-fe8a5ac80304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1b0a61-c5d9-40a8-bc66-1458c92f27c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ffaa373-46f2-4cd8-a96e-fb47abe2f81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f297a5-8473-44f0-aa0c-0310215799ab",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6ea129-aac2-48be-8673-d3160436161b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64d001c0-5c68-4234-b389-335905ce4c57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df13d8a3-e67c-4a28-9d37-87c02c8b3d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a58a65f-a133-4235-a986-bc2501d60ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6cb108a-0ec7-460c-b08b-ae2d0285cd19",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb364ea-015b-42a4-a800-66dd46687ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b26ab20-7f0a-47f3-8b42-c6fb9b53e53a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e947cf8-095a-40ad-b298-33bec56fa4d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "725fb0bc-7c8f-400b-abb8-85b31377b3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd343322-f99b-4578-baa6-f6ff78f2a236",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfadd8bc-79be-4db7-91fc-e8bf869ea1a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0910d5f4-42c3-4cb4-b7b6-c8616c6d76a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c24a9c-c7d3-47c8-b33b-fd9ab0c483ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e30a819-7fd8-47ed-b382-57a789ca5701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27d93e9-31dc-43e4-a79c-39327abe9592",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37127b4b-d946-4849-9ba5-b10c2df0f6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23f8e9de-60ee-4a4f-967d-e217c2f9dbdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ed853b-d3f9-4134-b14f-3b16f1aa876c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc0dc15-f9cc-4f2f-a972-12337074a8c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05835e8-48f3-4773-ba2d-06c9b2883e76",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f173e58-3044-43a5-b4b0-dd542c639d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52aad384-737e-4fc1-b003-850905a5988c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49760c27-0cb2-4e03-a262-107bcbf34cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59e63867-4347-49e1-96b2-260e8e9068bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1bfe1e4-bb90-41c5-ad31-825f9320629e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e15183-60c3-417e-8a27-d562dc993fdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0119b3a2-f1b8-4cff-ae2b-76cc3349bdba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4e4956-ef30-429d-b06d-20f9d6ec99c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb3949e-d4b5-467d-9ba3-30bbbfdb2c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53009534-ba19-49d6-a20e-9ce78b6dd83a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6385b9c4-7db5-4f13-ad2b-8e17d090a8e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "432c973f-16a8-46ed-9ed2-a2392f7cd8a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e90735e-d41b-4a15-a0a9-b53d9905005f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd4bd84-9257-44ef-878b-b9d9d37f4845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7490db-d8ef-4a99-822a-84bc880d5f1f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe07823-324f-47bd-817d-34ddddf5aa28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a00148e5-2019-4b78-922b-c1f16ce1a267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2375786-2792-43bc-a7f3-ff30831b8eb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638a8b37-6761-4790-bc6a-8fd6b0d0a221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e3481b-3469-4643-b524-d0607c75f3e6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e0e37e-946a-44bb-912b-a0493a780558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e331d118-28bd-4acb-9288-b0595f215dc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7188d7-031f-4d6f-b5b1-3e4898b21776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c02789-e59d-4bb3-b21f-c3071c483dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a39408-8823-4bef-aa3d-d52836b04c30",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2454ca6d-357c-4d82-a1cf-93429f21664a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "350ad0c7-fbc6-401e-a83b-abbf9eeb8816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a105dd8a-55b7-4e1e-a0e0-75c4228a47ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27bf4fd4-f1b0-4772-bbb3-dca3a054daa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b9faeb7-5e7b-4f7d-b750-18b51736ea6d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2507ee81-701c-4b32-91f4-1ef1ccfa4a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b96e5dd-a76e-47c3-bbc2-3424a1fcfdd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ad811b-198e-4da6-a307-2a7008611cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "321d226c-3738-49cc-8109-886c429875c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94eef3c6-0230-4a30-a0b9-089dcb6cde0b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ebacb3-91f3-4138-b1f0-df750dba127f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a9bf6d7-cbf7-4722-a7b0-9601840f6cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a291d01-8688-451c-b350-0d0d0f289263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9996a6d-8e0f-451b-ba58-4c87458cff1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ab94ba-8342-45d4-8c16-4255d33022c4",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9c4e24-f5a8-4adb-96df-d9876f1d0979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c698fc9c-8d0c-4aa6-b11f-6c04fd1ba9a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d9ef2c-ece3-43c6-b631-24dfb6a4ec14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce5e269-4e72-4700-822b-838ce0e33496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355db624-d435-4300-8045-67fa811caaae",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2c9cdf-cc83-4e25-b7bd-57baed7407b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff56bb3-7416-419f-8a59-047cfff2191f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a674cb86-49a2-4e29-9036-090cf75cef62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b25baa7-6710-4547-b040-78af538cade8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decc31bd-51a7-4a46-b857-4dd5fbc8081c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a08472-eb67-4e15-b5f1-ee0f6a2acae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14f47b75-349e-4b00-a3a2-d3378256746c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6cc0913-5d1c-492a-882c-4682acc12a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a07bf7-9fa4-4dd1-92a2-f022fc327914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49519ce0-030f-4ad3-9e9a-8d13d623b5a6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9245436f-d0de-41cc-83c0-194294fc3a7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a18e545e-28ae-4757-9ee3-81876105a70c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4222c553-0cd5-4419-b227-15dd838cf6b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80daef15-e5cf-449e-a265-21918a5de1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0e2848-1cb7-40bd-9c87-0e04b0154ff0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2de03b-1f67-4616-b078-53a064207c98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3a3ab64-819c-4709-87f3-6656843c0e08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "412dca50-3693-41c1-a111-4e087d5adc56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30286c70-1402-4d7c-ae21-d2dccdb1ae72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9835e601-51de-476c-90d4-35486e2e1784",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f56fbd3-4c16-448d-8802-9166909f5bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc1f5d4-e36d-473f-8731-13e17e70ba6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b93f592-f553-491d-8fc8-54760c482979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1465a232-0d8a-4ac6-bfa3-86cb6d8b7dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d53257-b50b-41b0-aa08-14186824cddc",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c56fc2d-c1da-488d-9148-b964cb0669ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7f4f63d-8bab-4d04-aeff-b50972d293a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef33976a-a4ce-4f93-99d2-5dfcbab2bac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4d609e-d2e3-45ee-b298-e39643741ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68392762-2e12-40f7-899d-82f24dfe56a5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afdd6849-4b6f-4c17-863b-d6f54d24f3b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dae6484-b7b5-40d4-a325-a5069c1a8d74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af08b849-a1c3-45be-bb96-b60f09372319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5484cd98-d7dd-4792-a2d0-7da26dac1bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bc200e-e093-4dc2-b18e-651d5ca46211",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "726a32f0-12a3-4749-bf3b-3fbf270cb191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ecc222d-0451-4769-bbe9-59ad4b3a71db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a5d717-fa91-4c01-a2d4-9590146f6722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36cb9a1-c179-4ef8-bf6c-96a73cb8087e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2884cf38-4f84-4755-8799-5fd5c3a2a991",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2aa7de2-e1b2-4d5d-8ad5-4bff242600d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "372608a4-60c9-41b9-9d59-8acb30d73aac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7a1b15-9988-4269-8c01-40da820f10c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ed3979-55d0-49d3-a86e-a8b3685dfc21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce547108-bb9c-4349-b112-b69c96a55dbb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634d20f4-b2cd-402a-8126-b33c294e12cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c847552-477c-4b57-87c6-8ae91645659c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "004596c5-da6f-49a8-8602-047e394cf972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b174796-20a1-4935-bab9-1ac3bcbec57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0134c765-30f7-4443-9d1b-c388ef22964e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1fad33-ab27-428b-b745-37e6794e1f9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e02194-a919-48f4-9982-89b196383b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c53fafe6-d2aa-47ed-9bc0-c3306235b654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd3261ae-8176-4e90-ac7d-3e52b172750e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67aa8bf3-0104-4083-82d3-a936712b5514",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17dcb4c-c20e-4733-a75a-144c103d640f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b31715c3-53dd-49b0-be35-8e540f225646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d307e7-8171-4d91-9863-b852981d3a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65bf2912-d35d-4d82-82e5-369a776e36ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e684f3-4751-4174-81cd-cfe7b0221f49",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dffcfbb-884b-480d-b068-5e9d3c86bde3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c886d87-331a-41ac-8682-a74748f2dfa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "995b74d2-cad7-4833-b770-923057356ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1f542a2-4801-4eb7-ac10-33f1f542c343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e6788d-ea56-4bae-90a4-608ccd4a9475",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768ec95a-dcf2-4ca5-a3b7-203c6ac75987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcae4d59-01dc-4e14-b04b-e639c4ad05b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16cda8e3-ea00-4446-9dd6-b2a727652205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca3ba53d-7da1-495c-9de1-f0140c5fccab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee4a5ba-5f4a-4a84-a1f2-eea10353c77b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91019da-f324-4b06-a12a-b20b2de0e448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c70342-19f8-4c4e-947d-1c3bb45b078c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cfbd7d8-12a5-4cc7-bc2f-cf4329ae212d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e818af7b-95d3-4fc4-ada8-5f307226d4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731d5b5d-c6a9-45b9-ad5c-9a5bd8806ed0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b55a8a3-2a6d-4b00-8c03-2ae2fc29941d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d51d651-ec6e-4ab9-9f2d-4f398553b778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1a74c0-487e-4772-bfbc-092254b75eb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1049a468-db2b-4023-a61b-00fe1a92f8f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2838e4b8-7cee-43c0-a4c9-678e9e9dea1a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ef2fa8-aa10-42f7-b0f7-2b93c0ad8198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01e07a13-e994-40aa-8ed6-171a95a13fe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8de756a-505f-4bbd-a626-dcabb0f3ebdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "302c7198-1324-4c50-892e-86e9d2226c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfcf936c-4dbb-435b-a5f9-b427cbd72668",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572b4da9-5d80-472c-895c-c7612a7ca646",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ec06d94-81f9-4441-a707-c1577d269702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcb6cb7-092a-40f3-a4c6-eed05955f0b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a429a18f-481d-4ade-9c30-9c05b03f851c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76939c61-da15-4f16-920b-1bd4074807fd",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4762d6c3-abd2-4771-8bd9-b889ea5054d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f4cb102-0f4a-4b51-892f-8b5d0eaa4e74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52c359e-69ad-4450-bc22-6e29fb4aab2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed99f019-834c-4d17-aeb4-acd6018c97a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3d77dc-dc92-4528-8967-1805cf2c93ef",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7509032-1ceb-4d65-946d-92c7e22b5b2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a55d9ac7-be2b-4d17-8c99-d998d6575de5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdf3e41-cd9e-4885-af0f-31a4e0c890d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c2d5cf5-d18f-4278-af53-37789d1d7de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf3402a-2b47-448b-9066-1df939bbf517",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a401b95-7f24-47d3-a72b-b0ec21a3b7cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c27907c-4bc0-4b6c-aa0b-a160ff82caf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c635b4-6077-40ed-90cc-4f5640732c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25fb4a6c-d9e2-4365-a44d-d2aef83cdc39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dafeb987-f187-4f7f-a0e9-a417fe1c2f9c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41cc6248-ba39-4d22-b998-dea422ece758",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cf11954-8bed-441c-ad9b-a53a5ec68978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f62667-2270-4440-a605-65ba6a965d3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "362888b7-852d-48e6-9c8a-a967ddd04603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f307db22-823e-40ae-ba5b-b824b44486f8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9132232f-afb9-4e00-843c-e04a1fdd652e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01ef3566-2225-4497-8dd8-f268fad0fe64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd18a1f-ec61-43e4-8ed2-44796e910c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a26f6b2-a7a7-4da2-960d-f99f4a530d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9eeb122-7080-4b15-9f54-4103b0cb01fe",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65cdcfa0-d69a-4f7c-acc1-da6ed073f69a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cb97371-ee75-4481-a474-28b1fd3d4d30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4b5990-16bc-4436-b34d-34596490c966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d37edcdc-f60b-4ad4-a7ec-205952bb2367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d20dad-cdf5-455c-ac46-a2da4081f221",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f05f432-d0fc-41c4-a6ff-21d7f53f8cde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1983e84a-89f0-4ca9-bffe-db742aeaddcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c4a41f-a290-4599-9d7f-f93334015d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e63ed76f-5509-47c2-9333-ed890de58d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b25269-684d-451c-befa-f3efb1c44afb",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28b8c01-4a6a-413e-87fb-9152e3b9f3f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbb47bf4-ab27-4075-a254-fa1634a02bf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8603a879-fcb4-4875-b016-3868ec8a5b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c6ea798-6a61-4bc9-a687-f2d2b0fe95e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160da7cd-dfbc-4a78-9928-b40a2ae155b3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e80669-261c-4692-b315-72e1852fd8ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56e2e108-2099-4a91-aee1-4efe4fd563f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a6b00d-07a9-4b6a-9ceb-d2e8d04a8883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c178d18-c407-4a6a-82ab-a18f3caca0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad32e21-b05f-4e8f-a062-d9e2c5c5164d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcec3ccf-94b7-42d8-ad31-de8b6a71507f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ac92a6b-8ffa-4910-8324-88f478f6979c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75ed059-66b3-4e94-86d7-0c60b25b167a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c61466bf-5d45-41be-9e75-ef2a7affc768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73fb0a6-7fd3-4ebb-956e-1a24e59e85ca",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5be8fb-2e1e-44f0-a5e2-d1bf8f44faba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac1d94df-c350-4a52-91a7-2a88a0b8d499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f229fa52-9d22-44e0-bbe0-489a17f91fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7384734a-102d-406d-b8d9-12ddd46671c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27adf116-358b-4578-8118-1f881ea72d3b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765c9a41-2637-43ea-b01d-59ee4db3bfd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eeedd8c0-1235-494a-9f4a-eb6daee6224f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afcc55c1-a489-47a6-85fc-3ae7fe7adfe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce2e86f7-4e55-458b-b405-77d1dd267450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117f0b19-76f9-409b-8c47-bc7544bf8e2b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66aa461e-f56e-4430-85b3-2038aaffc187",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cef8cd7d-e9a3-4108-9663-c3c420c438b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d980e2-3f0f-4a70-915f-c647abcc58cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b75ec8e-3379-4641-b8c1-017c1763e454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb88f21d-c3ea-4273-9e11-aa4325f99141",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7287e501-d89f-4c80-b3db-b7bb111d5222",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd88dbcc-b069-405f-9d16-89ec93d1e084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ee98ba-163e-4d5a-926b-0f3628e59b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c449f39a-22f9-47b1-a694-898225764379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010f40b7-45da-4031-bb03-111714bc2b8d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc7f30b-c94d-491e-b707-93106e5b7a5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "660b8987-297b-4e85-99dd-43e3e379a8d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0719adf8-bbe8-4952-ac65-cb570e5a8160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d6b850-ef68-4003-9399-c562261a86dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676ff7ba-6d91-469a-bec0-db363c8a933c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3967a6-ec18-4739-9ed1-410908403194",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c279abe2-4df3-46c6-9dc4-783c7bd60ad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8803926-dd46-4d53-9bfe-5cf19949736c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe7abc6-bb3a-49b8-bcbf-fe8cd93fdaf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5311b77-67d4-457c-9327-109d0389f9d6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5eff0f-f4e9-4ddb-8a25-2f324db435d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0117b80-02b8-4a13-969b-abeafedb55b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d911f48-d003-4620-a8f8-ee530b6b615d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7514b290-fc59-41a6-87ba-f045e0bbc2c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c337f554-4b53-4f77-ba2e-9adc1427e1c8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d6ac9eb-d7f4-4c60-8077-d73bf0bb70c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbbf610a-ac0f-4eaa-8d41-6d211e7d911b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "873474e1-7f27-45ed-9b24-0ef6197865da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae1276b-e78d-4f6c-9600-411754b1eb4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600a2564-af28-4b68-b15c-a032c66baf10",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17abf49e-bf75-46fc-9746-033ec1aeeee5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48c6e6f9-fbd4-4fc2-8349-f6b924f9cdf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc0eadb-2fe7-438d-8411-eb3bfcad150a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bfa6431-4503-40e6-b180-047d4ad573f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7002efd9-bb44-431c-b9bc-80cd915c966b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ee58d8-fa51-4bf8-a8c8-cce013f984e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eed677c-9a09-4e06-870f-7eefea22cd28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d49ce2c-69e9-4337-a9b4-1ccb449e489d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9724952-77ef-414f-84d2-55533135d6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc7baff-1b25-4e21-89dc-3c54ee2dd56e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ec40df-1680-4cf7-b0c6-16a5cfd4b71c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c2daaa2-0dad-4d13-8606-62d1020a7bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98eca58e-f715-46f5-a035-08c455c49cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d87b7609-b928-4a39-be89-d80dc6f3a315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc11e98-0cb2-4939-8c10-2bf75a85b6f6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308f1372-af8a-4f79-8518-14ed47550fff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62133851-8e53-4170-8bb6-3f301ce63eac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9207890e-4f14-4620-b2d3-99b3e93e1b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7cf5e51-aa2c-44f9-bf62-4a78c17047b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5613dcb-f2fa-4fec-ad16-633ea62f471c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f3f047-a212-49cd-acec-7e8001a4da04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f5cc013-2c41-4ff8-b9cf-2c095e493d3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac874d1-5188-4ac6-9dd6-a1f25e50dc3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b1b6a5-c3db-4685-b9a7-acaee250af75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2bcf44-913e-4a49-b80d-61528ad18682",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789a851d-1a5d-4d94-81e0-b7eeeb284c42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9278f2b-9000-4c80-9c1c-434e1d6c855d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "278e9b58-45f3-42c7-ab78-ce60f2d88435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce39fefb-97be-4afa-8026-3fa52b8d6fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a60f96b-6682-4139-a8c7-bc49813eb55f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33fa8ea2-632b-4761-a886-71a5ca8a8700",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ee806bc-fb0e-471a-aef1-5912c8d4d7f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8496e5-3e38-44ec-bd14-6e109cf1b3e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc76c4e3-7df4-4dc7-8205-8fbaafb4a046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81dbe1cd-fd47-422d-ac19-cc4db4551880",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6787562f-d446-4ac3-92cb-f90615a6b98f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4474ace3-5323-430e-9cc6-62d30d83ca20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56be5f9c-c9e0-4a94-ad4b-57742b0a20f2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824b848c-ddd9-4ddc-b801-356674368478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f07dfb-3db1-4239-86ac-09c4d9892f9a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569309f6-9228-48f6-aeb2-9b85708ca0e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc71f00d-8a91-4799-a54f-b4339179d80a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2881452f-7d30-4557-988b-bbc207d4d27d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c747a23-626e-40e4-8c90-8dde0fae11e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87db7535-3efa-4d1e-98f4-34ebe5b11579",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97877c75-757a-4f19-8fa0-6dbaed7a7a9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2fba319-8607-4e6a-9044-4100533ae2c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcfc4258-98ec-45cc-8ff9-fbf360348382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce996bc1-8d4e-475a-9c88-36d8be325dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e87d92-f864-44ee-b111-2ea77a685745",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e330d45-abff-4063-a2dc-2c93e7273f7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "194ef90c-19fc-43a3-9a72-514066eb4706"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cf3b2d-c5e5-4d7f-9254-c92baeca8959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530982a8-97cb-4a17-bf1f-651063e0063d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92354462-e2f0-424c-9347-393ab686de66",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ba2da3-38d0-46e8-b78f-f3a02d27f36c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fb11bd8-ef79-49af-a987-947f1e733185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b7296a-77b4-498a-9f4d-52465e3fcd6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8d58e8-31aa-4ac6-b4cc-9488597b015d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba444ad7-2ee7-457f-b7f4-f405b4641ba8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8f2213-2343-4f17-8d48-cbb45d3177b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9483ca05-380e-40d6-8e86-f4691d852eb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec933bac-5bc1-433a-9c02-81218220dc43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f0b2c8e-b240-4e79-b2ef-d5785ec2215b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ee6341-d0d2-434e-bd31-08e38d54e752",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07840e3-c11c-4af5-b0f7-19c32218f14a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cbc93bd-5452-4cdf-9b3f-1e97218ca508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad607ee-a56f-4726-99e5-f02d5537fc5d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e80fde44-9472-477b-bc00-d8a0af4f5002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3a575b-601c-4f75-a03b-5c0168e73e82",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bfaa8c3-8659-4a2d-97cc-f9a6970207f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcdd9f3b-fe45-4754-ad71-b179c2a050ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb829c2-b25f-462f-bf73-38936872ace9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56bef511-a72e-4414-a977-532678e6e46f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0ea4656-892d-4961-b7e7-d90aba8a7c6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f392cfc-d73e-4e06-9393-e6c5aa667d25"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c14b6a7-81b6-46f8-91c7-cc0dcfb9b96e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "587ba362-5ec2-401f-963b-32349d485085"
                    }
                  }
                ]
              },
              {
                "id": "6b74a56d-a2bd-41d1-a695-70f20653d5c7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "56f8cede-149e-458c-ad15-fc3919885f4b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00321357-b1ca-4f0f-8ac1-f1b78796dfa8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8de8926f-3648-4234-842f-8e996c99caa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9c3d58-f987-42fd-a699-a7243aad4571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e01ee5d-aa1a-4709-9e2b-2726b81f09d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8efbd5d3-6117-4d7f-b992-3e5cf59cad60",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be1c318-8e5c-4196-987d-64787571d888",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a5af61a3-6fb0-4acf-b619-ad3ca3172770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baefb031-b84f-4964-a8e4-5c72c06111b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f459ac4-06f0-4dab-944a-719d6991a7a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d46a2c8e-bc25-4cb7-b00d-6703307cf200",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7352d29e-fb26-45d6-9f53-cee1c0e0c9c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2ec7513-a8e8-4ae9-afa9-dddffe5e6a95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc2ae474-f2d5-44f7-b93f-a270cccf1749"
                    }
                  }
                ]
              },
              {
                "id": "c1ed564e-1c88-4d8d-b3a5-ad95b749c084",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2a7b1795-8ef7-4528-864f-1e936888e3be",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03dbb223-dfdc-4bb5-8482-1343b7ee5c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ce23267d-9d4f-4175-bf16-3c0ff128eea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba5e59e-8374-4071-b7fe-a1557c5ffcc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fb7816-3b3f-4387-82c7-fb282b0f26c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9856121e-be50-4d0e-be82-7a3457e5cf15",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4c968a1d-a11e-4d2c-86da-19362bd29305",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0f3db73-f278-4159-9e2a-fa06df796807",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9d3d1b97-ed2a-4351-ab83-556af39e60de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44338e94-5fa9-4f0b-aefd-eee535a7286e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b10cd65f-437a-4b42-83ea-42b503fafa77"
                    }
                  }
                ]
              },
              {
                "id": "c74b34a4-75e4-4833-a17d-5d29d71a880d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "758ab043-6977-45ad-a44f-d680ecf41720",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4ba919e6-1cc7-4d76-a187-c8cb444c6582"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f35f1689-2129-498e-aefc-de69bfcdc059",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a012aeb8-d1c0-48ad-80a6-c20f4d40c006"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f0b4bd9-b505-439b-8e40-ffc8f22b0c81",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a191982d-fe37-4e23-9648-2c488f465ef3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cba20245-cccb-4944-afc0-26f514ec6fe7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d5d51a0-2db8-4d5c-b2ba-49b0a8c93aa2"
            }
          }
        ]
      },
      {
        "id": "8aab60bf-3a2c-4c47-8ff6-f393dec81e83",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ae7140d8-311b-42cd-89c1-b6ee7d041d24",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf85095f-536f-45c9-b713-b3091e3c41aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5e52cdc-7dd8-4545-a3fb-5648e6f413b5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666c77c5-3041-4fc6-b505-067df5af96bd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "74472524-9be8-4d70-a64e-6fab95a9e1e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "956c13f6-062b-4421-b008-a588c69a12ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b9b7825-9f22-4f00-a50a-7167a5616f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8aca10-50a6-453a-8b3d-b1cbd5033b87",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4e2f6c-b3e3-4647-8a14-bbabe4a99016",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "93473ed8-19a3-4d22-a5fa-afe49be9cea1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "002da8a5-df06-4a65-98b2-3506a77dcf9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5633c3c4-fc20-4374-8553-7ee6112c00ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "882b8d3e-1ec2-4f8a-9477-f21d84e560d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b606425-cfcd-4eb0-8bf1-29b5d50da592"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa30f3bd-9fdc-4f0f-a081-7559e30581bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a2616b2-fd28-4cc0-b375-c2a497b07049"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "04a7d3bc-abcc-41b6-8501-36772ecf7876",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "91b95c93-fb14-482d-9ee4-ab5b3848a0c9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ecf726c1-9e44-42b7-8870-0f7b40b7f3fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd7a4434-35ca-4e64-afb6-55ff80f386ad"
            }
          }
        ]
      },
      {
        "id": "a2726581-f505-496e-8550-8b836a49a037",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "148b7b40-c800-45ea-b239-0bb73ae4be19",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af183b58-98b8-417d-95db-028061a09fc2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a9224e5a-c35b-4657-b01e-e57e0f24f879",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0d5fc4-9f5e-4e88-9b08-c45a8bc54809",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f66b92c0-2bd2-4e85-86f3-402520efc0d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29068493-6a98-48b6-81fb-a95cd2cf18cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "576b595b-27b5-409f-9a48-6aef78f262e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf7a258-1be8-45ed-b11c-8ca3e94c14e6",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e486ba-841e-40ef-84ca-64b12c23ff0a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "24debc49-8d1b-4d68-95e7-34dbb28bc584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16652bf-b75c-44f9-bafc-87b0856cc008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "186f9e28-b9ba-41cb-8658-2f224a927e41"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2759c45-e25c-43cd-b554-caa8b5beb314",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e60f259b-635a-4920-b6e0-a5183884db43"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4340ba62-6922-413c-a26b-4fe87dde6111",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "189318b2-3cbf-49e0-ac5a-15bd6818f657"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f15b687-6ef8-4c9c-b3ce-42da1f90b1db",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fa7070f5-623f-45ca-b7a1-4c65463e79d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "87b29e7e-a339-4c6b-a6c0-07ded82e5988",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b0e04e26-7dd6-4ed2-ae0d-76720762f97a"
            }
          }
        ]
      },
      {
        "id": "4c30b718-328b-447a-94c0-f382adb5fca0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0ca3502c-b54f-4b49-ac9c-fbd9b42e82ee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c233012e-a05b-4ea8-a303-ae19bc1f016a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77c7fd7d-7888-4d2d-bee3-aa55d04f26c4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873e573b-2d39-49b7-afe6-6edb9f62d507",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1a09b0ad-6a30-45b9-a4a4-4cf07874a444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa0e1f0-5fcc-4e20-a4f6-0042193a779b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47304418-017d-41c3-9298-4d5ade5683bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7682f283-d7ff-4c78-85e9-2083467ae01a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4316e169-4e4d-457a-ab52-0a4714aa55bf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5b1f9d46-0526-42b3-ae28-7107d4e9113e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31eb0aac-fd0f-4102-8066-98807a54dabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b94d2e1d-a267-4794-ab96-146f98d90283"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa29acc7-1517-4d44-91dd-f9fdb067ecca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7ff1024-50c1-48f3-a6a6-380d553f9e6c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c900237-846e-41fb-adc0-238ab6b42660",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69aaf816-8b12-4118-a639-a326af41bd12"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7145af41-2b8e-4624-8cc0-1eb983f5de88",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b1825e98-802c-4267-abd8-f1279252047a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f022373-e7d1-4c17-920c-370749927c30",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d721aa3-6146-4a4c-bbb8-69f41ea13156"
            }
          }
        ]
      },
      {
        "id": "b8b9f8fa-3a3e-4dc7-9b60-79526532b345",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dacea7a4-8987-4f4c-9ed5-bca3b7a61fe7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75dd3b0f-4868-4906-a22a-ab7b6afbefd6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "018d64af-1520-44ca-bfd7-0d7bac1bea98",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a108d936-af49-4aa6-b838-d892e0dc48e7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55fed277-4caa-46d1-b95a-0fbde855f835",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1917,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 404,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 515,
        "pending": 0,
        "failed": 442
      },
      "testScripts": {
        "total": 963,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 954,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 528.7949092700876,
      "responseMin": 12,
      "responseMax": 10860,
      "responseSd": 1772.4960737200297,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676421661544,
      "completed": 1676421883455
    },
    "executions": [
      {
        "id": "67d35e56-c2af-4f9a-bd5f-4eb3cdd49968",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "38cc9c9e-2e68-44a4-b2f2-e1b9ba1d1c07",
          "httpRequestId": "ff5ab353-e54a-400e-b42d-ffa0fbbed6a0"
        },
        "item": {
          "id": "67d35e56-c2af-4f9a-bd5f-4eb3cdd49968",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7c750828-0e3c-483a-b790-c71b02a60f8f",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "f635187e-1e98-431e-9736-94dca47e432a",
        "cursor": {
          "ref": "e3c25ee7-3b87-4e7b-b037-01f26ee9ff16",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "08fb64e0-b2b5-4a8a-b908-30be591719e2"
        },
        "item": {
          "id": "f635187e-1e98-431e-9736-94dca47e432a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "554b4bb9-3dfa-4df6-afcb-a28746c1b752",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "14e3352a-f7bf-4b1b-8e24-89f4a48feff6",
        "cursor": {
          "ref": "3327413f-8673-4671-8827-4336c2b51cb7",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9edcff35-3495-4552-b9f7-ac5139b54c0a"
        },
        "item": {
          "id": "14e3352a-f7bf-4b1b-8e24-89f4a48feff6",
          "name": "did_json"
        },
        "response": {
          "id": "4ceab764-d3c7-4b71-ad81-6225c3b183f2",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0bd2ef-37a9-4e3c-a695-9a0205361cf5",
        "cursor": {
          "ref": "d81b4210-9d92-4c4f-8719-5f71301acb77",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a209259a-bbf0-43d8-bef6-2cc2a0a8e863"
        },
        "item": {
          "id": "fe0bd2ef-37a9-4e3c-a695-9a0205361cf5",
          "name": "did:invalid"
        },
        "response": {
          "id": "644f7208-a27a-4fef-96d3-deedfb9b72e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0bd2ef-37a9-4e3c-a695-9a0205361cf5",
        "cursor": {
          "ref": "d81b4210-9d92-4c4f-8719-5f71301acb77",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a209259a-bbf0-43d8-bef6-2cc2a0a8e863"
        },
        "item": {
          "id": "fe0bd2ef-37a9-4e3c-a695-9a0205361cf5",
          "name": "did:invalid"
        },
        "response": {
          "id": "644f7208-a27a-4fef-96d3-deedfb9b72e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46d7690-aaf1-44a6-b405-a8d30be1733e",
        "cursor": {
          "ref": "04276602-1abf-480d-9d4b-654ae9d17a70",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "41672ffa-3618-4a91-9459-3708c07afbaa"
        },
        "item": {
          "id": "f46d7690-aaf1-44a6-b405-a8d30be1733e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "dcd1a7b5-2865-4992-b4d7-2f6a83221aa8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 143,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b647f0-fc42-4c5c-bbc6-f2e99d9bd205",
        "cursor": {
          "ref": "9d5cccd1-9e8d-4048-9be1-6c793f82fbad",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e02b16f9-15c4-4828-81ba-149eaace0c34"
        },
        "item": {
          "id": "e2b647f0-fc42-4c5c-bbc6-f2e99d9bd205",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "88a0114c-802e-4fdc-aba0-0f7c4c991d32",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a5e25f-2ff9-482d-b9ec-975d45295a8a",
        "cursor": {
          "ref": "f337bb26-5697-4018-8214-84e3e48b7d53",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "58e6c6b8-f420-418e-afce-848f0370db52"
        },
        "item": {
          "id": "f0a5e25f-2ff9-482d-b9ec-975d45295a8a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7b0fd806-71b1-4a65-8395-f5f1bfae5aef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b2c090-c0bc-4262-adaf-994ca3c4797d",
        "cursor": {
          "ref": "90ea6f8f-5a95-4f63-a087-4b8ba33fd1b2",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5de63564-cc67-4500-9a81-44717e7f3b86"
        },
        "item": {
          "id": "10b2c090-c0bc-4262-adaf-994ca3c4797d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d184ef21-ff8d-48fb-80d9-448659c147fb",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "10b2c090-c0bc-4262-adaf-994ca3c4797d",
        "cursor": {
          "ref": "90ea6f8f-5a95-4f63-a087-4b8ba33fd1b2",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5de63564-cc67-4500-9a81-44717e7f3b86"
        },
        "item": {
          "id": "10b2c090-c0bc-4262-adaf-994ca3c4797d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d184ef21-ff8d-48fb-80d9-448659c147fb",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ea0ed53a-440e-4414-b8b7-787a47231881",
        "cursor": {
          "ref": "52313908-fd62-4255-8eab-62672a9d0015",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1fac683a-17b1-4b5d-b2a3-c2e3513bb5e6"
        },
        "item": {
          "id": "ea0ed53a-440e-4414-b8b7-787a47231881",
          "name": "identifiers"
        },
        "response": {
          "id": "36dc5f64-f869-4afd-bcee-dbba70b6150d",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7659804-4e4c-4093-a6e3-2b1350976a0e",
        "cursor": {
          "ref": "65778e80-88f8-4c17-a64f-be5dffbe9a64",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b2e4f0d5-d974-48f8-9001-5523403014d8"
        },
        "item": {
          "id": "b7659804-4e4c-4093-a6e3-2b1350976a0e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9948505a-bbf0-48a4-a122-58783355a4b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "b7659804-4e4c-4093-a6e3-2b1350976a0e",
        "cursor": {
          "ref": "65778e80-88f8-4c17-a64f-be5dffbe9a64",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b2e4f0d5-d974-48f8-9001-5523403014d8"
        },
        "item": {
          "id": "b7659804-4e4c-4093-a6e3-2b1350976a0e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9948505a-bbf0-48a4-a122-58783355a4b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "4d1c4dce-ddaf-489d-aeb1-dccf5e923ef3",
        "cursor": {
          "ref": "67d80c5c-6e46-4a46-b9b8-7fb7e34753b1",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bb61387a-bb62-4f22-a0a3-8a024a116315"
        },
        "item": {
          "id": "4d1c4dce-ddaf-489d-aeb1-dccf5e923ef3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "73d5499d-d503-4704-a644-0e01f809e1c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "24fc52f7-2d76-4ee8-85d4-62fcb9614489",
        "cursor": {
          "ref": "e20e6fb3-83d1-4c33-8181-52af7b294954",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "302f339b-5037-4514-addb-a955fdd76179"
        },
        "item": {
          "id": "24fc52f7-2d76-4ee8-85d4-62fcb9614489",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d83d783a-9ded-4bdd-a2ac-bae7c720b4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "b86b0938-3531-44f5-aad9-d65f697ff4b9",
        "cursor": {
          "ref": "b6fddfd3-6a25-43bc-9d14-753a6324dc6b",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "51c0cf80-fb6d-4207-a4af-13b0ccd52ef6"
        },
        "item": {
          "id": "b86b0938-3531-44f5-aad9-d65f697ff4b9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f91ec999-35b2-423c-979d-8b7733a4a2d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "55e84f33-b8ec-48fc-8428-77f41f0cbe01",
        "cursor": {
          "ref": "80d72171-da95-4d30-a715-fc89ecc76c9c",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5869e219-5cb7-4e0d-a347-4964e98a47e0"
        },
        "item": {
          "id": "55e84f33-b8ec-48fc-8428-77f41f0cbe01",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "11a75e6d-8c33-4285-a692-f1a160843863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "591d62ba-ef65-414d-9ba2-45e78c0481ab",
        "cursor": {
          "ref": "8f67e396-67fd-4e05-aece-31be206e55f1",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e7a1bf8e-581f-4ae0-9ca1-bde20de60998"
        },
        "item": {
          "id": "591d62ba-ef65-414d-9ba2-45e78c0481ab",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6624a43d-0609-4cd5-abd0-b6115bf7ec93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "3613d35a-3e3c-492e-b02d-2a8ed4b059be",
        "cursor": {
          "ref": "857de109-e107-4779-9f1d-b15e6c3870c9",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "455f4201-d129-4ac2-8fea-ea4742a0fb0a"
        },
        "item": {
          "id": "3613d35a-3e3c-492e-b02d-2a8ed4b059be",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "62a80593-2a74-4768-8167-55c43e6128b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "c2292997-0ed6-41b1-9287-127d80ef28f5",
        "cursor": {
          "ref": "516b4138-e5be-45cb-a4a5-20a4c2b39340",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d2583c88-bb06-4284-bab5-398b29c89010"
        },
        "item": {
          "id": "c2292997-0ed6-41b1-9287-127d80ef28f5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8bc81507-0f37-410a-bc9c-4dc6e58f1313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "45a3fe38-67ef-42dd-812d-d1b719da2fbc",
        "cursor": {
          "ref": "88fcb103-1f6b-4d28-ada1-c98624011bec",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0c0ebf78-efd2-4087-93b4-3ca843cb025c"
        },
        "item": {
          "id": "45a3fe38-67ef-42dd-812d-d1b719da2fbc",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c14ee624-455b-47ab-98ba-f4428eb92703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "bf59b7a0-fcd7-460a-9742-82c2d8a9d728",
        "cursor": {
          "ref": "01aacefb-52fa-4588-9829-5ebbfcaa4c40",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "40cdb96c-90b2-4853-80f5-fc61275b1764"
        },
        "item": {
          "id": "bf59b7a0-fcd7-460a-9742-82c2d8a9d728",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "af74a634-9486-4ab4-af44-dca6de759d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "d87b2055-30c0-4740-8869-6238fa4c66ab",
        "cursor": {
          "ref": "1617cc28-edcd-4378-a376-cca524d87185",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "90562e47-91e5-4117-bc42-02aec8bd1564"
        },
        "item": {
          "id": "d87b2055-30c0-4740-8869-6238fa4c66ab",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c0ad36e7-4ee4-45a7-bded-23ffe97da1f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "2a8266e1-db85-40eb-9884-7385d51dc45b",
        "cursor": {
          "ref": "9d3ab096-b9b2-4fce-87fc-72541a9c014f",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "518b97ce-acac-40c4-af65-1220e7334ea5"
        },
        "item": {
          "id": "2a8266e1-db85-40eb-9884-7385d51dc45b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c802867d-daee-4267-aa1c-81597a56fcdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8c60ebcb-82fd-43b5-8695-d3527c424716",
        "cursor": {
          "ref": "411b5c55-f799-4883-a6bd-5afc69f48632",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "daf09834-928e-4a2e-970b-183b94d4a4cc"
        },
        "item": {
          "id": "8c60ebcb-82fd-43b5-8695-d3527c424716",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "b9b5dc5a-a4ef-499b-a7c4-7a4ac6eb4687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "bf84d9de-131c-4ebd-bb37-73259388960b",
        "cursor": {
          "ref": "b7df7fdb-e6c9-4b30-93a2-4fcfa4d102a2",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "44d10175-3dd3-4308-bfe0-46682ad56f7f"
        },
        "item": {
          "id": "bf84d9de-131c-4ebd-bb37-73259388960b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1dd03690-029d-4097-9ec3-cb86666744c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "f02fd40a-12a3-4ac6-934a-3856203640df",
        "cursor": {
          "ref": "0e793102-ada7-46d0-b088-5c20264db0fc",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8d9ed418-a087-4326-a1d6-28df0e3afd3a"
        },
        "item": {
          "id": "f02fd40a-12a3-4ac6-934a-3856203640df",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "da6ce037-f31f-4510-b54d-718cdf03064f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "4f886df4-ae23-438d-a7fc-707f9fa0aaeb",
        "cursor": {
          "ref": "28a8f2f0-fa63-4d22-9d15-033572437580",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "eb7e64b6-e3c3-47de-8933-d6bdf0eff26c"
        },
        "item": {
          "id": "4f886df4-ae23-438d-a7fc-707f9fa0aaeb",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "97ba45cd-f58b-4c81-97cb-fbbf22c3b2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "22d32bc3-c015-4e5e-b3d6-9ceb57386ecc",
        "cursor": {
          "ref": "1f66becf-f8bd-4547-a249-3a861c5bf72b",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "afad671c-1553-403b-a4af-2fcde3dc97cc"
        },
        "item": {
          "id": "22d32bc3-c015-4e5e-b3d6-9ceb57386ecc",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a8173fc6-148c-425f-9d75-660bfc947348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "04af734c-cca3-47af-9675-222b4a15f6e7",
        "cursor": {
          "ref": "7b3cee0a-2d0c-4f68-b333-2d0eaac92d6f",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0bbe977d-7ee6-4e19-94bc-63f92df44c98"
        },
        "item": {
          "id": "04af734c-cca3-47af-9675-222b4a15f6e7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7f38dc0f-3d98-4bff-8475-a1615c56e8c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "87cda62a-c90e-4198-a89a-b0d0281657f6",
        "cursor": {
          "ref": "1fadc953-336b-4db8-a6d8-37097feac710",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9e6190e5-7b9f-4f5d-9ea3-4cdee90b397d"
        },
        "item": {
          "id": "87cda62a-c90e-4198-a89a-b0d0281657f6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1964adfe-4aa1-4c3a-a90b-5a1f3622394c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "b32a6127-5a80-4bee-b943-17801997e64a",
        "cursor": {
          "ref": "c3885ec3-6778-451b-ae87-07d6204d8e68",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a9e3813d-a7c8-468e-8132-a76f88e4c81e"
        },
        "item": {
          "id": "b32a6127-5a80-4bee-b943-17801997e64a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "8b795f82-577f-4b90-9a59-72009058714e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "0c05db9b-f02c-4438-8394-d1333f6389eb",
        "cursor": {
          "ref": "59e5b442-4434-4afd-a468-5e8e25c6bd5b",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9a15bbdb-f00b-4ba5-bed2-cec00f190f02"
        },
        "item": {
          "id": "0c05db9b-f02c-4438-8394-d1333f6389eb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c294e190-6e9d-4247-a273-cf163e649298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "ec244df3-5474-4db7-bd1e-aee49e669674",
        "cursor": {
          "ref": "9b44d9ce-9f53-44f9-b232-b1cbf7682e08",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ac3f2399-af22-467c-b0e0-06cf94bbdf74"
        },
        "item": {
          "id": "ec244df3-5474-4db7-bd1e-aee49e669674",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "06c8d68a-f618-439a-b440-4e8e6212b8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "a623b30e-68a3-4377-8b99-8086f66001ea",
        "cursor": {
          "ref": "f28e34ac-a9bf-4f7f-bee0-b1eabd7fb74a",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fd06d5e9-7480-437e-8fa9-71f152c2ceec"
        },
        "item": {
          "id": "a623b30e-68a3-4377-8b99-8086f66001ea",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8f106d09-ac24-4e30-bc97-65f838b4cd34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "e38afe04-2e63-413c-8e81-edf9c8f79bf4",
        "cursor": {
          "ref": "51f7c058-6c8e-4dcc-b952-483ba918456e",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "623bf7a9-c180-435d-8358-4f7db78f54cc"
        },
        "item": {
          "id": "e38afe04-2e63-413c-8e81-edf9c8f79bf4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0dc70eae-0f3c-4533-b1fe-4f0d3fb1957b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "15efeaae-36fe-4b5a-826b-30770ff88362",
        "cursor": {
          "ref": "cd95c464-fedd-45fb-b615-58fc03913c0b",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d458c0e9-6834-4781-98c2-2cdddb89f955"
        },
        "item": {
          "id": "15efeaae-36fe-4b5a-826b-30770ff88362",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6e8de7d5-0efd-4a86-94bb-ad14ce777729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "d52f6120-6720-43d1-ba5e-496ea8f5bce8",
        "cursor": {
          "ref": "98ac6d8d-86b3-49ab-8267-4220985be91c",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cbb1dc21-7f5d-45f3-9264-66402f91df3e"
        },
        "item": {
          "id": "d52f6120-6720-43d1-ba5e-496ea8f5bce8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "013094e3-2f27-4279-be8f-b8add50a36f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7593,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "e0bbddd4-b586-40bd-aa16-8935c9d13aee",
        "cursor": {
          "ref": "15da883f-a6dd-4fb0-ad6c-06705336c532",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "54624b24-0aa7-422d-ab44-6dfe5ef88973"
        },
        "item": {
          "id": "e0bbddd4-b586-40bd-aa16-8935c9d13aee",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f4bcc107-ef29-4e1d-a4a2-6c58d7f024ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4951,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "e93d124a-51c5-41f9-adaf-9445ea176e18",
        "cursor": {
          "ref": "c514b737-3d35-4cc1-8f4c-1a83350f2a78",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0982e8f0-181e-4ff7-8ced-a69c29105b24"
        },
        "item": {
          "id": "e93d124a-51c5-41f9-adaf-9445ea176e18",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8ef0e84e-e961-49a1-94b2-c5ee079c30c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6650,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "bbe6bf56-ecf8-4516-9e98-043948636483",
        "cursor": {
          "ref": "3c13188a-f153-49c1-9d88-63703b3b3bfe",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a5d2f0b5-2bb3-46cc-99ef-4dd886805302"
        },
        "item": {
          "id": "bbe6bf56-ecf8-4516-9e98-043948636483",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b1f1797c-67a0-4175-a31b-916712b3da65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4448,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "944d6482-067c-42c4-9a3b-99681973e0fa",
        "cursor": {
          "ref": "7474b0dc-7abe-42ab-b144-ac8874d4b0ac",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bedea022-7cf5-483c-8564-dcf32f8de0bb"
        },
        "item": {
          "id": "944d6482-067c-42c4-9a3b-99681973e0fa",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "728ae047-2c0c-44fd-9429-ad9872052395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6375,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "92dc8e0a-a212-4c18-baf5-1f71ec9f0fd2",
        "cursor": {
          "ref": "5f4783ac-8cd5-43d6-b3dd-2edcaeb96b0f",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a932db31-10cd-47aa-abdc-2088b4ff892f"
        },
        "item": {
          "id": "92dc8e0a-a212-4c18-baf5-1f71ec9f0fd2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6a36afe4-5d6d-4361-abfe-2a5c4c4499a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "0167cbe8-603c-4297-8bcf-003c9cac1847",
        "cursor": {
          "ref": "7a6b8f65-30ef-466a-b64d-a60b71501507",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "94a02372-bd1c-458f-905b-9a01b643a60b"
        },
        "item": {
          "id": "0167cbe8-603c-4297-8bcf-003c9cac1847",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e57e87ec-298d-48ac-b98f-f8d8d551d069",
          "status": "Created",
          "code": 201,
          "responseTime": 6002,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "693652d2-9c3f-4f3e-ac13-02fca9eff238",
        "cursor": {
          "ref": "d9601e7f-77bd-4030-9965-465c4d361213",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b097c9e0-5b90-457e-b862-a87d4e072183"
        },
        "item": {
          "id": "693652d2-9c3f-4f3e-ac13-02fca9eff238",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0e251f47-7858-4fdc-825d-9abd60f5757c",
          "status": "Created",
          "code": 201,
          "responseTime": 5064,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "6d9376cd-95fa-4583-bbb5-6442bb481e80",
        "cursor": {
          "ref": "e1b9820d-aa65-4a3a-8a4c-b26480316678",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2d3ef673-7ef7-4c92-ad71-b8af5cf4fcb3"
        },
        "item": {
          "id": "6d9376cd-95fa-4583-bbb5-6442bb481e80",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8a54ae9a-3ed9-4d4b-bc80-1b461ca557e5",
          "status": "Created",
          "code": 201,
          "responseTime": 6632,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "dbc7630d-b05f-4e73-8b4f-72072265f1b9",
        "cursor": {
          "ref": "400b8d25-c8fe-43f1-9a44-63c8a48023fc",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "42c97af5-2f1f-40eb-867e-3a0683b8c8de"
        },
        "item": {
          "id": "dbc7630d-b05f-4e73-8b4f-72072265f1b9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c323ff0d-73c2-4ade-95ee-c89b83df565a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "dc26c391-bd9c-4f81-907a-d681462a6ea7",
        "cursor": {
          "ref": "27ccdd0d-71d5-43b3-80cc-59a6c62fea25",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6aa3f282-3f2a-47d3-a34d-95f3c621e110"
        },
        "item": {
          "id": "dc26c391-bd9c-4f81-907a-d681462a6ea7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ba6891ad-0c02-451a-a5f9-73485d1983c9",
          "status": "Created",
          "code": 201,
          "responseTime": 4892,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7101f7c8-25f2-4835-a3ce-3ae5ab46425e",
        "cursor": {
          "ref": "03c754b5-33ad-471a-9d01-0be3b0bba496",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c06937bc-1077-48a2-a623-782d425e6ec3"
        },
        "item": {
          "id": "7101f7c8-25f2-4835-a3ce-3ae5ab46425e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d72be494-57d9-4640-b9f9-ab0006d35b1f",
          "status": "Created",
          "code": 201,
          "responseTime": 6832,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "706951a9-82f1-4c64-92d5-fb4ee8812678",
        "cursor": {
          "ref": "d69a18f9-44ba-4fba-8a95-11d2f70310b1",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8c179219-07d6-4b18-99bd-a30a986108bf"
        },
        "item": {
          "id": "706951a9-82f1-4c64-92d5-fb4ee8812678",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d22de4f4-cf49-4d44-a064-dada2b3131d9",
          "status": "Created",
          "code": 201,
          "responseTime": 4992,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9aae698c-d006-4990-9a68-01d584f9534a",
        "cursor": {
          "ref": "c90d8ee4-2a77-4fef-84a1-2449cacd85c5",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b5550f0c-dbab-435f-a7fb-f68472ea6918"
        },
        "item": {
          "id": "9aae698c-d006-4990-9a68-01d584f9534a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e6eeccab-ac8f-4627-8065-e300fdf77ba9",
          "status": "Created",
          "code": 201,
          "responseTime": 6816,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "63bef126-9dc9-4351-94b6-b821a3a1dc7b",
        "cursor": {
          "ref": "f9c319ec-5eec-4d57-b302-b61e574382f6",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8e7178f8-b4ea-4b0a-bdc3-7d92acd59623"
        },
        "item": {
          "id": "63bef126-9dc9-4351-94b6-b821a3a1dc7b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "82eb7714-1b00-4334-b725-229047b84a0c",
          "status": "Created",
          "code": 201,
          "responseTime": 4552,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c4cceb4d-ae0d-4917-83ed-a8bda1c59316",
        "cursor": {
          "ref": "4ce0ed0c-7d82-4a3f-bb90-5db6a9d5b860",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a7d77817-f2fe-4bb2-97cc-106751e1327b"
        },
        "item": {
          "id": "c4cceb4d-ae0d-4917-83ed-a8bda1c59316",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a3def73b-c062-4ff3-bff2-881103235166",
          "status": "Created",
          "code": 201,
          "responseTime": 6821,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "762e11dc-c446-40f5-8a57-06b414eb6c7e",
        "cursor": {
          "ref": "152a3d61-9768-41b4-8501-4d7c6bd64b27",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d460f655-cdbb-4a09-9230-b1d864df5a49"
        },
        "item": {
          "id": "762e11dc-c446-40f5-8a57-06b414eb6c7e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "89ae8060-9605-48b5-9f80-a8acbdd49a48",
          "status": "Created",
          "code": 201,
          "responseTime": 4557,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "fce2fd7d-74ac-40dd-9adf-d0baa7ae580b",
        "cursor": {
          "ref": "ce755fd5-2c71-43b0-b897-c99b30570642",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4e5c6e24-cf9e-4c24-bbb9-6170e533af4b"
        },
        "item": {
          "id": "fce2fd7d-74ac-40dd-9adf-d0baa7ae580b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1fb11466-6b31-4b39-8ded-9ded9fa1975c",
          "status": "Created",
          "code": 201,
          "responseTime": 6334,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a1ba2aaf-d782-4caf-8983-d308187709af",
        "cursor": {
          "ref": "aed1ad67-c415-45a2-b370-919885857e83",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c552438a-1837-4b58-93e5-71f9c52f84e7"
        },
        "item": {
          "id": "a1ba2aaf-d782-4caf-8983-d308187709af",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9deb9cef-1ae3-42b3-bfd4-2daf702ea284",
          "status": "Created",
          "code": 201,
          "responseTime": 4651,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "aab9d56b-bde9-43d8-b6f7-372049368d98",
        "cursor": {
          "ref": "f5ba94c5-f698-4887-b8d3-57a7aede7be5",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6d57a202-8164-4214-9030-da9dd96fecc3"
        },
        "item": {
          "id": "aab9d56b-bde9-43d8-b6f7-372049368d98",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a11e4568-1f76-4b55-8ffc-52f1df720e7e",
          "status": "Created",
          "code": 201,
          "responseTime": 6653,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "267b1da9-6e0c-4b29-bbc3-b9f9b0d5a4d8",
        "cursor": {
          "ref": "64cd8ed5-459b-47e9-b1a3-4d0f27390f20",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "cc487f74-dceb-475b-8966-9a65964cb372"
        },
        "item": {
          "id": "267b1da9-6e0c-4b29-bbc3-b9f9b0d5a4d8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "89fe1522-0d39-408b-8085-7006fbc715eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "927a3d19-6de1-4d59-85a2-431645c9aec5",
        "cursor": {
          "ref": "469548a1-5cda-4829-9881-b3fbdbaaff9f",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1e085a6a-3ab7-42e3-b4c9-245dcf84f000"
        },
        "item": {
          "id": "927a3d19-6de1-4d59-85a2-431645c9aec5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "775e40b8-5abf-4044-bbf7-8129d9d5208e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "dd482464-30a4-4df4-bb48-7975f23413ae",
        "cursor": {
          "ref": "cc668273-c5bd-4dad-b0f2-9dde9d14341b",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9e527cca-e2a1-4962-9bb8-48e6dc93625a"
        },
        "item": {
          "id": "dd482464-30a4-4df4-bb48-7975f23413ae",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0f19af1e-6bda-4f9d-b713-4f701eb21542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "ae47b9ee-db46-4253-8b7e-c74d64e9cc55",
        "cursor": {
          "ref": "3e3ae8d5-f29c-4fb6-9fc2-f62bd0cc2ca3",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b7bb14ac-a4f2-4c0e-b4a0-f3975e7beaeb"
        },
        "item": {
          "id": "ae47b9ee-db46-4253-8b7e-c74d64e9cc55",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e4782011-d439-4a48-bdd0-1b7a3440fc04",
          "status": "Created",
          "code": 201,
          "responseTime": 4465,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "7c605737-3575-4d62-ac4c-196f959bea0a",
        "cursor": {
          "ref": "bc618eda-a11f-4487-9ebf-0c2949a8e98c",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "de549ba4-4bd3-4fd2-be5a-97c7037c44d2"
        },
        "item": {
          "id": "7c605737-3575-4d62-ac4c-196f959bea0a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "28306c2c-c813-44f6-80c1-cac0f0ff6bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "d6563a3f-9529-47ed-8c03-6f88c315c23a",
        "cursor": {
          "ref": "12fc7552-49db-43ad-a44a-4d59247df6ff",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "51390495-e2a5-44e5-a16f-24d23cf16f12"
        },
        "item": {
          "id": "d6563a3f-9529-47ed-8c03-6f88c315c23a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0d8785d8-efee-47de-9db4-b436805511bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "56b70b91-7df7-4a2c-8083-e742acff9b10",
        "cursor": {
          "ref": "12ed0564-ecac-4aeb-8012-7f3acf086c2b",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2627b983-ca52-429e-8c88-17ceea0b1206"
        },
        "item": {
          "id": "56b70b91-7df7-4a2c-8083-e742acff9b10",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cc4a9c34-d2a6-4c5f-a998-c570cba4d7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "ed94726b-23e8-4d81-9055-735ac3977951",
        "cursor": {
          "ref": "b02db55e-ff33-4d42-b718-0c257f3cf600",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "77682ee2-12c1-4a22-86da-9a00a43c4b44"
        },
        "item": {
          "id": "ed94726b-23e8-4d81-9055-735ac3977951",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e500aeb1-f291-4d6f-8e27-1c72520898ed",
          "status": "Created",
          "code": 201,
          "responseTime": 6364,
          "responseSize": 709
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "eb45ebed-3004-43d7-a3c5-69a6cdd7d041",
        "cursor": {
          "ref": "07ccca7f-be64-4172-904b-c9743ae513b9",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "97006737-16f3-4822-8203-4355541e5cde"
        },
        "item": {
          "id": "eb45ebed-3004-43d7-a3c5-69a6cdd7d041",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c5aaf5ab-731f-4e1e-bfb3-f5db494112e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 74
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "9b3877ee-4792-40ad-8d17-d3a0123a15a2",
        "cursor": {
          "ref": "62c64444-b461-4336-9574-f022e6576dcf",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "bf655c69-b03c-4f0e-89a7-296b0b6c3f33"
        },
        "item": {
          "id": "9b3877ee-4792-40ad-8d17-d3a0123a15a2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d6e07696-0e5b-49f0-a18b-244946634ae9",
          "status": "Created",
          "code": 201,
          "responseTime": 6422,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "45764365-dcde-4c5e-85c2-7ab8d6870ae1",
        "cursor": {
          "ref": "ab5642f4-add6-43df-b360-98de545d4597",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7b6d3c44-4e53-487b-bfb0-01c53ec954dd"
        },
        "item": {
          "id": "45764365-dcde-4c5e-85c2-7ab8d6870ae1",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a04b4b83-7710-41b5-9a98-a801909d818a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6e2a0e45-a80d-44f0-8db7-aec66f7179cc",
        "cursor": {
          "ref": "7b554513-84cc-4a57-8833-3cc2b838f87d",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "18be529b-e8a7-46b8-97ed-910157d978cf"
        },
        "item": {
          "id": "6e2a0e45-a80d-44f0-8db7-aec66f7179cc",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0131cdc4-6577-4773-82f0-08fa1b4b7a12",
          "status": "Created",
          "code": 201,
          "responseTime": 4544,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "4cd7bbd2-b210-4bcf-82b0-79d5e4396e02",
        "cursor": {
          "ref": "879403a2-03e6-4862-8e57-caf45f11735d",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4244d969-50cf-4ad2-91e3-ae5aa81db254"
        },
        "item": {
          "id": "4cd7bbd2-b210-4bcf-82b0-79d5e4396e02",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "36ebf160-4ec1-483b-858a-f458f2949848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6715,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "011c39d5-d983-47e4-b0b1-fa0baf468cd0",
        "cursor": {
          "ref": "ed918045-1bf8-4eee-a86f-7e37ae5be11a",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e3b6e4bb-5e7b-48e5-92b1-6e3e463fd2fb"
        },
        "item": {
          "id": "011c39d5-d983-47e4-b0b1-fa0baf468cd0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6d6ea001-b11a-42ed-879c-673d54788c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4545,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "43935f57-71c6-4684-ba62-6231591887ca",
        "cursor": {
          "ref": "eb896c86-6fa0-48c5-9bb3-ce9adc04a88b",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "24432d44-ce92-4c35-af60-19288c039cd2"
        },
        "item": {
          "id": "43935f57-71c6-4684-ba62-6231591887ca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "bf50b4ed-ad33-4485-845b-ae786bbe80d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 78
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "cf4e704d-b5b4-4997-8f80-e22652fc2035",
        "cursor": {
          "ref": "82368ed2-cd6c-44ab-b34a-b740a911f662",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "de5cb916-2b34-4e45-b317-fb38320c1b48"
        },
        "item": {
          "id": "cf4e704d-b5b4-4997-8f80-e22652fc2035",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "688eaef1-b1b5-421d-b73a-83095e825dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6940,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "83365c2a-c00d-464b-be7c-9edb5382d841",
        "cursor": {
          "ref": "58315257-3b11-46f5-8a88-f756986c17d4",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "01d65144-0240-4202-a8f0-e5ffae836aa7"
        },
        "item": {
          "id": "83365c2a-c00d-464b-be7c-9edb5382d841",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "bd4201ec-1960-4e8f-9d6f-98ade1f22978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "a7a28ab4-652b-44d9-b038-656d273550dc",
        "cursor": {
          "ref": "2931cafd-252a-47df-ad32-5b6048280a16",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ecdb5715-9c62-46d7-827e-668511bda90b"
        },
        "item": {
          "id": "a7a28ab4-652b-44d9-b038-656d273550dc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c6553b8b-5bf1-4598-9879-abf7b5e0c19d",
          "status": "Created",
          "code": 201,
          "responseTime": 6273,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "cc3c7ec4-3008-4e6b-a329-767b7716b074",
        "cursor": {
          "ref": "7dcd78b0-0d85-4d94-b513-ce9c4371299d",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "69388f97-9992-4f2b-8501-b5330ed95cb1"
        },
        "item": {
          "id": "cc3c7ec4-3008-4e6b-a329-767b7716b074",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "224664ba-014b-4ef4-b939-3165b7078940",
          "status": "Created",
          "code": 201,
          "responseTime": 8333,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "05953c64-673d-40cd-9e32-227c1f0c0525",
        "cursor": {
          "ref": "41642573-c8d9-4d73-a51f-99f7877e8613",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5cc031d5-0593-4257-a112-4a7c68124d51"
        },
        "item": {
          "id": "05953c64-673d-40cd-9e32-227c1f0c0525",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9a64070c-e53b-4c05-9f51-424f6bf51318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "dcd770e3-1dc8-49b4-be65-243a32d433ae",
        "cursor": {
          "ref": "918105d4-8a61-40f9-b7b1-55ca5b48e51b",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a1b446d1-6bd0-45f9-bb0b-7616b73c0fb9"
        },
        "item": {
          "id": "dcd770e3-1dc8-49b4-be65-243a32d433ae",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2cecc35b-e4a4-4d90-a2f1-9898df350890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "aa9accdd-a3b9-4083-aeaf-e95c9048d8c7",
        "cursor": {
          "ref": "87a2a4be-3bc4-4d00-8997-f15d53035b9d",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a9f39142-b902-49ed-9a76-32278ec57b7f"
        },
        "item": {
          "id": "aa9accdd-a3b9-4083-aeaf-e95c9048d8c7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "37191883-cde4-463e-bbba-e52dd3568197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "9a356813-f4df-42c0-8555-72cdf047815b",
        "cursor": {
          "ref": "42f21860-3efb-4278-9394-f7d8e7085c20",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1d87d1d7-69f5-4630-b879-22e94bb6b0a1"
        },
        "item": {
          "id": "9a356813-f4df-42c0-8555-72cdf047815b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "10681d1f-f5ba-4a51-9d21-968936c66ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "7158286b-d1f1-4707-8b36-e3188ccc959b",
        "cursor": {
          "ref": "00db83b2-d817-4b3f-a113-d76ec19aeb24",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7db9b77a-5578-4849-942c-cd0f617ab564"
        },
        "item": {
          "id": "7158286b-d1f1-4707-8b36-e3188ccc959b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f3268b73-ecaf-45da-9f0b-a8d131aa0d75",
          "status": "Created",
          "code": 201,
          "responseTime": 10799,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "78343891-9cff-462a-aadb-387fc841c65d",
        "cursor": {
          "ref": "ca4c562d-e814-468a-812d-5db47418187b",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bd44d5cf-b41c-4e6d-8bca-0adf9342eb0d"
        },
        "item": {
          "id": "78343891-9cff-462a-aadb-387fc841c65d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0c607b10-12ad-4701-a60e-be5a815661f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "9569f9f7-cb01-4cd0-8e51-98264611d0af",
        "cursor": {
          "ref": "5717f8e2-96e9-4a5d-9aac-0f5290c2a510",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5a193c50-32f0-4a56-9eec-cdc75142aae3"
        },
        "item": {
          "id": "9569f9f7-cb01-4cd0-8e51-98264611d0af",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "11e8672c-59bc-4deb-b58d-cb75f2c030b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "827a29cd-aab6-4e07-9460-f7deead28e7d",
        "cursor": {
          "ref": "1131cffd-66ad-40eb-81dc-9fb5e2a85978",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "134f7cd6-7654-46a5-b68b-587f01629b6b"
        },
        "item": {
          "id": "827a29cd-aab6-4e07-9460-f7deead28e7d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "925ccba0-fc3c-4a08-b006-b06a4210a82f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "9bcfb91e-4fc0-441c-a9de-7ae75be94a80",
        "cursor": {
          "ref": "4d877cea-b49f-4669-85e5-365814d59806",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5d3a78dd-4c38-4f09-8fee-2cf27000eced"
        },
        "item": {
          "id": "9bcfb91e-4fc0-441c-a9de-7ae75be94a80",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d638b8c2-6268-45a2-b218-02ddf01b517b",
          "status": "Created",
          "code": 201,
          "responseTime": 9073,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "414a79e7-68bd-4ba7-bc9d-0abe19f0ca27",
        "cursor": {
          "ref": "c18dca08-7241-48cc-9e5c-dc288e68bb30",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "75d2a1ae-cdd0-406a-9fd2-a3d4aa7da6f7"
        },
        "item": {
          "id": "414a79e7-68bd-4ba7-bc9d-0abe19f0ca27",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a6c2f93f-785a-4782-92aa-d351c8197280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "71f2d3c1-5d09-4bf0-a0a7-50bc2935bc46",
        "cursor": {
          "ref": "3c563aef-1ab9-4e35-a035-37ee78eb369b",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1fc420e0-c687-4d97-adc6-472f05c0c015"
        },
        "item": {
          "id": "71f2d3c1-5d09-4bf0-a0a7-50bc2935bc46",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "101231f7-9d56-4517-af14-78cebcd069de",
          "status": "Created",
          "code": 201,
          "responseTime": 8065,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "43c8189d-ee27-46f9-bebc-db00f9729be2",
        "cursor": {
          "ref": "876a0ab1-d9f3-4565-bf5b-07097db4dff7",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "cb404d8d-3c68-4c9a-965f-f7fe3950a9c9"
        },
        "item": {
          "id": "43c8189d-ee27-46f9-bebc-db00f9729be2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9adb8ddf-4f8b-4da1-9be3-6f42e44509ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "a449702f-3737-437d-9f0c-e73eee413649",
        "cursor": {
          "ref": "15938400-2464-4799-830b-58c9bdb7303f",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "84e5e21f-cda6-4bf5-bd1c-9f285b6dfb46"
        },
        "item": {
          "id": "a449702f-3737-437d-9f0c-e73eee413649",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c9ec1377-0102-45c0-b714-956034575e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "95563edd-cb3f-4d44-b71d-7b323f0e2d58",
        "cursor": {
          "ref": "79a7ca31-01da-4649-8d7d-54622d80da59",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b8ed4cf5-272c-476e-a477-76d4f036d74b"
        },
        "item": {
          "id": "95563edd-cb3f-4d44-b71d-7b323f0e2d58",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f32b5a13-c6b8-4fa6-bdd0-7c590d860c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "832a2f73-4d34-453c-9f8a-42b07c269631",
        "cursor": {
          "ref": "28e2fa65-0205-47b4-92b3-f92a8610c0e0",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "11582a2c-4f7e-4870-954e-657b91f598c7"
        },
        "item": {
          "id": "832a2f73-4d34-453c-9f8a-42b07c269631",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "defbe30e-46fe-46d1-8348-1ad651eb63a1",
          "status": "Created",
          "code": 201,
          "responseTime": 10860,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "d6405508-e746-4d44-be39-61ec96dee2dd",
        "cursor": {
          "ref": "5ccb3743-f55c-431a-9770-125f9c28e927",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e4ef207c-123b-446e-9f73-36f10de4105e"
        },
        "item": {
          "id": "d6405508-e746-4d44-be39-61ec96dee2dd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9903c01c-db4a-49a7-b734-d0eb60550874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "39beda85-d3e7-4621-8294-2402803df9c1",
        "cursor": {
          "ref": "8a528bb0-53c3-4a97-9c1d-9bd8c066e800",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "50f352d9-b858-4f01-81e9-6b0afc8b3808"
        },
        "item": {
          "id": "39beda85-d3e7-4621-8294-2402803df9c1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8d76461c-0706-4c12-be8f-8ac8cd245b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "cc298862-e597-452d-bf1a-02f43fdf1fb2",
        "cursor": {
          "ref": "ddcdabc1-1b2b-4071-9cea-d1417079ed54",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d2f7ec8c-65a6-4d20-8a8a-875bace81e5e"
        },
        "item": {
          "id": "cc298862-e597-452d-bf1a-02f43fdf1fb2",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "96592f1e-67bc-406a-beaf-cd7709b11e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "28ed1eee-39b2-43c2-8954-5ebc618123f7",
        "cursor": {
          "ref": "162e3b77-b2f4-4b79-a72c-52b4e109f1b0",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f7f66c79-d9e2-4b9e-a335-2154c5fa5545"
        },
        "item": {
          "id": "28ed1eee-39b2-43c2-8954-5ebc618123f7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8d2dc50d-eef4-4e88-a829-b6ad258aa294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "fb4e128e-6a8c-472d-b8d0-56c10dd2c63b",
        "cursor": {
          "ref": "3dade1de-fdfa-4e6f-b9dc-b1ff4cc753f3",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5ffd05dd-5093-4c54-8d78-5fe40a173a2c"
        },
        "item": {
          "id": "fb4e128e-6a8c-472d-b8d0-56c10dd2c63b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ff06b9cc-6a52-42a2-8e25-0221fda2d3c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "f5f5262b-1526-4680-9083-808a3896a433",
        "cursor": {
          "ref": "78ac39bc-e979-4c0b-a277-ad9bb22506c6",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1810160f-b817-451b-9da2-e958669217dd"
        },
        "item": {
          "id": "f5f5262b-1526-4680-9083-808a3896a433",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0abff419-9768-4797-a936-9e7514c9756c",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 2365,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "f92a0882-07de-44de-904b-5f38e6e3c873",
        "cursor": {
          "ref": "9e220712-b51f-49de-9b78-e03fdd1b206c",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "62858e22-0c0d-4200-88b4-33e04f991cf6"
        },
        "item": {
          "id": "f92a0882-07de-44de-904b-5f38e6e3c873",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e16682d8-5fb0-46cf-befb-a2fa17a32e06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "0d6d28eb-83a4-4ffe-95fc-d6a0fc4f6da4",
        "cursor": {
          "ref": "7a2de217-a8a3-45cc-933b-941a7479040f",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d0b17be5-c8e5-49a8-a9ba-d5681abf57f1"
        },
        "item": {
          "id": "0d6d28eb-83a4-4ffe-95fc-d6a0fc4f6da4",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b74d9837-0196-4303-a2f2-da316a5e806f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "5400352c-6af4-49e0-90de-3b7096f12c8a",
        "cursor": {
          "ref": "7466baec-d1d8-445a-9f15-6ef91d554dc3",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "60622cdf-5822-4b4d-b0ee-36686ead59c4"
        },
        "item": {
          "id": "5400352c-6af4-49e0-90de-3b7096f12c8a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "db48deb2-f68f-4a34-9e9e-8ee83f8bfef4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "91fe3f3a-c69c-4e2f-a874-475b7718f446",
        "cursor": {
          "ref": "404178a9-0067-449d-876f-03570032b1e6",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a7b815c3-12af-493e-9434-3e154aecd477"
        },
        "item": {
          "id": "91fe3f3a-c69c-4e2f-a874-475b7718f446",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8c8816f3-c459-4f05-b52e-30b379cfa80e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "07f4ecf7-89e6-4545-9013-682bce6ae206",
        "cursor": {
          "ref": "24217a0b-f2e3-4dd1-945f-6e8ce8260ae4",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e21882f7-2b93-4e6d-998b-c66ae0a8d207"
        },
        "item": {
          "id": "07f4ecf7-89e6-4545-9013-682bce6ae206",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a0891a87-d87a-4883-9ffa-4da1cba41044",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "555e72e3-36f6-4c22-a446-38b24962e2fd",
        "cursor": {
          "ref": "a1de75ac-d1ab-4f0e-82f2-1a15843d72df",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e51aef3c-0da2-4a10-966f-b99d4f672c74"
        },
        "item": {
          "id": "555e72e3-36f6-4c22-a446-38b24962e2fd",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "79231393-e263-4737-bf9e-e2ba0f407065",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "9e7dfa38-1983-4c41-b033-94ac994b7ef1",
        "cursor": {
          "ref": "ef551d35-3826-4a60-87d6-0db013f55c36",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f13284e2-ee22-47cf-b387-76304bfee4fd"
        },
        "item": {
          "id": "9e7dfa38-1983-4c41-b033-94ac994b7ef1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9962914d-34c1-4faa-ae49-a453dab0d005",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "680288bc-66ea-400d-aa07-8c2e650972b0",
        "cursor": {
          "ref": "f8e3d629-83f3-47f5-8a0b-e30e31a82e9d",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a568fd26-9c80-41bc-a5d8-9b25a6ff5243"
        },
        "item": {
          "id": "680288bc-66ea-400d-aa07-8c2e650972b0",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "02606bd1-744e-4a30-a3e7-01b3bab582b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "733f3b67-5e46-4555-a260-b13032ea9014",
        "cursor": {
          "ref": "09e29ff6-8941-46c8-8ebd-9e5abbb9fbd5",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5fa4fa86-a299-49a0-862e-5e64e95c998d"
        },
        "item": {
          "id": "733f3b67-5e46-4555-a260-b13032ea9014",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a928e780-c5c3-473a-8329-1cd48cd0ba5c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "7dc4c38e-a503-4d1b-a02f-88a4570f896b",
        "cursor": {
          "ref": "0d37e0b7-33c7-42fe-b1a8-2f2b28580173",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4edf98be-e36b-45d2-ac33-1b21ef999171"
        },
        "item": {
          "id": "7dc4c38e-a503-4d1b-a02f-88a4570f896b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b6e86038-a022-4b7a-8f4c-c83a05152da6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "12f04a33-3546-4354-899d-6a25e15d1c13",
        "cursor": {
          "ref": "46b3e550-e98d-425a-acc0-ffe592678912",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c096ac78-c943-4290-b067-8011510efd29"
        },
        "item": {
          "id": "12f04a33-3546-4354-899d-6a25e15d1c13",
          "name": "credentials_issue"
        },
        "response": {
          "id": "fdb7cf81-24bb-4941-92d9-a511e6b98eb3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:105)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:105)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:105)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:105)"
            }
          }
        ]
      },
      {
        "id": "6ab64619-e809-41c9-be33-6441eefea4bb",
        "cursor": {
          "ref": "55eba03a-e7cd-4ce0-a95e-a1b6b0c31208",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f6d7988d-74af-4c59-b617-9c01789976ed"
        },
        "item": {
          "id": "6ab64619-e809-41c9-be33-6441eefea4bb",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4b12b381-cd5b-4f43-903e-c8ad7424e4eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          }
        ]
      },
      {
        "id": "14f186eb-f7c6-4b22-a5f9-f9ec98a3eef4",
        "cursor": {
          "ref": "47f9d3dd-33f4-4675-8988-9461ee411104",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "eed22326-327d-4862-8088-b040edeee863"
        },
        "item": {
          "id": "14f186eb-f7c6-4b22-a5f9-f9ec98a3eef4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e2fe6b49-2f9f-481b-8854-b211e99ef618",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "df0de78f-cf7e-4e1b-a969-fe471bf972e3",
        "cursor": {
          "ref": "817b8e2d-bf58-4236-96a7-43e620872182",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0d202ee4-864e-46f3-a462-8ffca4d95315"
        },
        "item": {
          "id": "df0de78f-cf7e-4e1b-a969-fe471bf972e3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0471f52a-00a0-4741-b1c5-fcff8fe16f85",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "0c9211a8-d673-4305-bc49-6b66fd73abda",
        "cursor": {
          "ref": "30b2fff6-9999-4354-acf4-aeed15035cd5",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "dc60b80d-77db-41e4-afbe-4e08b1a50b5b"
        },
        "item": {
          "id": "0c9211a8-d673-4305-bc49-6b66fd73abda",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ae03db33-8b6a-4d62-a04f-38a83200fabf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          }
        ]
      },
      {
        "id": "6f25865a-ef8b-40c4-9330-919dad90b906",
        "cursor": {
          "ref": "56f28e75-950a-4bfb-9c4b-ebb11cf41ed3",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a2ee4c41-4bb2-42bc-bf20-c3d218e21738"
        },
        "item": {
          "id": "6f25865a-ef8b-40c4-9330-919dad90b906",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8571fc99-5883-4e8d-8efe-1bcf0b8d949a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "6f25865a-ef8b-40c4-9330-919dad90b906",
        "cursor": {
          "ref": "56f28e75-950a-4bfb-9c4b-ebb11cf41ed3",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a2ee4c41-4bb2-42bc-bf20-c3d218e21738"
        },
        "item": {
          "id": "6f25865a-ef8b-40c4-9330-919dad90b906",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8571fc99-5883-4e8d-8efe-1bcf0b8d949a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "5311326f-1115-42f3-8f9c-0908f7ddd8fc",
        "cursor": {
          "ref": "73c072c6-26a7-4ce0-ae7d-456b1147db5f",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "39f52af0-df7d-474a-8bf3-efc8011daf13"
        },
        "item": {
          "id": "5311326f-1115-42f3-8f9c-0908f7ddd8fc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "98f1d7a0-6bd7-41b2-9e4b-3a044e8c3b46",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "5311326f-1115-42f3-8f9c-0908f7ddd8fc",
        "cursor": {
          "ref": "73c072c6-26a7-4ce0-ae7d-456b1147db5f",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "39f52af0-df7d-474a-8bf3-efc8011daf13"
        },
        "item": {
          "id": "5311326f-1115-42f3-8f9c-0908f7ddd8fc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "98f1d7a0-6bd7-41b2-9e4b-3a044e8c3b46",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "dda5ee00-3e14-4e8c-8785-9d1df8a73541",
        "cursor": {
          "ref": "e44792ce-2963-4c25-803e-c46133ebd31f",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a34a5be3-0a51-4dd8-9e9e-d872804eb657"
        },
        "item": {
          "id": "dda5ee00-3e14-4e8c-8785-9d1df8a73541",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5a200d8e-9754-4ece-9812-46fb1fcf1db5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "dda5ee00-3e14-4e8c-8785-9d1df8a73541",
        "cursor": {
          "ref": "e44792ce-2963-4c25-803e-c46133ebd31f",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a34a5be3-0a51-4dd8-9e9e-d872804eb657"
        },
        "item": {
          "id": "dda5ee00-3e14-4e8c-8785-9d1df8a73541",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5a200d8e-9754-4ece-9812-46fb1fcf1db5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "cc89b958-c213-4df7-bfab-dcf597b544e4",
        "cursor": {
          "ref": "1a4be6f4-4133-42be-9f6c-cedd3b78af26",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "44f6c8fe-4741-46c9-a393-2615e636e07e"
        },
        "item": {
          "id": "cc89b958-c213-4df7-bfab-dcf597b544e4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c6084e7f-8d8c-42ff-8115-3a3addf5b2a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "cc89b958-c213-4df7-bfab-dcf597b544e4",
        "cursor": {
          "ref": "1a4be6f4-4133-42be-9f6c-cedd3b78af26",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "44f6c8fe-4741-46c9-a393-2615e636e07e"
        },
        "item": {
          "id": "cc89b958-c213-4df7-bfab-dcf597b544e4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c6084e7f-8d8c-42ff-8115-3a3addf5b2a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "4864f931-620d-4325-b877-5fe1f43178b4",
        "cursor": {
          "ref": "8199b47f-0899-456e-a7f2-fa9e62a82d11",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "40735136-9711-4525-9af0-3fef3132b176"
        },
        "item": {
          "id": "4864f931-620d-4325-b877-5fe1f43178b4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "df8ecd77-d2ee-4747-b1a5-949515ed3251",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "4864f931-620d-4325-b877-5fe1f43178b4",
        "cursor": {
          "ref": "8199b47f-0899-456e-a7f2-fa9e62a82d11",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "40735136-9711-4525-9af0-3fef3132b176"
        },
        "item": {
          "id": "4864f931-620d-4325-b877-5fe1f43178b4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "df8ecd77-d2ee-4747-b1a5-949515ed3251",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "a68c1c77-c4c3-4669-b64c-e709dce972f3",
        "cursor": {
          "ref": "8e77926e-6aa3-434a-9ebe-eacbfcbccbb0",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "180e2409-3239-4a37-9082-2b36b72de859"
        },
        "item": {
          "id": "a68c1c77-c4c3-4669-b64c-e709dce972f3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a743e0bd-5165-422d-a001-ad1dfdb6da02",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "a68c1c77-c4c3-4669-b64c-e709dce972f3",
        "cursor": {
          "ref": "8e77926e-6aa3-434a-9ebe-eacbfcbccbb0",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "180e2409-3239-4a37-9082-2b36b72de859"
        },
        "item": {
          "id": "a68c1c77-c4c3-4669-b64c-e709dce972f3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a743e0bd-5165-422d-a001-ad1dfdb6da02",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "6535bcd9-7312-4068-b8de-4416ecef26dc",
        "cursor": {
          "ref": "4aa6de45-df37-41ce-8388-84548a983d1f",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "56fe4345-0af9-493a-8658-3253b73ed5c3"
        },
        "item": {
          "id": "6535bcd9-7312-4068-b8de-4416ecef26dc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "68d092e5-4ef0-4c73-8d4b-856eb70c256f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 25,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "6535bcd9-7312-4068-b8de-4416ecef26dc",
        "cursor": {
          "ref": "4aa6de45-df37-41ce-8388-84548a983d1f",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "56fe4345-0af9-493a-8658-3253b73ed5c3"
        },
        "item": {
          "id": "6535bcd9-7312-4068-b8de-4416ecef26dc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "68d092e5-4ef0-4c73-8d4b-856eb70c256f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 25,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "504c4687-1e39-4c8e-bd71-6a7384d5bf82",
        "cursor": {
          "ref": "54f9da9e-e428-4aba-804d-832de69705c4",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4d226378-289c-4c63-bf9d-0443469c02df"
        },
        "item": {
          "id": "504c4687-1e39-4c8e-bd71-6a7384d5bf82",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "09202194-d843-4df0-a824-2de35ddc7258",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "504c4687-1e39-4c8e-bd71-6a7384d5bf82",
        "cursor": {
          "ref": "54f9da9e-e428-4aba-804d-832de69705c4",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4d226378-289c-4c63-bf9d-0443469c02df"
        },
        "item": {
          "id": "504c4687-1e39-4c8e-bd71-6a7384d5bf82",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "09202194-d843-4df0-a824-2de35ddc7258",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "17557cd2-ec25-47bd-9dca-bd0e616554f1",
        "cursor": {
          "ref": "900f31f1-a069-4298-a26f-a7d0d5aed97e",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2cdeed20-efea-4fef-8c61-94cd18b16cc8"
        },
        "item": {
          "id": "17557cd2-ec25-47bd-9dca-bd0e616554f1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c77875d5-6fdf-4f4c-90eb-347f694ab72e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "17557cd2-ec25-47bd-9dca-bd0e616554f1",
        "cursor": {
          "ref": "900f31f1-a069-4298-a26f-a7d0d5aed97e",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2cdeed20-efea-4fef-8c61-94cd18b16cc8"
        },
        "item": {
          "id": "17557cd2-ec25-47bd-9dca-bd0e616554f1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c77875d5-6fdf-4f4c-90eb-347f694ab72e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "102da3d6-92d4-454b-9642-6b032a82987c",
        "cursor": {
          "ref": "20c374a3-95e5-474f-89c0-b79d500df6df",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "dc2de690-57aa-44d5-8dd4-737d22325f5a"
        },
        "item": {
          "id": "102da3d6-92d4-454b-9642-6b032a82987c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b6dc9319-8b70-4026-b1b5-c3af088efcc3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "102da3d6-92d4-454b-9642-6b032a82987c",
        "cursor": {
          "ref": "20c374a3-95e5-474f-89c0-b79d500df6df",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "dc2de690-57aa-44d5-8dd4-737d22325f5a"
        },
        "item": {
          "id": "102da3d6-92d4-454b-9642-6b032a82987c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b6dc9319-8b70-4026-b1b5-c3af088efcc3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "8ff3d153-b8c0-4796-a45a-904d2bb86280",
        "cursor": {
          "ref": "72f080d4-8dc6-4500-b8f4-b7b29bdd814e",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fbf66a32-7662-452b-bb63-0de82f057a1e"
        },
        "item": {
          "id": "8ff3d153-b8c0-4796-a45a-904d2bb86280",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a8ad558d-d93a-4a05-9cd7-522bc09c9d59",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "8ff3d153-b8c0-4796-a45a-904d2bb86280",
        "cursor": {
          "ref": "72f080d4-8dc6-4500-b8f4-b7b29bdd814e",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fbf66a32-7662-452b-bb63-0de82f057a1e"
        },
        "item": {
          "id": "8ff3d153-b8c0-4796-a45a-904d2bb86280",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a8ad558d-d93a-4a05-9cd7-522bc09c9d59",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "90133caa-fba3-40a5-a5f9-29ba774ced48",
        "cursor": {
          "ref": "40e1d1e4-72ae-4000-960e-0b630810fbe9",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "628f599d-459a-4007-8e96-9ad0c2c77530"
        },
        "item": {
          "id": "90133caa-fba3-40a5-a5f9-29ba774ced48",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5e8aae0f-4463-4ed3-b1b2-588e52742b82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "90133caa-fba3-40a5-a5f9-29ba774ced48",
        "cursor": {
          "ref": "40e1d1e4-72ae-4000-960e-0b630810fbe9",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "628f599d-459a-4007-8e96-9ad0c2c77530"
        },
        "item": {
          "id": "90133caa-fba3-40a5-a5f9-29ba774ced48",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5e8aae0f-4463-4ed3-b1b2-588e52742b82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "d1a62036-1d9a-4e57-ab4b-8c943077ca89",
        "cursor": {
          "ref": "6eab0aa4-b1a4-4949-90be-86e184cfcc70",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2e7a829a-8a55-4f6d-af40-15bd757df009"
        },
        "item": {
          "id": "d1a62036-1d9a-4e57-ab4b-8c943077ca89",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5990ae2a-8254-41d6-8c0c-5cba0bbfddad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "d1a62036-1d9a-4e57-ab4b-8c943077ca89",
        "cursor": {
          "ref": "6eab0aa4-b1a4-4949-90be-86e184cfcc70",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2e7a829a-8a55-4f6d-af40-15bd757df009"
        },
        "item": {
          "id": "d1a62036-1d9a-4e57-ab4b-8c943077ca89",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5990ae2a-8254-41d6-8c0c-5cba0bbfddad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "d2dc04fe-6def-40fd-8d44-5c4ea9f538dd",
        "cursor": {
          "ref": "f162eafa-e27a-40b1-a055-c8313f979edd",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "384b799b-da98-4ab7-9215-9773a800b02a"
        },
        "item": {
          "id": "d2dc04fe-6def-40fd-8d44-5c4ea9f538dd",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "741b291a-fffc-4d56-9192-e8233fd73927",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "d2dc04fe-6def-40fd-8d44-5c4ea9f538dd",
        "cursor": {
          "ref": "f162eafa-e27a-40b1-a055-c8313f979edd",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "384b799b-da98-4ab7-9215-9773a800b02a"
        },
        "item": {
          "id": "d2dc04fe-6def-40fd-8d44-5c4ea9f538dd",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "741b291a-fffc-4d56-9192-e8233fd73927",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "4e523602-e2af-4bc4-b987-344f93c37321",
        "cursor": {
          "ref": "8d4d04b5-ac7a-4a0c-a00f-05d75b761249",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2997bdca-3c28-497b-b5ac-72ba29cfce6c"
        },
        "item": {
          "id": "4e523602-e2af-4bc4-b987-344f93c37321",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ddd4522b-4e90-4d11-b719-52e66f9e0eb8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "4e523602-e2af-4bc4-b987-344f93c37321",
        "cursor": {
          "ref": "8d4d04b5-ac7a-4a0c-a00f-05d75b761249",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2997bdca-3c28-497b-b5ac-72ba29cfce6c"
        },
        "item": {
          "id": "4e523602-e2af-4bc4-b987-344f93c37321",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ddd4522b-4e90-4d11-b719-52e66f9e0eb8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "42e1df42-578b-4fcd-a4d1-ce9864a27e20",
        "cursor": {
          "ref": "dad0b23d-0472-42d5-add8-d83acd9a81f8",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d0311d60-23cd-4bda-b3b3-6d39a6c600da"
        },
        "item": {
          "id": "42e1df42-578b-4fcd-a4d1-ce9864a27e20",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f759634d-f920-42ab-8cee-d1771c273e78",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "42e1df42-578b-4fcd-a4d1-ce9864a27e20",
        "cursor": {
          "ref": "dad0b23d-0472-42d5-add8-d83acd9a81f8",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d0311d60-23cd-4bda-b3b3-6d39a6c600da"
        },
        "item": {
          "id": "42e1df42-578b-4fcd-a4d1-ce9864a27e20",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f759634d-f920-42ab-8cee-d1771c273e78",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "5183d16a-dbd0-4719-b74b-a9e2b35d40cb",
        "cursor": {
          "ref": "4beadc74-ca5a-47c7-bf9c-3911bd2fb32c",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "043f7a9e-7162-4068-b4f7-d4f94d7bea9d"
        },
        "item": {
          "id": "5183d16a-dbd0-4719-b74b-a9e2b35d40cb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9527904f-e63b-478b-ad55-76c14cb1858f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "5183d16a-dbd0-4719-b74b-a9e2b35d40cb",
        "cursor": {
          "ref": "4beadc74-ca5a-47c7-bf9c-3911bd2fb32c",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "043f7a9e-7162-4068-b4f7-d4f94d7bea9d"
        },
        "item": {
          "id": "5183d16a-dbd0-4719-b74b-a9e2b35d40cb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9527904f-e63b-478b-ad55-76c14cb1858f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "6bbdf3af-d4ae-4f3e-a1c9-08f0fb491340",
        "cursor": {
          "ref": "0bd2b9c4-abc0-49b0-9476-5dee2001abf0",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7cd0aba6-0a53-4af5-b799-877d3233dc3b"
        },
        "item": {
          "id": "6bbdf3af-d4ae-4f3e-a1c9-08f0fb491340",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "21fc1cfa-9082-4931-b0af-99432cadb15a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "6bbdf3af-d4ae-4f3e-a1c9-08f0fb491340",
        "cursor": {
          "ref": "0bd2b9c4-abc0-49b0-9476-5dee2001abf0",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7cd0aba6-0a53-4af5-b799-877d3233dc3b"
        },
        "item": {
          "id": "6bbdf3af-d4ae-4f3e-a1c9-08f0fb491340",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "21fc1cfa-9082-4931-b0af-99432cadb15a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "90a91877-fce8-438a-9660-0257d769a2b9",
        "cursor": {
          "ref": "716f8903-1e16-48cc-9666-eedf0d812c5a",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ed936af2-2f64-4863-a90c-a6912de4bcf4"
        },
        "item": {
          "id": "90a91877-fce8-438a-9660-0257d769a2b9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9074c83c-17ec-4a69-99d2-94cda5bf2e72",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "90a91877-fce8-438a-9660-0257d769a2b9",
        "cursor": {
          "ref": "716f8903-1e16-48cc-9666-eedf0d812c5a",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ed936af2-2f64-4863-a90c-a6912de4bcf4"
        },
        "item": {
          "id": "90a91877-fce8-438a-9660-0257d769a2b9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9074c83c-17ec-4a69-99d2-94cda5bf2e72",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "268126a9-36d8-48df-9857-58370ec106dd",
        "cursor": {
          "ref": "0c24d305-7391-47b4-b25d-e85447088a1c",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "19af9357-f51d-4cf1-bd85-500a8d7833b6"
        },
        "item": {
          "id": "268126a9-36d8-48df-9857-58370ec106dd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "24ca568d-9c02-471c-96da-69731d22f444",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "268126a9-36d8-48df-9857-58370ec106dd",
        "cursor": {
          "ref": "0c24d305-7391-47b4-b25d-e85447088a1c",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "19af9357-f51d-4cf1-bd85-500a8d7833b6"
        },
        "item": {
          "id": "268126a9-36d8-48df-9857-58370ec106dd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "24ca568d-9c02-471c-96da-69731d22f444",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "0fdd6745-cd08-4efa-bd6f-185dc3d576f8",
        "cursor": {
          "ref": "324d3100-9db5-47d9-a812-e599d9d9e5b1",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "531e7f61-fd8d-4780-bc9c-cdde681f2799"
        },
        "item": {
          "id": "0fdd6745-cd08-4efa-bd6f-185dc3d576f8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f41c2e3f-73b4-4ac8-8967-260047cfdd12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "0fdd6745-cd08-4efa-bd6f-185dc3d576f8",
        "cursor": {
          "ref": "324d3100-9db5-47d9-a812-e599d9d9e5b1",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "531e7f61-fd8d-4780-bc9c-cdde681f2799"
        },
        "item": {
          "id": "0fdd6745-cd08-4efa-bd6f-185dc3d576f8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f41c2e3f-73b4-4ac8-8967-260047cfdd12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "1f5b0004-dc5b-43e7-8af2-4fe2725bbb3d",
        "cursor": {
          "ref": "3a9b5652-49c5-46c1-9987-8f3b6c1a2afd",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "79444a02-0eb9-46cc-92e2-a280b4d74ae3"
        },
        "item": {
          "id": "1f5b0004-dc5b-43e7-8af2-4fe2725bbb3d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4b525ff6-91d9-4dea-814c-d0e60e52cbd8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "1f5b0004-dc5b-43e7-8af2-4fe2725bbb3d",
        "cursor": {
          "ref": "3a9b5652-49c5-46c1-9987-8f3b6c1a2afd",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "79444a02-0eb9-46cc-92e2-a280b4d74ae3"
        },
        "item": {
          "id": "1f5b0004-dc5b-43e7-8af2-4fe2725bbb3d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4b525ff6-91d9-4dea-814c-d0e60e52cbd8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "1b885f06-affa-436a-95dd-8874ddd55c90",
        "cursor": {
          "ref": "aa0b956f-fce0-4f37-921d-e5a744e038a0",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4599b671-6ad1-4640-be3a-50fa681f1743"
        },
        "item": {
          "id": "1b885f06-affa-436a-95dd-8874ddd55c90",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1fafdc0e-23ab-4ff7-b7b9-57f694495d98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "1b885f06-affa-436a-95dd-8874ddd55c90",
        "cursor": {
          "ref": "aa0b956f-fce0-4f37-921d-e5a744e038a0",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4599b671-6ad1-4640-be3a-50fa681f1743"
        },
        "item": {
          "id": "1b885f06-affa-436a-95dd-8874ddd55c90",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1fafdc0e-23ab-4ff7-b7b9-57f694495d98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "16cbac03-bd7c-4e81-9b35-5b229b460bf3",
        "cursor": {
          "ref": "d1ac953e-d35f-4e48-b0f8-a361fa2914df",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3a1cfce4-69dc-4d0f-9db7-2d1560b34390"
        },
        "item": {
          "id": "16cbac03-bd7c-4e81-9b35-5b229b460bf3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a8e5458a-589c-4893-9778-f50e7d44780f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "16cbac03-bd7c-4e81-9b35-5b229b460bf3",
        "cursor": {
          "ref": "d1ac953e-d35f-4e48-b0f8-a361fa2914df",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3a1cfce4-69dc-4d0f-9db7-2d1560b34390"
        },
        "item": {
          "id": "16cbac03-bd7c-4e81-9b35-5b229b460bf3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a8e5458a-589c-4893-9778-f50e7d44780f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "c49506cc-d899-4344-8735-a38fee3394a5",
        "cursor": {
          "ref": "2487fdb7-cb0b-4e5f-bd4b-ae72a6e5e3f4",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e377b9bb-6aaf-4474-82bc-3ed16e536504"
        },
        "item": {
          "id": "c49506cc-d899-4344-8735-a38fee3394a5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1b365995-5de8-46f6-837a-447112df3790",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "c49506cc-d899-4344-8735-a38fee3394a5",
        "cursor": {
          "ref": "2487fdb7-cb0b-4e5f-bd4b-ae72a6e5e3f4",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e377b9bb-6aaf-4474-82bc-3ed16e536504"
        },
        "item": {
          "id": "c49506cc-d899-4344-8735-a38fee3394a5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1b365995-5de8-46f6-837a-447112df3790",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "33c049a7-b335-4e93-b39f-8fd7b387870c",
        "cursor": {
          "ref": "7b037c43-af05-474d-b66f-321c22a7cffd",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0585476d-809b-4794-b24c-cc6c9fb8c12d"
        },
        "item": {
          "id": "33c049a7-b335-4e93-b39f-8fd7b387870c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "16b1b523-7569-4db2-91f1-d31e41327694",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "33c049a7-b335-4e93-b39f-8fd7b387870c",
        "cursor": {
          "ref": "7b037c43-af05-474d-b66f-321c22a7cffd",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0585476d-809b-4794-b24c-cc6c9fb8c12d"
        },
        "item": {
          "id": "33c049a7-b335-4e93-b39f-8fd7b387870c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "16b1b523-7569-4db2-91f1-d31e41327694",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "7395112b-c913-4be2-85bb-f5705a8228ec",
        "cursor": {
          "ref": "0f426de0-0bab-42c1-ad34-a9957facc20b",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b38350b7-8bf0-4b15-b86e-d1f449ede1d2"
        },
        "item": {
          "id": "7395112b-c913-4be2-85bb-f5705a8228ec",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bc8bf592-9164-45c0-805c-06490f357f6c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "7395112b-c913-4be2-85bb-f5705a8228ec",
        "cursor": {
          "ref": "0f426de0-0bab-42c1-ad34-a9957facc20b",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b38350b7-8bf0-4b15-b86e-d1f449ede1d2"
        },
        "item": {
          "id": "7395112b-c913-4be2-85bb-f5705a8228ec",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bc8bf592-9164-45c0-805c-06490f357f6c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "76d0c7e6-a4c7-4148-8fb4-a77a555d7bf5",
        "cursor": {
          "ref": "1c42db54-2321-419a-b555-3ceaedd251b7",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fb6418fc-5835-4b95-ad5a-b28f13fcaca1"
        },
        "item": {
          "id": "76d0c7e6-a4c7-4148-8fb4-a77a555d7bf5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6958d33e-a0bd-4c79-bce6-f605703b06f7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "76d0c7e6-a4c7-4148-8fb4-a77a555d7bf5",
        "cursor": {
          "ref": "1c42db54-2321-419a-b555-3ceaedd251b7",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fb6418fc-5835-4b95-ad5a-b28f13fcaca1"
        },
        "item": {
          "id": "76d0c7e6-a4c7-4148-8fb4-a77a555d7bf5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6958d33e-a0bd-4c79-bce6-f605703b06f7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "76fb9996-799a-4265-87c9-7ca85a9c7f1d",
        "cursor": {
          "ref": "e57a9f9a-63c9-4390-962a-4451b7b9f765",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "57b34743-f91f-4367-9dc0-072fa60de25f"
        },
        "item": {
          "id": "76fb9996-799a-4265-87c9-7ca85a9c7f1d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "368977c9-8a74-4902-a629-eaedc7a9e911",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "76fb9996-799a-4265-87c9-7ca85a9c7f1d",
        "cursor": {
          "ref": "e57a9f9a-63c9-4390-962a-4451b7b9f765",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "57b34743-f91f-4367-9dc0-072fa60de25f"
        },
        "item": {
          "id": "76fb9996-799a-4265-87c9-7ca85a9c7f1d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "368977c9-8a74-4902-a629-eaedc7a9e911",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "ec2e3700-3574-49d6-a645-4cbd0e068395",
        "cursor": {
          "ref": "7f5eb6e1-27f2-44f8-927c-e3dda711c6f3",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9b86f35f-fb1f-48c2-acd0-cb9c4c1695b4"
        },
        "item": {
          "id": "ec2e3700-3574-49d6-a645-4cbd0e068395",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9e81e50b-8b54-490e-85fe-f4d38b808ac0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "ec2e3700-3574-49d6-a645-4cbd0e068395",
        "cursor": {
          "ref": "7f5eb6e1-27f2-44f8-927c-e3dda711c6f3",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9b86f35f-fb1f-48c2-acd0-cb9c4c1695b4"
        },
        "item": {
          "id": "ec2e3700-3574-49d6-a645-4cbd0e068395",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9e81e50b-8b54-490e-85fe-f4d38b808ac0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "e2e1205b-9ee8-45a9-9d1d-8e47bfae4331",
        "cursor": {
          "ref": "ec0ee564-ce14-426f-94db-8b00e16f1248",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ec394f73-d327-43ec-9e27-5bb47f53e0c9"
        },
        "item": {
          "id": "e2e1205b-9ee8-45a9-9d1d-8e47bfae4331",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "20a2bfe7-47de-4ba0-b9f7-192b0eff11aa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "e2e1205b-9ee8-45a9-9d1d-8e47bfae4331",
        "cursor": {
          "ref": "ec0ee564-ce14-426f-94db-8b00e16f1248",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ec394f73-d327-43ec-9e27-5bb47f53e0c9"
        },
        "item": {
          "id": "e2e1205b-9ee8-45a9-9d1d-8e47bfae4331",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "20a2bfe7-47de-4ba0-b9f7-192b0eff11aa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "8f9e5344-3b8c-4255-a7a4-87ef05523181",
        "cursor": {
          "ref": "cee9d356-a2fa-48cc-a00e-e22a7648ea3c",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "93009009-b5b9-4492-9895-38cf75ff831c"
        },
        "item": {
          "id": "8f9e5344-3b8c-4255-a7a4-87ef05523181",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f0ca5a08-4927-4c91-b66f-46ef671b9822",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "8f9e5344-3b8c-4255-a7a4-87ef05523181",
        "cursor": {
          "ref": "cee9d356-a2fa-48cc-a00e-e22a7648ea3c",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "93009009-b5b9-4492-9895-38cf75ff831c"
        },
        "item": {
          "id": "8f9e5344-3b8c-4255-a7a4-87ef05523181",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f0ca5a08-4927-4c91-b66f-46ef671b9822",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "066ec9d4-3d32-4b1d-9636-24b253e5ea29",
        "cursor": {
          "ref": "54d64ffa-5336-4fc8-9af6-b726bd6e7349",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2330406c-af84-4c38-9db0-5f6c381f2d22"
        },
        "item": {
          "id": "066ec9d4-3d32-4b1d-9636-24b253e5ea29",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e0d978e0-c273-4052-8751-559c868a9564",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "066ec9d4-3d32-4b1d-9636-24b253e5ea29",
        "cursor": {
          "ref": "54d64ffa-5336-4fc8-9af6-b726bd6e7349",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2330406c-af84-4c38-9db0-5f6c381f2d22"
        },
        "item": {
          "id": "066ec9d4-3d32-4b1d-9636-24b253e5ea29",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e0d978e0-c273-4052-8751-559c868a9564",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "26d6e8b0-7c2b-47af-9a8b-75275bdf053e",
        "cursor": {
          "ref": "eb53d4d4-d2de-4f24-bde7-6849d870ee69",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7338ad50-7fdb-439f-a8d2-232df0a4341c"
        },
        "item": {
          "id": "26d6e8b0-7c2b-47af-9a8b-75275bdf053e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "89617a8a-5cd2-4c4e-8426-e4dafb429e97",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "26d6e8b0-7c2b-47af-9a8b-75275bdf053e",
        "cursor": {
          "ref": "eb53d4d4-d2de-4f24-bde7-6849d870ee69",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7338ad50-7fdb-439f-a8d2-232df0a4341c"
        },
        "item": {
          "id": "26d6e8b0-7c2b-47af-9a8b-75275bdf053e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "89617a8a-5cd2-4c4e-8426-e4dafb429e97",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "6ff1a021-0493-4f31-82d0-70029662255e",
        "cursor": {
          "ref": "e1ef8eb7-d9ff-4251-adf2-b7143ec0d7af",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9a13b5ab-772b-41de-8cef-7d30bbb92a07"
        },
        "item": {
          "id": "6ff1a021-0493-4f31-82d0-70029662255e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b867d767-9cf6-4cd7-9193-464896bb3c04",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "6ff1a021-0493-4f31-82d0-70029662255e",
        "cursor": {
          "ref": "e1ef8eb7-d9ff-4251-adf2-b7143ec0d7af",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9a13b5ab-772b-41de-8cef-7d30bbb92a07"
        },
        "item": {
          "id": "6ff1a021-0493-4f31-82d0-70029662255e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b867d767-9cf6-4cd7-9193-464896bb3c04",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "c931f18d-5cdc-483c-a7e8-97a2970541f7",
        "cursor": {
          "ref": "55e2caf1-279f-45e7-aa8f-33691140fff5",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3fa65b45-e3a2-4f54-bd7a-f997013d8ece"
        },
        "item": {
          "id": "c931f18d-5cdc-483c-a7e8-97a2970541f7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "676f4825-b57b-4037-86bd-6d3f3a04d385",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "c931f18d-5cdc-483c-a7e8-97a2970541f7",
        "cursor": {
          "ref": "55e2caf1-279f-45e7-aa8f-33691140fff5",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3fa65b45-e3a2-4f54-bd7a-f997013d8ece"
        },
        "item": {
          "id": "c931f18d-5cdc-483c-a7e8-97a2970541f7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "676f4825-b57b-4037-86bd-6d3f3a04d385",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "e6f98c48-d724-47bb-864b-73e7750f563f",
        "cursor": {
          "ref": "294f1eab-3843-4e5c-834e-b469c6c79f9d",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f63e3fa2-e98e-493e-a4e4-6ca9f6840c2a"
        },
        "item": {
          "id": "e6f98c48-d724-47bb-864b-73e7750f563f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "da96c2f8-2ae6-4acd-a3cd-8f05cd3d39af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "e6f98c48-d724-47bb-864b-73e7750f563f",
        "cursor": {
          "ref": "294f1eab-3843-4e5c-834e-b469c6c79f9d",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f63e3fa2-e98e-493e-a4e4-6ca9f6840c2a"
        },
        "item": {
          "id": "e6f98c48-d724-47bb-864b-73e7750f563f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "da96c2f8-2ae6-4acd-a3cd-8f05cd3d39af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "11edf574-8263-410b-b059-980141dad143",
        "cursor": {
          "ref": "9793283b-50d8-4ad4-a73f-18bb68b6354d",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "77ec264c-e085-478d-b610-00f4e0316078"
        },
        "item": {
          "id": "11edf574-8263-410b-b059-980141dad143",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "587063ea-79fb-4195-9689-7be86f6c0f47",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "11edf574-8263-410b-b059-980141dad143",
        "cursor": {
          "ref": "9793283b-50d8-4ad4-a73f-18bb68b6354d",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "77ec264c-e085-478d-b610-00f4e0316078"
        },
        "item": {
          "id": "11edf574-8263-410b-b059-980141dad143",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "587063ea-79fb-4195-9689-7be86f6c0f47",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "69ed8125-4562-4709-9af4-0997d46098a0",
        "cursor": {
          "ref": "ab0f354f-46b3-4182-9e1d-507b0e202f94",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d0e3b2f7-4449-4b3a-9ead-75c7e66a0ab0"
        },
        "item": {
          "id": "69ed8125-4562-4709-9af4-0997d46098a0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "97272d13-5954-4cfa-9785-c5c03d31c16c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "69ed8125-4562-4709-9af4-0997d46098a0",
        "cursor": {
          "ref": "ab0f354f-46b3-4182-9e1d-507b0e202f94",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d0e3b2f7-4449-4b3a-9ead-75c7e66a0ab0"
        },
        "item": {
          "id": "69ed8125-4562-4709-9af4-0997d46098a0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "97272d13-5954-4cfa-9785-c5c03d31c16c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "af585144-724d-44ab-a759-13df1a3a6a33",
        "cursor": {
          "ref": "4d451c51-f50d-4ea8-ae7a-89018a2b98ba",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c236ab16-4be4-4f9c-8796-eddf45f59768"
        },
        "item": {
          "id": "af585144-724d-44ab-a759-13df1a3a6a33",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3f1a18b5-541b-4f01-a0b1-a8363f9f3c85",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "af585144-724d-44ab-a759-13df1a3a6a33",
        "cursor": {
          "ref": "4d451c51-f50d-4ea8-ae7a-89018a2b98ba",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c236ab16-4be4-4f9c-8796-eddf45f59768"
        },
        "item": {
          "id": "af585144-724d-44ab-a759-13df1a3a6a33",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3f1a18b5-541b-4f01-a0b1-a8363f9f3c85",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "5fc7cba2-ba8a-4d02-ab9a-5194f5275132",
        "cursor": {
          "ref": "e7000867-25a1-42a4-b0a4-9bebab6997ef",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1010215a-15cb-4f1d-b738-edecc2843756"
        },
        "item": {
          "id": "5fc7cba2-ba8a-4d02-ab9a-5194f5275132",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8ec10dee-aeb1-4bb5-8ff5-a61aee144014",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "5fc7cba2-ba8a-4d02-ab9a-5194f5275132",
        "cursor": {
          "ref": "e7000867-25a1-42a4-b0a4-9bebab6997ef",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1010215a-15cb-4f1d-b738-edecc2843756"
        },
        "item": {
          "id": "5fc7cba2-ba8a-4d02-ab9a-5194f5275132",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8ec10dee-aeb1-4bb5-8ff5-a61aee144014",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "4a858fd7-3856-48a8-9249-ea92a01ce2d7",
        "cursor": {
          "ref": "fca59bac-9a52-43de-b461-228db932c174",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6a9926a1-48e2-4b1f-8349-a44e94a4a358"
        },
        "item": {
          "id": "4a858fd7-3856-48a8-9249-ea92a01ce2d7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6f8d1e84-6ae2-4043-a29f-72b07562e011",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "4a858fd7-3856-48a8-9249-ea92a01ce2d7",
        "cursor": {
          "ref": "fca59bac-9a52-43de-b461-228db932c174",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6a9926a1-48e2-4b1f-8349-a44e94a4a358"
        },
        "item": {
          "id": "4a858fd7-3856-48a8-9249-ea92a01ce2d7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6f8d1e84-6ae2-4043-a29f-72b07562e011",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "05aa4707-36f7-44dd-8813-70223ec2bc82",
        "cursor": {
          "ref": "6797686c-1ea5-421c-bfbf-be7c8d54830f",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2b985c26-dd4c-4029-af10-982812bb1dfb"
        },
        "item": {
          "id": "05aa4707-36f7-44dd-8813-70223ec2bc82",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0d992292-f815-4433-9fb6-a2b847bbb66c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "05aa4707-36f7-44dd-8813-70223ec2bc82",
        "cursor": {
          "ref": "6797686c-1ea5-421c-bfbf-be7c8d54830f",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2b985c26-dd4c-4029-af10-982812bb1dfb"
        },
        "item": {
          "id": "05aa4707-36f7-44dd-8813-70223ec2bc82",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0d992292-f815-4433-9fb6-a2b847bbb66c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "58a2edc7-d439-4abf-9cb0-6000d26b1411",
        "cursor": {
          "ref": "84b77be5-d085-4b16-8854-233a49cbdf8f",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d19a2e61-63af-474f-b25e-08d95bfad587"
        },
        "item": {
          "id": "58a2edc7-d439-4abf-9cb0-6000d26b1411",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9c2a45fe-33e2-4b12-baeb-85cbeaf69470",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "58a2edc7-d439-4abf-9cb0-6000d26b1411",
        "cursor": {
          "ref": "84b77be5-d085-4b16-8854-233a49cbdf8f",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d19a2e61-63af-474f-b25e-08d95bfad587"
        },
        "item": {
          "id": "58a2edc7-d439-4abf-9cb0-6000d26b1411",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9c2a45fe-33e2-4b12-baeb-85cbeaf69470",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "396e3990-a262-49ce-a6bf-f3e0b575e9eb",
        "cursor": {
          "ref": "68a4fe96-6967-434c-8f9e-0420d50a41f0",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "28f834c7-9059-4a8d-816c-09459d33b96c"
        },
        "item": {
          "id": "396e3990-a262-49ce-a6bf-f3e0b575e9eb",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "49a75b53-f2ba-4e99-a82f-72cdf7b9660c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "396e3990-a262-49ce-a6bf-f3e0b575e9eb",
        "cursor": {
          "ref": "68a4fe96-6967-434c-8f9e-0420d50a41f0",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "28f834c7-9059-4a8d-816c-09459d33b96c"
        },
        "item": {
          "id": "396e3990-a262-49ce-a6bf-f3e0b575e9eb",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "49a75b53-f2ba-4e99-a82f-72cdf7b9660c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "b2779b3c-85fe-47e6-be20-547a8d321cd5",
        "cursor": {
          "ref": "e01e2691-dfb3-493f-9904-19a57b370968",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "12db4e5e-2199-4452-9b59-744f6e5fa3c3"
        },
        "item": {
          "id": "b2779b3c-85fe-47e6-be20-547a8d321cd5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7bcb186c-e5b3-4ae2-83ed-36341f838529",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "b2779b3c-85fe-47e6-be20-547a8d321cd5",
        "cursor": {
          "ref": "e01e2691-dfb3-493f-9904-19a57b370968",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "12db4e5e-2199-4452-9b59-744f6e5fa3c3"
        },
        "item": {
          "id": "b2779b3c-85fe-47e6-be20-547a8d321cd5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7bcb186c-e5b3-4ae2-83ed-36341f838529",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "446778b1-3504-4fc1-b7b8-eabe9c764c66",
        "cursor": {
          "ref": "077ea6c3-d8cd-499a-a9ca-ca5547c21eba",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "89334056-1593-4f2d-b2ef-f0056b162472"
        },
        "item": {
          "id": "446778b1-3504-4fc1-b7b8-eabe9c764c66",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d131ad4c-3d60-464f-a108-136a0a3756fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "446778b1-3504-4fc1-b7b8-eabe9c764c66",
        "cursor": {
          "ref": "077ea6c3-d8cd-499a-a9ca-ca5547c21eba",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "89334056-1593-4f2d-b2ef-f0056b162472"
        },
        "item": {
          "id": "446778b1-3504-4fc1-b7b8-eabe9c764c66",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d131ad4c-3d60-464f-a108-136a0a3756fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "a46bd058-2834-46c8-9d03-b83547a52938",
        "cursor": {
          "ref": "a4e8a9a4-92ac-4c1e-8f30-bd4493b5b864",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "57492c14-dc3f-4f9d-b062-d1502e929fc0"
        },
        "item": {
          "id": "a46bd058-2834-46c8-9d03-b83547a52938",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "80394772-e8c0-4027-8a5c-175582555fcd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "a46bd058-2834-46c8-9d03-b83547a52938",
        "cursor": {
          "ref": "a4e8a9a4-92ac-4c1e-8f30-bd4493b5b864",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "57492c14-dc3f-4f9d-b062-d1502e929fc0"
        },
        "item": {
          "id": "a46bd058-2834-46c8-9d03-b83547a52938",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "80394772-e8c0-4027-8a5c-175582555fcd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "bb6170d7-c83a-4243-80e7-c0ce8cb83f03",
        "cursor": {
          "ref": "9b97da32-6212-481c-8902-64b58153b17e",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b00ad178-442a-401a-84da-8ca5e986af1a"
        },
        "item": {
          "id": "bb6170d7-c83a-4243-80e7-c0ce8cb83f03",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a6f5ccf3-4f8a-46f5-841d-cf8602ad3398",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "bb6170d7-c83a-4243-80e7-c0ce8cb83f03",
        "cursor": {
          "ref": "9b97da32-6212-481c-8902-64b58153b17e",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b00ad178-442a-401a-84da-8ca5e986af1a"
        },
        "item": {
          "id": "bb6170d7-c83a-4243-80e7-c0ce8cb83f03",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a6f5ccf3-4f8a-46f5-841d-cf8602ad3398",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "3bd853bf-77fe-4ac6-850c-ebb51ec0fc85",
        "cursor": {
          "ref": "197fedbe-65b3-4864-8522-a8b3036cdfc0",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "95d1642b-95d2-499b-bc22-67bb2b2582c1"
        },
        "item": {
          "id": "3bd853bf-77fe-4ac6-850c-ebb51ec0fc85",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2213a2a0-6b96-4f1e-b15c-f83b15ab63a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "3bd853bf-77fe-4ac6-850c-ebb51ec0fc85",
        "cursor": {
          "ref": "197fedbe-65b3-4864-8522-a8b3036cdfc0",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "95d1642b-95d2-499b-bc22-67bb2b2582c1"
        },
        "item": {
          "id": "3bd853bf-77fe-4ac6-850c-ebb51ec0fc85",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2213a2a0-6b96-4f1e-b15c-f83b15ab63a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "af112664-8394-4aa1-aac0-f6efd1e5e9da",
        "cursor": {
          "ref": "df9d70cf-4b1a-4a23-9040-a29fa1dec6a9",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f0da0f06-196c-4d57-ae3e-a83b99b02dae"
        },
        "item": {
          "id": "af112664-8394-4aa1-aac0-f6efd1e5e9da",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bcbc2c57-600e-434a-827d-c13f3b66e3f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "af112664-8394-4aa1-aac0-f6efd1e5e9da",
        "cursor": {
          "ref": "df9d70cf-4b1a-4a23-9040-a29fa1dec6a9",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f0da0f06-196c-4d57-ae3e-a83b99b02dae"
        },
        "item": {
          "id": "af112664-8394-4aa1-aac0-f6efd1e5e9da",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bcbc2c57-600e-434a-827d-c13f3b66e3f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "ed6d324d-5c81-4d0e-bfc4-1f6b371ea44a",
        "cursor": {
          "ref": "9410aaef-ee9b-4c99-b2f8-5be19802456f",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "530c1051-917a-4c1b-8079-1677f505edc5"
        },
        "item": {
          "id": "ed6d324d-5c81-4d0e-bfc4-1f6b371ea44a",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "590728fb-8eb3-4862-99ca-b4e1ef34c5f0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "ed6d324d-5c81-4d0e-bfc4-1f6b371ea44a",
        "cursor": {
          "ref": "9410aaef-ee9b-4c99-b2f8-5be19802456f",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "530c1051-917a-4c1b-8079-1677f505edc5"
        },
        "item": {
          "id": "ed6d324d-5c81-4d0e-bfc4-1f6b371ea44a",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "590728fb-8eb3-4862-99ca-b4e1ef34c5f0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "419d532b-cff0-4f65-bcea-9899c03f3478",
        "cursor": {
          "ref": "690dfa78-101d-4e47-ae7b-85f0f8f3328b",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a1c54fca-fa48-4689-8346-76405ebfc715"
        },
        "item": {
          "id": "419d532b-cff0-4f65-bcea-9899c03f3478",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9bb49b90-2933-4047-9bc7-c78d8cce494a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "419d532b-cff0-4f65-bcea-9899c03f3478",
        "cursor": {
          "ref": "690dfa78-101d-4e47-ae7b-85f0f8f3328b",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a1c54fca-fa48-4689-8346-76405ebfc715"
        },
        "item": {
          "id": "419d532b-cff0-4f65-bcea-9899c03f3478",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9bb49b90-2933-4047-9bc7-c78d8cce494a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "839ddfba-337d-4551-8531-43c19d38fbd1",
        "cursor": {
          "ref": "442479e7-be38-4b3a-8860-c786348bf57f",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e9546552-c5c3-439a-98db-dd47d2ee64c9"
        },
        "item": {
          "id": "839ddfba-337d-4551-8531-43c19d38fbd1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "761bb0ff-2952-4531-b705-bf7e8fe7f70c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "839ddfba-337d-4551-8531-43c19d38fbd1",
        "cursor": {
          "ref": "442479e7-be38-4b3a-8860-c786348bf57f",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e9546552-c5c3-439a-98db-dd47d2ee64c9"
        },
        "item": {
          "id": "839ddfba-337d-4551-8531-43c19d38fbd1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "761bb0ff-2952-4531-b705-bf7e8fe7f70c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "2425a2b6-ad73-4a2f-a036-20aba7c31801",
        "cursor": {
          "ref": "9b60a86f-1e84-421d-8b53-67e671a0f21b",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "36b46372-af61-4daf-9db8-ebd25f3a68d9"
        },
        "item": {
          "id": "2425a2b6-ad73-4a2f-a036-20aba7c31801",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "337dbcaa-77d3-45b7-a7b4-970bd2569685",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "2425a2b6-ad73-4a2f-a036-20aba7c31801",
        "cursor": {
          "ref": "9b60a86f-1e84-421d-8b53-67e671a0f21b",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "36b46372-af61-4daf-9db8-ebd25f3a68d9"
        },
        "item": {
          "id": "2425a2b6-ad73-4a2f-a036-20aba7c31801",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "337dbcaa-77d3-45b7-a7b4-970bd2569685",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "6bc5ed4b-78c4-496e-9cde-b598ce2d24f7",
        "cursor": {
          "ref": "27588559-f77a-491f-9c21-7840a82b77a3",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c1a30aed-240b-44cc-8066-af76de673437"
        },
        "item": {
          "id": "6bc5ed4b-78c4-496e-9cde-b598ce2d24f7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a0ff58e0-8c27-4649-91de-821b813381e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "6bc5ed4b-78c4-496e-9cde-b598ce2d24f7",
        "cursor": {
          "ref": "27588559-f77a-491f-9c21-7840a82b77a3",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c1a30aed-240b-44cc-8066-af76de673437"
        },
        "item": {
          "id": "6bc5ed4b-78c4-496e-9cde-b598ce2d24f7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a0ff58e0-8c27-4649-91de-821b813381e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "25b83293-ae81-49b1-b3bc-f2c00a05209d",
        "cursor": {
          "ref": "ab2a011f-6e5b-4a73-8b4a-ec2ef079b68f",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "44cfb705-80d6-44d7-bd13-5c8369d6ee4e"
        },
        "item": {
          "id": "25b83293-ae81-49b1-b3bc-f2c00a05209d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a1890862-1b61-4fd6-8394-d9f9859b7d8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "25b83293-ae81-49b1-b3bc-f2c00a05209d",
        "cursor": {
          "ref": "ab2a011f-6e5b-4a73-8b4a-ec2ef079b68f",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "44cfb705-80d6-44d7-bd13-5c8369d6ee4e"
        },
        "item": {
          "id": "25b83293-ae81-49b1-b3bc-f2c00a05209d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a1890862-1b61-4fd6-8394-d9f9859b7d8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "edb83ec2-d30a-48ac-9689-d964da5f2d7f",
        "cursor": {
          "ref": "2387866a-2115-4b04-bfa2-1d720e5a204d",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "493e8a99-3ba1-426f-83bd-9d3095a64a2e"
        },
        "item": {
          "id": "edb83ec2-d30a-48ac-9689-d964da5f2d7f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fdfd64fb-518e-4679-afbd-3d53941bdbcf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "edb83ec2-d30a-48ac-9689-d964da5f2d7f",
        "cursor": {
          "ref": "2387866a-2115-4b04-bfa2-1d720e5a204d",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "493e8a99-3ba1-426f-83bd-9d3095a64a2e"
        },
        "item": {
          "id": "edb83ec2-d30a-48ac-9689-d964da5f2d7f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fdfd64fb-518e-4679-afbd-3d53941bdbcf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "6abf9b24-1884-43b1-9185-876f40ec1b30",
        "cursor": {
          "ref": "582242f2-2595-4424-a4e0-0af03ffcba00",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ea9fe389-9dab-41c2-92e9-98c9f1285a20"
        },
        "item": {
          "id": "6abf9b24-1884-43b1-9185-876f40ec1b30",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "43352e51-d346-4c55-b770-c2c01a652211",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "6abf9b24-1884-43b1-9185-876f40ec1b30",
        "cursor": {
          "ref": "582242f2-2595-4424-a4e0-0af03ffcba00",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ea9fe389-9dab-41c2-92e9-98c9f1285a20"
        },
        "item": {
          "id": "6abf9b24-1884-43b1-9185-876f40ec1b30",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "43352e51-d346-4c55-b770-c2c01a652211",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "26dd37df-5d85-4c43-a8ff-59d23d7d0f58",
        "cursor": {
          "ref": "4bf437bb-fdfa-41e2-8394-320519b2d2af",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3bec9235-ee79-4a31-871d-833a27b13ea8"
        },
        "item": {
          "id": "26dd37df-5d85-4c43-a8ff-59d23d7d0f58",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "aac15803-8f6c-4911-82cb-2054391b7a7d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "26dd37df-5d85-4c43-a8ff-59d23d7d0f58",
        "cursor": {
          "ref": "4bf437bb-fdfa-41e2-8394-320519b2d2af",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3bec9235-ee79-4a31-871d-833a27b13ea8"
        },
        "item": {
          "id": "26dd37df-5d85-4c43-a8ff-59d23d7d0f58",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "aac15803-8f6c-4911-82cb-2054391b7a7d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "bb3a61b5-32a1-4592-bcb6-d1c5775e33f9",
        "cursor": {
          "ref": "45be8620-2f5a-4dda-bccb-571ec617c192",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "443d9085-706b-4c0f-a70e-b454a6981229"
        },
        "item": {
          "id": "bb3a61b5-32a1-4592-bcb6-d1c5775e33f9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6a60d505-e1d3-442c-bfaf-2471fd105d06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "bb3a61b5-32a1-4592-bcb6-d1c5775e33f9",
        "cursor": {
          "ref": "45be8620-2f5a-4dda-bccb-571ec617c192",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "443d9085-706b-4c0f-a70e-b454a6981229"
        },
        "item": {
          "id": "bb3a61b5-32a1-4592-bcb6-d1c5775e33f9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6a60d505-e1d3-442c-bfaf-2471fd105d06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "0fc0ac18-d00d-44cf-b346-53fb896b5ee0",
        "cursor": {
          "ref": "6a55f6a2-dd64-4c82-bbc5-8ce43d508fc5",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "af334fd5-42de-48fb-a834-2180e398d593"
        },
        "item": {
          "id": "0fc0ac18-d00d-44cf-b346-53fb896b5ee0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bf92e4ed-e021-4128-a4de-5e31dd8bff7c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "0fc0ac18-d00d-44cf-b346-53fb896b5ee0",
        "cursor": {
          "ref": "6a55f6a2-dd64-4c82-bbc5-8ce43d508fc5",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "af334fd5-42de-48fb-a834-2180e398d593"
        },
        "item": {
          "id": "0fc0ac18-d00d-44cf-b346-53fb896b5ee0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bf92e4ed-e021-4128-a4de-5e31dd8bff7c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "4181a0ec-747c-44eb-b346-136b423f6ee5",
        "cursor": {
          "ref": "bffd850d-7988-49f2-b10d-1016ef6d81d7",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "83bf26f1-231b-43a6-8843-51e947e52c7e"
        },
        "item": {
          "id": "4181a0ec-747c-44eb-b346-136b423f6ee5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "491052ff-663a-4a56-9b96-053b3c0f60d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "4181a0ec-747c-44eb-b346-136b423f6ee5",
        "cursor": {
          "ref": "bffd850d-7988-49f2-b10d-1016ef6d81d7",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "83bf26f1-231b-43a6-8843-51e947e52c7e"
        },
        "item": {
          "id": "4181a0ec-747c-44eb-b346-136b423f6ee5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "491052ff-663a-4a56-9b96-053b3c0f60d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "b5bdb5b0-2617-4c1b-916e-a99fee14f3fa",
        "cursor": {
          "ref": "34a7c18d-d7a7-4660-a7cf-a5a1453de568",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a0fae04a-5328-43a0-8b3d-d77c4381408c"
        },
        "item": {
          "id": "b5bdb5b0-2617-4c1b-916e-a99fee14f3fa",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "88624882-f502-460c-b16c-ee6b3a786003",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "b5bdb5b0-2617-4c1b-916e-a99fee14f3fa",
        "cursor": {
          "ref": "34a7c18d-d7a7-4660-a7cf-a5a1453de568",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a0fae04a-5328-43a0-8b3d-d77c4381408c"
        },
        "item": {
          "id": "b5bdb5b0-2617-4c1b-916e-a99fee14f3fa",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "88624882-f502-460c-b16c-ee6b3a786003",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "c1006f92-260a-41f2-86d1-a4e506f614de",
        "cursor": {
          "ref": "d413c313-cff3-48ac-9a0a-1808296b2b21",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4e45b99b-dcee-454a-88b9-709cf766ea8b"
        },
        "item": {
          "id": "c1006f92-260a-41f2-86d1-a4e506f614de",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ee387294-2fca-42f2-9a95-d47ccfc0be18",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "c1006f92-260a-41f2-86d1-a4e506f614de",
        "cursor": {
          "ref": "d413c313-cff3-48ac-9a0a-1808296b2b21",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4e45b99b-dcee-454a-88b9-709cf766ea8b"
        },
        "item": {
          "id": "c1006f92-260a-41f2-86d1-a4e506f614de",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ee387294-2fca-42f2-9a95-d47ccfc0be18",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "08357472-8727-4cfb-9c7a-bd5b8fd7babe",
        "cursor": {
          "ref": "46b03005-3d3c-4427-852a-ef21dab73a45",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6e5c78cc-8cf6-4f92-9218-938527be7f4c"
        },
        "item": {
          "id": "08357472-8727-4cfb-9c7a-bd5b8fd7babe",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "40aaea87-6607-43fc-b4d2-2a653238f21f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "08357472-8727-4cfb-9c7a-bd5b8fd7babe",
        "cursor": {
          "ref": "46b03005-3d3c-4427-852a-ef21dab73a45",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6e5c78cc-8cf6-4f92-9218-938527be7f4c"
        },
        "item": {
          "id": "08357472-8727-4cfb-9c7a-bd5b8fd7babe",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "40aaea87-6607-43fc-b4d2-2a653238f21f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "1fec75ae-85e0-4ba2-92f5-b2bfa38f1a40",
        "cursor": {
          "ref": "65e14cd5-1d4a-44e3-bfe8-4a9b9b8f79c7",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "18063964-d7df-48b2-bbcf-6a45f66e0ee4"
        },
        "item": {
          "id": "1fec75ae-85e0-4ba2-92f5-b2bfa38f1a40",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "36be31c6-076b-4489-9c6b-70fef9239c82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "1fec75ae-85e0-4ba2-92f5-b2bfa38f1a40",
        "cursor": {
          "ref": "65e14cd5-1d4a-44e3-bfe8-4a9b9b8f79c7",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "18063964-d7df-48b2-bbcf-6a45f66e0ee4"
        },
        "item": {
          "id": "1fec75ae-85e0-4ba2-92f5-b2bfa38f1a40",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "36be31c6-076b-4489-9c6b-70fef9239c82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "0e21308f-1909-4b62-9f50-2965458883f2",
        "cursor": {
          "ref": "e3df872a-e240-4976-ae76-1464a52ed8a9",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f7e0a76c-6710-484e-8d3f-48c4cd46145a"
        },
        "item": {
          "id": "0e21308f-1909-4b62-9f50-2965458883f2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "098d7a42-a89b-4016-bbc2-9ba59d5be18c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "0e21308f-1909-4b62-9f50-2965458883f2",
        "cursor": {
          "ref": "e3df872a-e240-4976-ae76-1464a52ed8a9",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f7e0a76c-6710-484e-8d3f-48c4cd46145a"
        },
        "item": {
          "id": "0e21308f-1909-4b62-9f50-2965458883f2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "098d7a42-a89b-4016-bbc2-9ba59d5be18c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "a4f297a5-8473-44f0-aa0c-0310215799ab",
        "cursor": {
          "ref": "b705fec5-e378-453e-8c5e-91a29adde1bd",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "93ad7aea-3a9a-46ad-be61-8c7fe1366856"
        },
        "item": {
          "id": "a4f297a5-8473-44f0-aa0c-0310215799ab",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0c4263a2-73fb-48a4-90f5-a73dbfdbc286",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "a4f297a5-8473-44f0-aa0c-0310215799ab",
        "cursor": {
          "ref": "b705fec5-e378-453e-8c5e-91a29adde1bd",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "93ad7aea-3a9a-46ad-be61-8c7fe1366856"
        },
        "item": {
          "id": "a4f297a5-8473-44f0-aa0c-0310215799ab",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0c4263a2-73fb-48a4-90f5-a73dbfdbc286",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "a6cb108a-0ec7-460c-b08b-ae2d0285cd19",
        "cursor": {
          "ref": "60abae7f-cb96-410b-b2a9-2fb40aa8ccad",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "90fd73e9-019e-4762-9cb3-8b840171a072"
        },
        "item": {
          "id": "a6cb108a-0ec7-460c-b08b-ae2d0285cd19",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f2fdbac3-b5a9-483e-a97a-22676729999e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "a6cb108a-0ec7-460c-b08b-ae2d0285cd19",
        "cursor": {
          "ref": "60abae7f-cb96-410b-b2a9-2fb40aa8ccad",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "90fd73e9-019e-4762-9cb3-8b840171a072"
        },
        "item": {
          "id": "a6cb108a-0ec7-460c-b08b-ae2d0285cd19",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f2fdbac3-b5a9-483e-a97a-22676729999e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "fd343322-f99b-4578-baa6-f6ff78f2a236",
        "cursor": {
          "ref": "501f2296-cd81-43ab-92a3-2b4448414f98",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0fbbf590-544f-4d5a-920a-2e23a952b895"
        },
        "item": {
          "id": "fd343322-f99b-4578-baa6-f6ff78f2a236",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5452084e-1457-431e-bdab-e5aaf6b2cbc6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "fd343322-f99b-4578-baa6-f6ff78f2a236",
        "cursor": {
          "ref": "501f2296-cd81-43ab-92a3-2b4448414f98",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0fbbf590-544f-4d5a-920a-2e23a952b895"
        },
        "item": {
          "id": "fd343322-f99b-4578-baa6-f6ff78f2a236",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5452084e-1457-431e-bdab-e5aaf6b2cbc6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "e27d93e9-31dc-43e4-a79c-39327abe9592",
        "cursor": {
          "ref": "5964c56f-63b6-4616-9d3e-7f9b5447b2f4",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b22acd2f-87e1-4b20-95c1-4ff16fe22b82"
        },
        "item": {
          "id": "e27d93e9-31dc-43e4-a79c-39327abe9592",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "531ce1bd-d34b-4063-8380-61ce016829ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "e27d93e9-31dc-43e4-a79c-39327abe9592",
        "cursor": {
          "ref": "5964c56f-63b6-4616-9d3e-7f9b5447b2f4",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b22acd2f-87e1-4b20-95c1-4ff16fe22b82"
        },
        "item": {
          "id": "e27d93e9-31dc-43e4-a79c-39327abe9592",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "531ce1bd-d34b-4063-8380-61ce016829ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "e05835e8-48f3-4773-ba2d-06c9b2883e76",
        "cursor": {
          "ref": "2f4cb10a-0af8-4d9b-80dc-b9756852f7fc",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e4500e0c-d7ce-42ac-a421-6077afd3b8cb"
        },
        "item": {
          "id": "e05835e8-48f3-4773-ba2d-06c9b2883e76",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0b72cca0-f059-4954-b636-e457d310391d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "e05835e8-48f3-4773-ba2d-06c9b2883e76",
        "cursor": {
          "ref": "2f4cb10a-0af8-4d9b-80dc-b9756852f7fc",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e4500e0c-d7ce-42ac-a421-6077afd3b8cb"
        },
        "item": {
          "id": "e05835e8-48f3-4773-ba2d-06c9b2883e76",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0b72cca0-f059-4954-b636-e457d310391d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "a1bfe1e4-bb90-41c5-ad31-825f9320629e",
        "cursor": {
          "ref": "f756072d-63ab-4002-8cc5-efbe83e3b88f",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "27d234d1-0003-441b-9d7c-85ab759fa8f2"
        },
        "item": {
          "id": "a1bfe1e4-bb90-41c5-ad31-825f9320629e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "39fdc5b9-7f30-4f26-8cf6-59736a31f258",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "a1bfe1e4-bb90-41c5-ad31-825f9320629e",
        "cursor": {
          "ref": "f756072d-63ab-4002-8cc5-efbe83e3b88f",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "27d234d1-0003-441b-9d7c-85ab759fa8f2"
        },
        "item": {
          "id": "a1bfe1e4-bb90-41c5-ad31-825f9320629e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "39fdc5b9-7f30-4f26-8cf6-59736a31f258",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "53009534-ba19-49d6-a20e-9ce78b6dd83a",
        "cursor": {
          "ref": "707ef3e5-4a0f-4fff-b60e-460fcda4e144",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "41b6e437-f6a3-4797-a91a-31eb94321a20"
        },
        "item": {
          "id": "53009534-ba19-49d6-a20e-9ce78b6dd83a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7b36e38c-debf-4e74-9899-2e256f7236a6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "53009534-ba19-49d6-a20e-9ce78b6dd83a",
        "cursor": {
          "ref": "707ef3e5-4a0f-4fff-b60e-460fcda4e144",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "41b6e437-f6a3-4797-a91a-31eb94321a20"
        },
        "item": {
          "id": "53009534-ba19-49d6-a20e-9ce78b6dd83a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7b36e38c-debf-4e74-9899-2e256f7236a6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "3a7490db-d8ef-4a99-822a-84bc880d5f1f",
        "cursor": {
          "ref": "98a20b31-e640-4b08-b497-c2de852af13f",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ce18118a-aa0c-4800-89c0-adc294b7d9e8"
        },
        "item": {
          "id": "3a7490db-d8ef-4a99-822a-84bc880d5f1f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "21892da3-9ba8-4d67-bdbb-0ed5543eda22",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "3a7490db-d8ef-4a99-822a-84bc880d5f1f",
        "cursor": {
          "ref": "98a20b31-e640-4b08-b497-c2de852af13f",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ce18118a-aa0c-4800-89c0-adc294b7d9e8"
        },
        "item": {
          "id": "3a7490db-d8ef-4a99-822a-84bc880d5f1f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "21892da3-9ba8-4d67-bdbb-0ed5543eda22",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "79e3481b-3469-4643-b524-d0607c75f3e6",
        "cursor": {
          "ref": "6c8cc26f-98a0-4362-8cfc-179000688a95",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "101c0fff-67b0-44a6-9884-9ee0de6de84d"
        },
        "item": {
          "id": "79e3481b-3469-4643-b524-d0607c75f3e6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "03044f5d-342b-4fd9-a875-736f174fbbe7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "79e3481b-3469-4643-b524-d0607c75f3e6",
        "cursor": {
          "ref": "6c8cc26f-98a0-4362-8cfc-179000688a95",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "101c0fff-67b0-44a6-9884-9ee0de6de84d"
        },
        "item": {
          "id": "79e3481b-3469-4643-b524-d0607c75f3e6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "03044f5d-342b-4fd9-a875-736f174fbbe7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "d0a39408-8823-4bef-aa3d-d52836b04c30",
        "cursor": {
          "ref": "4332a3b2-7486-4c8d-ae16-7ab729c09de2",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5459455c-f0d2-41a0-b17f-15304bd4fb19"
        },
        "item": {
          "id": "d0a39408-8823-4bef-aa3d-d52836b04c30",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7fbe049d-a0fb-4349-bbb0-2edd0995b5d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "d0a39408-8823-4bef-aa3d-d52836b04c30",
        "cursor": {
          "ref": "4332a3b2-7486-4c8d-ae16-7ab729c09de2",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5459455c-f0d2-41a0-b17f-15304bd4fb19"
        },
        "item": {
          "id": "d0a39408-8823-4bef-aa3d-d52836b04c30",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7fbe049d-a0fb-4349-bbb0-2edd0995b5d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "1b9faeb7-5e7b-4f7d-b750-18b51736ea6d",
        "cursor": {
          "ref": "c8deca44-9967-46ed-947d-b340b354c00e",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "96774922-32b1-488e-87f2-a98383c2c5e3"
        },
        "item": {
          "id": "1b9faeb7-5e7b-4f7d-b750-18b51736ea6d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6226272c-32d3-4d26-a778-9a1a0620c7b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "1b9faeb7-5e7b-4f7d-b750-18b51736ea6d",
        "cursor": {
          "ref": "c8deca44-9967-46ed-947d-b340b354c00e",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "96774922-32b1-488e-87f2-a98383c2c5e3"
        },
        "item": {
          "id": "1b9faeb7-5e7b-4f7d-b750-18b51736ea6d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6226272c-32d3-4d26-a778-9a1a0620c7b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "94eef3c6-0230-4a30-a0b9-089dcb6cde0b",
        "cursor": {
          "ref": "6736b3ec-ac43-45e7-9001-d15bde6c7154",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f67d78b3-41aa-4b59-a599-5b88d79d8fbc"
        },
        "item": {
          "id": "94eef3c6-0230-4a30-a0b9-089dcb6cde0b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5eb35486-72a8-449b-8344-d8524cd440f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "94eef3c6-0230-4a30-a0b9-089dcb6cde0b",
        "cursor": {
          "ref": "6736b3ec-ac43-45e7-9001-d15bde6c7154",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f67d78b3-41aa-4b59-a599-5b88d79d8fbc"
        },
        "item": {
          "id": "94eef3c6-0230-4a30-a0b9-089dcb6cde0b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5eb35486-72a8-449b-8344-d8524cd440f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "71ab94ba-8342-45d4-8c16-4255d33022c4",
        "cursor": {
          "ref": "4046c849-2b0d-4f70-8592-4e38080d09a8",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3871cc82-0125-4735-8e99-45285b7ffd31"
        },
        "item": {
          "id": "71ab94ba-8342-45d4-8c16-4255d33022c4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1c84c10d-3dc6-4f3d-a133-b0184955033e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "71ab94ba-8342-45d4-8c16-4255d33022c4",
        "cursor": {
          "ref": "4046c849-2b0d-4f70-8592-4e38080d09a8",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3871cc82-0125-4735-8e99-45285b7ffd31"
        },
        "item": {
          "id": "71ab94ba-8342-45d4-8c16-4255d33022c4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1c84c10d-3dc6-4f3d-a133-b0184955033e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "355db624-d435-4300-8045-67fa811caaae",
        "cursor": {
          "ref": "09754e8e-9de9-4096-9523-0c99cd7922e8",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8113bfd0-a02b-4ac5-aff9-dd8934063012"
        },
        "item": {
          "id": "355db624-d435-4300-8045-67fa811caaae",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2565877b-c8f4-4931-858b-5023dd68c19d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "355db624-d435-4300-8045-67fa811caaae",
        "cursor": {
          "ref": "09754e8e-9de9-4096-9523-0c99cd7922e8",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8113bfd0-a02b-4ac5-aff9-dd8934063012"
        },
        "item": {
          "id": "355db624-d435-4300-8045-67fa811caaae",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2565877b-c8f4-4931-858b-5023dd68c19d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "decc31bd-51a7-4a46-b857-4dd5fbc8081c",
        "cursor": {
          "ref": "9f547e55-8b41-44bf-8b37-97f19ed71a4e",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ec349119-6631-49db-b67c-e558751a8078"
        },
        "item": {
          "id": "decc31bd-51a7-4a46-b857-4dd5fbc8081c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "28e867d9-64aa-41d4-9481-0cd611dc3b92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "decc31bd-51a7-4a46-b857-4dd5fbc8081c",
        "cursor": {
          "ref": "9f547e55-8b41-44bf-8b37-97f19ed71a4e",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ec349119-6631-49db-b67c-e558751a8078"
        },
        "item": {
          "id": "decc31bd-51a7-4a46-b857-4dd5fbc8081c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "28e867d9-64aa-41d4-9481-0cd611dc3b92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "49519ce0-030f-4ad3-9e9a-8d13d623b5a6",
        "cursor": {
          "ref": "718574a4-5322-4ad2-abf0-8fdfc9617744",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f275897c-55cc-4385-a9c7-b307d1457ee1"
        },
        "item": {
          "id": "49519ce0-030f-4ad3-9e9a-8d13d623b5a6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7e91e9aa-6b02-45bf-a3a9-4ebe73c65dc9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "49519ce0-030f-4ad3-9e9a-8d13d623b5a6",
        "cursor": {
          "ref": "718574a4-5322-4ad2-abf0-8fdfc9617744",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f275897c-55cc-4385-a9c7-b307d1457ee1"
        },
        "item": {
          "id": "49519ce0-030f-4ad3-9e9a-8d13d623b5a6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7e91e9aa-6b02-45bf-a3a9-4ebe73c65dc9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "ed0e2848-1cb7-40bd-9c87-0e04b0154ff0",
        "cursor": {
          "ref": "a1d36771-8a09-453a-a967-9a97448d6040",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d2cde31d-9906-4d24-b387-71bb042a4be4"
        },
        "item": {
          "id": "ed0e2848-1cb7-40bd-9c87-0e04b0154ff0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "519b66af-c5a6-4682-997b-aafdb5b5f219",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "ed0e2848-1cb7-40bd-9c87-0e04b0154ff0",
        "cursor": {
          "ref": "a1d36771-8a09-453a-a967-9a97448d6040",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d2cde31d-9906-4d24-b387-71bb042a4be4"
        },
        "item": {
          "id": "ed0e2848-1cb7-40bd-9c87-0e04b0154ff0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "519b66af-c5a6-4682-997b-aafdb5b5f219",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "9835e601-51de-476c-90d4-35486e2e1784",
        "cursor": {
          "ref": "e16cca89-9740-4f44-a992-5e83aef2c7d2",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f10b62ee-5c6a-401d-bef6-dd333e369b8f"
        },
        "item": {
          "id": "9835e601-51de-476c-90d4-35486e2e1784",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "491b2f35-2e79-468e-ac91-d6f4f316480f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "9835e601-51de-476c-90d4-35486e2e1784",
        "cursor": {
          "ref": "e16cca89-9740-4f44-a992-5e83aef2c7d2",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f10b62ee-5c6a-401d-bef6-dd333e369b8f"
        },
        "item": {
          "id": "9835e601-51de-476c-90d4-35486e2e1784",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "491b2f35-2e79-468e-ac91-d6f4f316480f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "f4d53257-b50b-41b0-aa08-14186824cddc",
        "cursor": {
          "ref": "c89f5d0b-1e84-4ad5-89a5-227d26942bc4",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a6647592-7f76-4ea1-b77d-b01ccf2e5ff3"
        },
        "item": {
          "id": "f4d53257-b50b-41b0-aa08-14186824cddc",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b0d8eda2-79ed-47c5-bff8-d269983fb509",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "f4d53257-b50b-41b0-aa08-14186824cddc",
        "cursor": {
          "ref": "c89f5d0b-1e84-4ad5-89a5-227d26942bc4",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a6647592-7f76-4ea1-b77d-b01ccf2e5ff3"
        },
        "item": {
          "id": "f4d53257-b50b-41b0-aa08-14186824cddc",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b0d8eda2-79ed-47c5-bff8-d269983fb509",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "68392762-2e12-40f7-899d-82f24dfe56a5",
        "cursor": {
          "ref": "e7aea583-2ccf-40e1-935e-f802062600d2",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ae3d0e94-17d5-4e79-a004-42411e1fe155"
        },
        "item": {
          "id": "68392762-2e12-40f7-899d-82f24dfe56a5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "db5eb56d-1928-4c3f-be44-cbd4bf4d4155",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "68392762-2e12-40f7-899d-82f24dfe56a5",
        "cursor": {
          "ref": "e7aea583-2ccf-40e1-935e-f802062600d2",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ae3d0e94-17d5-4e79-a004-42411e1fe155"
        },
        "item": {
          "id": "68392762-2e12-40f7-899d-82f24dfe56a5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "db5eb56d-1928-4c3f-be44-cbd4bf4d4155",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "94bc200e-e093-4dc2-b18e-651d5ca46211",
        "cursor": {
          "ref": "aa7619fb-2876-4a86-afd8-ca4941599369",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3106b430-365a-48fa-9976-8bb24c828f30"
        },
        "item": {
          "id": "94bc200e-e093-4dc2-b18e-651d5ca46211",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2a731387-ecde-430a-a3fe-36fad54510f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "94bc200e-e093-4dc2-b18e-651d5ca46211",
        "cursor": {
          "ref": "aa7619fb-2876-4a86-afd8-ca4941599369",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3106b430-365a-48fa-9976-8bb24c828f30"
        },
        "item": {
          "id": "94bc200e-e093-4dc2-b18e-651d5ca46211",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2a731387-ecde-430a-a3fe-36fad54510f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "2884cf38-4f84-4755-8799-5fd5c3a2a991",
        "cursor": {
          "ref": "5b66bbe7-dede-465c-9209-20446eb3c1f0",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "53266011-c92c-4998-ba5b-ef781327efde"
        },
        "item": {
          "id": "2884cf38-4f84-4755-8799-5fd5c3a2a991",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "98641506-74ad-49f6-8442-c4e93368a130",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "2884cf38-4f84-4755-8799-5fd5c3a2a991",
        "cursor": {
          "ref": "5b66bbe7-dede-465c-9209-20446eb3c1f0",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "53266011-c92c-4998-ba5b-ef781327efde"
        },
        "item": {
          "id": "2884cf38-4f84-4755-8799-5fd5c3a2a991",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "98641506-74ad-49f6-8442-c4e93368a130",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "ce547108-bb9c-4349-b112-b69c96a55dbb",
        "cursor": {
          "ref": "4784d895-ca61-43d3-9c85-ce5b5938e611",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "26da31d2-c491-4f85-92e6-e03b4202e3fb"
        },
        "item": {
          "id": "ce547108-bb9c-4349-b112-b69c96a55dbb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0214eecb-2479-4795-bf8d-8145bdc82779",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "ce547108-bb9c-4349-b112-b69c96a55dbb",
        "cursor": {
          "ref": "4784d895-ca61-43d3-9c85-ce5b5938e611",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "26da31d2-c491-4f85-92e6-e03b4202e3fb"
        },
        "item": {
          "id": "ce547108-bb9c-4349-b112-b69c96a55dbb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0214eecb-2479-4795-bf8d-8145bdc82779",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "0134c765-30f7-4443-9d1b-c388ef22964e",
        "cursor": {
          "ref": "68883a5d-ea3e-4014-9461-95c782fbcde1",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "32a29c6b-786b-4c1a-a7a7-9b772c7326e0"
        },
        "item": {
          "id": "0134c765-30f7-4443-9d1b-c388ef22964e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0a306aea-964f-4ef2-9d60-d0ce39347889",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "0134c765-30f7-4443-9d1b-c388ef22964e",
        "cursor": {
          "ref": "68883a5d-ea3e-4014-9461-95c782fbcde1",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "32a29c6b-786b-4c1a-a7a7-9b772c7326e0"
        },
        "item": {
          "id": "0134c765-30f7-4443-9d1b-c388ef22964e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0a306aea-964f-4ef2-9d60-d0ce39347889",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "67aa8bf3-0104-4083-82d3-a936712b5514",
        "cursor": {
          "ref": "94278bd4-7b52-48f7-ad38-f387049d90c4",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e1d8f737-fdca-4e45-a8c3-dc51f5f97932"
        },
        "item": {
          "id": "67aa8bf3-0104-4083-82d3-a936712b5514",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2c5d0828-1807-40e2-a486-3dc76b977f84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "67aa8bf3-0104-4083-82d3-a936712b5514",
        "cursor": {
          "ref": "94278bd4-7b52-48f7-ad38-f387049d90c4",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e1d8f737-fdca-4e45-a8c3-dc51f5f97932"
        },
        "item": {
          "id": "67aa8bf3-0104-4083-82d3-a936712b5514",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2c5d0828-1807-40e2-a486-3dc76b977f84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "16e684f3-4751-4174-81cd-cfe7b0221f49",
        "cursor": {
          "ref": "bc3e46e6-50c2-44d0-9601-449deee6a7a9",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "387d3cdb-e5a5-409f-96da-f6701dc5a229"
        },
        "item": {
          "id": "16e684f3-4751-4174-81cd-cfe7b0221f49",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "11c80368-13ca-418d-97cf-162df36afb71",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "16e684f3-4751-4174-81cd-cfe7b0221f49",
        "cursor": {
          "ref": "bc3e46e6-50c2-44d0-9601-449deee6a7a9",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "387d3cdb-e5a5-409f-96da-f6701dc5a229"
        },
        "item": {
          "id": "16e684f3-4751-4174-81cd-cfe7b0221f49",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "11c80368-13ca-418d-97cf-162df36afb71",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "c2e6788d-ea56-4bae-90a4-608ccd4a9475",
        "cursor": {
          "ref": "851cbdc8-841e-4c1d-b07e-a79f0f1aca4c",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "593c88f4-1267-487f-88cc-f266205af940"
        },
        "item": {
          "id": "c2e6788d-ea56-4bae-90a4-608ccd4a9475",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c1735b14-38e6-4bc5-bac5-8d5fa2c51698",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "c2e6788d-ea56-4bae-90a4-608ccd4a9475",
        "cursor": {
          "ref": "851cbdc8-841e-4c1d-b07e-a79f0f1aca4c",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "593c88f4-1267-487f-88cc-f266205af940"
        },
        "item": {
          "id": "c2e6788d-ea56-4bae-90a4-608ccd4a9475",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c1735b14-38e6-4bc5-bac5-8d5fa2c51698",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "7ee4a5ba-5f4a-4a84-a1f2-eea10353c77b",
        "cursor": {
          "ref": "a25e50d6-47df-4e40-b812-af3316e5ec80",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d71899a5-cf78-43c0-89f4-162c9d7310f0"
        },
        "item": {
          "id": "7ee4a5ba-5f4a-4a84-a1f2-eea10353c77b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "06523736-2375-4dc5-84d4-146f363ffc89",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "7ee4a5ba-5f4a-4a84-a1f2-eea10353c77b",
        "cursor": {
          "ref": "a25e50d6-47df-4e40-b812-af3316e5ec80",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d71899a5-cf78-43c0-89f4-162c9d7310f0"
        },
        "item": {
          "id": "7ee4a5ba-5f4a-4a84-a1f2-eea10353c77b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "06523736-2375-4dc5-84d4-146f363ffc89",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "731d5b5d-c6a9-45b9-ad5c-9a5bd8806ed0",
        "cursor": {
          "ref": "94a6da06-eddf-45de-a026-517c9563b8c2",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a2dda341-70fc-436a-8933-af243234d681"
        },
        "item": {
          "id": "731d5b5d-c6a9-45b9-ad5c-9a5bd8806ed0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a1f5b97d-a096-4517-b4a5-eb50e13904b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "731d5b5d-c6a9-45b9-ad5c-9a5bd8806ed0",
        "cursor": {
          "ref": "94a6da06-eddf-45de-a026-517c9563b8c2",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a2dda341-70fc-436a-8933-af243234d681"
        },
        "item": {
          "id": "731d5b5d-c6a9-45b9-ad5c-9a5bd8806ed0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a1f5b97d-a096-4517-b4a5-eb50e13904b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "2838e4b8-7cee-43c0-a4c9-678e9e9dea1a",
        "cursor": {
          "ref": "6622b3f8-d1d2-41f0-a976-294c3f782eeb",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "51717fdd-4254-4cff-be71-459487115ab2"
        },
        "item": {
          "id": "2838e4b8-7cee-43c0-a4c9-678e9e9dea1a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e74d2919-0b97-4fa5-bad5-43fea487e9e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "2838e4b8-7cee-43c0-a4c9-678e9e9dea1a",
        "cursor": {
          "ref": "6622b3f8-d1d2-41f0-a976-294c3f782eeb",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "51717fdd-4254-4cff-be71-459487115ab2"
        },
        "item": {
          "id": "2838e4b8-7cee-43c0-a4c9-678e9e9dea1a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e74d2919-0b97-4fa5-bad5-43fea487e9e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "dfcf936c-4dbb-435b-a5f9-b427cbd72668",
        "cursor": {
          "ref": "54245b07-3cfa-45a3-9b7f-e0b45b361bec",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f72f9ed6-1505-418f-96ae-6530b6f392aa"
        },
        "item": {
          "id": "dfcf936c-4dbb-435b-a5f9-b427cbd72668",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7aa802e5-27f1-42fd-8b51-3c41e744809c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "dfcf936c-4dbb-435b-a5f9-b427cbd72668",
        "cursor": {
          "ref": "54245b07-3cfa-45a3-9b7f-e0b45b361bec",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f72f9ed6-1505-418f-96ae-6530b6f392aa"
        },
        "item": {
          "id": "dfcf936c-4dbb-435b-a5f9-b427cbd72668",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7aa802e5-27f1-42fd-8b51-3c41e744809c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "76939c61-da15-4f16-920b-1bd4074807fd",
        "cursor": {
          "ref": "a180e0e2-196b-4082-b9cb-53aceab56649",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e48e0f11-91ee-4e5a-9665-4ddd4507fb3a"
        },
        "item": {
          "id": "76939c61-da15-4f16-920b-1bd4074807fd",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8622feb9-836e-4134-b690-9cf1bf4e5df0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "76939c61-da15-4f16-920b-1bd4074807fd",
        "cursor": {
          "ref": "a180e0e2-196b-4082-b9cb-53aceab56649",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e48e0f11-91ee-4e5a-9665-4ddd4507fb3a"
        },
        "item": {
          "id": "76939c61-da15-4f16-920b-1bd4074807fd",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8622feb9-836e-4134-b690-9cf1bf4e5df0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "ae3d77dc-dc92-4528-8967-1805cf2c93ef",
        "cursor": {
          "ref": "a3e05ba4-879b-4862-b358-106e67f9f618",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a4782dcc-00b9-4a12-8e7a-c8ba6dfd6518"
        },
        "item": {
          "id": "ae3d77dc-dc92-4528-8967-1805cf2c93ef",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b7c63ba6-81f9-465e-a43f-83f82d7affc2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "ae3d77dc-dc92-4528-8967-1805cf2c93ef",
        "cursor": {
          "ref": "a3e05ba4-879b-4862-b358-106e67f9f618",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a4782dcc-00b9-4a12-8e7a-c8ba6dfd6518"
        },
        "item": {
          "id": "ae3d77dc-dc92-4528-8967-1805cf2c93ef",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b7c63ba6-81f9-465e-a43f-83f82d7affc2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "0cf3402a-2b47-448b-9066-1df939bbf517",
        "cursor": {
          "ref": "0b679f53-1d0a-4fe5-b0df-794326aee792",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f885a438-59ae-477b-bed2-8ac53a323058"
        },
        "item": {
          "id": "0cf3402a-2b47-448b-9066-1df939bbf517",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6692a59b-eb1e-4997-b241-2d301894d048",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "0cf3402a-2b47-448b-9066-1df939bbf517",
        "cursor": {
          "ref": "0b679f53-1d0a-4fe5-b0df-794326aee792",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f885a438-59ae-477b-bed2-8ac53a323058"
        },
        "item": {
          "id": "0cf3402a-2b47-448b-9066-1df939bbf517",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6692a59b-eb1e-4997-b241-2d301894d048",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "dafeb987-f187-4f7f-a0e9-a417fe1c2f9c",
        "cursor": {
          "ref": "50050166-45ff-4b1a-bee6-9e3311289579",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a0dafde6-c88e-4c82-91fc-baa0c7d9e7e1"
        },
        "item": {
          "id": "dafeb987-f187-4f7f-a0e9-a417fe1c2f9c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0c0a420c-8a81-4e05-93d1-b0df8838223d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "dafeb987-f187-4f7f-a0e9-a417fe1c2f9c",
        "cursor": {
          "ref": "50050166-45ff-4b1a-bee6-9e3311289579",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a0dafde6-c88e-4c82-91fc-baa0c7d9e7e1"
        },
        "item": {
          "id": "dafeb987-f187-4f7f-a0e9-a417fe1c2f9c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0c0a420c-8a81-4e05-93d1-b0df8838223d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "f307db22-823e-40ae-ba5b-b824b44486f8",
        "cursor": {
          "ref": "d601e97c-1b85-4a70-8cf3-e5ddcc5cac59",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "61f4acd2-a377-4e1c-9ee9-32dffca3b561"
        },
        "item": {
          "id": "f307db22-823e-40ae-ba5b-b824b44486f8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "75c575e0-767b-4603-85e1-c6726d5dd56e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "f307db22-823e-40ae-ba5b-b824b44486f8",
        "cursor": {
          "ref": "d601e97c-1b85-4a70-8cf3-e5ddcc5cac59",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "61f4acd2-a377-4e1c-9ee9-32dffca3b561"
        },
        "item": {
          "id": "f307db22-823e-40ae-ba5b-b824b44486f8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "75c575e0-767b-4603-85e1-c6726d5dd56e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "e9eeb122-7080-4b15-9f54-4103b0cb01fe",
        "cursor": {
          "ref": "4c7f1970-ee1f-45ae-ba76-295f15ac20d1",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e312fdf3-256b-47ed-b023-088a4dc8e0d0"
        },
        "item": {
          "id": "e9eeb122-7080-4b15-9f54-4103b0cb01fe",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f1a3dd88-da34-44ac-a176-48836871881d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "e9eeb122-7080-4b15-9f54-4103b0cb01fe",
        "cursor": {
          "ref": "4c7f1970-ee1f-45ae-ba76-295f15ac20d1",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e312fdf3-256b-47ed-b023-088a4dc8e0d0"
        },
        "item": {
          "id": "e9eeb122-7080-4b15-9f54-4103b0cb01fe",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f1a3dd88-da34-44ac-a176-48836871881d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "43d20dad-cdf5-455c-ac46-a2da4081f221",
        "cursor": {
          "ref": "c3530676-c23a-4acd-a062-ac0cc9c240dd",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d2427671-3f77-4416-91a5-e490c8d16e64"
        },
        "item": {
          "id": "43d20dad-cdf5-455c-ac46-a2da4081f221",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6fbbfbc1-ea1d-4670-a605-d78379a92d19",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "43d20dad-cdf5-455c-ac46-a2da4081f221",
        "cursor": {
          "ref": "c3530676-c23a-4acd-a062-ac0cc9c240dd",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d2427671-3f77-4416-91a5-e490c8d16e64"
        },
        "item": {
          "id": "43d20dad-cdf5-455c-ac46-a2da4081f221",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6fbbfbc1-ea1d-4670-a605-d78379a92d19",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "03b25269-684d-451c-befa-f3efb1c44afb",
        "cursor": {
          "ref": "8c7bb584-3794-4956-8654-015b3456842a",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6eebb3e4-31e4-4860-8ba9-114beae74dc2"
        },
        "item": {
          "id": "03b25269-684d-451c-befa-f3efb1c44afb",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7d51ace4-9680-445d-b638-6995c53c49df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "03b25269-684d-451c-befa-f3efb1c44afb",
        "cursor": {
          "ref": "8c7bb584-3794-4956-8654-015b3456842a",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6eebb3e4-31e4-4860-8ba9-114beae74dc2"
        },
        "item": {
          "id": "03b25269-684d-451c-befa-f3efb1c44afb",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7d51ace4-9680-445d-b638-6995c53c49df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "160da7cd-dfbc-4a78-9928-b40a2ae155b3",
        "cursor": {
          "ref": "7506d247-970f-471a-b13f-c95a94b8adb6",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "dc835362-73dc-4e97-a301-e0d3341204df"
        },
        "item": {
          "id": "160da7cd-dfbc-4a78-9928-b40a2ae155b3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5383a76c-5be5-4c5c-bf02-ad4b48173ae9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "160da7cd-dfbc-4a78-9928-b40a2ae155b3",
        "cursor": {
          "ref": "7506d247-970f-471a-b13f-c95a94b8adb6",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "dc835362-73dc-4e97-a301-e0d3341204df"
        },
        "item": {
          "id": "160da7cd-dfbc-4a78-9928-b40a2ae155b3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5383a76c-5be5-4c5c-bf02-ad4b48173ae9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "9ad32e21-b05f-4e8f-a062-d9e2c5c5164d",
        "cursor": {
          "ref": "603c3e54-b91a-49a0-8b26-14b994879c34",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a6fcb215-23aa-4456-8d79-94126fd99748"
        },
        "item": {
          "id": "9ad32e21-b05f-4e8f-a062-d9e2c5c5164d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7d40c771-32e0-4ca5-985e-823b5aaefe69",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "9ad32e21-b05f-4e8f-a062-d9e2c5c5164d",
        "cursor": {
          "ref": "603c3e54-b91a-49a0-8b26-14b994879c34",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a6fcb215-23aa-4456-8d79-94126fd99748"
        },
        "item": {
          "id": "9ad32e21-b05f-4e8f-a062-d9e2c5c5164d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7d40c771-32e0-4ca5-985e-823b5aaefe69",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "a73fb0a6-7fd3-4ebb-956e-1a24e59e85ca",
        "cursor": {
          "ref": "a30e8017-6227-40f9-b09e-c555e1490514",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "787b7abc-f566-43de-a384-599f470dffe5"
        },
        "item": {
          "id": "a73fb0a6-7fd3-4ebb-956e-1a24e59e85ca",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "19a582c4-94a5-47bc-a6cc-9564115f2428",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "a73fb0a6-7fd3-4ebb-956e-1a24e59e85ca",
        "cursor": {
          "ref": "a30e8017-6227-40f9-b09e-c555e1490514",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "787b7abc-f566-43de-a384-599f470dffe5"
        },
        "item": {
          "id": "a73fb0a6-7fd3-4ebb-956e-1a24e59e85ca",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "19a582c4-94a5-47bc-a6cc-9564115f2428",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "27adf116-358b-4578-8118-1f881ea72d3b",
        "cursor": {
          "ref": "46e9bffa-c6f2-471b-ab02-56be7f464508",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6daf9313-d9a2-402d-8287-4c15d4f5c48b"
        },
        "item": {
          "id": "27adf116-358b-4578-8118-1f881ea72d3b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "27094a97-4b8a-472d-b1bd-634859e3052d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "27adf116-358b-4578-8118-1f881ea72d3b",
        "cursor": {
          "ref": "46e9bffa-c6f2-471b-ab02-56be7f464508",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6daf9313-d9a2-402d-8287-4c15d4f5c48b"
        },
        "item": {
          "id": "27adf116-358b-4578-8118-1f881ea72d3b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "27094a97-4b8a-472d-b1bd-634859e3052d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "117f0b19-76f9-409b-8c47-bc7544bf8e2b",
        "cursor": {
          "ref": "6b0200ed-e4dd-4e14-8277-a481c54d686e",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7514ac0f-5f46-44a0-8e91-7a7bc390a535"
        },
        "item": {
          "id": "117f0b19-76f9-409b-8c47-bc7544bf8e2b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "02e9d616-92f4-4541-9029-9a18b6a6c4bd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "117f0b19-76f9-409b-8c47-bc7544bf8e2b",
        "cursor": {
          "ref": "6b0200ed-e4dd-4e14-8277-a481c54d686e",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7514ac0f-5f46-44a0-8e91-7a7bc390a535"
        },
        "item": {
          "id": "117f0b19-76f9-409b-8c47-bc7544bf8e2b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "02e9d616-92f4-4541-9029-9a18b6a6c4bd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "fb88f21d-c3ea-4273-9e11-aa4325f99141",
        "cursor": {
          "ref": "ac9378a1-d131-43bc-a743-6ad6e5b77b2c",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6422e2c6-db4e-4252-a0e3-055003c3104e"
        },
        "item": {
          "id": "fb88f21d-c3ea-4273-9e11-aa4325f99141",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "02fe4c7f-6267-4dfa-81ce-8ea210ac2cef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "fb88f21d-c3ea-4273-9e11-aa4325f99141",
        "cursor": {
          "ref": "ac9378a1-d131-43bc-a743-6ad6e5b77b2c",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6422e2c6-db4e-4252-a0e3-055003c3104e"
        },
        "item": {
          "id": "fb88f21d-c3ea-4273-9e11-aa4325f99141",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "02fe4c7f-6267-4dfa-81ce-8ea210ac2cef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "010f40b7-45da-4031-bb03-111714bc2b8d",
        "cursor": {
          "ref": "4f46aa35-8135-4101-8f70-c5846e0bcd16",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6d26eeb4-2431-480e-9170-ddb176846201"
        },
        "item": {
          "id": "010f40b7-45da-4031-bb03-111714bc2b8d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a44014b8-67cf-47e1-b964-f50511ebb0a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "010f40b7-45da-4031-bb03-111714bc2b8d",
        "cursor": {
          "ref": "4f46aa35-8135-4101-8f70-c5846e0bcd16",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6d26eeb4-2431-480e-9170-ddb176846201"
        },
        "item": {
          "id": "010f40b7-45da-4031-bb03-111714bc2b8d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a44014b8-67cf-47e1-b964-f50511ebb0a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "676ff7ba-6d91-469a-bec0-db363c8a933c",
        "cursor": {
          "ref": "0a2badbb-646b-4162-a330-2d70af113558",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "897aab87-e288-4627-ae15-39eebd4ca6b6"
        },
        "item": {
          "id": "676ff7ba-6d91-469a-bec0-db363c8a933c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e7d2d1cd-67f9-408a-91f7-eb14d9f67334",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "676ff7ba-6d91-469a-bec0-db363c8a933c",
        "cursor": {
          "ref": "0a2badbb-646b-4162-a330-2d70af113558",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "897aab87-e288-4627-ae15-39eebd4ca6b6"
        },
        "item": {
          "id": "676ff7ba-6d91-469a-bec0-db363c8a933c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e7d2d1cd-67f9-408a-91f7-eb14d9f67334",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "a5311b77-67d4-457c-9327-109d0389f9d6",
        "cursor": {
          "ref": "a68f861a-3502-40c0-a7d6-7acb1d16ec6c",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "757826ea-fd57-46ee-9ca6-7a3429ed0860"
        },
        "item": {
          "id": "a5311b77-67d4-457c-9327-109d0389f9d6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "15d1cff8-9e5f-40b3-978a-b3bb25ac0b3f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "a5311b77-67d4-457c-9327-109d0389f9d6",
        "cursor": {
          "ref": "a68f861a-3502-40c0-a7d6-7acb1d16ec6c",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "757826ea-fd57-46ee-9ca6-7a3429ed0860"
        },
        "item": {
          "id": "a5311b77-67d4-457c-9327-109d0389f9d6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "15d1cff8-9e5f-40b3-978a-b3bb25ac0b3f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "c337f554-4b53-4f77-ba2e-9adc1427e1c8",
        "cursor": {
          "ref": "706773be-fa88-41a6-a16f-eb822381c1de",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "dc0a4805-a7e1-492d-8241-d0af02c8a1a8"
        },
        "item": {
          "id": "c337f554-4b53-4f77-ba2e-9adc1427e1c8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0a6430e3-6155-4793-872e-9daf0599511a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "c337f554-4b53-4f77-ba2e-9adc1427e1c8",
        "cursor": {
          "ref": "706773be-fa88-41a6-a16f-eb822381c1de",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "dc0a4805-a7e1-492d-8241-d0af02c8a1a8"
        },
        "item": {
          "id": "c337f554-4b53-4f77-ba2e-9adc1427e1c8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0a6430e3-6155-4793-872e-9daf0599511a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "600a2564-af28-4b68-b15c-a032c66baf10",
        "cursor": {
          "ref": "7e1531ad-b66d-44d5-af5b-8bb69af14042",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "349c799e-12a8-49c5-8298-bed05555f0fe"
        },
        "item": {
          "id": "600a2564-af28-4b68-b15c-a032c66baf10",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "de1993be-589e-49b5-985a-2be171ec10f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "600a2564-af28-4b68-b15c-a032c66baf10",
        "cursor": {
          "ref": "7e1531ad-b66d-44d5-af5b-8bb69af14042",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "349c799e-12a8-49c5-8298-bed05555f0fe"
        },
        "item": {
          "id": "600a2564-af28-4b68-b15c-a032c66baf10",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "de1993be-589e-49b5-985a-2be171ec10f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "7002efd9-bb44-431c-b9bc-80cd915c966b",
        "cursor": {
          "ref": "6ce30586-efff-4101-9f00-54e977a82749",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ae2095aa-c2eb-464e-b308-192614b0444c"
        },
        "item": {
          "id": "7002efd9-bb44-431c-b9bc-80cd915c966b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "eb11eb95-b0e7-47be-a1c2-6f54e9293441",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "7002efd9-bb44-431c-b9bc-80cd915c966b",
        "cursor": {
          "ref": "6ce30586-efff-4101-9f00-54e977a82749",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ae2095aa-c2eb-464e-b308-192614b0444c"
        },
        "item": {
          "id": "7002efd9-bb44-431c-b9bc-80cd915c966b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "eb11eb95-b0e7-47be-a1c2-6f54e9293441",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "4cc7baff-1b25-4e21-89dc-3c54ee2dd56e",
        "cursor": {
          "ref": "ec1e9eb9-b9d6-43fe-805e-2da524c39cf5",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3c2e8477-e57d-48b1-98db-bd5adfa61667"
        },
        "item": {
          "id": "4cc7baff-1b25-4e21-89dc-3c54ee2dd56e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "197d18c3-7e4a-48ec-97b9-3c18e888683c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "4cc7baff-1b25-4e21-89dc-3c54ee2dd56e",
        "cursor": {
          "ref": "ec1e9eb9-b9d6-43fe-805e-2da524c39cf5",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3c2e8477-e57d-48b1-98db-bd5adfa61667"
        },
        "item": {
          "id": "4cc7baff-1b25-4e21-89dc-3c54ee2dd56e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "197d18c3-7e4a-48ec-97b9-3c18e888683c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "3fc11e98-0cb2-4939-8c10-2bf75a85b6f6",
        "cursor": {
          "ref": "24986c55-5c49-48b1-9f90-29ba97c2995b",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "87524a8d-35d4-43e5-9c3e-50ce5d469b26"
        },
        "item": {
          "id": "3fc11e98-0cb2-4939-8c10-2bf75a85b6f6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "41009fae-efdf-4bf9-bb86-65a186c92c6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "3fc11e98-0cb2-4939-8c10-2bf75a85b6f6",
        "cursor": {
          "ref": "24986c55-5c49-48b1-9f90-29ba97c2995b",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "87524a8d-35d4-43e5-9c3e-50ce5d469b26"
        },
        "item": {
          "id": "3fc11e98-0cb2-4939-8c10-2bf75a85b6f6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "41009fae-efdf-4bf9-bb86-65a186c92c6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "a5613dcb-f2fa-4fec-ad16-633ea62f471c",
        "cursor": {
          "ref": "a90da275-c97a-4304-a219-bc350ec6c211",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7c7c1ece-239b-42f6-9005-18b3a29fc33e"
        },
        "item": {
          "id": "a5613dcb-f2fa-4fec-ad16-633ea62f471c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d7b1ce42-faf3-4cec-b6fb-0b5a3511fa28",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "a5613dcb-f2fa-4fec-ad16-633ea62f471c",
        "cursor": {
          "ref": "a90da275-c97a-4304-a219-bc350ec6c211",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7c7c1ece-239b-42f6-9005-18b3a29fc33e"
        },
        "item": {
          "id": "a5613dcb-f2fa-4fec-ad16-633ea62f471c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d7b1ce42-faf3-4cec-b6fb-0b5a3511fa28",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "aa2bcf44-913e-4a49-b80d-61528ad18682",
        "cursor": {
          "ref": "d5781583-8453-45bc-ac37-7700a3bd45dc",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "47f95664-a72e-4ae5-bf22-6e0c4b0293dd"
        },
        "item": {
          "id": "aa2bcf44-913e-4a49-b80d-61528ad18682",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1b049103-5530-495b-8acf-42c79efcd62e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "aa2bcf44-913e-4a49-b80d-61528ad18682",
        "cursor": {
          "ref": "d5781583-8453-45bc-ac37-7700a3bd45dc",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "47f95664-a72e-4ae5-bf22-6e0c4b0293dd"
        },
        "item": {
          "id": "aa2bcf44-913e-4a49-b80d-61528ad18682",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1b049103-5530-495b-8acf-42c79efcd62e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "8a60f96b-6682-4139-a8c7-bc49813eb55f",
        "cursor": {
          "ref": "5616ebf2-2839-486d-b65c-4044a3fd6fbb",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "03b1cf5a-0e4c-43ae-84a3-dc0ad71c3959"
        },
        "item": {
          "id": "8a60f96b-6682-4139-a8c7-bc49813eb55f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a915527d-965e-4d8a-aa42-fda3bd7ca6af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "8a60f96b-6682-4139-a8c7-bc49813eb55f",
        "cursor": {
          "ref": "5616ebf2-2839-486d-b65c-4044a3fd6fbb",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "03b1cf5a-0e4c-43ae-84a3-dc0ad71c3959"
        },
        "item": {
          "id": "8a60f96b-6682-4139-a8c7-bc49813eb55f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a915527d-965e-4d8a-aa42-fda3bd7ca6af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "81dbe1cd-fd47-422d-ac19-cc4db4551880",
        "cursor": {
          "ref": "8eb4b0c5-3a34-487f-8aa2-6ffdb1bc5e60",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e71b4644-a612-4438-bb6f-f1b017699e60"
        },
        "item": {
          "id": "81dbe1cd-fd47-422d-ac19-cc4db4551880",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "428a8e95-5421-41c7-b91c-b1e9c3b90af8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "81dbe1cd-fd47-422d-ac19-cc4db4551880",
        "cursor": {
          "ref": "8eb4b0c5-3a34-487f-8aa2-6ffdb1bc5e60",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e71b4644-a612-4438-bb6f-f1b017699e60"
        },
        "item": {
          "id": "81dbe1cd-fd47-422d-ac19-cc4db4551880",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "428a8e95-5421-41c7-b91c-b1e9c3b90af8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "83f07dfb-3db1-4239-86ac-09c4d9892f9a",
        "cursor": {
          "ref": "a92be58e-2b22-4cb2-9da8-eaf4df65a50e",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "345b1be3-92eb-485e-9a98-468dee64d677"
        },
        "item": {
          "id": "83f07dfb-3db1-4239-86ac-09c4d9892f9a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "62775def-37ef-4838-a7f7-af51070034b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "83f07dfb-3db1-4239-86ac-09c4d9892f9a",
        "cursor": {
          "ref": "a92be58e-2b22-4cb2-9da8-eaf4df65a50e",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "345b1be3-92eb-485e-9a98-468dee64d677"
        },
        "item": {
          "id": "83f07dfb-3db1-4239-86ac-09c4d9892f9a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "62775def-37ef-4838-a7f7-af51070034b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "87db7535-3efa-4d1e-98f4-34ebe5b11579",
        "cursor": {
          "ref": "b3feee46-5a1c-42c0-9915-76aa2baf46dd",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9e3c61e3-4cd6-43f7-a2b0-7c4c93d52797"
        },
        "item": {
          "id": "87db7535-3efa-4d1e-98f4-34ebe5b11579",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a61cb5b7-5276-4592-b2ab-a832b6a600dc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "87db7535-3efa-4d1e-98f4-34ebe5b11579",
        "cursor": {
          "ref": "b3feee46-5a1c-42c0-9915-76aa2baf46dd",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9e3c61e3-4cd6-43f7-a2b0-7c4c93d52797"
        },
        "item": {
          "id": "87db7535-3efa-4d1e-98f4-34ebe5b11579",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a61cb5b7-5276-4592-b2ab-a832b6a600dc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "e6e87d92-f864-44ee-b111-2ea77a685745",
        "cursor": {
          "ref": "79e6ade5-96db-4d55-ad2b-410c27bca105",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "af81fac1-90de-419f-940e-1fe63f808095"
        },
        "item": {
          "id": "e6e87d92-f864-44ee-b111-2ea77a685745",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ee54d1eb-437e-40a4-95bd-530a32e94a41",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "e6e87d92-f864-44ee-b111-2ea77a685745",
        "cursor": {
          "ref": "79e6ade5-96db-4d55-ad2b-410c27bca105",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "af81fac1-90de-419f-940e-1fe63f808095"
        },
        "item": {
          "id": "e6e87d92-f864-44ee-b111-2ea77a685745",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ee54d1eb-437e-40a4-95bd-530a32e94a41",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "92354462-e2f0-424c-9347-393ab686de66",
        "cursor": {
          "ref": "5cb323ed-5761-4863-aa0a-3d49345a4447",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bd5db1eb-4a52-4d44-abb3-c64800edefd3"
        },
        "item": {
          "id": "92354462-e2f0-424c-9347-393ab686de66",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "95ae8e38-0b09-4461-9c05-865d9848c9eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "92354462-e2f0-424c-9347-393ab686de66",
        "cursor": {
          "ref": "5cb323ed-5761-4863-aa0a-3d49345a4447",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bd5db1eb-4a52-4d44-abb3-c64800edefd3"
        },
        "item": {
          "id": "92354462-e2f0-424c-9347-393ab686de66",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "95ae8e38-0b09-4461-9c05-865d9848c9eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "ba444ad7-2ee7-457f-b7f4-f405b4641ba8",
        "cursor": {
          "ref": "b94e630d-469c-4f13-98a4-f0bfeb65a5d5",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bf614fe3-c239-4c40-9e4e-040f195e64b9"
        },
        "item": {
          "id": "ba444ad7-2ee7-457f-b7f4-f405b4641ba8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "168d1b2d-66c6-4090-a7da-f3dab0580758",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ba444ad7-2ee7-457f-b7f4-f405b4641ba8",
        "cursor": {
          "ref": "b94e630d-469c-4f13-98a4-f0bfeb65a5d5",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bf614fe3-c239-4c40-9e4e-040f195e64b9"
        },
        "item": {
          "id": "ba444ad7-2ee7-457f-b7f4-f405b4641ba8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "168d1b2d-66c6-4090-a7da-f3dab0580758",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "c0ee6341-d0d2-434e-bd31-08e38d54e752",
        "cursor": {
          "ref": "7ea7f327-5113-4d2d-9fde-654bef4b15b7",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6ee49a4a-16d2-4db5-82e0-4e74aef9f379"
        },
        "item": {
          "id": "c0ee6341-d0d2-434e-bd31-08e38d54e752",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "10e2cc22-4770-4b25-aacb-eb83f7b5e1a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c0ee6341-d0d2-434e-bd31-08e38d54e752",
        "cursor": {
          "ref": "7ea7f327-5113-4d2d-9fde-654bef4b15b7",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6ee49a4a-16d2-4db5-82e0-4e74aef9f379"
        },
        "item": {
          "id": "c0ee6341-d0d2-434e-bd31-08e38d54e752",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "10e2cc22-4770-4b25-aacb-eb83f7b5e1a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "fd3a575b-601c-4f75-a03b-5c0168e73e82",
        "cursor": {
          "ref": "8952be8a-03d4-4d54-b24a-0a4594b0bb26",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9d2a5524-b099-4be7-9b3a-b06d24eac0a6"
        },
        "item": {
          "id": "fd3a575b-601c-4f75-a03b-5c0168e73e82",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fa9a99bb-44d6-4925-9c70-0051fb539f67",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "fd3a575b-601c-4f75-a03b-5c0168e73e82",
        "cursor": {
          "ref": "8952be8a-03d4-4d54-b24a-0a4594b0bb26",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9d2a5524-b099-4be7-9b3a-b06d24eac0a6"
        },
        "item": {
          "id": "fd3a575b-601c-4f75-a03b-5c0168e73e82",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fa9a99bb-44d6-4925-9c70-0051fb539f67",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "56f8cede-149e-458c-ad15-fc3919885f4b",
        "cursor": {
          "ref": "ceffa9cb-c5dc-4670-a816-b16d3f460ea7",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "00068730-160d-4b22-9e60-964492f59976"
        },
        "item": {
          "id": "56f8cede-149e-458c-ad15-fc3919885f4b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0d032204-c682-4889-a012-691e6eaa1fca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 25,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "56f8cede-149e-458c-ad15-fc3919885f4b",
        "cursor": {
          "ref": "ceffa9cb-c5dc-4670-a816-b16d3f460ea7",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "00068730-160d-4b22-9e60-964492f59976"
        },
        "item": {
          "id": "56f8cede-149e-458c-ad15-fc3919885f4b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0d032204-c682-4889-a012-691e6eaa1fca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 25,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "8efbd5d3-6117-4d7f-b992-3e5cf59cad60",
        "cursor": {
          "ref": "1a83882a-33e9-4b7b-85a8-f1f52958ba0e",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c9900d1e-ea30-4eff-b994-c88aa09590d3"
        },
        "item": {
          "id": "8efbd5d3-6117-4d7f-b992-3e5cf59cad60",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "8307e55c-d59c-4f44-9eaa-dfc8779e1f2d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "8efbd5d3-6117-4d7f-b992-3e5cf59cad60",
        "cursor": {
          "ref": "1a83882a-33e9-4b7b-85a8-f1f52958ba0e",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c9900d1e-ea30-4eff-b994-c88aa09590d3"
        },
        "item": {
          "id": "8efbd5d3-6117-4d7f-b992-3e5cf59cad60",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "8307e55c-d59c-4f44-9eaa-dfc8779e1f2d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "2a7b1795-8ef7-4528-864f-1e936888e3be",
        "cursor": {
          "ref": "b4b6555f-a5ad-4011-8ed8-aa7f197e7e50",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "59c97939-732e-4283-8864-eedd62c56bb4"
        },
        "item": {
          "id": "2a7b1795-8ef7-4528-864f-1e936888e3be",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fe21421a-81ed-4167-84bd-dfca9bc1f9b4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "2a7b1795-8ef7-4528-864f-1e936888e3be",
        "cursor": {
          "ref": "b4b6555f-a5ad-4011-8ed8-aa7f197e7e50",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "59c97939-732e-4283-8864-eedd62c56bb4"
        },
        "item": {
          "id": "2a7b1795-8ef7-4528-864f-1e936888e3be",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fe21421a-81ed-4167-84bd-dfca9bc1f9b4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "4c968a1d-a11e-4d2c-86da-19362bd29305",
        "cursor": {
          "ref": "545a290c-445e-4d67-a1f5-b67abc1df28d",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5ad51f1f-0aeb-4570-85f1-6e954858e490"
        },
        "item": {
          "id": "4c968a1d-a11e-4d2c-86da-19362bd29305",
          "name": "credentials_verify"
        },
        "response": {
          "id": "82d187fd-d958-4d96-bd3c-de0057386153",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "4c968a1d-a11e-4d2c-86da-19362bd29305",
        "cursor": {
          "ref": "545a290c-445e-4d67-a1f5-b67abc1df28d",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5ad51f1f-0aeb-4570-85f1-6e954858e490"
        },
        "item": {
          "id": "4c968a1d-a11e-4d2c-86da-19362bd29305",
          "name": "credentials_verify"
        },
        "response": {
          "id": "82d187fd-d958-4d96-bd3c-de0057386153",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "c74b34a4-75e4-4833-a17d-5d29d71a880d",
        "cursor": {
          "ref": "e33ee29b-c176-46e8-8899-02a172cd3f3e",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "dcaf0f52-be4a-4453-842a-1be8d50594fe"
        },
        "item": {
          "id": "c74b34a4-75e4-4833-a17d-5d29d71a880d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "091bc402-932b-4300-b8ee-0c6776fb2b14",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "c74b34a4-75e4-4833-a17d-5d29d71a880d",
        "cursor": {
          "ref": "e33ee29b-c176-46e8-8899-02a172cd3f3e",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "dcaf0f52-be4a-4453-842a-1be8d50594fe"
        },
        "item": {
          "id": "c74b34a4-75e4-4833-a17d-5d29d71a880d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "091bc402-932b-4300-b8ee-0c6776fb2b14",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "e5e52cdc-7dd8-4545-a3fb-5648e6f413b5",
        "cursor": {
          "ref": "9576e331-61c7-4dc6-94d5-db448289501c",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a98a1c89-5042-4b2d-a618-7f48f16ac450"
        },
        "item": {
          "id": "e5e52cdc-7dd8-4545-a3fb-5648e6f413b5",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "e5e52cdc-7dd8-4545-a3fb-5648e6f413b5",
        "cursor": {
          "ref": "9576e331-61c7-4dc6-94d5-db448289501c",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a98a1c89-5042-4b2d-a618-7f48f16ac450"
        },
        "item": {
          "id": "e5e52cdc-7dd8-4545-a3fb-5648e6f413b5",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "e5e52cdc-7dd8-4545-a3fb-5648e6f413b5",
        "cursor": {
          "ref": "9576e331-61c7-4dc6-94d5-db448289501c",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a98a1c89-5042-4b2d-a618-7f48f16ac450"
        },
        "item": {
          "id": "e5e52cdc-7dd8-4545-a3fb-5648e6f413b5",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "ef8aca10-50a6-453a-8b3d-b1cbd5033b87",
        "cursor": {
          "ref": "be381317-bf95-4a42-b841-780fd048a609",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ce600320-a78e-4614-a968-a860aa1ce959"
        },
        "item": {
          "id": "ef8aca10-50a6-453a-8b3d-b1cbd5033b87",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "ef8aca10-50a6-453a-8b3d-b1cbd5033b87",
        "cursor": {
          "ref": "be381317-bf95-4a42-b841-780fd048a609",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ce600320-a78e-4614-a968-a860aa1ce959"
        },
        "item": {
          "id": "ef8aca10-50a6-453a-8b3d-b1cbd5033b87",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "ef8aca10-50a6-453a-8b3d-b1cbd5033b87",
        "cursor": {
          "ref": "be381317-bf95-4a42-b841-780fd048a609",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ce600320-a78e-4614-a968-a860aa1ce959"
        },
        "item": {
          "id": "ef8aca10-50a6-453a-8b3d-b1cbd5033b87",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "a9224e5a-c35b-4657-b01e-e57e0f24f879",
        "cursor": {
          "ref": "a9e0dfa6-9b79-4e96-87c2-b5d18677ea84",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5909767f-9332-4a0d-b48d-bc191a6b658d"
        },
        "item": {
          "id": "a9224e5a-c35b-4657-b01e-e57e0f24f879",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "a9224e5a-c35b-4657-b01e-e57e0f24f879",
        "cursor": {
          "ref": "a9e0dfa6-9b79-4e96-87c2-b5d18677ea84",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5909767f-9332-4a0d-b48d-bc191a6b658d"
        },
        "item": {
          "id": "a9224e5a-c35b-4657-b01e-e57e0f24f879",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "a9224e5a-c35b-4657-b01e-e57e0f24f879",
        "cursor": {
          "ref": "a9e0dfa6-9b79-4e96-87c2-b5d18677ea84",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5909767f-9332-4a0d-b48d-bc191a6b658d"
        },
        "item": {
          "id": "a9224e5a-c35b-4657-b01e-e57e0f24f879",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8bf7a258-1be8-45ed-b11c-8ca3e94c14e6",
        "cursor": {
          "ref": "16c577ba-8d95-4e21-9be9-ed6f715155e5",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "79c2c8cf-d954-443f-9108-243ef214d32b"
        },
        "item": {
          "id": "8bf7a258-1be8-45ed-b11c-8ca3e94c14e6",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8bf7a258-1be8-45ed-b11c-8ca3e94c14e6",
        "cursor": {
          "ref": "16c577ba-8d95-4e21-9be9-ed6f715155e5",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "79c2c8cf-d954-443f-9108-243ef214d32b"
        },
        "item": {
          "id": "8bf7a258-1be8-45ed-b11c-8ca3e94c14e6",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8bf7a258-1be8-45ed-b11c-8ca3e94c14e6",
        "cursor": {
          "ref": "16c577ba-8d95-4e21-9be9-ed6f715155e5",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "79c2c8cf-d954-443f-9108-243ef214d32b"
        },
        "item": {
          "id": "8bf7a258-1be8-45ed-b11c-8ca3e94c14e6",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "77c7fd7d-7888-4d2d-bee3-aa55d04f26c4",
        "cursor": {
          "ref": "ac56c1c4-cd88-4e86-ad42-529d2ab3cb3f",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0a6c5436-b15d-493a-b6ea-088a14820fe1"
        },
        "item": {
          "id": "77c7fd7d-7888-4d2d-bee3-aa55d04f26c4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "77c7fd7d-7888-4d2d-bee3-aa55d04f26c4",
        "cursor": {
          "ref": "ac56c1c4-cd88-4e86-ad42-529d2ab3cb3f",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0a6c5436-b15d-493a-b6ea-088a14820fe1"
        },
        "item": {
          "id": "77c7fd7d-7888-4d2d-bee3-aa55d04f26c4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "77c7fd7d-7888-4d2d-bee3-aa55d04f26c4",
        "cursor": {
          "ref": "ac56c1c4-cd88-4e86-ad42-529d2ab3cb3f",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0a6c5436-b15d-493a-b6ea-088a14820fe1"
        },
        "item": {
          "id": "77c7fd7d-7888-4d2d-bee3-aa55d04f26c4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "7682f283-d7ff-4c78-85e9-2083467ae01a",
        "cursor": {
          "ref": "9fd12969-517c-438c-b263-570c1ccf7e93",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9afd84e3-3e7c-400f-9ab5-e685ef9b7d39"
        },
        "item": {
          "id": "7682f283-d7ff-4c78-85e9-2083467ae01a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "7682f283-d7ff-4c78-85e9-2083467ae01a",
        "cursor": {
          "ref": "9fd12969-517c-438c-b263-570c1ccf7e93",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9afd84e3-3e7c-400f-9ab5-e685ef9b7d39"
        },
        "item": {
          "id": "7682f283-d7ff-4c78-85e9-2083467ae01a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "7682f283-d7ff-4c78-85e9-2083467ae01a",
        "cursor": {
          "ref": "9fd12969-517c-438c-b263-570c1ccf7e93",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9afd84e3-3e7c-400f-9ab5-e685ef9b7d39"
        },
        "item": {
          "id": "7682f283-d7ff-4c78-85e9-2083467ae01a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}